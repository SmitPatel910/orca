{
  "p02400": {
    "s666153859": {
      "code": "import math\nr = 2\nprint(math.pi * (r ** 2), 2 * math.pi * r)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "r = 2",
          "print(math.pi * (r ** 2), 2 * math.pi * r)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    r = 2\n    print(math.pi * (r ** 2), 2 * math.pi * r)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s817169185": {
      "code": "x = 2\nprint(3.141592653589793 * x**2, 3.141592653589793 * 2* x)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "x = 2",
          "print(3.141592653589793 * x**2, 3.141592653589793 * 2* x)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = 2\n    print(3.141592653589793 * x**2, 3.141592653589793 * 2* x)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s636031691": {
      "code": "pi = 3.14159265368979\nr = 2\nprint('{} {}'.format(2*pi*r,pi*r*r))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "pi": "3.14159265368979"
            },
            {
              "r": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "pi = 3.14159265368979",
          "r = 2",
          "print('{} {}'.format(2*pi*r,pi*r*r))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    pi = 3.14159265368979\n    r = 2\n    print('{} {}'.format(2*pi*r,pi*r*r))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s542594638": {
      "code": "import math\nx = 2\nprint(x * 2 * math.pi, x ** 2 * math.pi)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "x = 2",
          "print(x * 2 * math.pi, x ** 2 * math.pi)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    x = 2\n    print(x * 2 * math.pi, x ** 2 * math.pi)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s506403739": {
      "code": "from math import pi\na = 2\ns = round(pi * (a ** 2), 11)\nl = round(2 * pi * a, 11)\nprint(s, l)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from math import pi",
          "a = 2",
          "s = round(pi * (a ** 2), 11)",
          "l = round(2 * pi * a, 11)",
          "print(s, l)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    from math import pi\n    a = 2\n    s = round(pi * (a ** 2), 11)\n    l = round(2 * pi * a, 11)\n    print(s, l)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s259739253": {
      "code": "pi = 3.1415926535\nr = 2\nprint(\"{0:.6f} {1:.6f}\".format(float(r*r*pi), float(2*r*pi)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "pi": "3.1415926535"
            },
            {
              "r": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "pi = 3.1415926535",
          "r = 2",
          "print(\"{0:.6f} {1:.6f}\".format(float(r*r*pi), float(2*r*pi)))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    pi = 3.1415926535\n    r = 2\n    print(\"{0:.6f} {1:.6f}\".format(float(r*r*pi), float(2*r*pi)))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s123279443": {
      "code": "from math import pi\nr = 2\nprint(pi*r**2, 2*pi*r)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from math import pi",
          "r = 2",
          "print(pi*r**2, 2*pi*r)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    from math import pi\n    r = 2\n    print(pi*r**2, 2*pi*r)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s063165474": {
      "code": "r = 2\nprint(r**2*3.14, 2*r*3.14)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "r = 2",
          "print(r**2*3.14, 2*r*3.14)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    print(r**2*3.14, 2*r*3.14)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s979037052": {
      "code": "import decimal\nr = 2\nprint('{:.6f}'.format( r * r * 3.1415926))\nprint('{:.6f}'.format((r + r) * 3.1415926))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import decimal",
          "r = 2",
          "print('{:.6f}'.format( r * r * 3.1415926))",
          "print('{:.6f}'.format((r + r) * 3.1415926))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import decimal\n    r = 2\n    print('{:.6f}'.format( r * r * 3.1415926))\n    print('{:.6f}'.format((r + r) * 3.1415926))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s681252868": {
      "code": "from math import pi\nr = 2\ns = r * r * pi\nl = r * 2 * pi\nprint(s, l)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from math import pi",
          "r = 2",
          "s = r * r * pi",
          "l = r * 2 * pi",
          "print(s, l)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    from math import pi\n    r = 2\n    s = r * r * pi\n    l = r * 2 * pi\n    print(s, l)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s195788998": {
      "code": "import math\nr = 2\na = r * r * math.pi\nc = 2 * r * math.pi\nprint('%.6f %.6f' % (a, c))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "r = 2",
          "a = r * r * math.pi",
          "c = 2 * r * math.pi",
          "print('%.6f %.6f' % (a, c))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    r = 2\n    a = r * r * math.pi\n    c = 2 * r * math.pi\n    print('%.6f %.6f' % (a, c))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s622227838": {
      "code": "import math\nr = 2\nprint(math.pi*r**2, math.pi*2*r)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "r = 2",
          "print(math.pi*r**2, math.pi*2*r)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    r = 2\n    print(math.pi*r**2, math.pi*2*r)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s392818510": {
      "code": "import math\nN = 2\nS = round(N**2*math.pi, 6)\nR = round(2*math.pi*N, 6)\nprint(S, R)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "N = 2",
          "S = round(N**2*math.pi, 6)",
          "R = round(2*math.pi*N, 6)",
          "print(S, R)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = 2\n    S = round(N**2*math.pi, 6)\n    R = round(2*math.pi*N, 6)\n    print(S, R)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s006406031": {
      "code": "import math\nr = 2\nprint(math.pi*r**2, math.pi*2*r)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "r = 2",
          "print(math.pi*r**2, math.pi*2*r)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    r = 2\n    print(math.pi*r**2, math.pi*2*r)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s979934225": {
      "code": "import math\nr = 2\narea = r ** 2 * math.pi\ncircumference = 2 * r * math.pi\nprint('{0:.6f} {1:.6f}'.format(area,circumference))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "r = 2",
          "area = r ** 2 * math.pi",
          "circumference = 2 * r * math.pi",
          "print('{0:.6f} {1:.6f}'.format(area,circumference))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    r = 2\n    area = r ** 2 * math.pi\n    circumference = 2 * r * math.pi\n    print('{0:.6f} {1:.6f}'.format(area,circumference))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s277657535": {
      "code": "import math\nr = 2\nprint(\"{0:8f} {1:8f}\".format(math.pi*r*r,r*2*math.pi))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "r = 2",
          "print(\"{0:8f} {1:8f}\".format(math.pi*r*r,r*2*math.pi))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    r = 2\n    print(\"{0:8f} {1:8f}\".format(math.pi*r*r,r*2*math.pi))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s120508969": {
      "code": "import math\nr = 2\nprint(\"{:6f} {:6f}\".format(r**2*math.pi,r*2*math.pi))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "r = 2",
          "print(\"{:6f} {:6f}\".format(r**2*math.pi,r*2*math.pi))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    r = 2\n    print(\"{:6f} {:6f}\".format(r**2*math.pi,r*2*math.pi))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s418353071": {
      "code": "N = '2'\npi = 3.141592653589\nS = round(N**2*pi, 6)\nR = round(2*pi*N, 6)\nprint(S, R)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "pi": "3.141592653589"
            },
            {
              "N": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '2'",
          "pi = 3.141592653589",
          "S = round(N**2*pi, 6)",
          "R = round(2*pi*N, 6)",
          "print(S, R)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    pi = 3.141592653589\n    S = round(N**2*pi, 6)\n    R = round(2*pi*N, 6)\n    print(S, R)\nNext:\n    <END>\n"
    },
    "s649586826": {
      "code": "r = '2'\nimport math\nprint(\"{:.6f} {:.6f}\".format(r ** 2 * math.pi, 2 * r * math.pi))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "r = '2'",
          "import math",
          "print(\"{:.6f} {:.6f}\".format(r ** 2 * math.pi, 2 * r * math.pi))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    import math\n    print(\"{:.6f} {:.6f}\".format(r ** 2 * math.pi, 2 * r * math.pi))\nNext:\n    <END>\n"
    }
  },
  "p02555": {
    "s943342807": {
      "code": "S = 7\nA = [0,0,1]\nfor i in range(3,S):\n  A += [A[i-1] + A[i-3]]\nprint(A[i] % (10 ** 9 + 7))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1, 1, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1, 1, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1, 1, 2, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1, 1, 2, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "7"
            },
            {
              "A": "[0, 0, 1, 1, 1, 2, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 7",
          "A = [0,0,1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(3, S)"
        ],
        "3": [
          "A += [A[i-1] + A[i-3]]"
        ],
        "4": [
          "print(A[i] % (10 ** 9 + 7))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 7\n    A = [0,0,1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3, S)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    A += [A[i-1] + A[i-3]]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(A[i] % (10 ** 9 + 7))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02577": {
    "s472375385": {
      "code": "n = [123456789]\nif sum(n)/9 == sum(n)//9:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "[123456789]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "[123456789]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = [123456789]",
          "(sum(n) / 9 == sum(n) // 9)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = [123456789]\n    (sum(n) / 9 == sum(n) // 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s870967592": {
      "code": "import numpy as np\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nnum_str = '123456789'\nnum_list = [int(num_str[i]) for i in range(len(num_str))]\nnum_sum = sum(num_list)\nif num_sum%9 == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        },
        "2": {
          "range": [
            9,
            9
          ]
        },
        "3": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "import sys",
          "input = sys.stdin.readline",
          "sys.setrecursionlimit(10**8)",
          "num_str = '123456789'",
          "num_list = [int(num_str[i]) for i in range(len(num_str))]",
          "num_sum = sum(num_list)",
          "(num_sum % 9 == 0)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**8)\n    num_str = '123456789'\n    num_list = [int(num_str[i]) for i in range(len(num_str))]\n    num_sum = sum(num_list)\n    (num_sum % 9 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s734585332": {
      "code": "n = '123456789'\nn=str(n)\nSum=0\nfor i in range(len(n)):\n    Sum=Sum+n[i]-\"0\"\nif Sum%9==0:\n    print(\"yes\")\nelse:\n    print(\"no\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'123456789'"
            },
            {
              "Sum": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'123456789'"
            },
            {
              "Sum": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "'123456789'"
            },
            {
              "Sum": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '123456789'",
          "n=str(n)",
          "Sum=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(n))"
        ],
        "3": [
          "Sum=Sum+n[i]-\"0\""
        ],
        "4": [
          "(Sum % 9 == 0)"
        ],
        "5": [
          "print(\"yes\")"
        ],
        "6": [
          "print(\"no\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '123456789'\n    n=str(n)\n    Sum=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(n))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    Sum=Sum+n[i]-\"0\"\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (Sum % 9 == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"no\")\nNext:\n    <END>\n"
    },
    "s392787295": {
      "code": "N = '123456789'\nif N % 9 == 0:\n    print(\"Yes\")\nelse :\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'123456789'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '123456789'",
          "(N % 9 == 0)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '123456789'\n    (N % 9 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s045624846": {
      "code": "n = '123456789'\nif(n % 9 == 0): print(\"Yes\")\nelse : print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'123456789'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '123456789'",
          "(n % 9 == 0)"
        ],
        "2": [
          "(n % 9 == 0)"
        ],
        "3": [
          "else : print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '123456789'\n    (n % 9 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    (n % 9 == 0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    else : print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p02578": {
    "s314593935": {
      "code": "A = 5\nB = [2, 1, 5, 4, 3]\ndai=[0, 0, 0, 0, 0]\nfor i, l in enumerate(B):\n  if i==0:\n    continue\n  if B[i-1]-B[i]>0:\n    dai[i]=B[i-1]-B[i]\nprint(sum(dai))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        7,
        8,
        4,
        5,
        7,
        4,
        5,
        7,
        8,
        4,
        5,
        7,
        8,
        4,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 1, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 1, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 1, 0]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 1, 0]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 1, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 1, 1]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "B": "[2, 1, 5, 4, 3]"
            },
            {
              "A": "5"
            },
            {
              "dai": "[0, 1, 0, 1, 1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "A = 5",
          "B = [2, 1, 5, 4, 3]",
          "dai=[0, 0, 0, 0, 0]"
        ],
        "2": [
          "i <- index\n    l <- iterator"
        ],
        "3": [
          "(i == 0)"
        ],
        "4": [
          "(B[i - 1] - B[i] > 0)"
        ],
        "5": [
          "dai[i]=B[i-1]-B[i]"
        ],
        "6": [
          "print(sum(dai))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    A = 5\n    B = [2, 1, 5, 4, 3]\n    dai=[0, 0, 0, 0, 0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    l <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (B[i - 1] - B[i] > 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    dai[i]=B[i-1]-B[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum(dai))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s630911709": {
      "code": "a = 5\nb = [2, 1, 5, 4, 3]\nbmax = 0\nans = 0\nfor i in range(a):\n    if i == 0:\n        bmax = a[i]\n    else:\n        if bmax < a[i]:\n            bmax = a[i]\n        elif bmax > a[i]:\n            ans += bmax - a[i]\nprint(str(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "bmax": "0"
            },
            {
              "ans": "0"
            },
            {
              "a": "5"
            },
            {
              "b": "[2, 1, 5, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "bmax": "0"
            },
            {
              "ans": "0"
            },
            {
              "a": "5"
            },
            {
              "b": "[2, 1, 5, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "bmax": "0"
            },
            {
              "ans": "0"
            },
            {
              "a": "5"
            },
            {
              "b": "[2, 1, 5, 4, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "bmax": "0"
            },
            {
              "ans": "0"
            },
            {
              "a": "5"
            },
            {
              "b": "[2, 1, 5, 4, 3]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = 5",
          "b = [2, 1, 5, 4, 3]",
          "bmax = 0",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(a)"
        ],
        "3": [
          "(i == 0)"
        ],
        "4": [
          "bmax = a[i]"
        ],
        "5": [
          "(bmax < a[i])"
        ],
        "6": [
          "bmax = a[i]"
        ],
        "7": [
          "(bmax > a[i])"
        ],
        "8": [
          "ans += bmax - a[i]"
        ],
        "9": [
          "print(str(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 9
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 2
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 5\n    b = [2, 1, 5, 4, 3]\n    bmax = 0\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    bmax = a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (bmax < a[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    bmax = a[i]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (bmax > a[i])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    ans += bmax - a[i]\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(str(ans))\nNext:\n    <END>\n"
    },
    "s910958685": {
      "code": "n = '5'\nA = [2, 1, 5, 4, 3]\nans = 0 \ntemp = 0\nfor i in range(n-1):\n    if A[i]<temp:\n        ans += temp-A[i]\n    else:\n        temp = max(temp,A[i])\nprint(ans) ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'5'"
            },
            {
              "ans": "0"
            },
            {
              "A": "[2, 1, 5, 4, 3]"
            },
            {
              "temp": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'5'"
            },
            {
              "ans": "0"
            },
            {
              "A": "[2, 1, 5, 4, 3]"
            },
            {
              "temp": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '5'",
          "A = [2, 1, 5, 4, 3]",
          "ans = 0",
          "temp = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n - 1)"
        ],
        "3": [
          "(A[i] < temp)"
        ],
        "4": [
          "ans += temp-A[i]"
        ],
        "5": [
          "temp = max(temp,A[i])"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    A = [2, 1, 5, 4, 3]\n    ans = 0\n    temp = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (A[i] < temp)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += temp-A[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    temp = max(temp,A[i])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p02582": {
    "s143658361": {
      "code": "temp = 'RRS'\ncount = 0\nfor i in temp:\n  if i == 'R':\n    count = count + 1\n    max_count = count\n  else:\n    if max_count < count:\n      max_count = count\n    count = 0\nprint(max_count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        3,
        4,
        5,
        6,
        3,
        4,
        8,
        10,
        3,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "temp": "'RRS'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "temp": "'RRS'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "temp": "'RRS'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "max_count": "1"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "max_count": "1"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "max_count": "1"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "max_count": "2"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "max_count": "2"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "max_count": "2"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "max_count": "2"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "max_count": "2"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "max_count": "2"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "max_count": "2"
            },
            {
              "temp": "'RRS'"
            },
            {
              "count": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "temp = 'RRS'",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> temp"
        ],
        "3": [
          "(i == 'R')"
        ],
        "4": [
          "count = count + 1",
          "max_count = count"
        ],
        "5": [
          "(max_count < count)"
        ],
        "6": [
          "max_count = count"
        ],
        "7": [
          "count = 0"
        ],
        "8": [
          "print(max_count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 8
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    temp = 'RRS'\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> temp\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (i == 'R')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count = count + 1\n    max_count = count\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (max_count < count)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    max_count = count\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(max_count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s490367311": {
      "code": "S = 'RRS'\na = list()\nb = 0\nu = 0\nfor i in range (len(S)):\n    if S[u] == 'R':\n        b = b + 1\n    else:\n        a.append(b)\n        b = 0\n    u = u + 1\na.sort()\na.reverse()\nprint(a[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        11,
        5,
        6,
        7,
        11,
        5,
        6,
        9,
        10,
        11,
        5,
        12,
        13,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "u": "0"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "u": "0"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "u": "0"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "u": "0"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "u": "1"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "u": "1"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "u": "1"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "u": "1"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "u": "2"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "u": "2"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "u": "2"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[]"
            },
            {
              "b": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "u": "2"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[2]"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "u": "3"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[2]"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "u": "3"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[2]"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "u": "3"
            },
            {
              "S": "'RRS'"
            },
            {
              "a": "[2]"
            },
            {
              "b": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'RRS'",
          "a = list()",
          "b = 0",
          "u = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "(S[u] == 'R')"
        ],
        "4": [
          "b = b + 1"
        ],
        "5": [
          "a.append(b)",
          "b = 0"
        ],
        "6": [
          "u = u + 1"
        ],
        "7": [
          "a.sort()",
          "a.reverse()",
          "print(a[0])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'RRS'\n    a = list()\n    b = 0\n    u = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (S[u] == 'R')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b = b + 1\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    a.append(b)\n    b = 0\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    u = u + 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    a.sort()\n    a.reverse()\n    print(a[0])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s483231356": {
      "code": "xkd = 'RRS'\nx,k,d = int(xkd.split())\nif x >= k*d:\n    print(x-(k*d))\nelse:\n    if x <= -(k*d):\n        print(x+(k*d))\n    else:\n        if x <= 0:\n            lxl = -x\n        else:\n            lxl = x\n        if x <= 0:\n            now_x = x + (d * (int(lxl / d) + 1))\n            left_x = -now_x\n            right_x = now_x + d\n        else:\n            now_x = x - (d * (int(lxl / d) + 1))\n            left_x = -(now_x - d)\n            right_x = now_x\n        now_k = k - int(lxl / d) - 1\n        if now_x <= 0:\n            if now_k % 2 == 0:\n                print(left_x)\n            else:\n                print(right_x)\n        else:\n            if now_k % 2 == 0:\n                print(right_x)\n            else:\n                print(left_x)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        },
        "9": {
          "range": [
            14,
            16
          ]
        },
        "10": {
          "range": [
            18,
            20
          ]
        },
        "11": {
          "range": [
            21,
            22
          ]
        },
        "12": {
          "range": [
            23,
            23
          ]
        },
        "13": {
          "range": [
            24,
            24
          ]
        },
        "14": {
          "range": [
            26,
            26
          ]
        },
        "15": {
          "range": [
            28,
            28
          ]
        },
        "16": {
          "range": [
            29,
            29
          ]
        },
        "17": {
          "range": [
            31,
            31
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "xkd": "'RRS'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "xkd = 'RRS'",
          "x,k,d = int(xkd.split())",
          "(x >= k * d)"
        ],
        "2": [
          "print(x-(k*d))"
        ],
        "3": [
          "(x <= -(k * d))"
        ],
        "4": [
          "print(x+(k*d))"
        ],
        "5": [
          "(x <= 0)"
        ],
        "6": [
          "lxl = -x"
        ],
        "7": [
          "lxl = x"
        ],
        "8": [
          "(x <= 0)"
        ],
        "9": [
          "now_x = x + (d * (int(lxl / d) + 1))",
          "left_x = -now_x",
          "right_x = now_x + d"
        ],
        "10": [
          "now_x = x - (d * (int(lxl / d) + 1))",
          "left_x = -(now_x - d)",
          "right_x = now_x"
        ],
        "11": [
          "now_k = k - int(lxl / d) - 1",
          "(now_x <= 0)"
        ],
        "12": [
          "(now_k % 2 == 0)"
        ],
        "13": [
          "print(left_x)"
        ],
        "14": [
          "print(right_x)"
        ],
        "15": [
          "(now_k % 2 == 0)"
        ],
        "16": [
          "print(right_x)"
        ],
        "17": [
          "print(left_x)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 15
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": 17
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    xkd = 'RRS'\n    x,k,d = int(xkd.split())\n    (x >= k * d)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(x-(k*d))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (x <= -(k * d))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(x+(k*d))\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (x <= 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    lxl = -x\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    lxl = x\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    (x <= 0)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    now_x = x + (d * (int(lxl / d) + 1))\n    left_x = -now_x\n    right_x = now_x + d\nNext:\n    Go to Block: 11\n\nBlock 10:\nStatement:\n    now_x = x - (d * (int(lxl / d) + 1))\n    left_x = -(now_x - d)\n    right_x = now_x\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    now_k = k - int(lxl / d) - 1\n    (now_x <= 0)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 15\n\nBlock 12:\nStatement:\n    (now_k % 2 == 0)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(left_x)\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print(right_x)\nNext:\n    <END>\n\nBlock 15:\nStatement:\n    (now_k % 2 == 0)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    print(right_x)\nNext:\n    <END>\n\nBlock 17:\nStatement:\n    print(left_x)\nNext:\n    <END>\n"
    },
    "s350270970": {
      "code": "ss = 'RRS'\na = ss.count(\"R\")\nif a == 2 and a[2] == 0:\n  a = 1\nprint(a)  ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "2"
            },
            {
              "ss": "'RRS'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "ss = 'RRS'",
          "a = ss.count(\"R\")",
          "(a == 2 and a[2] == 0)"
        ],
        "2": [
          "a = 1"
        ],
        "3": [
          "print(a)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    ss = 'RRS'\n    a = ss.count(\"R\")\n    (a == 2 and a[2] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a = 1\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    print(a)\nNext:\n    <END>\n"
    }
  },
  "p02596": {
    "s514955823": {
      "code": "n = 101\nif n%2==0 or n%5==0:\n    print(-1)\nelse:\n    count=1\n    flag=0\n    num=7\n    while flag==0:\n        if num%n==0:\n            flag=1\n        else:\n            num=num*10+7\n            count=count+1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            12,
            13
          ]
        },
        "8": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        12,
        13,
        8,
        9,
        12,
        13,
        8,
        9,
        12,
        13,
        8,
        9,
        10,
        8,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "101"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "7"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "7"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "7"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "num": "77"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "77"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "77"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "num": "777"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "777"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "777"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "3"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "num": "7777"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "7777"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "7777"
            },
            {
              "flag": "0"
            },
            {
              "n": "101"
            },
            {
              "count": "4"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "num": "7777"
            },
            {
              "flag": "1"
            },
            {
              "n": "101"
            },
            {
              "count": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "7777"
            },
            {
              "flag": "1"
            },
            {
              "n": "101"
            },
            {
              "count": "4"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "num": "7777"
            },
            {
              "flag": "1"
            },
            {
              "n": "101"
            },
            {
              "count": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 101",
          "(n % 2 == 0 or n % 5 == 0)"
        ],
        "2": [
          "print(-1)"
        ],
        "3": [
          "count=1",
          "flag=0",
          "num=7"
        ],
        "4": [
          "while flag==0:"
        ],
        "5": [
          "(num % n == 0)"
        ],
        "6": [
          "flag=1"
        ],
        "7": [
          "num=num*10+7",
          "count=count+1"
        ],
        "8": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 101\n    (n % 2 == 0 or n % 5 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    Go to Block: 8\n\nBlock 3:\nStatement:\n    count=1\n    flag=0\n    num=7\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    while flag==0:\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (num % n == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    flag=1\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    num=num*10+7\n    count=count+1\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s560686393": {
      "code": "k = 101\nif k%2 == 0:\n\tprint(-1)\nelif k%5 == 0:\n\tprint(-1)\nelse:\n\ts = 7\n\twhile s%k != 0:\n\t\ts = 10*s+7\n\tprint(len(s))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        4,
        7,
        8,
        9,
        8,
        9,
        8,
        9,
        8,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "101"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "k": "101"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "k": "101"
            },
            {
              "s": "7"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "k": "101"
            },
            {
              "s": "7"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "77"
            },
            {
              "k": "101"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "77"
            },
            {
              "k": "101"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "777"
            },
            {
              "k": "101"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "777"
            },
            {
              "k": "101"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "7777"
            },
            {
              "k": "101"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "7777"
            },
            {
              "k": "101"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "s": "7777"
            },
            {
              "k": "101"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "k = 101",
          "(k % 2 == 0)"
        ],
        "2": [
          "print(-1)"
        ],
        "3": [
          "(k % 5 == 0)"
        ],
        "4": [
          "print(-1)"
        ],
        "5": [
          "s = 7"
        ],
        "6": [
          "while s%k != 0:"
        ],
        "7": [
          "s = 10*s+7"
        ],
        "8": [
          "print(len(s))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    k = 101\n    (k % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (k % 5 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    s = 7\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    while s%k != 0:\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    s = 10*s+7\nNext:\n    Go to Block: 6\n\nBlock 8:\nStatement:\n    print(len(s))\nNext:\n    <END>\n"
    }
  },
  "p02612": {
    "s429823114": {
      "code": "N = '1900'\na = len(N)\nx = int(N[a-3]+N[a-2]+N[a-1])\nprint(1000-x)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'1900'"
            },
            {
              "a": "4"
            },
            {
              "x": "900"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = '1900'",
          "a = len(N)",
          "x = int(N[a-3]+N[a-2]+N[a-1])",
          "print(1000-x)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '1900'\n    a = len(N)\n    x = int(N[a-3]+N[a-2]+N[a-1])\n    print(1000-x)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s801510755": {
      "code": "N = 1900\nif int(str(N)[1:]) ==0:\n  print(0)\nelse:\n    print(1000-int(str(N)[1:])) ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "1900"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "1900"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 1900",
          "(int(str(N)[1:]) == 0)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "print(1000-int(str(N)[1:]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 1900\n    (int(str(N)[1:]) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(1000-int(str(N)[1:]))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s806035108": {
      "code": "print('N')\nx = 1900\nx=1000-x%1000\nif(x==1000):\n    x=0\nreturn(x)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "print('N')",
          "x = 1900",
          "x=1000-x%1000",
          "(x == 1000)"
        ],
        "2": [
          "x=0"
        ],
        "3": [
          "return(x)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    print('N')\n    x = 1900\n    x=1000-x%1000\n    (x == 1000)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    x=0\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    return(x)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s438310795": {
      "code": "N = '1900'\nx=N/1000\nx=int(x)\ny=1000*x\nprint(y-N)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'1900'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '1900'",
          "x=N/1000",
          "x=int(x)",
          "y=1000*x",
          "print(y-N)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '1900'\n    x=N/1000\n    x=int(x)\n    y=1000*x\n    print(y-N)\nNext:\n    <END>\n"
    },
    "s918187571": {
      "code": "n = 1900\nif n%1000!=0:\n    print(min(1000-(n%1000)))\nelse:\n    print(\"0\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "1900"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "1900"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 1900",
          "(n % 1000 != 0)"
        ],
        "2": [
          "print(min(1000-(n%1000)))"
        ],
        "3": [
          "print(\"0\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 1900\n    (n % 1000 != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(min(1000-(n%1000)))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"0\")\nNext:\n    <END>\n"
    },
    "s502700417": {
      "code": "N = '1900'\nprint(1+N/1000)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'1900'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '1900'",
          "print(1+N/1000)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '1900'\n    print(1+N/1000)\nNext:\n    <END>\n"
    }
  },
  "p02624": {
    "s079916439": {
      "code": "import sympy\nN = 4\nans=0\nfor i in range(1,N+1):\n  ans+=sympy.divisor_count(i)*i\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sympy",
          "N = 4",
          "ans=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, N + 1)"
        ],
        "3": [
          "ans+=sympy.divisor_count(i)*i"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sympy\n    N = 4\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=sympy.divisor_count(i)*i\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02629": {
    "s697886461": {
      "code": "n = 2\nans=\"\"\nwhile n>26:\n    rem=n%26\n    if rem==0:\n        ans+=\"z\"\n        n=(n//26-26)*26\n        continue\n    n//=26\n    ans+=chr(rem+96)\nans+=chr(n+96)\nprint(ans[::-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        11,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "''"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "''"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "'b'"
            },
            {
              "n": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "ans=\"\""
        ],
        "2": [
          "while n>26:"
        ],
        "3": [
          "rem=n%26",
          "(rem == 0)"
        ],
        "4": [
          "ans+=\"z\"",
          "n=(n//26-26)*26"
        ],
        "5": [
          "n//=26",
          "ans+=chr(rem+96)"
        ],
        "6": [
          "ans+=chr(n+96)",
          "print(ans[::-1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    ans=\"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while n>26:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    rem=n%26\n    (rem == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans+=\"z\"\n    n=(n//26-26)*26\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    n//=26\n    ans+=chr(rem+96)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    ans+=chr(n+96)\n    print(ans[::-1])\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02658": {
    "s708605110": {
      "code": "N = 2\nA = [1000000000, 1000000000]\nif 0 in A:\n    print(0)\n    return \n\u03a0 = 1\nfor _ in A:\n    \u03a0 *= _\n    if(\u03a0 > 1000000000000000000):\n        print(-1)\n        return \nprint(\u03a0)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        },
        "6": {
          "range": [
            10,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        7,
        8,
        9,
        7,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "\u03a0": "1"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "2"
            },
            {
              "\u03a0": "1"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "2"
            },
            {
              "\u03a0": "1000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "2"
            },
            {
              "\u03a0": "1000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "2"
            },
            {
              "\u03a0": "1000000000000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "2"
            },
            {
              "\u03a0": "1000000000000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "2"
            },
            {
              "\u03a0": "1000000000000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "A = [1000000000, 1000000000]",
          "(0 in A)"
        ],
        "2": [
          "print(0)",
          "return"
        ],
        "3": [
          "\u03a0 = 1"
        ],
        "4": [
          "iterator -> _, Iterate Over -> A"
        ],
        "5": [
          "\u03a0 *= _",
          "(\u03a0 > 1000000000000000000)"
        ],
        "6": [
          "print(-1)",
          "return"
        ],
        "7": [
          "print(\u03a0)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 7
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 4
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    A = [1000000000, 1000000000]\n    (0 in A)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    return\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    \u03a0 = 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> _, Iterate Over -> A\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    \u03a0 *= _\n    (\u03a0 > 1000000000000000000)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    print(-1)\n    return\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\u03a0)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s718623003": {
      "code": "import numpy\nn = 2\nnum = [None] * n\nnum = [1000000000, 1000000000]\nif 0 in num:\n    print(0)\nelse:\n    mult = numpy.prod(num)\n    if mult > 10**18:\n        print(-1)\n    else:\n        print(mult)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy",
          "n = 2",
          "num = [None] * n",
          "num = [1000000000, 1000000000]",
          "(0 in num)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "mult = numpy.prod(num)",
          "(mult > 10 ** 18)"
        ],
        "4": [
          "print(-1)"
        ],
        "5": [
          "print(mult)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy\n    n = 2\n    num = [None] * n\n    num = [1000000000, 1000000000]\n    (0 in num)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    mult = numpy.prod(num)\n    (mult > 10 ** 18)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(mult)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s730137103": {
      "code": "from fractions import Fraction\nimport numpy\nn = 2\nnum = [1000000000, 1000000000]\nnum = [ Fraction(i) for i in num ]\nif 0 in num:\n    print(0)\nelif len([i for i in num if i >= 10**18]) != 0:\n    print(-1)\nelse:\n    mult = numpy.prod(num)\n    if mult > 10**18:\n        print(-1)\n    else:\n        print(int(mult))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        11,
        12,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 7,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from fractions import Fraction",
          "import numpy",
          "n = 2",
          "num = [1000000000, 1000000000]",
          "num = [ Fraction(i) for i in num ]",
          "(0 in num)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "(len([i for i in num if i >= 10 ** 18]) != 0)"
        ],
        "4": [
          "print(-1)"
        ],
        "5": [
          "mult = numpy.prod(num)",
          "(mult > 10 ** 18)"
        ],
        "6": [
          "print(-1)"
        ],
        "7": [
          "print(int(mult))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from fractions import Fraction\n    import numpy\n    n = 2\n    num = [1000000000, 1000000000]\n    num = [ Fraction(i) for i in num ]\n    (0 in num)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (len([i for i in num if i >= 10 ** 18]) != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    mult = numpy.prod(num)\n    (mult > 10 ** 18)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(int(mult))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s168750111": {
      "code": "n = 2\na = [1000000000, 1000000000]\nif 0 in a:\n    print(0)\n    return\nans = 1\nfor i in a:\n    ans *= i\n    if ans >1000000000000000000:\n        print(-1)\n        return\n    print(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        },
        "6": {
          "range": [
            10,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        12,
        7,
        8,
        9,
        12,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "ans": "1"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "ans": "1"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "ans": "1000000000"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "ans": "1000000000"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "ans": "1000000000"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "ans": "1000000000000000000"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "ans": "1000000000000000000"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "ans": "1000000000000000000"
            },
            {
              "n": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "a = [1000000000, 1000000000]",
          "(0 in a)"
        ],
        "2": [
          "print(0)",
          "return"
        ],
        "3": [
          "ans = 1"
        ],
        "4": [
          "iterator -> i, Iterate Over -> a"
        ],
        "5": [
          "ans *= i",
          "(ans > 1000000000000000000)"
        ],
        "6": [
          "print(-1)",
          "return"
        ],
        "7": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": "<END>"
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [1000000000, 1000000000]\n    (0 in a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    return\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ans = 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 5\n    <END>\nBlock 5:\nStatement:\n    ans *= i\n    (ans > 1000000000000000000)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(-1)\n    return\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    Go to Block: 4\n",
      "exception_info": null
    },
    "s804815252": {
      "code": "n = 2\na = [1000000000, 1000000000]\ni=0\ncon=1\nmod=10**18\nans=1\nwhy=0\nwhile con==1:\n  ans=ans*a[i]\n  i+=1\n  if ans>mod:\n    ans=1\n    why=1\n  elif i==n:\n    con=0\nif ans==0:\n  print(0)\nelif why==1:\n  print(-1)\nelse:\n  print(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            11
          ]
        },
        "4": {
          "range": [
            12,
            13
          ]
        },
        "5": {
          "range": [
            14,
            14
          ]
        },
        "6": {
          "range": [
            15,
            15
          ]
        },
        "7": {
          "range": [
            16,
            16
          ]
        },
        "8": {
          "range": [
            17,
            17
          ]
        },
        "9": {
          "range": [
            18,
            18
          ]
        },
        "10": {
          "range": [
            19,
            19
          ]
        },
        "11": {
          "range": [
            21,
            21
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        8,
        9,
        10,
        11,
        14,
        15,
        8,
        16,
        18,
        21
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "1"
            },
            {
              "i": "0"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1"
            },
            {
              "i": "0"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "1000000000"
            },
            {
              "i": "1"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "1000000000"
            },
            {
              "i": "1"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1000000000"
            },
            {
              "i": "1"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "1000000000000000000"
            },
            {
              "i": "2"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "1000000000000000000"
            },
            {
              "i": "2"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "1000000000000000000"
            },
            {
              "i": "2"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1000000000000000000"
            },
            {
              "i": "2"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ans": "1000000000000000000"
            },
            {
              "i": "2"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "0"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "ans": "1000000000000000000"
            },
            {
              "i": "2"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "0"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "ans": "1000000000000000000"
            },
            {
              "i": "2"
            },
            {
              "n": "2"
            },
            {
              "mod": "1000000000000000000"
            },
            {
              "why": "0"
            },
            {
              "a": "[1000000000, 1000000000]"
            },
            {
              "con": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "a = [1000000000, 1000000000]",
          "i=0",
          "con=1",
          "mod=10**18",
          "ans=1",
          "why=0"
        ],
        "2": [
          "while con==1:"
        ],
        "3": [
          "ans=ans*a[i]",
          "i+=1",
          "(ans > mod)"
        ],
        "4": [
          "ans=1",
          "why=1"
        ],
        "5": [
          "(i == n)"
        ],
        "6": [
          "con=0"
        ],
        "7": [
          "(ans == 0)"
        ],
        "8": [
          "print(0)"
        ],
        "9": [
          "(why == 1)"
        ],
        "10": [
          "print(-1)"
        ],
        "11": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [1000000000, 1000000000]\n    i=0\n    con=1\n    mod=10**18\n    ans=1\n    why=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while con==1:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    ans=ans*a[i]\n    i+=1\n    (ans > mod)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans=1\n    why=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i == n)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    con=0\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (ans == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    (why == 1)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s827441317": {
      "code": "N = 2\nA = [1000000000, 1000000000]\nA.sort()\nans=1\nfor i in A:\n    ans *= i\n    if(ans > (10 ** 18)):\n        print(-1)\n        sys.exit()\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "ans": "1"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "ans": "1"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "ans": "1000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "ans": "1000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "ans": "1000000000000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "ans": "1000000000000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "2"
            },
            {
              "ans": "1000000000000000000"
            },
            {
              "A": "[1000000000, 1000000000]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "A = [1000000000, 1000000000]",
          "A.sort()",
          "ans=1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> A"
        ],
        "3": [
          "ans *= i",
          "(ans > 10 ** 18)"
        ],
        "4": [
          "print(-1)",
          "sys.exit()"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    A = [1000000000, 1000000000]\n    A.sort()\n    ans=1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ans *= i\n    (ans > 10 ** 18)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s067213358": {
      "code": "n = 2\na = [1000000000, 1000000000]\nlimit=10**18\nif 0 in a:\n    print(0)\n    exit()\nfor i in range(a):\n  ans *= a[i]\n  if sum>limit:\n    ans = -1\n    break\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "limit": "1000000000000000000"
            },
            {
              "n": "2"
            },
            {
              "a": "[1000000000, 1000000000]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "limit": "1000000000000000000"
            },
            {
              "n": "2"
            },
            {
              "a": "[1000000000, 1000000000]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "a = [1000000000, 1000000000]",
          "limit=10**18",
          "(0 in a)"
        ],
        "2": [
          "print(0)",
          "exit()"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(a)"
        ],
        "4": [
          "ans *= a[i]",
          "(sum > limit)"
        ],
        "5": [
          "ans = -1"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 6
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 3
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [1000000000, 1000000000]\n    limit=10**18\n    (0 in a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    ans *= a[i]\n    (sum > limit)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    ans = -1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s603625975": {
      "code": "import sys\nn = 2\na = [1000000000, 1000000000]\na.sort()\nif 0 in a:\n    print(0)\nelse:\n    cur = 1\n    for x in a:\n        cur *= a\n        if cur > 10 ** 18:\n            print(-1)\n            sys.exit()\n        print(cur)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            11
          ]
        },
        "6": {
          "range": [
            12,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import sys",
          "n = 2",
          "a = [1000000000, 1000000000]",
          "a.sort()",
          "(0 in a)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "cur = 1"
        ],
        "4": [
          "iterator -> x, Iterate Over -> a"
        ],
        "5": [
          "cur *= a",
          "(cur > 10 ** 18)"
        ],
        "6": [
          "print(-1)",
          "sys.exit()"
        ],
        "7": [
          "print(cur)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": "<END>"
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    n = 2\n    a = [1000000000, 1000000000]\n    a.sort()\n    (0 in a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    cur = 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> x, Iterate Over -> a\nNext:\n    If True: Go to Block 5\n    <END>\nBlock 5:\nStatement:\n    cur *= a\n    (cur > 10 ** 18)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(cur)\nNext:\n    Go to Block: 4\n"
    },
    "s201181797": {
      "code": "N = 2\nA = ['1000000000', '1000000000']\nA = sorted(A)\nresult = 1\nmax = 10**18\nfor a in A:\n    result *= a\n    if result > max:\n        print(-1)\n        break\n    else:\n        print(result)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "max": "1000000000000000000"
            },
            {
              "A": "['1000000000', '1000000000']"
            },
            {
              "result": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "max": "1000000000000000000"
            },
            {
              "A": "['1000000000', '1000000000']"
            },
            {
              "result": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "result": "'1000000000'"
            },
            {
              "max": "1000000000000000000"
            },
            {
              "A": "['1000000000', '1000000000']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "A = ['1000000000', '1000000000']",
          "A = sorted(A)",
          "result = 1",
          "max = 10**18"
        ],
        "2": [
          "iterator -> a, Iterate Over -> A"
        ],
        "3": [
          "result *= a",
          "(result > max)"
        ],
        "4": [
          "print(-1)"
        ],
        "5": [
          "print(result)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    A = ['1000000000', '1000000000']\n    A = sorted(A)\n    result = 1\n    max = 10**18\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    result *= a\n    (result > max)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(result)\nNext:\n    Go to Block: 2\n"
    },
    "s230610507": {
      "code": "count = '2'\nlist = ['1000000000', '1000000000']\ni = 0\nnum = int(list[i])\ni += 1\nwhile i>= count:\n  num = num * int(list[i])\n  if num > 10**18:\n    print(-1)\n    break\n  i += 1",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "count": "'2'"
            },
            {
              "list": "['1000000000', '1000000000']"
            },
            {
              "num": "1000000000"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count": "'2'"
            },
            {
              "list": "['1000000000', '1000000000']"
            },
            {
              "num": "1000000000"
            },
            {
              "i": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "count = '2'",
          "list = ['1000000000', '1000000000']",
          "i = 0",
          "num = int(list[i])",
          "i += 1"
        ],
        "2": [
          "while i>= count:"
        ],
        "3": [
          "num = num * int(list[i])",
          "(num > 10 ** 18)"
        ],
        "4": [
          "print(-1)"
        ],
        "5": [
          "i += 1"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    count = '2'\n    list = ['1000000000', '1000000000']\n    i = 0\n    num = int(list[i])\n    i += 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i>= count:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    num = num * int(list[i])\n    (num > 10 ** 18)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    i += 1\nNext:\n    Go to Block: 2\n"
    }
  },
  "p02664": {
    "s853760096": {
      "code": "s = 'PD?D??P'\nt=s\ns_list=list(s)\nfor i in range(len(t)):\n    if t[i]=='?':\n        if t[i-1]=='D':\n            if i==len(t):\n                s_list[i]='D'\n            if t[i+1]=='P':\n                s_list[i]='D'\n            else:\n                s_list[i]='P'\n        else:\n            s_list[i]='D'\ns_cha=\"\".join(s_list)            \nprint(s_cha)            ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            10,
            10
          ]
        },
        "9": {
          "range": [
            12,
            12
          ]
        },
        "10": {
          "range": [
            14,
            14
          ]
        },
        "11": {
          "range": [
            15,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        7,
        9,
        12,
        4,
        5,
        4,
        5,
        6,
        7,
        9,
        12,
        4,
        5,
        6,
        14,
        4,
        5,
        4,
        15,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s_list": "['P', 'D', '?', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', '?', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "s_list": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            },
            {
              "s": "'PD?D??P'"
            },
            {
              "s_cha": "'PDPDPDP'"
            },
            {
              "t": "'PD?D??P'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'PD?D??P'",
          "t=s",
          "s_list=list(s)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(t))"
        ],
        "3": [
          "(t[i] == '?')"
        ],
        "4": [
          "(t[i - 1] == 'D')"
        ],
        "5": [
          "(i == len(t))"
        ],
        "6": [
          "s_list[i]='D'"
        ],
        "7": [
          "(t[i + 1] == 'P')"
        ],
        "8": [
          "s_list[i]='D'"
        ],
        "9": [
          "s_list[i]='P'"
        ],
        "10": [
          "s_list[i]='D'"
        ],
        "11": [
          "s_cha=\"\".join(s_list)",
          "print(s_cha)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 11
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 10
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'PD?D??P'\n    t=s\n    s_list=list(s)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(t))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    (t[i] == '?')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (t[i - 1] == 'D')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 10\n\nBlock 5:\nStatement:\n    (i == len(t))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    s_list[i]='D'\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (t[i + 1] == 'P')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    s_list[i]='D'\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    s_list[i]='P'\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    s_list[i]='D'\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    s_cha=\"\".join(s_list)\n    print(s_cha)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s462947118": {
      "code": "T = 'PD?D??P'\nans=''\ni=0\nN=len(T)\nwhile i<N:\n  if T[i]!='?':\n    ans=ans+T[i]\n  else:\n    if i>0 and ans[-1]=='P':\n      ans=ans+'D'\n    elif i==N-1 and ans[-1]=='D':\n      ans=ans+'D'\n    elif i>0 and i<N-1 and ans[-1]=='D' and T[i+1]=='P':\n      ans=ans+'D'\n    elif i<N-1 and T[i+1]=='D':\n      ans=ans+'P'\n    elif i<N-1 and T[i+1]=='?':\n      ans=ans+'PD'\n      i+=1\n  i+=1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        },
        "10": {
          "range": [
            14,
            14
          ]
        },
        "11": {
          "range": [
            15,
            15
          ]
        },
        "12": {
          "range": [
            16,
            16
          ]
        },
        "13": {
          "range": [
            17,
            17
          ]
        },
        "14": {
          "range": [
            18,
            19
          ]
        },
        "15": {
          "range": [
            20,
            20
          ]
        },
        "16": {
          "range": [
            21,
            21
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        20,
        5,
        6,
        7,
        20,
        5,
        6,
        9,
        11,
        13,
        15,
        16,
        20,
        5,
        6,
        7,
        20,
        5,
        6,
        9,
        11,
        13,
        15,
        17,
        18,
        19,
        20,
        5,
        6,
        7,
        20,
        5,
        21
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "''"
            },
            {
              "i": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "''"
            },
            {
              "i": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "''"
            },
            {
              "i": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'P'"
            },
            {
              "i": "0"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'P'"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'P'"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'P'"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PD'"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PD'"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PD'"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PD'"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PD'"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PD'"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PD'"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PD'"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDP'"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDP'"
            },
            {
              "i": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDP'"
            },
            {
              "i": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDP'"
            },
            {
              "i": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "3"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPD'"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 14,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPDPD'"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPDPD'"
            },
            {
              "i": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPDPD'"
            },
            {
              "i": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPDPD'"
            },
            {
              "i": "6"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPDPDP'"
            },
            {
              "i": "6"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPDPDP'"
            },
            {
              "i": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPDPDP'"
            },
            {
              "i": "7"
            }
          ]
        },
        {
          "block": 16,
          "state": [
            {
              "T": "'PD?D??P'"
            },
            {
              "N": "7"
            },
            {
              "ans": "'PDPDPDP'"
            },
            {
              "i": "7"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "T = 'PD?D??P'",
          "ans=''",
          "i=0",
          "N=len(T)"
        ],
        "2": [
          "while i<N:"
        ],
        "3": [
          "(T[i] != '?')"
        ],
        "4": [
          "ans=ans+T[i]"
        ],
        "5": [
          "(i > 0 and ans[-1] == 'P')"
        ],
        "6": [
          "ans=ans+'D'"
        ],
        "7": [
          "(i == N - 1 and ans[-1] == 'D')"
        ],
        "8": [
          "ans=ans+'D'"
        ],
        "9": [
          "(i > 0 and i < N - 1 and (ans[-1] == 'D') and (T[i + 1] == 'P'))"
        ],
        "10": [
          "ans=ans+'D'"
        ],
        "11": [
          "(i < N - 1 and T[i + 1] == 'D')"
        ],
        "12": [
          "ans=ans+'P'"
        ],
        "13": [
          "(i < N - 1 and T[i + 1] == '?')"
        ],
        "14": [
          "ans=ans+'PD'",
          "i+=1"
        ],
        "15": [
          "i+=1"
        ],
        "16": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 16
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "15": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    T = 'PD?D??P'\n    ans=''\n    i=0\n    N=len(T)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i<N:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 16\n\nBlock 3:\nStatement:\n    (T[i] != '?')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans=ans+T[i]\nNext:\n    Go to Block: 15\n\nBlock 5:\nStatement:\n    (i > 0 and ans[-1] == 'P')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans=ans+'D'\nNext:\n    Go to Block: 15\n\nBlock 7:\nStatement:\n    (i == N - 1 and ans[-1] == 'D')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ans=ans+'D'\nNext:\n    Go to Block: 15\n\nBlock 9:\nStatement:\n    (i > 0 and i < N - 1 and (ans[-1] == 'D') and (T[i + 1] == 'P'))\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    ans=ans+'D'\nNext:\n    Go to Block: 15\n\nBlock 11:\nStatement:\n    (i < N - 1 and T[i + 1] == 'D')\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    ans=ans+'P'\nNext:\n    Go to Block: 15\n\nBlock 13:\nStatement:\n    (i < N - 1 and T[i + 1] == '?')\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    ans=ans+'PD'\n    i+=1\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 16:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s045421719": {
      "code": "T = ['P', 'D', '?', 'D', '?', '?', 'P']\nif len(T) == 1:\n  if T[0] == \"?\":\n    print(\"D\")\n  else:\n    print(\"\".join(T))\nelse:\n  for i in range(len(T)):\n    if i > 0 and T[i] == \"?\" and T[i-1] == \"P\":\n      T[i] = \"D\"\n    elif i <= len(T) -1 and T[i] == \"?\" and (T[i+1] == \"D\" or T[i+1] == \"?\"):\n      T[i] = \"P\"\n    elif T[i] == \"?\":\n      T[i] = \"D\"\n  print(\"\".join(T))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        },
        "9": {
          "range": [
            12,
            12
          ]
        },
        "10": {
          "range": [
            13,
            13
          ]
        },
        "11": {
          "range": [
            14,
            14
          ]
        },
        "12": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        8,
        9,
        11,
        13,
        8,
        9,
        11,
        13,
        8,
        9,
        11,
        12,
        8,
        9,
        11,
        13,
        8,
        9,
        11,
        12,
        8,
        9,
        10,
        8,
        9,
        11,
        13,
        8,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', '?', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', '?', 'P']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', '?', 'P']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "T": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "T = ['P', 'D', '?', 'D', '?', '?', 'P']",
          "(len(T) == 1)"
        ],
        "2": [
          "(T[0] == '?')"
        ],
        "3": [
          "print(\"D\")"
        ],
        "4": [
          "print(\"\".join(T))"
        ],
        "5": [
          "iterator -> i, Iterate Over -> range(len(T))"
        ],
        "6": [
          "(i > 0 and T[i] == '?' and (T[i - 1] == 'P'))"
        ],
        "7": [
          "T[i] = \"D\""
        ],
        "8": [
          "(i <= len(T) - 1 and T[i] == '?' and (T[i + 1] == 'D' or T[i + 1] == '?'))"
        ],
        "9": [
          "T[i] = \"P\""
        ],
        "10": [
          "(T[i] == '?')"
        ],
        "11": [
          "T[i] = \"D\""
        ],
        "12": [
          "print(\"\".join(T))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 12
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 5
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    T = ['P', 'D', '?', 'D', '?', '?', 'P']\n    (len(T) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (T[0] == '?')\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(\"D\")\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print(\"\".join(T))\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    iterator -> i, Iterate Over -> range(len(T))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 12\n\nBlock 6:\nStatement:\n    (i > 0 and T[i] == '?' and (T[i - 1] == 'P'))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    T[i] = \"D\"\nNext:\n    Go to Block: 5\n\nBlock 8:\nStatement:\n    (i <= len(T) - 1 and T[i] == '?' and (T[i + 1] == 'D' or T[i + 1] == '?'))\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    T[i] = \"P\"\nNext:\n    Go to Block: 5\n\nBlock 10:\nStatement:\n    (T[i] == '?')\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 5\n\nBlock 11:\nStatement:\n    T[i] = \"D\"\nNext:\n    Go to Block: 5\n\nBlock 12:\nStatement:\n    print(\"\".join(T))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s863852010": {
      "code": "t = ['P', 'D', '?', 'D', '?', '?', 'P']\nfor i in range(len(t)):\n    if t[i]==\"?\":\n        if i==0:\n            if t[1]==\"D\":\n                t[0]=\"P\"\n            else:\n                t[0]=\"D\"\n        elif i==len(t)-1:\n            t[i]=\"D\"\n        else:\n            if t[i-1]==\"P\":\n                t[i]=\"D\"\n            elif t[i+1]==\"D\":\n                t[i]=\"P\"\n            elif t[i+1]==\"?\":\n              t[i]=\"P\"\n              t[i+1]=\"D\"\n            else:\n                t[i]=\"D\"\nprint(\"\".join(t))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            5,
            5
          ]
        },
        "6": {
          "range": [
            6,
            6
          ]
        },
        "7": {
          "range": [
            8,
            8
          ]
        },
        "8": {
          "range": [
            9,
            9
          ]
        },
        "9": {
          "range": [
            10,
            10
          ]
        },
        "10": {
          "range": [
            12,
            12
          ]
        },
        "11": {
          "range": [
            13,
            13
          ]
        },
        "12": {
          "range": [
            14,
            14
          ]
        },
        "13": {
          "range": [
            15,
            15
          ]
        },
        "14": {
          "range": [
            16,
            16
          ]
        },
        "15": {
          "range": [
            17,
            18
          ]
        },
        "16": {
          "range": [
            20,
            20
          ]
        },
        "17": {
          "range": [
            21,
            21
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        2,
        3,
        2,
        3,
        4,
        9,
        12,
        14,
        15,
        2,
        3,
        2,
        3,
        4,
        9,
        12,
        14,
        16,
        17,
        18,
        2,
        3,
        2,
        3,
        2,
        21
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 14,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 17,
          "state": [
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "t = ['P', 'D', '?', 'D', '?', '?', 'P']"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(t))"
        ],
        "3": [
          "(t[i] == '?')"
        ],
        "4": [
          "(i == 0)"
        ],
        "5": [
          "(t[1] == 'D')"
        ],
        "6": [
          "t[0]=\"P\""
        ],
        "7": [
          "t[0]=\"D\""
        ],
        "8": [
          "(i == len(t) - 1)"
        ],
        "9": [
          "t[i]=\"D\""
        ],
        "10": [
          "(t[i - 1] == 'P')"
        ],
        "11": [
          "t[i]=\"D\""
        ],
        "12": [
          "(t[i + 1] == 'D')"
        ],
        "13": [
          "t[i]=\"P\""
        ],
        "14": [
          "(t[i + 1] == '?')"
        ],
        "15": [
          "t[i]=\"P\"",
          "t[i+1]=\"D\""
        ],
        "16": [
          "t[i]=\"D\""
        ],
        "17": [
          "print(\"\".join(t))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 17
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "14": {
          "with_condition": {
            "true": 15,
            "false": 16
          },
          "no_condition": null
        },
        "15": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "16": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    t = ['P', 'D', '?', 'D', '?', '?', 'P']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(t))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 17\n\nBlock 3:\nStatement:\n    (t[i] == '?')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (t[1] == 'D')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    t[0]=\"P\"\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    t[0]=\"D\"\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    (i == len(t) - 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    t[i]=\"D\"\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    (t[i - 1] == 'P')\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    t[i]=\"D\"\nNext:\n    Go to Block: 2\n\nBlock 12:\nStatement:\n    (t[i + 1] == 'D')\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    t[i]=\"P\"\nNext:\n    Go to Block: 2\n\nBlock 14:\nStatement:\n    (t[i + 1] == '?')\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 16\n\nBlock 15:\nStatement:\n    t[i]=\"P\"\n    t[i+1]=\"D\"\nNext:\n    Go to Block: 2\n\nBlock 16:\nStatement:\n    t[i]=\"D\"\nNext:\n    Go to Block: 2\n\nBlock 17:\nStatement:\n    print(\"\".join(t))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s741125336": {
      "code": "T = 'PD?D??P'\nif T[0] == '?':\n    T[0] = 'D'\nfor i, v in enumerate(T):\n    if v == '?':\n        if T[i - 1] == 'D':\n            print('P', end='')\n        else:\n            print('D', end='')\n    else:\n        print(v, end='')\nprint('\\n')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        },
        "9": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        4,
        5,
        11,
        4,
        5,
        11,
        4,
        5,
        6,
        7,
        4,
        5,
        11,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        9,
        4,
        5,
        11,
        4,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "T": "'PD?D??P'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "T = 'PD?D??P'",
          "(T[0] == '?')"
        ],
        "2": [
          "T[0] = 'D'"
        ],
        "3": [
          "i <- index\n    v <- iterator"
        ],
        "4": [
          "(v == '?')"
        ],
        "5": [
          "(T[i - 1] == 'D')"
        ],
        "6": [
          "print('P', end='')"
        ],
        "7": [
          "print('D', end='')"
        ],
        "8": [
          "print(v, end='')"
        ],
        "9": [
          "print('\\n')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 9
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    T = 'PD?D??P'\n    (T[0] == '?')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    T[0] = 'D'\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    i <- index\n    v <- iterator\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 9\n\nBlock 4:\nStatement:\n    (v == '?')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (T[i - 1] == 'D')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('P', end='')\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    print('D', end='')\nNext:\n    Go to Block: 3\n\nBlock 8:\nStatement:\n    print(v, end='')\nNext:\n    Go to Block: 3\n\nBlock 9:\nStatement:\n    print('\\n')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s389738757": {
      "code": "a = 'PD?D??P'\nt =list(a)\nif t[0] == \"?\":\n    if t[1] == \"P\":\n        t[0] = \"D\"\n    else:\n        t[0] = \"P\"\nif t[len(t)-1] == \"?\":\n    t[len(t)-1] = \"D\"\nfor i in reversed(range(1,len(t)-1)):\n    if t[i] == \"?\" and t[i+1] == \"D\":\n        t[i] = \"P\"\n    elif t[i] == \"?\":\n        t[i] = \"D\"\nanswer = \"\".join(t)\nprint(answer)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        },
        "9": {
          "range": [
            12,
            12
          ]
        },
        "10": {
          "range": [
            13,
            13
          ]
        },
        "11": {
          "range": [
            14,
            14
          ]
        },
        "12": {
          "range": [
            15,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        8,
        10,
        11,
        13,
        14,
        10,
        11,
        12,
        10,
        11,
        13,
        10,
        11,
        12,
        10,
        11,
        13,
        10,
        15,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', '?', '?', 'P']"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', '?', 'D', 'P']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', '?', 'D', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', '?', 'D', 'P']"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', '?', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "answer": "'PDPDPDP'"
            },
            {
              "a": "'PD?D??P'"
            },
            {
              "t": "['P', 'D', 'P', 'D', 'P', 'D', 'P']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = 'PD?D??P'",
          "t =list(a)",
          "(t[0] == '?')"
        ],
        "2": [
          "(t[1] == 'P')"
        ],
        "3": [
          "t[0] = \"D\""
        ],
        "4": [
          "t[0] = \"P\""
        ],
        "5": [
          "(t[len(t) - 1] == '?')"
        ],
        "6": [
          "t[len(t)-1] = \"D\""
        ],
        "7": [
          "iterator -> i, Iterate Over -> reversed(range(1, len(t) - 1))"
        ],
        "8": [
          "(t[i] == '?' and t[i + 1] == 'D')"
        ],
        "9": [
          "t[i] = \"P\""
        ],
        "10": [
          "(t[i] == '?')"
        ],
        "11": [
          "t[i] = \"D\""
        ],
        "12": [
          "answer = \"\".join(t)",
          "print(answer)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 12
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 7
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 'PD?D??P'\n    t =list(a)\n    (t[0] == '?')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (t[1] == 'P')\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    t[0] = \"D\"\nNext:\n    Go to Block: 5\n\nBlock 4:\nStatement:\n    t[0] = \"P\"\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (t[len(t) - 1] == '?')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    t[len(t)-1] = \"D\"\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    iterator -> i, Iterate Over -> reversed(range(1, len(t) - 1))\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 12\n\nBlock 8:\nStatement:\n    (t[i] == '?' and t[i + 1] == 'D')\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    t[i] = \"P\"\nNext:\n    Go to Block: 7\n\nBlock 10:\nStatement:\n    (t[i] == '?')\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 7\n\nBlock 11:\nStatement:\n    t[i] = \"D\"\nNext:\n    Go to Block: 7\n\nBlock 12:\nStatement:\n    answer = \"\".join(t)\n    print(answer)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02675": {
    "s476309356": {
      "code": "numTest = 16\nvalue = numTest % 10\nif value == 2 or value == 4 or value == 5 or value == 7 or value == 9 :\n\tprint('hon')\nelif value == 0 or value == 1 or value == 6 or value == 8 :\n\tprint('pon')\nelif value == 3 :\n\tprint(bon)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "value": "6"
            },
            {
              "numTest": "16"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "value": "6"
            },
            {
              "numTest": "16"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "value": "6"
            },
            {
              "numTest": "16"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "numTest = 16",
          "value = numTest % 10",
          "(value == 2 or value == 4 or value == 5 or (value == 7) or (value == 9))"
        ],
        "2": [
          "print('hon')"
        ],
        "3": [
          "(value == 0 or value == 1 or value == 6 or (value == 8))"
        ],
        "4": [
          "print('pon')"
        ],
        "5": [
          "(value == 3)"
        ],
        "6": [
          "print(bon)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": "<END>"
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    numTest = 16\n    value = numTest % 10\n    (value == 2 or value == 4 or value == 5 or (value == 7) or (value == 9))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('hon')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (value == 0 or value == 1 or value == 6 or (value == 8))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('pon')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (value == 3)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(bon)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s888621945": {
      "code": "n = '16'\nn %= 10\nhon = [2,4,5,7,9]\npon = [0,1,6,8]\nbon = [3]\nif n in hon:\n    print(\"hon\")\nelif n in pon:\n    print(\"pon\")\nelse:\n    print(\"bon\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'16'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '16'",
          "n %= 10",
          "hon = [2,4,5,7,9]",
          "pon = [0,1,6,8]",
          "bon = [3]",
          "(n in hon)"
        ],
        "2": [
          "print(\"hon\")"
        ],
        "3": [
          "(n in pon)"
        ],
        "4": [
          "print(\"pon\")"
        ],
        "5": [
          "print(\"bon\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '16'\n    n %= 10\n    hon = [2,4,5,7,9]\n    pon = [0,1,6,8]\n    bon = [3]\n    (n in hon)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n in pon)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
    },
    "s514627776": {
      "code": "N = 16\nif N[-1] == 2 or 4 or 5 or 7 or 9:\n    print(\"hon\")\nif N[-1] == 0 or 1 or 6 or 8:\n    print(\"pon\")\nif N[-1] == 3:\n    print(\"bon\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "16"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 16",
          "(N[-1] == 2 or 4 or 5 or 7 or 9)"
        ],
        "2": [
          "print(\"hon\")"
        ],
        "3": [
          "(N[-1] == 0 or 1 or 6 or 8)"
        ],
        "4": [
          "print(\"pon\")"
        ],
        "5": [
          "(N[-1] == 3)"
        ],
        "6": [
          "print(\"bon\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": "<END>"
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 16\n    (N[-1] == 2 or 4 or 5 or 7 or 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (N[-1] == 0 or 1 or 6 or 8)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (N[-1] == 3)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
    },
    "s610458639": {
      "code": "N = 16\nif N[-1] == 2 or 4 or 5 or 7 or 9:\n    print(\"hon\")\nelif N[-1] == 0 or 1 or 6 or 8:\n    print(\"pon\")\nelif N[-1] == 3:\n    print(\"bon\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "16"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 16",
          "(N[-1] == 2 or 4 or 5 or 7 or 9)"
        ],
        "2": [
          "print(\"hon\")"
        ],
        "3": [
          "(N[-1] == 0 or 1 or 6 or 8)"
        ],
        "4": [
          "print(\"pon\")"
        ],
        "5": [
          "(N[-1] == 3)"
        ],
        "6": [
          "print(\"bon\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": "<END>"
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 16\n    (N[-1] == 2 or 4 or 5 or 7 or 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (N[-1] == 0 or 1 or 6 or 8)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (N[-1] == 3)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
    },
    "s865056842": {
      "code": "N = ['1', '6']\nn=reversed(N)\nif n[0]==\"2\" or n[0]==\"4\" or n[0]==\"5\" or n[0]==\"7\" or n[0]==\"9\":\n    print(\"hon\")\nif n[0]==\"0\" or n[0]==\"1\" or n[0]==\"6\" or n[0]==\"8\":\n    print(\"pon\")\nif n[0]==\"3\":\n    print(\"bon\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "['1', '6']"
            },
            {
              "n": "<list_reverseiterator object at 0x7f394e066a70>"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list_reverseiterator' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = ['1', '6']",
          "n=reversed(N)",
          "(n[0] == '2' or n[0] == '4' or n[0] == '5' or (n[0] == '7') or (n[0] == '9'))"
        ],
        "2": [
          "print(\"hon\")"
        ],
        "3": [
          "(n[0] == '0' or n[0] == '1' or n[0] == '6' or (n[0] == '8'))"
        ],
        "4": [
          "print(\"pon\")"
        ],
        "5": [
          "(n[0] == '3')"
        ],
        "6": [
          "print(\"bon\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": "<END>"
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = ['1', '6']\n    n=reversed(N)\n    (n[0] == '2' or n[0] == '4' or n[0] == '5' or (n[0] == '7') or (n[0] == '9'))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (n[0] == '0' or n[0] == '1' or n[0] == '6' or (n[0] == '8'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (n[0] == '3')\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
    },
    "s679532540": {
      "code": "m = 0\nm = '16'\nm = m % 10\nif(m == 2,4,5,7,9):\n    print(\"hon\") \nelif(m == 0,1,6,8):\n    print(\"pon\") \nelse:\n    print(\"bon\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "m": "'16'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "m = 0",
          "m = '16'",
          "m = m % 10",
          "((m == 2, 4, 5, 7, 9))"
        ],
        "2": [
          "print(\"hon\")"
        ],
        "3": [
          "((m == 0, 1, 6, 8))"
        ],
        "4": [
          "print(\"pon\")"
        ],
        "5": [
          "print(\"bon\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    m = 0\n    m = '16'\n    m = m % 10\n    ((m == 2, 4, 5, 7, 9))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ((m == 0, 1, 6, 8))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
    },
    "s722242521": {
      "code": "n = '16'\nl=[2,4,5,7,9]\nl2=[0,1,6,8]\nl3=[3]\nif (n%10) in l:\n  print('hon')\nelif (n%10) in l2:\n  print('pon')\nelse:\n  print('bon')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'16'"
            },
            {
              "l": "[2, 4, 5, 7, 9]"
            },
            {
              "l2": "[0, 1, 6, 8]"
            },
            {
              "l3": "[3]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '16'",
          "l=[2,4,5,7,9]",
          "l2=[0,1,6,8]",
          "l3=[3]",
          "(n % 10 in l)"
        ],
        "2": [
          "print('hon')"
        ],
        "3": [
          "(n % 10 in l2)"
        ],
        "4": [
          "print('pon')"
        ],
        "5": [
          "print('bon')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '16'\n    l=[2,4,5,7,9]\n    l2=[0,1,6,8]\n    l3=[3]\n    (n % 10 in l)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('hon')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n % 10 in l2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('pon')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('bon')\nNext:\n    <END>\n"
    }
  },
  "p02676": {
    "s599743204": {
      "code": "K = 7\nS = ['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']\nS2 = []\nfor i in range(K):\n    n = S[i]\n    S2.append(n)\nS2.append('...')\nprint(''.join(S2))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "K": "7"
            },
            {
              "S2": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "K": "7"
            },
            {
              "S2": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'n'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'n'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'i'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'i'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'k'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'k'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'o'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'o'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'a'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o', 'a']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'a'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o', 'a']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'n'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o', 'a', 'n']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'n'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o', 'a', 'n']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'d'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o', 'a', 'n', 'd']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'d'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o', 'a', 'n', 'd']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "n": "'d'"
            },
            {
              "K": "7"
            },
            {
              "S2": "['n', 'i', 'k', 'o', 'a', 'n', 'd', '...']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "K = 7",
          "S = ['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']",
          "S2 = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(K)"
        ],
        "3": [
          "n = S[i]",
          "S2.append(n)"
        ],
        "4": [
          "S2.append('...')",
          "print(''.join(S2))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    K = 7\n    S = ['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']\n    S2 = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(K)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n = S[i]\n    S2.append(n)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    S2.append('...')\n    print(''.join(S2))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s113826419": {
      "code": "k = 7\ns = 'nikoandsolstice'\nslist = list(s)\nif len(slist) > k:\n  l = ''\n  for i in range(k):\n    k += slist[i]\n  print('...' + l)\nelse:\n  print(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "7"
            },
            {
              "slist": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "s": "'nikoandsolstice'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "k": "7"
            },
            {
              "l": "''"
            },
            {
              "slist": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "s": "'nikoandsolstice'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "k": "7"
            },
            {
              "l": "''"
            },
            {
              "slist": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "s": "'nikoandsolstice'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "k": "7"
            },
            {
              "l": "''"
            },
            {
              "slist": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
            },
            {
              "s": "'nikoandsolstice'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "k = 7",
          "s = 'nikoandsolstice'",
          "slist = list(s)",
          "(len(slist) > k)"
        ],
        "2": [
          "l = ''"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(k)"
        ],
        "4": [
          "k += slist[i]"
        ],
        "5": [
          "print('...' + l)"
        ],
        "6": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 6
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    k = 7\n    s = 'nikoandsolstice'\n    slist = list(s)\n    (len(slist) > k)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 6\n\nBlock 2:\nStatement:\n    l = ''\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(k)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    k += slist[i]\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    print('...' + l)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(s)\nNext:\n    <END>\n"
    },
    "s083449925": {
      "code": "S = 7\nK = 'nikoandsolstice'\nif len(S) < K:\n    print(S)\nelse:\n    print(S[:K]+'...')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "7"
            },
            {
              "K": "'nikoandsolstice'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 7",
          "K = 'nikoandsolstice'",
          "(len(S) < K)"
        ],
        "2": [
          "print(S)"
        ],
        "3": [
          "print(S[:K]+'...')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 7\n    K = 'nikoandsolstice'\n    (len(S) < K)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(S[:K]+'...')\nNext:\n    <END>\n"
    },
    "s415407334": {
      "code": "k = '7'\nw = 'nikoandsolstice'\nl = len(w)\nif l <= k:\n    print(w)\nelse:\n   \t print(w[:k])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "15"
            },
            {
              "w": "'nikoandsolstice'"
            },
            {
              "k": "'7'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<=' not supported between instances of 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "k = '7'",
          "w = 'nikoandsolstice'",
          "l = len(w)",
          "(l <= k)"
        ],
        "2": [
          "print(w)"
        ],
        "3": [
          "print(w[:k])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    k = '7'\n    w = 'nikoandsolstice'\n    l = len(w)\n    (l <= k)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(w)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(w[:k])\nNext:\n    <END>\n"
    },
    "s388733211": {
      "code": "K = '7'\nS = 'nikoandsolstice'\nlen_S=len(S)\nif K<=len_S:\n  print(S)\nelse:\n  print(S[K:], \"...\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "len_S": "15"
            },
            {
              "S": "'nikoandsolstice'"
            },
            {
              "K": "'7'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "K = '7'",
          "S = 'nikoandsolstice'",
          "len_S=len(S)",
          "(K <= len_S)"
        ],
        "2": [
          "print(S)"
        ],
        "3": [
          "print(S[K:], \"...\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    K = '7'\n    S = 'nikoandsolstice'\n    len_S=len(S)\n    (K <= len_S)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(S[K:], \"...\")\nNext:\n    <END>\n"
    }
  },
  "p02690": {
    "s668270549": {
      "code": "x = 33\nb=0\nwhile(True):\n    bi=b**5\n    ai=x+bi\n    aj=int(ai**(1/5))\n    if((aj**5)==ai):\n        print(aj,b)\n        break\n    b*=-1\n    bi=b**5\n    ai=x+bi\n    aj=int(ai**(1/5))\n    if((aj**5)==ai):\n        print(aj,b)\n        break\n    b*=-1\n    b+=1",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            14
          ]
        },
        "6": {
          "range": [
            15,
            15
          ]
        },
        "7": {
          "range": [
            17,
            18
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        12,
        13,
        14,
        17,
        18,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "0"
            },
            {
              "x": "33"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "b": "0"
            },
            {
              "x": "33"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "aj": "2"
            },
            {
              "ai": "33"
            },
            {
              "b": "0"
            },
            {
              "x": "33"
            },
            {
              "bi": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "aj": "2"
            },
            {
              "ai": "33"
            },
            {
              "b": "0"
            },
            {
              "x": "33"
            },
            {
              "bi": "0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "aj": "2"
            },
            {
              "ai": "33"
            },
            {
              "b": "1"
            },
            {
              "x": "33"
            },
            {
              "bi": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "aj": "2"
            },
            {
              "ai": "33"
            },
            {
              "b": "1"
            },
            {
              "x": "33"
            },
            {
              "bi": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "aj": "2"
            },
            {
              "ai": "34"
            },
            {
              "b": "1"
            },
            {
              "x": "33"
            },
            {
              "bi": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "aj": "2"
            },
            {
              "ai": "32"
            },
            {
              "b": "-1"
            },
            {
              "x": "33"
            },
            {
              "bi": "-1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "aj": "2"
            },
            {
              "ai": "32"
            },
            {
              "b": "-1"
            },
            {
              "x": "33"
            },
            {
              "bi": "-1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "x = 33",
          "b=0"
        ],
        "2": [
          "while(True):"
        ],
        "3": [
          "bi=b**5",
          "ai=x+bi",
          "aj=int(ai**(1/5))",
          "(aj ** 5 == ai)"
        ],
        "4": [
          "print(aj,b)"
        ],
        "5": [
          "b*=-1",
          "bi=b**5",
          "ai=x+bi",
          "aj=int(ai**(1/5))",
          "(aj ** 5 == ai)"
        ],
        "6": [
          "print(aj,b)"
        ],
        "7": [
          "b*=-1",
          "b+=1"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = 33\n    b=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while(True):\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    bi=b**5\n    ai=x+bi\n    aj=int(ai**(1/5))\n    (aj ** 5 == ai)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(aj,b)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    b*=-1\n    bi=b**5\n    ai=x+bi\n    aj=int(ai**(1/5))\n    (aj ** 5 == ai)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(aj,b)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    b*=-1\n    b+=1\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s331692391": {
      "code": "import numpy as np\nx = 33\nb = 0\nans = []\nwhile True:\n    n = x - b**5\n    a = int(np.power(n, 1/5))\n    if a**5 == n:\n       ans.append(a)\n       ans.append(-b)\n       break\n    b += 1\nprint(*ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            8
          ]
        },
        "4": {
          "range": [
            9,
            10
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "x = 33",
          "b = 0",
          "ans = []"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "n = x - b**5",
          "a = int(np.power(n, 1/5))",
          "(a ** 5 == n)"
        ],
        "4": [
          "ans.append(a)",
          "ans.append(-b)"
        ],
        "5": [
          "b += 1"
        ],
        "6": [
          "print(*ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    x = 33\n    b = 0\n    ans = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    n = x - b**5\n    a = int(np.power(n, 1/5))\n    (a ** 5 == n)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans.append(a)\n    ans.append(-b)\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    b += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(*ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s307451919": {
      "code": "x = 33\na = 0\nb = 0\nfor a_ in range(3):\n    _ = a_**5 - x\n    b_ = _**0.2\n    if a_**5 - b_**5 ==x:\n        a = a_\n        b = b_**5\nprint(a, int(b))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            7
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        8,
        9,
        4,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "33"
            },
            {
              "b": "0"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "33"
            },
            {
              "b": "0"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "_": "-33"
            },
            {
              "x": "33"
            },
            {
              "b_": "(1.628022611795152+1.18282766402354j)"
            },
            {
              "a": "0"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "_": "-33"
            },
            {
              "x": "33"
            },
            {
              "b_": "(1.628022611795152+1.18282766402354j)"
            },
            {
              "a": "0"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "33"
            },
            {
              "_": "-32"
            },
            {
              "a": "0"
            },
            {
              "b_": "(1.618033988749895+1.1755705045849463j)"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "33"
            },
            {
              "_": "-32"
            },
            {
              "a": "0"
            },
            {
              "b_": "(1.618033988749895+1.1755705045849463j)"
            },
            {
              "b": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "33"
            },
            {
              "a": "0"
            },
            {
              "b": "0"
            },
            {
              "b_": "(0.8090169943749475+0.5877852522924731j)"
            },
            {
              "_": "-1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "x": "33"
            },
            {
              "a": "2"
            },
            {
              "b": "(-1.0000000000000002+0j)"
            },
            {
              "b_": "(0.8090169943749475+0.5877852522924731j)"
            },
            {
              "_": "-1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "33"
            },
            {
              "a": "2"
            },
            {
              "b": "(-1.0000000000000002+0j)"
            },
            {
              "b_": "(0.8090169943749475+0.5877852522924731j)"
            },
            {
              "_": "-1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "x": "33"
            },
            {
              "a": "2"
            },
            {
              "b": "(-1.0000000000000002+0j)"
            },
            {
              "b_": "(0.8090169943749475+0.5877852522924731j)"
            },
            {
              "_": "-1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'complex'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = 33",
          "a = 0",
          "b = 0"
        ],
        "2": [
          "iterator -> a_, Iterate Over -> range(3)"
        ],
        "3": [
          "_ = a_**5 - x",
          "b_ = _**0.2",
          "(a_ ** 5 - b_ ** 5 == x)"
        ],
        "4": [
          "a = a_",
          "b = b_**5"
        ],
        "5": [
          "print(a, int(b))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = 33\n    a = 0\n    b = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a_, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    _ = a_**5 - x\n    b_ = _**0.2\n    (a_ ** 5 - b_ ** 5 == x)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a = a_\n    b = b_**5\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(a, int(b))\nNext:\n    <END>\n"
    }
  },
  "p02691": {
    "s271936714": {
      "code": "N = 6\nA = [2, 3, 3, 1, 3, 1]\ndp = [0] * (10 ** 9 + 2 * (10 ** 5))\nans = 0\nfor i in range(N):\n    x = i + 1 - A[i]\n    if x >= 0:\n        ans += dp[x]\n    dp[i + 1 + A[i]] += 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "A = [2, 3, 3, 1, 3, 1]",
          "dp = [0] * (10 ** 9 + 2 * (10 ** 5))",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "x = i + 1 - A[i]",
          "(x >= 0)"
        ],
        "4": [
          "ans += dp[x]"
        ],
        "5": [
          "dp[i + 1 + A[i]] += 1"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    A = [2, 3, 3, 1, 3, 1]\n    dp = [0] * (10 ** 9 + 2 * (10 ** 5))\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    x = i + 1 - A[i]\n    (x >= 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += dp[x]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    dp[i + 1 + A[i]] += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02723": {
    "s873324946": {
      "code": "s = 'sippuu'\nif s[3]==s[4] and s[5]==s[6]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'sippuu'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'sippuu'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'sippuu'",
          "(s[3] == s[4] and s[5] == s[6])"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'sippuu'\n    (s[3] == s[4] and s[5] == s[6])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s662251699": {
      "code": "s = 'sippuu'\nif s[3]==s[4]  and s[5]==s[6]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'sippuu'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'sippuu'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'sippuu'",
          "(s[3] == s[4] and s[5] == s[6])"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'sippuu'\n    (s[3] == s[4] and s[5] == s[6])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s358073035": {
      "code": "s = 'sippuu'\nif(s[2]==s[3]):\n  if(s[4]==s[5]):\n    print('Yes')\n    return None\nprint('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'sippuu'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'sippuu'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'sippuu'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'sippuu'",
          "(s[2] == s[3])"
        ],
        "2": [
          "(s[4] == s[5])"
        ],
        "3": [
          "print('Yes')",
          "return None"
        ],
        "4": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'sippuu'\n    (s[2] == s[3])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 2:\nStatement:\n    (s[4] == s[5])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print('Yes')\n    return None\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print('No')\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02741": {
    "s648702833": {
      "code": "a = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\nk = 6\nprint(a[k])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]"
            },
            {
              "k": "6"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]",
          "k = 6",
          "print(a[k])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\n    k = 6\n    print(a[k])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s850984321": {
      "code": "a = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\nb = 6\nprint(a[b-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]"
            },
            {
              "b": "6"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]",
          "b = 6",
          "print(a[b-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\n    b = 6\n    print(a[b-1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s487696906": {
      "code": "l = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\nk = 6\nprint(l[k])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]"
            },
            {
              "k": "6"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "l = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]",
          "k = 6",
          "print(l[k])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    l = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\n    k = 6\n    print(l[k])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s798418810": {
      "code": "arr = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\nt = 6\nprint(arr[t+1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "t": "6"
            },
            {
              "arr": "[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "arr = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]",
          "t = 6",
          "print(arr[t+1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    arr = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\n    t = 6\n    print(arr[t+1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s233683862": {
      "code": "alist=[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\nk = '6'\nprint(alist[k-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "alist": "[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]"
            },
            {
              "k": "'6'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "alist=[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]",
          "k = '6'",
          "print(alist[k-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    alist=[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\n    k = '6'\n    print(alist[k-1])\nNext:\n    <END>\n"
    },
    "s912958979": {
      "code": "k = 6\nalist = list(1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51)\nprint(alist[k-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "6"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('list expected at most 1 argument, got 32')"
      },
      "cfg_block_statements": {
        "1": [
          "k = 6",
          "alist = list(1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51)",
          "print(alist[k-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    k = 6\n    alist = list(1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51)\n    print(alist[k-1])\nNext:\n    <END>\n"
    }
  },
  "p02747": {
    "s833547210": {
      "code": "import sys\ns = 'hihi'\nl=len(s)\nif l==1:\n  print('No')\n  sys.exit()\nfor i in range(0,l,2):\n  if s[i]=='h':\n    if s[i+1]!='i':\n      print('No')\n      sys.exit()\n  else:\n    print('No')\n    sys.exit()\nprint('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            11
          ]
        },
        "7": {
          "range": [
            13,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        7,
        8,
        9,
        7,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 8,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys",
          "s = 'hihi'",
          "l=len(s)",
          "(l == 1)"
        ],
        "2": [
          "print('No')",
          "sys.exit()"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(0, l, 2)"
        ],
        "4": [
          "(s[i] == 'h')"
        ],
        "5": [
          "(s[i + 1] != 'i')"
        ],
        "6": [
          "print('No')",
          "sys.exit()"
        ],
        "7": [
          "print('No')",
          "sys.exit()"
        ],
        "8": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 8
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 7
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 3
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    s = 'hihi'\n    l=len(s)\n    (l == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(0, l, 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 8\n\nBlock 4:\nStatement:\n    (s[i] == 'h')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    (s[i + 1] != 'i')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 3\n\nBlock 6:\nStatement:\n    print('No')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    print('No')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 8:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s965089056": {
      "code": "S = 'hihi'\nif S[:2]==\"hi\" and S[2] != \"i\":\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'hihi'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'hihi'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'hihi'",
          "(S[:2] == 'hi' and S[2] != 'i')"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'hihi'\n    (S[:2] == 'hi' and S[2] != 'i')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02772": {
    "s932228893": {
      "code": "N = 5\nA = [6, 7, 9, 10, 31]\ncount = 0\nif len([i for i in A if i%2 == 0 ]) ==0:\n    print(\"APPROVED\")\nelse:\n    a = [i for i in A if i%2 == 0 ]\n    for j in a:\n        if j%3 == 0 or j%5 == 0:\n            count += 1\nif count == len(a):\n    print(\"APPROVED\")\nelse:\n    print(\"DENIED\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        11,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[6, 10]"
            },
            {
              "A": "[6, 7, 9, 10, 31]"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [6, 7, 9, 10, 31]",
          "count = 0",
          "(len([i for i in A if i % 2 == 0]) == 0)"
        ],
        "2": [
          "print(\"APPROVED\")"
        ],
        "3": [
          "a = [i for i in A if i%2 == 0 ]"
        ],
        "4": [
          "iterator -> j, Iterate Over -> a"
        ],
        "5": [
          "(j % 3 == 0 or j % 5 == 0)"
        ],
        "6": [
          "count += 1"
        ],
        "7": [
          "(count == len(a))"
        ],
        "8": [
          "print(\"APPROVED\")"
        ],
        "9": [
          "print(\"DENIED\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 7
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 4
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [6, 7, 9, 10, 31]\n    count = 0\n    (len([i for i in A if i % 2 == 0]) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"APPROVED\")\nNext:\n    Go to Block: 7\n\nBlock 3:\nStatement:\n    a = [i for i in A if i%2 == 0 ]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> j, Iterate Over -> a\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    (j % 3 == 0 or j % 5 == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    count += 1\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    (count == len(a))\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(\"APPROVED\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(\"DENIED\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s093434533": {
      "code": "import sys\nn = 5\na = [6, 7, 9, 10, 31]\nfor i in a:\n  if a % 2 == 0 and (a % 3 != 0 and a % 5 != 0):\n    print(\"DENIED\")\n    sys.exit()\nprint(\"APPROVED\")    ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import sys",
          "n = 5",
          "a = [6, 7, 9, 10, 31]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> a"
        ],
        "3": [
          "(a % 2 == 0 and (a % 3 != 0 and a % 5 != 0))"
        ],
        "4": [
          "print(\"DENIED\")",
          "sys.exit()"
        ],
        "5": [
          "print(\"APPROVED\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    n = 5\n    a = [6, 7, 9, 10, 31]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a % 2 == 0 and (a % 3 != 0 and a % 5 != 0))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"DENIED\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"APPROVED\")\nNext:\n    <END>\n"
    }
  },
  "p02779": {
    "s807197721": {
      "code": "n = 5\nnums = [2, 6, 1, 4, 5]\nl = [0]*200001\nfor num in nums:\n    l[num] += 1\nif max(nums) == 1:\n    print('YES')\nelse:\n    print('NO')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "n": "5"
            },
            {
              "nums": "[2, 6, 1, 4, 5]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "nums = [2, 6, 1, 4, 5]",
          "l = [0]*200001"
        ],
        "2": [
          "iterator -> num, Iterate Over -> nums"
        ],
        "3": [
          "l[num] += 1"
        ],
        "4": [
          "(max(nums) == 1)"
        ],
        "5": [
          "print('YES')"
        ],
        "6": [
          "print('NO')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    nums = [2, 6, 1, 4, 5]\n    l = [0]*200001\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> num, Iterate Over -> nums\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l[num] += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (max(nums) == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('NO')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s574870527": {
      "code": "n = 5\na = [2, 6, 1, 4, 5]\nif(len(set(a)==n)):\n    print('YES')\nelse:\n    print('NO')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[2, 6, 1, 4, 5]"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'bool' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "a = [2, 6, 1, 4, 5]",
          "(len(set(a) == n))"
        ],
        "2": [
          "print('YES')"
        ],
        "3": [
          "print('NO')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [2, 6, 1, 4, 5]\n    (len(set(a) == n))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('NO')\nNext:\n    <END>\n"
    },
    "s258905255": {
      "code": "N = 5\nA = [2, 6, 1, 4, 5]\nB = set(list)\nif len(A) == len(B):\n  print(\"YES\")\nelse:\n  print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[2, 6, 1, 4, 5]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'type' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [2, 6, 1, 4, 5]",
          "B = set(list)",
          "(len(A) == len(B))"
        ],
        "2": [
          "print(\"YES\")"
        ],
        "3": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [2, 6, 1, 4, 5]\n    B = set(list)\n    (len(A) == len(B))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
    },
    "s265350375": {
      "code": "N = '5'\nA = ['2', '6', '1', '4', '5']\nA.sort()\nfor i in range(N-1):\n  if A[i]==A[i+1]:\n    print('NO')\n  if i==N-2:\n    print('YES')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'5'"
            },
            {
              "A": "['1', '2', '4', '5', '6']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'5'"
            },
            {
              "A": "['1', '2', '4', '5', '6']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '5'",
          "A = ['2', '6', '1', '4', '5']",
          "A.sort()"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N - 1)"
        ],
        "3": [
          "(A[i] == A[i + 1])"
        ],
        "4": [
          "print('NO')"
        ],
        "5": [
          "(i == N - 2)"
        ],
        "6": [
          "print('YES')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    A = ['2', '6', '1', '4', '5']\n    A.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (A[i] == A[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('NO')\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (i == N - 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print('YES')\nNext:\n    Go to Block: 2\n"
    }
  },
  "p02786": {
    "s793477952": {
      "code": "H = 2\nimport math as m\nremain = H % 2\nH -= remain\nn = round(m.log2(H)+0.5)\nans = (2**n) - 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "H": "2"
            },
            {
              "ans": "3"
            },
            {
              "n": "2"
            },
            {
              "remain": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "H = 2",
          "import math as m",
          "remain = H % 2",
          "H -= remain",
          "n = round(m.log2(H)+0.5)",
          "ans = (2**n) - 1",
          "print(ans)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    H = 2\n    import math as m\n    remain = H % 2\n    H -= remain\n    n = round(m.log2(H)+0.5)\n    ans = (2**n) - 1\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s723438127": {
      "code": "h = '2'\ncnt = 0\nwhile h > 0:\n\th = h // 2\n\tcnt = cnt + 1\nprint(pow(2, cnt) - 1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "cnt": "0"
            },
            {
              "h": "'2'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "0"
            },
            {
              "h": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "h = '2'",
          "cnt = 0"
        ],
        "2": [
          "while h > 0:"
        ],
        "3": [
          "h = h // 2",
          "cnt = cnt + 1"
        ],
        "4": [
          "print(pow(2, cnt) - 1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    h = '2'\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while h > 0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    h = h // 2\n    cnt = cnt + 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(pow(2, cnt) - 1)\nNext:\n    <END>\n"
    },
    "s505315641": {
      "code": "H = '2'\ncount=0\nm=1\nwhile H:\n  if H==1:\n    count+=m\n  else:\n    m*=2\n    H=int(H/2)\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "m": "1"
            },
            {
              "H": "'2'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "m": "1"
            },
            {
              "H": "'2'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "m": "1"
            },
            {
              "H": "'2'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "H": "'2'"
            },
            {
              "m": "2"
            },
            {
              "count": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "H = '2'",
          "count=0",
          "m=1"
        ],
        "2": [
          "while H:"
        ],
        "3": [
          "(H == 1)"
        ],
        "4": [
          "count+=m"
        ],
        "5": [
          "m*=2",
          "H=int(H/2)"
        ],
        "6": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    H = '2'\n    count=0\n    m=1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while H:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (H == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count+=m\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    m*=2\n    H=int(H/2)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    }
  },
  "p02801": {
    "s831693546": {
      "code": "c = 'a'\nz='abcdefghijklmnopqrstuvwxy'\nprint(z[z.index(c)+1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "z": "'abcdefghijklmnopqrstuvwxy'"
            },
            {
              "c": "'a'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "c = 'a'",
          "z='abcdefghijklmnopqrstuvwxy'",
          "print(z[z.index(c)+1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    c = 'a'\n    z='abcdefghijklmnopqrstuvwxy'\n    print(z[z.index(c)+1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s517853078": {
      "code": "c = 'a'\nprint(c+1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "c": "'a'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "c = 'a'",
          "print(c+1)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    c = 'a'\n    print(c+1)\nNext:\n    <END>\n"
    }
  },
  "p02812": {
    "s587287794": {
      "code": "N = '10'\nS = ['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']\nx=count=0\nsearch_word=[\"A\",\"B\",\"C\"]\nfor i in S:\n  if S[x]==search_word[0] and S[x+1]==search_word[1] and S[x+2]==search_word[2]:\n    count+=1\n  x+=1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        8,
        5,
        6,
        8,
        5,
        6,
        8,
        5,
        6,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        8,
        5,
        6,
        8,
        5,
        6,
        8,
        5,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "0"
            },
            {
              "x": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "0"
            },
            {
              "x": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "0"
            },
            {
              "x": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "0"
            },
            {
              "x": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "0"
            },
            {
              "x": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "0"
            },
            {
              "x": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "5"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "1"
            },
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "7"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "8"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "8"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "8"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "9"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "9"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "9"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "'10'"
            },
            {
              "search_word": "['A', 'B', 'C']"
            },
            {
              "S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "count": "2"
            },
            {
              "x": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = '10'",
          "S = ['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']",
          "x=count=0",
          "search_word=[\"A\",\"B\",\"C\"]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> S"
        ],
        "3": [
          "(S[x] == search_word[0] and S[x + 1] == search_word[1] and (S[x + 2] == search_word[2]))"
        ],
        "4": [
          "count+=1"
        ],
        "5": [
          "x+=1"
        ],
        "6": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '10'\n    S = ['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']\n    x=count=0\n    search_word=[\"A\",\"B\",\"C\"]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (S[x] == search_word[0] and S[x + 1] == search_word[1] and (S[x + 2] == search_word[2]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count+=1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    x+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s450417141": {
      "code": "n = 10\ns = 'ZABCDBABCQ'\nans = 0\nfor i in range(n):\n    if s[i] == 'A':\n        if s[i+1] == 'B':\n            if s[i+2] == 'C':\n                ans += 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        6,
        7,
        8,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        7,
        8,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "s = 'ZABCDBABCQ'",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(s[i] == 'A')"
        ],
        "4": [
          "(s[i + 1] == 'B')"
        ],
        "5": [
          "(s[i + 2] == 'C')"
        ],
        "6": [
          "ans += 1"
        ],
        "7": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = 'ZABCDBABCQ'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (s[i] == 'A')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (s[i + 1] == 'B')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    (s[i + 2] == 'C')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s837021110": {
      "code": "n = 10\ns = 'ZABCDBABCQ'\na = [str(c) for c in s]\nc = 0\nfor i in range(n):\n  if a[i] == 'A' and a[i+1] == 'B' and a[i+2] == 'C':\n    c +=1\n  else:\n    continue\nprint(c)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        5,
        6,
        7,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        7,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "a": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
            },
            {
              "c": "2"
            },
            {
              "n": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "s = 'ZABCDBABCQ'",
          "a = [str(c) for c in s]",
          "c = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(a[i] == 'A' and a[i + 1] == 'B' and (a[i + 2] == 'C'))"
        ],
        "4": [
          "c +=1"
        ],
        "5": [
          "print(c)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = 'ZABCDBABCQ'\n    a = [str(c) for c in s]\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a[i] == 'A' and a[i + 1] == 'B' and (a[i + 2] == 'C'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    c +=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(c)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s381420226": {
      "code": "n = 10\ns = 'ZABCDBABCQ'\ncount=0\ni=0\nwhile i<=n-2:\n    if s[i]==\"A\":\n        if s[i+1]==\"B\" and s[i+2]==\"C\":\n            count+=1\n            i+=3\n        else: i+=1\n    else: i+=1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        11,
        5,
        6,
        7,
        8,
        9,
        5,
        6,
        11,
        5,
        6,
        11,
        5,
        6,
        7,
        8,
        9,
        5,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "0"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "0"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "0"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "1"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "1"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "1"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "1"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "4"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "4"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "4"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "5"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "5"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "5"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "6"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "6"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "6"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "6"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "9"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "9"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "i": "9"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "s = 'ZABCDBABCQ'",
          "count=0",
          "i=0"
        ],
        "2": [
          "while i<=n-2:"
        ],
        "3": [
          "(s[i] == 'A')"
        ],
        "4": [
          "(s[i + 1] == 'B' and s[i + 2] == 'C')"
        ],
        "5": [
          "count+=1",
          "i+=3"
        ],
        "6": [
          "else: i+=1"
        ],
        "7": [
          "else: i+=1"
        ],
        "8": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 8
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = 'ZABCDBABCQ'\n    count=0\n    i=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i<=n-2:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (s[i] == 'A')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (s[i + 1] == 'B' and s[i + 2] == 'C')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    count+=1\n    i+=3\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    else: i+=1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    else: i+=1\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s028286698": {
      "code": "n = 10\ns = 'ZABCDBABCQ'\nans = 0\nfor i in range(n):\n    if s[i] == 'A' and s[i+1] == 'B' and s[i+2] == 'C':\n        ans += 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "1"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "ans": "2"
            },
            {
              "n": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "s = 'ZABCDBABCQ'",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'C'))"
        ],
        "4": [
          "ans += 1"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = 'ZABCDBABCQ'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'C'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s888088206": {
      "code": "n = 10\ns = 'ZABCDBABCQ'\ncount = 0\nfor i in range(n):\n    if s[i] == 'A' and s[i + 1] == 'B' and s[i + 2] == 'C':\n        count += 1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "n": "10"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "s = 'ZABCDBABCQ'",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'C'))"
        ],
        "4": [
          "count += 1"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = 'ZABCDBABCQ'\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'C'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s635218321": {
      "code": "n = 10\ns = 'ZABCDBABCQ'\ncount=0\nfor i in range(len(n)-2):\n  if s[i]==\"A\" and s[i+1]==\"B\" and s[i+2]==\"C\":\n    count+=1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "10"
            },
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "10"
            },
            {
              "s": "'ZABCDBABCQ'"
            },
            {
              "count": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "s = 'ZABCDBABCQ'",
          "count=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(n) - 2)"
        ],
        "3": [
          "(s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'C'))"
        ],
        "4": [
          "count+=1"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = 'ZABCDBABCQ'\n    count=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(n) - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'C'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    },
    "s601711453": {
      "code": "N = '10'\nS = 'ZABCDBABCQ'\nans = 0\nfor i in range(N - 2):\n    if S[i:i+3] == 'ABC':\n       ans += 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'10'"
            },
            {
              "S": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'10'"
            },
            {
              "S": "'ZABCDBABCQ'"
            },
            {
              "ans": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '10'",
          "S = 'ZABCDBABCQ'",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N - 2)"
        ],
        "3": [
          "(S[i:i + 3] == 'ABC')"
        ],
        "4": [
          "ans += 1"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '10'\n    S = 'ZABCDBABCQ'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i:i + 3] == 'ABC')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p02813": {
    "s201219836": {
      "code": "from itertools import permutations\nN = 3\nP = [1, 3, 2]\nQ = [3, 1, 2]\ndata = P.copy()\ndata.sort()\nfor idx, i in enumerate(list(permutations(data, N))):\n    if list(i) == P:\n        a = idx\n    if list(i) == Q:\n        b = idx\nprint(abs(a-b))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        7,
        8,
        9,
        10,
        7,
        8,
        10,
        7,
        8,
        10,
        7,
        8,
        10,
        11,
        7,
        8,
        10,
        7,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 7,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from itertools import permutations",
          "N = 3",
          "P = [1, 3, 2]",
          "Q = [3, 1, 2]",
          "data = P.copy()",
          "data.sort()"
        ],
        "2": [
          "idx <- index\n    i <- iterator"
        ],
        "3": [
          "(list(i) == P)"
        ],
        "4": [
          "a = idx"
        ],
        "5": [
          "(list(i) == Q)"
        ],
        "6": [
          "b = idx"
        ],
        "7": [
          "print(abs(a-b))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from itertools import permutations\n    N = 3\n    P = [1, 3, 2]\n    Q = [3, 1, 2]\n    data = P.copy()\n    data.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    idx <- index\n    i <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (list(i) == P)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a = idx\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (list(i) == Q)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    b = idx\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(abs(a-b))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s541256053": {
      "code": "import itertools\nn = 3\np = (1, 3, 2)\nq = (3, 1, 2)\nlists = list(itertools.permutations(list(range(1, n+1)), n))\nprint(abs(lists.index(p) - lists.index()))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('index expected at least 1 argument, got 0')"
      },
      "cfg_block_statements": {
        "1": [
          "import itertools",
          "n = 3",
          "p = (1, 3, 2)",
          "q = (3, 1, 2)",
          "lists = list(itertools.permutations(list(range(1, n+1)), n))",
          "print(abs(lists.index(p) - lists.index()))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import itertools\n    n = 3\n    p = (1, 3, 2)\n    q = (3, 1, 2)\n    lists = list(itertools.permutations(list(range(1, n+1)), n))\n    print(abs(lists.index(p) - lists.index()))\nNext:\n    <END>\n"
    }
  },
  "p02819": {
    "s780868263": {
      "code": "from sympy import nextprime\nX = 20\nprint(nextprime(X))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from sympy import nextprime",
          "X = 20",
          "print(nextprime(X))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    from sympy import nextprime\n    X = 20\n    print(nextprime(X))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02831": {
    "s738677890": {
      "code": "import math\nn = '2 3'\na = int(n.split(\" \")[0])\nb = int(n.split(\" \")[1])\nlcm = int((a * b / math.gcd(a, b)))\nprint(lcm)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = '2 3'",
          "a = int(n.split(\" \")[0])",
          "b = int(n.split(\" \")[1])",
          "lcm = int((a * b / math.gcd(a, b)))",
          "print(lcm)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = '2 3'\n    a = int(n.split(\" \")[0])\n    b = int(n.split(\" \")[1])\n    lcm = int((a * b / math.gcd(a, b)))\n    print(lcm)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02832": {
    "s283103580": {
      "code": "n = 3\na = [2, 1, 2]\nk = 0\nfor _ in range(n):\n  if a[k] == k+1:\n    k += 1\n  else:\n    del a[k]\n  print(a, k)\nif k == 0:\n  print(-1)\nelse:\n  print(n - k)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        4,
        5,
        6,
        9,
        4,
        5,
        6,
        9,
        4,
        10,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[2, 1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[2, 1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[2, 1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "2"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "n": "3"
            },
            {
              "k": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "a = [2, 1, 2]",
          "k = 0"
        ],
        "2": [
          "iterator -> _, Iterate Over -> range(n)"
        ],
        "3": [
          "(a[k] == k + 1)"
        ],
        "4": [
          "k += 1"
        ],
        "5": [
          "del a[k]"
        ],
        "6": [
          "print(a, k)"
        ],
        "7": [
          "(k == 0)"
        ],
        "8": [
          "print(-1)"
        ],
        "9": [
          "print(n - k)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [2, 1, 2]\n    k = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> _, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (a[k] == k + 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    k += 1\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    del a[k]\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(a, k)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (k == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(n - k)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02833": {
    "s676665405": {
      "code": "n = 12\nif n % 2 == 1:\n    print(0)\nelse:\n    flg = 0\n    ans = 0\n    while n >= 5:\n        if flg == 0:\n            ans += n // 10\n            n //= 10\n            flg = 1\n        else:\n            ans += n // 5\n            n //= 5\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            11
          ]
        },
        "7": {
          "range": [
            13,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        7,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "12"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "n": "12"
            },
            {
              "flg": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "0"
            },
            {
              "n": "12"
            },
            {
              "flg": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "0"
            },
            {
              "n": "12"
            },
            {
              "flg": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "1"
            },
            {
              "flg": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "1"
            },
            {
              "flg": "1"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "1"
            },
            {
              "flg": "1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 12",
          "(n % 2 == 1)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "flg = 0",
          "ans = 0"
        ],
        "4": [
          "while n >= 5:"
        ],
        "5": [
          "(flg == 0)"
        ],
        "6": [
          "ans += n // 10",
          "n //= 10",
          "flg = 1"
        ],
        "7": [
          "ans += n // 5",
          "n //= 5"
        ],
        "8": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 12\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    Go to Block: 8\n\nBlock 3:\nStatement:\n    flg = 0\n    ans = 0\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    while n >= 5:\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (flg == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans += n // 10\n    n //= 10\n    flg = 1\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    ans += n // 5\n    n //= 5\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s849791740": {
      "code": "import numpy as np\nnum = 12\nn = int(np.log10(num))\na =  n * (num // 10 ** n)\nprint(a)\nfor i in range(int(n - 2), 1, -1):\n    a += i * 9\nprint(a)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "num = 12",
          "n = int(np.log10(num))",
          "a =  n * (num // 10 ** n)",
          "print(a)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(int(n - 2), 1, -1)"
        ],
        "3": [
          "a += i * 9"
        ],
        "4": [
          "print(a)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    num = 12\n    n = int(np.log10(num))\n    a =  n * (num // 10 ** n)\n    print(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(int(n - 2), 1, -1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += i * 9\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(a)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02843": {
    "s031680277": {
      "code": "x = '615'\nif int(x) < 100:\n    print(0)\n    return\nif 5 * int(x[0:-2]) >= int(x[-2:]):\n    print(1)\nelse:\n    print(0)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'615'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "'615'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "x": "'615'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "x = '615'",
          "(int(x) < 100)"
        ],
        "2": [
          "print(0)",
          "return"
        ],
        "3": [
          "(5 * int(x[0:-2]) >= int(x[-2:]))"
        ],
        "4": [
          "print(1)"
        ],
        "5": [
          "print(0)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '615'\n    (int(x) < 100)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    return\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (5 * int(x[0:-2]) >= int(x[-2:]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(0)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s849806190": {
      "code": "X = 615\nDP = [0]*100001\nDP[100] = 1\nDP[101] = 1\nDP[102] = 1\nDP[103] = 1\nDP[104] = 1\nDP[105] = 1\nfor i in range(106, 100001):\n    if any(DP[i-100], DP[i-101], DP[i-102], DP[i-103], DP[i-104], DP[i-105]):\n        DP[i] = 1\nprint(DP[W])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        },
        "2": {
          "range": [
            9,
            9
          ]
        },
        "3": {
          "range": [
            10,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X": "615"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X": "615"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "X": "615"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('any() takes exactly one argument (6 given)')"
      },
      "cfg_block_statements": {
        "1": [
          "X = 615",
          "DP = [0]*100001",
          "DP[100] = 1",
          "DP[101] = 1",
          "DP[102] = 1",
          "DP[103] = 1",
          "DP[104] = 1",
          "DP[105] = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(106, 100001)"
        ],
        "3": [
          "(any(DP[i - 100], DP[i - 101], DP[i - 102], DP[i - 103], DP[i - 104], DP[i - 105]))"
        ],
        "4": [
          "DP[i] = 1"
        ],
        "5": [
          "print(DP[W])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    X = 615\n    DP = [0]*100001\n    DP[100] = 1\n    DP[101] = 1\n    DP[102] = 1\n    DP[103] = 1\n    DP[104] = 1\n    DP[105] = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(106, 100001)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (any(DP[i - 100], DP[i - 101], DP[i - 102], DP[i - 103], DP[i - 104], DP[i - 105]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    DP[i] = 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(DP[W])\nNext:\n    <END>\n"
    }
  },
  "p02845": {
    "s384464686": {
      "code": "N = 6\nA = [0, 1, 2, 3, 4, 5]\nMOD = 10**9 + 7\nans = 1\nnum_color = [-1, -1, -1]\nfor a in A:\n  ans = (ans * num_color.count(a-1)) % MOD\n  num_color[num_color.index(a-1)] = a\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "1"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[-1, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[-1, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[0, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[0, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[1, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[1, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[2, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[2, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[3, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[3, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[4, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[4, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[5, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[5, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "3"
            },
            {
              "N": "6"
            },
            {
              "num_color": "[5, -1, -1]"
            },
            {
              "A": "[0, 1, 2, 3, 4, 5]"
            },
            {
              "MOD": "1000000007"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "A = [0, 1, 2, 3, 4, 5]",
          "MOD = 10**9 + 7",
          "ans = 1",
          "num_color = [-1, -1, -1]"
        ],
        "2": [
          "iterator -> a, Iterate Over -> A"
        ],
        "3": [
          "ans = (ans * num_color.count(a-1)) % MOD",
          "num_color[num_color.index(a-1)] = a"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    A = [0, 1, 2, 3, 4, 5]\n    MOD = 10**9 + 7\n    ans = 1\n    num_color = [-1, -1, -1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = (ans * num_color.count(a-1)) % MOD\n    num_color[num_color.index(a-1)] = a\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s022344562": {
      "code": "import sys,math,collections,itertools\ninput = sys.stdin.readline\nN = 6\nA = [0, 1, 2, 3, 4, 5]\nX = [0,0,0]\nm = 10**9+7\npatern = 1\nfor a in A:\n    patern *= X.count(a)\n    patern %= m\n    X[X.index(a)]+=1\nprint(patern % m)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        8,
        9,
        10,
        11,
        8,
        9,
        10,
        11,
        8,
        9,
        10,
        11,
        8,
        9,
        10,
        11,
        8,
        9,
        10,
        11,
        8,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys,math,collections,itertools",
          "input = sys.stdin.readline",
          "N = 6",
          "A = [0, 1, 2, 3, 4, 5]",
          "X = [0,0,0]",
          "m = 10**9+7",
          "patern = 1"
        ],
        "2": [
          "iterator -> a, Iterate Over -> A"
        ],
        "3": [
          "patern *= X.count(a)",
          "patern %= m",
          "X[X.index(a)]+=1"
        ],
        "4": [
          "print(patern % m)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys,math,collections,itertools\n    input = sys.stdin.readline\n    N = 6\n    A = [0, 1, 2, 3, 4, 5]\n    X = [0,0,0]\n    m = 10**9+7\n    patern = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    patern *= X.count(a)\n    patern %= m\n    X[X.index(a)]+=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(patern % m)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02847": {
    "s532175207": {
      "code": "s = 'SAT'\nif s == 'SUN':\n    print('7')\nif s == 'SAT':\n    print('1')\nif s == 'FRI':\n    print('2')\nif s == 'THU':\n    print('3')\nif s == 'WED':\n    print('4')\nif s == 'TUE':\n    print('5')\nif s == 'MON':\n    print('6')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            8,
            8
          ]
        },
        "8": {
          "range": [
            9,
            9
          ]
        },
        "9": {
          "range": [
            10,
            10
          ]
        },
        "10": {
          "range": [
            11,
            11
          ]
        },
        "11": {
          "range": [
            12,
            12
          ]
        },
        "12": {
          "range": [
            13,
            13
          ]
        },
        "13": {
          "range": [
            14,
            14
          ]
        },
        "14": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        4,
        5,
        6,
        8,
        10,
        12,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'SAT'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'SAT'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'SAT'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'SAT'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "'SAT'"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "s": "'SAT'"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "s": "'SAT'"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "s": "'SAT'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'SAT'",
          "(s == 'SUN')"
        ],
        "2": [
          "print('7')"
        ],
        "3": [
          "(s == 'SAT')"
        ],
        "4": [
          "print('1')"
        ],
        "5": [
          "(s == 'FRI')"
        ],
        "6": [
          "print('2')"
        ],
        "7": [
          "(s == 'THU')"
        ],
        "8": [
          "print('3')"
        ],
        "9": [
          "(s == 'WED')"
        ],
        "10": [
          "print('4')"
        ],
        "11": [
          "(s == 'TUE')"
        ],
        "12": [
          "print('5')"
        ],
        "13": [
          "(s == 'MON')"
        ],
        "14": [
          "print('6')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": "<END>"
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'SAT'\n    (s == 'SUN')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('7')\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (s == 'SAT')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('1')\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (s == 'FRI')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('2')\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (s == 'THU')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('3')\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (s == 'WED')\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('4')\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (s == 'TUE')\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print('5')\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (s == 'MON')\nNext:\n    If True: Go to Block 14\n    <END>\nBlock 14:\nStatement:\n    print('6')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s095798033": {
      "code": "days = ['SUN', 'MON', 'TUE', 'WED', 'THU',' FRI', 'SAT']\nS = 'SAT'\nprint(7 - days.index(S))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'SAT'"
            },
            {
              "days": "['SUN', 'MON', 'TUE', 'WED', 'THU', ' FRI', 'SAT']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "days = ['SUN', 'MON', 'TUE', 'WED', 'THU',' FRI', 'SAT']",
          "S = 'SAT'",
          "print(7 - days.index(S))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    days = ['SUN', 'MON', 'TUE', 'WED', 'THU',' FRI', 'SAT']\n    S = 'SAT'\n    print(7 - days.index(S))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s789940810": {
      "code": "days=['SUN','MON','TUE','WED','THU','FRI','SAT']\nin_day = 'SAT'\ninx=days.index(in_day)\nout_day=7-inx\nprint(days[out_day])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "inx": "6"
            },
            {
              "out_day": "1"
            },
            {
              "in_day": "'SAT'"
            },
            {
              "days": "['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "days=['SUN','MON','TUE','WED','THU','FRI','SAT']",
          "in_day = 'SAT'",
          "inx=days.index(in_day)",
          "out_day=7-inx",
          "print(days[out_day])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    days=['SUN','MON','TUE','WED','THU','FRI','SAT']\n    in_day = 'SAT'\n    inx=days.index(in_day)\n    out_day=7-inx\n    print(days[out_day])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s463322222": {
      "code": "S = 'SAT'\na={\"SUN\":7,\"MON\":6,\"TUE\":5,\"WED\":4,\"THU\":3,\"FRI\":2,\"SAT\":1}\nprint(a(S))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'SAT'"
            },
            {
              "a": "{'SUN': 7, 'MON': 6, 'TUE': 5, 'WED': 4, 'THU': 3, 'FRI': 2, 'SAT': 1}"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'dict' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'SAT'",
          "a={\"SUN\":7,\"MON\":6,\"TUE\":5,\"WED\":4,\"THU\":3,\"FRI\":2,\"SAT\":1}",
          "print(a(S))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'SAT'\n    a={\"SUN\":7,\"MON\":6,\"TUE\":5,\"WED\":4,\"THU\":3,\"FRI\":2,\"SAT\":1}\n    print(a(S))\nNext:\n    <END>\n"
    }
  },
  "p02848": {
    "s322568019": {
      "code": "arb='ABCDEFDHIJKLMNOPQRSTUVWXYZ'\nN = 2\nS = 'ABCXYZ'\nans =''\nfor i in range(len(S)):\n    if arb.index(S[i]) + N +1 <= len(arb):\n        ans += arb[arb.index(S[i])+N]\n    else:\n        ans += arb[-len(arb) + arb.index(S[i]) + N]\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'C'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'C'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'C'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CD'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CD'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CD'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDE'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDE'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDE'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZ'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZ'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZ'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZA'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZA'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZA'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZAB'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZAB'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "S": "'ABCXYZ'"
            },
            {
              "N": "2"
            },
            {
              "arb": "'ABCDEFDHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "ans": "'CDEZAB'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "arb='ABCDEFDHIJKLMNOPQRSTUVWXYZ'",
          "N = 2",
          "S = 'ABCXYZ'",
          "ans =''"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "(arb.index(S[i]) + N + 1 <= len(arb))"
        ],
        "4": [
          "ans += arb[arb.index(S[i])+N]"
        ],
        "5": [
          "ans += arb[-len(arb) + arb.index(S[i]) + N]"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    arb='ABCDEFDHIJKLMNOPQRSTUVWXYZ'\n    N = 2\n    S = 'ABCXYZ'\n    ans =''\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (arb.index(S[i]) + N + 1 <= len(arb))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += arb[arb.index(S[i])+N]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans += arb[-len(arb) + arb.index(S[i]) + N]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s259059489": {
      "code": "input_number = 2\ninput_str = 'ABCXYZ'\nabc_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nabc_list = abc_list + abc_list\nfor i in len(input_str):\n    output_str += abc_list[abc_list.index(input_str[i]) + input_number]",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "abc_list": "'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "input_str": "'ABCXYZ'"
            },
            {
              "input_number": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "abc_list": "'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'"
            },
            {
              "input_str": "'ABCXYZ'"
            },
            {
              "input_number": "2"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "input_number = 2",
          "input_str = 'ABCXYZ'",
          "abc_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
          "abc_list = abc_list + abc_list"
        ],
        "2": [
          "iterator -> i, Iterate Over -> len(input_str)"
        ],
        "3": [
          "output_str += abc_list[abc_list.index(input_str[i]) + input_number]"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    input_number = 2\n    input_str = 'ABCXYZ'\n    abc_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    abc_list = abc_list + abc_list\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(input_str)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    output_str += abc_list[abc_list.index(input_str[i]) + input_number]\nNext:\n    Go to Block: 2\n"
    },
    "s176807303": {
      "code": "N = 2\nS = 'ABCXYZ'\nans = \"\"\nfor s in S:\n  ans += chr((ord(S) + N - 65)%26 + 65)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "S": "'ABCXYZ'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "S": "'ABCXYZ'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "S": "'ABCXYZ'"
            },
            {
              "ans": "''"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('ord() expected a character, but string of length 6 found')"
      },
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "S = 'ABCXYZ'",
          "ans = \"\""
        ],
        "2": [
          "iterator -> s, Iterate Over -> S"
        ],
        "3": [
          "ans += chr((ord(S) + N - 65)%26 + 65)"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    S = 'ABCXYZ'\n    ans = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += chr((ord(S) + N - 65)%26 + 65)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p02860": {
    "s767139927": {
      "code": "N = 6\nS = 'abcabc'\nn = 0\nl = [S[0]]\nif N > 1:\n  for i in range(N):\n    if not S[i+1] in l:\n      l.append(S[i + 1])\n    else:\n      n = i + 1\n      break\n  if S[0:n] == S[n:]:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        },
        "9": {
          "range": [
            17,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        10,
        11,
        12,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b', 'c']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b', 'c']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b', 'c']"
            },
            {
              "N": "6"
            },
            {
              "n": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b', 'c']"
            },
            {
              "N": "6"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b', 'c']"
            },
            {
              "N": "6"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "S": "'abcabc'"
            },
            {
              "l": "['a', 'b', 'c']"
            },
            {
              "N": "6"
            },
            {
              "n": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "S = 'abcabc'",
          "n = 0",
          "l = [S[0]]",
          "(N > 1)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(not S[i + 1] in l)"
        ],
        "4": [
          "l.append(S[i + 1])"
        ],
        "5": [
          "n = i + 1"
        ],
        "6": [
          "(S[0:n] == S[n:])"
        ],
        "7": [
          "print(\"Yes\")"
        ],
        "8": [
          "print(\"No\")"
        ],
        "9": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 9
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    n = 0\n    l = [S[0]]\n    (N > 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 9\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (not S[i + 1] in l)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    l.append(S[i + 1])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    n = i + 1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    (S[0:n] == S[n:])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s462057999": {
      "code": "a = 6\nb = ['a', 'b', 'c', 'a', 'b', 'c']\ncount=0\nif(a%2==1):\n  print('No')\nelse:\n  for i in range(a/2):\n    if(b[i]==b[i+a/2]):\n      count+=1\n  if(count==a/2):\n    print('Yes')\n  else:\n    print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "['a', 'b', 'c', 'a', 'b', 'c']"
            },
            {
              "a": "6"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "b": "['a', 'b', 'c', 'a', 'b', 'c']"
            },
            {
              "a": "6"
            },
            {
              "count": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = 6",
          "b = ['a', 'b', 'c', 'a', 'b', 'c']",
          "count=0",
          "(a % 2 == 1)"
        ],
        "2": [
          "print('No')"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(a / 2)"
        ],
        "4": [
          "(b[i] == b[i + a / 2])"
        ],
        "5": [
          "count+=1"
        ],
        "6": [
          "(count == a / 2)"
        ],
        "7": [
          "print('Yes')"
        ],
        "8": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 6
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 3
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 6\n    b = ['a', 'b', 'c', 'a', 'b', 'c']\n    count=0\n    (a % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(a / 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (b[i] == b[i + a / 2])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    count+=1\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    (count == a / 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    },
    "s434283937": {
      "code": "N = 6\nS = 'abcabc'\nif N % 2 != 0:\n    print(\"No\")\nif S[0:N/2] * 2 == S:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "6"
            },
            {
              "S": "'abcabc'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "S": "'abcabc'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
      },
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "S = 'abcabc'",
          "(N % 2 != 0)"
        ],
        "2": [
          "print(\"No\")"
        ],
        "3": [
          "(S[0:N / 2] * 2 == S)"
        ],
        "4": [
          "print(\"Yes\")"
        ],
        "5": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    (N % 2 != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (S[0:N / 2] * 2 == S)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s002239399": {
      "code": "N = 6\nS = 'abcabc'\nif N%2 == 1: print(\"No\")\nelif S[:N/2] == S[N/2:]:print(\"Yes\")\nelse: print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "6"
            },
            {
              "S": "'abcabc'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "S": "'abcabc'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
      },
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "S = 'abcabc'",
          "(N % 2 == 1)"
        ],
        "2": [
          "(N % 2 == 1)"
        ],
        "3": [
          "(S[:N / 2] == S[N / 2:])"
        ],
        "4": [
          "else: print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    (N % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    (N % 2 == 1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (S[:N / 2] == S[N / 2:])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    else: print(\"No\")\nNext:\n    <END>\n"
    },
    "s319830782": {
      "code": "n = 6\ns = 'abcabc'\nn /= 2\nif s[:n] == s[n:]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'abcabc'"
            },
            {
              "n": "3.0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "s = 'abcabc'",
          "n /= 2",
          "(s[:n] == s[n:])"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    s = 'abcabc'\n    n /= 2\n    (s[:n] == s[n:])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s753917723": {
      "code": "n = 6\ns = 'abcabc'\nif n % 2 == 1:\n  print(\"No\")\nelse:\n  d = n/2\n  if s[:d] == s[d:]:\n    print(\"Yes\")\n  else:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'abcabc'"
            },
            {
              "n": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'abcabc'"
            },
            {
              "n": "6"
            },
            {
              "d": "3.0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "s = 'abcabc'",
          "(n % 2 == 1)"
        ],
        "2": [
          "print(\"No\")"
        ],
        "3": [
          "d = n/2",
          "(s[:d] == s[d:])"
        ],
        "4": [
          "print(\"Yes\")"
        ],
        "5": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    s = 'abcabc'\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    d = n/2\n    (s[:d] == s[d:])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s402844391": {
      "code": "import sys\nn = 6\ns = 'abcabc'\nif n == 1:\n  print(\"No\")\n  sys.exit()\nn = n / 2\nif s[:n]  == s[n:]:\n    print(\"Yes\")\nelse:\n    print (\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
      },
      "cfg_block_statements": {
        "1": [
          "import sys",
          "n = 6",
          "s = 'abcabc'",
          "(n == 1)"
        ],
        "2": [
          "print(\"No\")",
          "sys.exit()"
        ],
        "3": [
          "n = n / 2",
          "(s[:n] == s[n:])"
        ],
        "4": [
          "print(\"Yes\")"
        ],
        "5": [
          "print (\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    n = 6\n    s = 'abcabc'\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    n = n / 2\n    (s[:n] == s[n:])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print (\"No\")\nNext:\n    <END>\n"
    },
    "s124080396": {
      "code": "N = 6\nS = 'abcabc'\nif (N%2!=0):\n    print('No')\nelse:\n    a1=S[:N/2]\n    a2=S[N/2:]\n    if (a1==a2):\n        print('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "6"
            },
            {
              "S": "'abcabc'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "S": "'abcabc'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
      },
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "S = 'abcabc'",
          "(N % 2 != 0)"
        ],
        "2": [
          "print('No')"
        ],
        "3": [
          "a1=S[:N/2]",
          "a2=S[N/2:]",
          "(a1 == a2)"
        ],
        "4": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    (N % 2 != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    a1=S[:N/2]\n    a2=S[N/2:]\n    (a1 == a2)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    print('Yes')\nNext:\n    <END>\n"
    }
  },
  "p02881": {
    "s529344612": {
      "code": "import sympy\nn = 10\na=sympy.divisors(n)\nb=sorted(a,reverse=True)\nc=[]\nfor i in range(len(a)//2):\n    d=a[i]-1+b[i]-1\n    c.append(d)\nprint(min(c))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sympy",
          "n = 10",
          "a=sympy.divisors(n)",
          "b=sorted(a,reverse=True)",
          "c=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(a) // 2)"
        ],
        "3": [
          "d=a[i]-1+b[i]-1",
          "c.append(d)"
        ],
        "4": [
          "print(min(c))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sympy\n    n = 10\n    a=sympy.divisors(n)\n    b=sorted(a,reverse=True)\n    c=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(a) // 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    d=a[i]-1+b[i]-1\n    c.append(d)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(c))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s634064371": {
      "code": "N = 10\nfor i in range(int(N**0.5), 1, -1):\n    if (N / i).is_integer():\n        a = N // i\n        b = N // a\n        break\nprint(a+b-2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "10"
            },
            {
              "a": "5"
            },
            {
              "b": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "10"
            },
            {
              "a": "5"
            },
            {
              "b": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 10"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(int(N ** 0.5), 1, -1)"
        ],
        "3": [
          "((N / i).is_integer())"
        ],
        "4": [
          "a = N // i",
          "b = N // a"
        ],
        "5": [
          "print(a+b-2)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(int(N ** 0.5), 1, -1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ((N / i).is_integer())\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a = N // i\n    b = N // a\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(a+b-2)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s409239758": {
      "code": "N = 10\nlist=[]\nfor i in range(1,N//2):\n  if N%i==0:\n    list.append(i+(N/i))\nif min(list)==N:\n  print(N-1)\nelse:\n  print(int(min(list)-2))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        3,
        4,
        3,
        6,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": [
            {
              "N": "10"
            },
            {
              "list": "[11.0, 7.0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "10"
            },
            {
              "list": "[11.0, 7.0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "10"
            },
            {
              "list": "[11.0, 7.0]"
            }
          ]
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 7,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 10",
          "list=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, N // 2)"
        ],
        "3": [
          "(N % i == 0)"
        ],
        "4": [
          "list.append(i+(N/i))"
        ],
        "5": [
          "(min(list) == N)"
        ],
        "6": [
          "print(N-1)"
        ],
        "7": [
          "print(int(min(list)-2))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    list=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N // 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    list.append(i+(N/i))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (min(list) == N)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(N-1)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(int(min(list)-2))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s129502241": {
      "code": "n = 10\nm = int(n / 2)\ndivs = []\nfor i in range(m):\n  if i == 0:\n    continue\n  mod = n % i\n  if mod == 0:\n    an = int(n/i)\n    if i <= an:\n      divs.append(i)\n      divs.append(an)\n    else:\n      break\nmax = len(divs) -1\nprint(divs[max] + divs[max-1] - 2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            12
          ]
        },
        "7": {
          "range": [
            15,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        12,
        4,
        5,
        7,
        8,
        4,
        5,
        7,
        8,
        4,
        15,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 7,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "m = int(n / 2)",
          "divs = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(m)"
        ],
        "3": [
          "(i == 0)"
        ],
        "4": [
          "mod = n % i",
          "(mod == 0)"
        ],
        "5": [
          "an = int(n/i)",
          "(i <= an)"
        ],
        "6": [
          "divs.append(i)",
          "divs.append(an)"
        ],
        "7": [
          "max = len(divs) -1",
          "print(divs[max] + divs[max-1] - 2)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    m = int(n / 2)\n    divs = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(m)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    mod = n % i\n    (mod == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    an = int(n/i)\n    (i <= an)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    divs.append(i)\n    divs.append(an)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    max = len(divs) -1\n    print(divs[max] + divs[max-1] - 2)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s011420046": {
      "code": "import sys\nn = 10\nans = 10**12\nfor k in range(1,(n+1)**0.5):\n    if n%k == 0 :\n        m = n//k + k - 2\n        if ans > m:\n            ans = m\n        else:\n            print(ans)\n            sys.exit()\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            10,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "import sys",
          "n = 10",
          "ans = 10**12"
        ],
        "2": [
          "iterator -> k, Iterate Over -> range(1, (n + 1) ** 0.5)"
        ],
        "3": [
          "(n % k == 0)"
        ],
        "4": [
          "m = n//k + k - 2",
          "(ans > m)"
        ],
        "5": [
          "ans = m"
        ],
        "6": [
          "print(ans)",
          "sys.exit()"
        ],
        "7": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    n = 10\n    ans = 10**12\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(1, (n + 1) ** 0.5)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (n % k == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    m = n//k + k - 2\n    (ans > m)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    ans = m\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s388198554": {
      "code": "import numpy as np\nn = 10\nm=np.floor(np.sqrt(n))\nl=[]\nfor i in range(1,m+1,1):\n    if n%i==0:\n        a=i+(n/i)\n        l.append(a)\nc=int(min(l))\nprint(c-2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'numpy.float64' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "n = 10",
          "m=np.floor(np.sqrt(n))",
          "l=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, m + 1, 1)"
        ],
        "3": [
          "(n % i == 0)"
        ],
        "4": [
          "a=i+(n/i)",
          "l.append(a)"
        ],
        "5": [
          "c=int(min(l))",
          "print(c-2)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    n = 10\n    m=np.floor(np.sqrt(n))\n    l=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, m + 1, 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a=i+(n/i)\n    l.append(a)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    c=int(min(l))\n    print(c-2)\nNext:\n    <END>\n"
    }
  },
  "p02891": {
    "s713857410": {
      "code": "S = 'issii'\nK = 2\nN = len(S)\np = S[0]\nc = 0\nfor i in range(1,N):\n    if S[i] == p:\n        c += 1\n        p = ''\n    else:\n        p = S[i]\nans = c*K\nif S[0] == S[-1] and S[-2] != S[-1]:\n    ans += K-1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        11,
        6,
        7,
        8,
        9,
        6,
        7,
        11,
        6,
        7,
        8,
        9,
        6,
        12,
        13,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "0"
            },
            {
              "p": "'i'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "0"
            },
            {
              "p": "'i'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "0"
            },
            {
              "p": "'i'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "0"
            },
            {
              "p": "'s'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "0"
            },
            {
              "p": "'s'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "0"
            },
            {
              "p": "'s'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "1"
            },
            {
              "p": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "1"
            },
            {
              "p": "''"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "1"
            },
            {
              "p": "''"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "1"
            },
            {
              "p": "'i'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "1"
            },
            {
              "p": "'i'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "1"
            },
            {
              "p": "'i'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "2"
            },
            {
              "p": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "2"
            },
            {
              "p": "''"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "4"
            },
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "2"
            },
            {
              "p": "''"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "ans": "4"
            },
            {
              "N": "5"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "c": "2"
            },
            {
              "p": "''"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'issii'",
          "K = 2",
          "N = len(S)",
          "p = S[0]",
          "c = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, N)"
        ],
        "3": [
          "(S[i] == p)"
        ],
        "4": [
          "c += 1",
          "p = ''"
        ],
        "5": [
          "p = S[i]"
        ],
        "6": [
          "ans = c*K",
          "(S[0] == S[-1] and S[-2] != S[-1])"
        ],
        "7": [
          "ans += K-1"
        ],
        "8": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'issii'\n    K = 2\n    N = len(S)\n    p = S[0]\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (S[i] == p)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    c += 1\n    p = ''\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    p = S[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    ans = c*K\n    (S[0] == S[-1] and S[-2] != S[-1])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans += K-1\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s937264793": {
      "code": "S = 'issii'\nK = 2\na = []\nans = 0\ncount = 0\nfor i in range(len(S)-1):\n    if S[i] == S[i+1] :\n        count += 1\n    else:\n        if count!=0:\n            ans += (count+1)//2\n            a.append(count+1)\n            count = 0\nif count !=0:\n    ans += (count+1)//2 \nans = ans*K\na.append(0)\nif (count+1)%2==1 and a[0]%2 == 1 and S[0]== S[1] and S[0] == S[len(S)-1]:\n    ans+=K-1\nif S[0]!= S[1] and (count+1)%2 ==1 and  S[0] == S[len(S)-1]:\n    ans+=K-1\nif len(S) == 1:\n    ans = K//2\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        },
        "9": {
          "range": [
            16,
            18
          ]
        },
        "10": {
          "range": [
            19,
            19
          ]
        },
        "11": {
          "range": [
            20,
            20
          ]
        },
        "12": {
          "range": [
            21,
            21
          ]
        },
        "13": {
          "range": [
            22,
            22
          ]
        },
        "14": {
          "range": [
            23,
            23
          ]
        },
        "15": {
          "range": [
            24,
            24
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        6,
        7,
        8,
        6,
        7,
        10,
        11,
        12,
        13,
        6,
        7,
        8,
        6,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        24
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "0"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "1"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "1"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "0"
            },
            {
              "a": "[2]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "1"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[2]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ans": "1"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[2]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "ans": "2"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[2]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "ans": "4"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[2, 0]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "ans": "4"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[2, 0]"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "ans": "4"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[2, 0]"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "ans": "4"
            },
            {
              "S": "'issii'"
            },
            {
              "K": "2"
            },
            {
              "count": "1"
            },
            {
              "a": "[2, 0]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'issii'",
          "K = 2",
          "a = []",
          "ans = 0",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S) - 1)"
        ],
        "3": [
          "(S[i] == S[i + 1])"
        ],
        "4": [
          "count += 1"
        ],
        "5": [
          "(count != 0)"
        ],
        "6": [
          "ans += (count+1)//2",
          "a.append(count+1)",
          "count = 0"
        ],
        "7": [
          "(count != 0)"
        ],
        "8": [
          "ans += (count+1)//2"
        ],
        "9": [
          "ans = ans*K",
          "a.append(0)",
          "((count + 1) % 2 == 1 and a[0] % 2 == 1 and (S[0] == S[1]) and (S[0] == S[len(S) - 1]))"
        ],
        "10": [
          "ans+=K-1"
        ],
        "11": [
          "(S[0] != S[1] and (count + 1) % 2 == 1 and (S[0] == S[len(S) - 1]))"
        ],
        "12": [
          "ans+=K-1"
        ],
        "13": [
          "(len(S) == 1)"
        ],
        "14": [
          "ans = K//2"
        ],
        "15": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'issii'\n    K = 2\n    a = []\n    ans = 0\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S) - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (S[i] == S[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (count != 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    ans += (count+1)//2\n    a.append(count+1)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (count != 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ans += (count+1)//2\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    ans = ans*K\n    a.append(0)\n    ((count + 1) % 2 == 1 and a[0] % 2 == 1 and (S[0] == S[1]) and (S[0] == S[len(S) - 1]))\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    ans+=K-1\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (S[0] != S[1] and (count + 1) % 2 == 1 and (S[0] == S[len(S) - 1]))\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    ans+=K-1\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (len(S) == 1)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    ans = K//2\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02897": {
    "s634117572": {
      "code": "import sys\nprint(\"Please enter a value of N\")\nn = 4\nif isinstance(n,int) == False:\n    return\nelif n < 1 or 100 < n:\n    return\nelse:\n    if n%2 == 0:\n        a = float(1/2)\n    else:\n        a = float(((n+1)/2)/n)\n    print(a)\n    return",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        6,
        9,
        10,
        13,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 8,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys",
          "print(\"Please enter a value of N\")",
          "n = 4",
          "(isinstance(n, int) == False)"
        ],
        "2": [
          "return"
        ],
        "3": [
          "(n < 1 or 100 < n)"
        ],
        "4": [
          "return"
        ],
        "5": [
          "(n % 2 == 0)"
        ],
        "6": [
          "a = float(1/2)"
        ],
        "7": [
          "a = float(((n+1)/2)/n)"
        ],
        "8": [
          "print(a)",
          "return"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    print(\"Please enter a value of N\")\n    n = 4\n    (isinstance(n, int) == False)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    return\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n < 1 or 100 < n)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    return\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    a = float(1/2)\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    a = float(((n+1)/2)/n)\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(a)\n    return\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s294131667": {
      "code": "N = '4'\nprint((N + 1) // 2 / N)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'4'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '4'",
          "print((N + 1) // 2 / N)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    print((N + 1) // 2 / N)\nNext:\n    <END>\n"
    },
    "s764180731": {
      "code": "n = '4'\nns = n % 2\nif n == 1:\n    print(1)\nelif ns == 0:\n    print(0.5)\nelse:\n    print(((n//2)+1)/n)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'4'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '4'",
          "ns = n % 2",
          "(n == 1)"
        ],
        "2": [
          "print(1)"
        ],
        "3": [
          "(ns == 0)"
        ],
        "4": [
          "print(0.5)"
        ],
        "5": [
          "print(((n//2)+1)/n)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '4'\n    ns = n % 2\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (ns == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(0.5)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(((n//2)+1)/n)\nNext:\n    <END>\n"
    },
    "s363085754": {
      "code": "a = '4'\nb = ((a-a/2)/a)\nprint(b)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'4'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '4'",
          "b = ((a-a/2)/a)",
          "print(b)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '4'\n    b = ((a-a/2)/a)\n    print(b)\nNext:\n    <END>\n"
    }
  },
  "p02909": {
    "s028328317": {
      "code": "S = 'Sunny'\nList = [\"Sunny\", \"Cloudy\", \"Rainy\"]\nres = 0\nfor i in range(3):\n  if S == List[i]:\n    res = i+1\nif res == 2:\n  res = 0\nprint(List[res])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        7,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "0"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "0"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "0"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "1"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "1"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "1"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "1"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "1"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "1"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "1"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "S": "'Sunny'"
            },
            {
              "res": "1"
            },
            {
              "List": "['Sunny', 'Cloudy', 'Rainy']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'Sunny'",
          "List = [\"Sunny\", \"Cloudy\", \"Rainy\"]",
          "res = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(3)"
        ],
        "3": [
          "(S == List[i])"
        ],
        "4": [
          "res = i+1"
        ],
        "5": [
          "(res == 2)"
        ],
        "6": [
          "res = 0"
        ],
        "7": [
          "print(List[res])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'Sunny'\n    List = [\"Sunny\", \"Cloudy\", \"Rainy\"]\n    res = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S == List[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    res = i+1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (res == 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    res = 0\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(List[res])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s912407957": {
      "code": "s = 'Sunny'\nw = ['Sunny', 'Cloudy', 'Rainy']\nprint(w[w.index(s) + 1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "w": "['Sunny', 'Cloudy', 'Rainy']"
            },
            {
              "s": "'Sunny'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'Sunny'",
          "w = ['Sunny', 'Cloudy', 'Rainy']",
          "print(w[w.index(s) + 1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'Sunny'\n    w = ['Sunny', 'Cloudy', 'Rainy']\n    print(w[w.index(s) + 1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s264480996": {
      "code": "a = [\"Sunny\", \"cloudy\", \"Rainy\"]\ns = 'Sunny'\nfor i in range(0, 3):\n  if s == a[i]:\n    print(a[(i+1)/3])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'Sunny'"
            },
            {
              "a": "['Sunny', 'cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'Sunny'"
            },
            {
              "a": "['Sunny', 'cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'Sunny'"
            },
            {
              "a": "['Sunny', 'cloudy', 'Rainy']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'Sunny'"
            },
            {
              "a": "['Sunny', 'cloudy', 'Rainy']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('list indices must be integers or slices, not float')"
      },
      "cfg_block_statements": {
        "1": [
          "a = [\"Sunny\", \"cloudy\", \"Rainy\"]",
          "s = 'Sunny'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, 3)"
        ],
        "3": [
          "(s == a[i])"
        ],
        "4": [
          "print(a[(i+1)/3])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [\"Sunny\", \"cloudy\", \"Rainy\"]\n    s = 'Sunny'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, 3)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (s == a[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(a[(i+1)/3])\nNext:\n    Go to Block: 2\n"
    }
  },
  "p02910": {
    "s128483375": {
      "code": "s = 'RUDLUDR'\nimport sys\nfor i in range(len(s)):\n    if (i + 1) % 2 == 1 and s[i] not in 'RUD':\n        print('No')\n        sys.exit(1)\n    if (i + 1) % 2 == 0 and s[i] not in 'LUD':\n        print('No')\n        sys.exit(1)\nprint('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        3,
        4,
        7,
        3,
        4,
        7,
        3,
        4,
        7,
        3,
        4,
        7,
        3,
        4,
        7,
        3,
        4,
        7,
        3,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'RUDLUDR'",
          "import sys"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "((i + 1) % 2 == 1 and s[i] not in 'RUD')"
        ],
        "4": [
          "print('No')",
          "sys.exit(1)"
        ],
        "5": [
          "((i + 1) % 2 == 0 and s[i] not in 'LUD')"
        ],
        "6": [
          "print('No')",
          "sys.exit(1)"
        ],
        "7": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'RUDLUDR'\n    import sys\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    ((i + 1) % 2 == 1 and s[i] not in 'RUD')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('No')\n    sys.exit(1)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    ((i + 1) % 2 == 0 and s[i] not in 'LUD')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print('No')\n    sys.exit(1)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s458514432": {
      "code": "s = 'RUDLUDR'\nfor i in range(s):\n  if s[i] % 2 == 0 and s[i] == 'R':\n    s = False\n    break\n  elif s[i] % 2 == 1 and s[i] == 'L':\n    s = False\n    break\nif s:\n  print('Yes')\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            10,
            10
          ]
        },
        "9": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'RUDLUDR'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'RUDLUDR'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(s)"
        ],
        "3": [
          "(s[i] % 2 == 0 and s[i] == 'R')"
        ],
        "4": [
          "s = False"
        ],
        "5": [
          "(s[i] % 2 == 1 and s[i] == 'L')"
        ],
        "6": [
          "s = False"
        ],
        "7": [
          "(s)"
        ],
        "8": [
          "print('Yes')"
        ],
        "9": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'RUDLUDR'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (s[i] % 2 == 0 and s[i] == 'R')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s = False\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (s[i] % 2 == 1 and s[i] == 'L')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    s = False\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (s)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    }
  },
  "p02916": {
    "s700084160": {
      "code": "n = 3\na = [3, 1, 2]\nb = [2, 5, 4]\nc = [3, 6]\nmanzoku=0\ndish_b=100\nfor i in range(n):\n    dish=a[i]\n    manzoku+=b[dish-1]\n    if dish==dish_b+1:\n        manzoku+=c[dish_b-1]\n    dish_b=dish\nprint(manzoku)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        7,
        8,
        9,
        10,
        12,
        7,
        8,
        9,
        10,
        11,
        12,
        7,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "manzoku": "0"
            },
            {
              "dish_b": "100"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "manzoku": "0"
            },
            {
              "dish_b": "100"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "3"
            },
            {
              "manzoku": "4"
            },
            {
              "dish_b": "100"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "3"
            },
            {
              "manzoku": "4"
            },
            {
              "dish_b": "3"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "3"
            },
            {
              "manzoku": "4"
            },
            {
              "dish_b": "3"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "1"
            },
            {
              "manzoku": "6"
            },
            {
              "dish_b": "3"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "1"
            },
            {
              "manzoku": "6"
            },
            {
              "dish_b": "1"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "1"
            },
            {
              "manzoku": "6"
            },
            {
              "dish_b": "1"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "2"
            },
            {
              "manzoku": "11"
            },
            {
              "dish_b": "1"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "2"
            },
            {
              "manzoku": "14"
            },
            {
              "dish_b": "1"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "2"
            },
            {
              "manzoku": "14"
            },
            {
              "dish_b": "2"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "2"
            },
            {
              "manzoku": "14"
            },
            {
              "dish_b": "2"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "b": "[2, 5, 4]"
            },
            {
              "n": "3"
            },
            {
              "dish": "2"
            },
            {
              "manzoku": "14"
            },
            {
              "dish_b": "2"
            },
            {
              "a": "[3, 1, 2]"
            },
            {
              "c": "[3, 6]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "a = [3, 1, 2]",
          "b = [2, 5, 4]",
          "c = [3, 6]",
          "manzoku=0",
          "dish_b=100"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "dish=a[i]",
          "manzoku+=b[dish-1]",
          "(dish == dish_b + 1)"
        ],
        "4": [
          "manzoku+=c[dish_b-1]"
        ],
        "5": [
          "dish_b=dish"
        ],
        "6": [
          "print(manzoku)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [3, 1, 2]\n    b = [2, 5, 4]\n    c = [3, 6]\n    manzoku=0\n    dish_b=100\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    dish=a[i]\n    manzoku+=b[dish-1]\n    (dish == dish_b + 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    manzoku+=c[dish_b-1]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    dish_b=dish\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(manzoku)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s906536561": {
      "code": "N = 3\nA = [3, 1, 2]\nB = [2, 5, 4]\nC = [3, 6]\nsatisfaction=0\nfor i in range(N):\n    if  i>=1:\n        if  A[i-1]+1==A[i]:\n            satisfaction+=(C[A[i]-1]+B[A[i]-1])\n        else:\n            satisfaction+=B[i]\nprint(satisfaction)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        6,
        7,
        8,
        11,
        6,
        7,
        8,
        9,
        6,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "0"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "0"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "0"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "0"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "0"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "0"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "5"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "5"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "5"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "5"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "16"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "16"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "C": "[3, 6]"
            },
            {
              "N": "3"
            },
            {
              "A": "[3, 1, 2]"
            },
            {
              "satisfaction": "16"
            },
            {
              "B": "[2, 5, 4]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "A = [3, 1, 2]",
          "B = [2, 5, 4]",
          "C = [3, 6]",
          "satisfaction=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(i >= 1)"
        ],
        "4": [
          "(A[i - 1] + 1 == A[i])"
        ],
        "5": [
          "satisfaction+=(C[A[i]-1]+B[A[i]-1])"
        ],
        "6": [
          "satisfaction+=B[i]"
        ],
        "7": [
          "print(satisfaction)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [3, 1, 2]\n    B = [2, 5, 4]\n    C = [3, 6]\n    satisfaction=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (i >= 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (A[i - 1] + 1 == A[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    satisfaction+=(C[A[i]-1]+B[A[i]-1])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    satisfaction+=B[i]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(satisfaction)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s183710404": {
      "code": "n = '3'\nA = '3 1 2'\nB = '2 5 4'\nC = '3 6'\nAs=map(int,A.split(' '))\nBs=map(int,B.split(' '))\nCs=map(int,C.split(' '))\ntotal=0\nfor i in range(0,n):\n    if As[i]-As[i-1]==1 and i!=0:\n        total=total+Cs[As[i]]\n    else:\n        total=total+Bs[As[i]]\nprint(total)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        },
        "2": {
          "range": [
            9,
            9
          ]
        },
        "3": {
          "range": [
            10,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        },
        "6": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'3'"
            },
            {
              "B": "'2 5 4'"
            },
            {
              "As": "<map object at 0x7fcde851f220>"
            },
            {
              "A": "'3 1 2'"
            },
            {
              "C": "'3 6'"
            },
            {
              "Cs": "<map object at 0x7fcde851f6d0>"
            },
            {
              "total": "0"
            },
            {
              "Bs": "<map object at 0x7fcde851d240>"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'3'"
            },
            {
              "B": "'2 5 4'"
            },
            {
              "As": "<map object at 0x7fcde851f220>"
            },
            {
              "A": "'3 1 2'"
            },
            {
              "C": "'3 6'"
            },
            {
              "Cs": "<map object at 0x7fcde851f6d0>"
            },
            {
              "total": "0"
            },
            {
              "Bs": "<map object at 0x7fcde851d240>"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '3'",
          "A = '3 1 2'",
          "B = '2 5 4'",
          "C = '3 6'",
          "As=map(int,A.split(' '))",
          "Bs=map(int,B.split(' '))",
          "Cs=map(int,C.split(' '))",
          "total=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, n)"
        ],
        "3": [
          "(As[i] - As[i - 1] == 1 and i != 0)"
        ],
        "4": [
          "total=total+Cs[As[i]]"
        ],
        "5": [
          "total=total+Bs[As[i]]"
        ],
        "6": [
          "print(total)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '3'\n    A = '3 1 2'\n    B = '2 5 4'\n    C = '3 6'\n    As=map(int,A.split(' '))\n    Bs=map(int,B.split(' '))\n    Cs=map(int,C.split(' '))\n    total=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (As[i] - As[i - 1] == 1 and i != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    total=total+Cs[As[i]]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    total=total+Bs[As[i]]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(total)\nNext:\n    <END>\n"
    }
  },
  "p02917": {
    "s040084418": {
      "code": "n = 3\nb = [2, 5]\na=[]\na.append(b[-1])\nfor i in range(1,n):\n  if i<n-1:\n    if b[-1-i]>=b[-i]:\n      a.append(b[-i])\n    else:\n      a.append(b[-1-i])\n  else:\n    if b[1]>=b[0]:\n      a.append(b[0])\n    else:\n      a.append(b[1])\nprint(sum(a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        },
        "9": {
          "range": [
            15,
            15
          ]
        },
        "10": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        5,
        6,
        12,
        13,
        5,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[5]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[5]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[5]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[5]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "a": "[5, 2]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[5, 2]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[5, 2]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "[5, 2]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "[5, 2, 2]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[5, 2, 2]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "a": "[5, 2, 2]"
            },
            {
              "b": "[2, 5]"
            },
            {
              "n": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "b = [2, 5]",
          "a=[]",
          "a.append(b[-1])"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "(i < n - 1)"
        ],
        "4": [
          "(b[-1 - i] >= b[-i])"
        ],
        "5": [
          "a.append(b[-i])"
        ],
        "6": [
          "a.append(b[-1-i])"
        ],
        "7": [
          "(b[1] >= b[0])"
        ],
        "8": [
          "a.append(b[0])"
        ],
        "9": [
          "a.append(b[1])"
        ],
        "10": [
          "print(sum(a))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    b = [2, 5]\n    a=[]\n    a.append(b[-1])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (i < n - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (b[-1 - i] >= b[-i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    a.append(b[-i])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    a.append(b[-1-i])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (b[1] >= b[0])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    a.append(b[0])\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    a.append(b[1])\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(sum(a))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s329219564": {
      "code": "N = '3'\nB = [2, 5]\nA = []\nfor i in range(N):\n  if i == 0:\n    A.append(B[0])\n  elif i == N-1:\n    A.append(B[N-2])\n  else:\n    A.append(min(B[i], B[i-1]))\nprint(sum(A))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'3'"
            },
            {
              "B": "[2, 5]"
            },
            {
              "A": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'3'"
            },
            {
              "B": "[2, 5]"
            },
            {
              "A": "[]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '3'",
          "B = [2, 5]",
          "A = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(i == 0)"
        ],
        "4": [
          "A.append(B[0])"
        ],
        "5": [
          "(i == N - 1)"
        ],
        "6": [
          "A.append(B[N-2])"
        ],
        "7": [
          "A.append(min(B[i], B[i-1]))"
        ],
        "8": [
          "print(sum(A))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 8
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '3'\n    B = [2, 5]\n    A = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    A.append(B[0])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i == N - 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    A.append(B[N-2])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    A.append(min(B[i], B[i-1]))\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(sum(A))\nNext:\n    <END>\n"
    }
  },
  "p02923": {
    "s130717284": {
      "code": "n = 5\nh = [10, 4, 8, 7, 3]\nans=0\nl=[]\nfor i in range(1,n):\n\tif h[i-1] >= h[i]:\n\t\tans+=1\n\t\tif i==n-1:\n\t\t\tl.append(ans)\n\telse:\n\t\tl.append(ans)\n\t\tans=0\nprint(max(l))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            12
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        11,
        12,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        9,
        5,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "[]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "l": "[]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "l": "[1]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[1]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[1]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "l": "[1]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[1]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[1]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "l": "[1]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "l": "[1, 2]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[1, 2]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "l": "[1, 2]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "h": "[10, 4, 8, 7, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "h = [10, 4, 8, 7, 3]",
          "ans=0",
          "l=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "(h[i - 1] >= h[i])"
        ],
        "4": [
          "ans+=1",
          "(i == n - 1)"
        ],
        "5": [
          "l.append(ans)"
        ],
        "6": [
          "l.append(ans)",
          "ans=0"
        ],
        "7": [
          "print(max(l))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 6
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    h = [10, 4, 8, 7, 3]\n    ans=0\n    l=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (h[i - 1] >= h[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    ans+=1\n    (i == n - 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    l.append(ans)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    l.append(ans)\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(max(l))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s608813790": {
      "code": "N = 5\nH = [10, 4, 8, 7, 3]\nresult = []\ncount = 0\nfor i in range (len(H)-1):\n  if H[i] >= H[i+1]:\n    count += 1\n    result.append(count)\n  else:\n    result.append(count)\n    count=0\nprint(max(result))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            10,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        10,
        11,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "result": "[]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "[]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "result": "[]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "result": "[1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "[1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "result": "[1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "result": "[1, 1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "[1, 1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "result": "[1, 1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "result": "[1, 1, 1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "[1, 1, 1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "result": "[1, 1, 1]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "result": "[1, 1, 1, 2]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "[1, 1, 1, 2]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "result": "[1, 1, 1, 2]"
            },
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "H = [10, 4, 8, 7, 3]",
          "result = []",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(H) - 1)"
        ],
        "3": [
          "(H[i] >= H[i + 1])"
        ],
        "4": [
          "count += 1",
          "result.append(count)"
        ],
        "5": [
          "result.append(count)",
          "count=0"
        ],
        "6": [
          "print(max(result))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    H = [10, 4, 8, 7, 3]\n    result = []\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(H) - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (H[i] >= H[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count += 1\n    result.append(count)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    result.append(count)\n    count=0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(result))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s462640549": {
      "code": "N = 5\nH = [10, 4, 8, 7, 3]\nans = []\ncount = 0\nfor i in range(1,N):\n  if H[i-1] < H[i]:\n    ans.append(count)\n    count = 0\n  elif H[i-1] >= H[i]:\n    count += 1\n  if i == N-1:\n    ans.append(count)\nprint(max(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        5,
        6,
        7,
        8,
        11,
        5,
        6,
        9,
        10,
        11,
        5,
        6,
        9,
        10,
        11,
        12,
        5,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1, 2]"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "H = [10, 4, 8, 7, 3]",
          "ans = []",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, N)"
        ],
        "3": [
          "(H[i - 1] < H[i])"
        ],
        "4": [
          "ans.append(count)",
          "count = 0"
        ],
        "5": [
          "(H[i - 1] >= H[i])"
        ],
        "6": [
          "count += 1"
        ],
        "7": [
          "(i == N - 1)"
        ],
        "8": [
          "ans.append(count)"
        ],
        "9": [
          "print(max(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 9
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    H = [10, 4, 8, 7, 3]\n    ans = []\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (H[i - 1] < H[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans.append(count)\n    count = 0\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (H[i - 1] >= H[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    count += 1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (i == N - 1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    ans.append(count)\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(max(ans))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s015324513": {
      "code": "n = 5\nheight = [10, 4, 8, 7, 3]\nli = []\nmax_height = max(height)\nfor i in range(n - 1):\n    sl = height[i + 1:]\n    if sl == sorted(sl,reverse=True):\n        count = len(sl)-1\n        break\n    else:\n        pass\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        11,
        5,
        6,
        7,
        8,
        9,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "li": "[]"
            },
            {
              "height": "[10, 4, 8, 7, 3]"
            },
            {
              "max_height": "10"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "li": "[]"
            },
            {
              "height": "[10, 4, 8, 7, 3]"
            },
            {
              "max_height": "10"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "li": "[]"
            },
            {
              "height": "[10, 4, 8, 7, 3]"
            },
            {
              "max_height": "10"
            },
            {
              "n": "5"
            },
            {
              "sl": "[4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "li": "[]"
            },
            {
              "height": "[10, 4, 8, 7, 3]"
            },
            {
              "max_height": "10"
            },
            {
              "n": "5"
            },
            {
              "sl": "[4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "li": "[]"
            },
            {
              "height": "[10, 4, 8, 7, 3]"
            },
            {
              "max_height": "10"
            },
            {
              "n": "5"
            },
            {
              "sl": "[8, 7, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "li": "[]"
            },
            {
              "height": "[10, 4, 8, 7, 3]"
            },
            {
              "max_height": "10"
            },
            {
              "n": "5"
            },
            {
              "sl": "[8, 7, 3]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "li": "[]"
            },
            {
              "height": "[10, 4, 8, 7, 3]"
            },
            {
              "max_height": "10"
            },
            {
              "n": "5"
            },
            {
              "sl": "[8, 7, 3]"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "height = [10, 4, 8, 7, 3]",
          "li = []",
          "max_height = max(height)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n - 1)"
        ],
        "3": [
          "sl = height[i + 1:]",
          "(sl == sorted(sl, reverse=True))"
        ],
        "4": [
          "count = len(sl)-1"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    height = [10, 4, 8, 7, 3]\n    li = []\n    max_height = max(height)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    sl = height[i + 1:]\n    (sl == sorted(sl, reverse=True))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count = len(sl)-1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s015944470": {
      "code": "N = 5\nnums = [10, 4, 8, 7, 3]\ncount = 0\nmax_count = []\nright = 0\nwhile True:\n    if nums[right+1] <= nums[right]:\n        count += 1    \n    else:\n        max_count.append(count)\n        count = 0\n    right += 1\n    if right == N-1:\n        break\nprint(max(max_count))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            11
          ]
        },
        "6": {
          "range": [
            12,
            13
          ]
        },
        "7": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        6,
        7,
        10,
        11,
        12,
        13,
        6,
        7,
        8,
        12,
        13,
        6,
        7,
        8,
        12,
        13,
        14,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "0"
            },
            {
              "max_count": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "0"
            },
            {
              "max_count": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "0"
            },
            {
              "max_count": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "0"
            },
            {
              "max_count": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "1"
            },
            {
              "max_count": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "1"
            },
            {
              "max_count": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "1"
            },
            {
              "max_count": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "1"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "2"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "2"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "2"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "2"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "3"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "3"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "3"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "3"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "4"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "nums": "[10, 4, 8, 7, 3]"
            },
            {
              "N": "5"
            },
            {
              "right": "4"
            },
            {
              "max_count": "[1]"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "nums = [10, 4, 8, 7, 3]",
          "count = 0",
          "max_count = []",
          "right = 0"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "(nums[right + 1] <= nums[right])"
        ],
        "4": [
          "count += 1"
        ],
        "5": [
          "max_count.append(count)",
          "count = 0"
        ],
        "6": [
          "right += 1",
          "(right == N - 1)"
        ],
        "7": [
          "print(max(max_count))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    nums = [10, 4, 8, 7, 3]\n    count = 0\n    max_count = []\n    right = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (nums[right + 1] <= nums[right])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    max_count.append(count)\n    count = 0\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    right += 1\n    (right == N - 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 2\n\nBlock 7:\nStatement:\n    print(max(max_count))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s181199152": {
      "code": "N = 5\nH = [10, 4, 8, 7, 3]\nsabun = [H[i+1]-H[i] for i in range(N-1)]\nsei = [i+1 for i in range(N-1) if sabun[i] > 0]\nif N == 1:\n    print(\"0\")\n    exit()\nif min(sabun) >= 0:\n    print(\"0\")\n    exit()\nsei.append(N-1)\nsa = [sei[i+1]-sei[i] for i in range(len(sei)-1)]\nprint(max(sa))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            10
          ]
        },
        "5": {
          "range": [
            11,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "sei": "[2]"
            },
            {
              "sabun": "[-6, 4, -1, -4]"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "sei": "[2]"
            },
            {
              "sabun": "[-6, 4, -1, -4]"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "sei": "[2, 4]"
            },
            {
              "sabun": "[-6, 4, -1, -4]"
            },
            {
              "sa": "[2]"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "H = [10, 4, 8, 7, 3]",
          "sabun = [H[i+1]-H[i] for i in range(N-1)]",
          "sei = [i+1 for i in range(N-1) if sabun[i] > 0]",
          "(N == 1)"
        ],
        "2": [
          "print(\"0\")",
          "exit()"
        ],
        "3": [
          "(min(sabun) >= 0)"
        ],
        "4": [
          "print(\"0\")",
          "exit()"
        ],
        "5": [
          "sei.append(N-1)",
          "sa = [sei[i+1]-sei[i] for i in range(len(sei)-1)]",
          "print(max(sa))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    H = [10, 4, 8, 7, 3]\n    sabun = [H[i+1]-H[i] for i in range(N-1)]\n    sei = [i+1 for i in range(N-1) if sabun[i] > 0]\n    (N == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"0\")\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (min(sabun) >= 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"0\")\n    exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    sei.append(N-1)\n    sa = [sei[i+1]-sei[i] for i in range(len(sei)-1)]\n    print(max(sa))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s811671256": {
      "code": "N = 5\nH = [10, 4, 8, 7, 3]\nans = []\ncnt = 0\nfor i in range(N - 1):\n    if H[i] >= H[i + 1]:\n        cnt += 1\n    else:\n        ans.append(cnt)\n        cnt = 0\nprint(max(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        9,
        10,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "H": "[10, 4, 8, 7, 3]"
            },
            {
              "ans": "[1]"
            },
            {
              "cnt": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "H = [10, 4, 8, 7, 3]",
          "ans = []",
          "cnt = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N - 1)"
        ],
        "3": [
          "(H[i] >= H[i + 1])"
        ],
        "4": [
          "cnt += 1"
        ],
        "5": [
          "ans.append(cnt)",
          "cnt = 0"
        ],
        "6": [
          "print(max(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    H = [10, 4, 8, 7, 3]\n    ans = []\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (H[i] >= H[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans.append(cnt)\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(ans))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s641741256": {
      "code": "N = 5\nH = None\nmax = 0\ncnt = 0\nfor i in range(N):\n  if H[i] <= H[i+1]:\n    cnt += 1\n  elif cnt > max:\n    max = cnt\nprint(max)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "cnt": "0"
            },
            {
              "N": "5"
            },
            {
              "max": "0"
            },
            {
              "H": "None"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "0"
            },
            {
              "N": "5"
            },
            {
              "max": "0"
            },
            {
              "H": "None"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "0"
            },
            {
              "N": "5"
            },
            {
              "max": "0"
            },
            {
              "H": "None"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "H = None",
          "max = 0",
          "cnt = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(H[i] <= H[i + 1])"
        ],
        "4": [
          "cnt += 1"
        ],
        "5": [
          "(cnt > max)"
        ],
        "6": [
          "max = cnt"
        ],
        "7": [
          "print(max)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    H = None\n    max = 0\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (H[i] <= H[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (cnt > max)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    max = cnt\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(max)\nNext:\n    <END>\n"
    }
  },
  "p02924": {
    "s815462306": {
      "code": "N = 2\nl = list(range(1,N+1)) \nI = list(range(1,N))\nl.pop(0)\nprint(sum([x % y for (x,y) in zip(I, l)]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "[2]"
            },
            {
              "N": "2"
            },
            {
              "I": "[1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "l = list(range(1,N+1))",
          "I = list(range(1,N))",
          "l.pop(0)",
          "print(sum([x % y for (x,y) in zip(I, l)]))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    l = list(range(1,N+1))\n    I = list(range(1,N))\n    l.pop(0)\n    print(sum([x % y for (x,y) in zip(I, l)]))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s482960962": {
      "code": "N = 2\npre = list(range(1,N+1))\nnew = pre[:]\na0 = new[0]\nnew.remove(a0)\nnew.append(a0)\nval = 0\nfor i in range(N):\n    val += pre[i] % new[i]\nprint(val)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        8,
        9,
        8,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "val": "0"
            },
            {
              "N": "2"
            },
            {
              "new": "[2, 1]"
            },
            {
              "pre": "[1, 2]"
            },
            {
              "a0": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "val": "0"
            },
            {
              "N": "2"
            },
            {
              "new": "[2, 1]"
            },
            {
              "pre": "[1, 2]"
            },
            {
              "a0": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "val": "1"
            },
            {
              "N": "2"
            },
            {
              "new": "[2, 1]"
            },
            {
              "pre": "[1, 2]"
            },
            {
              "a0": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "val": "1"
            },
            {
              "N": "2"
            },
            {
              "new": "[2, 1]"
            },
            {
              "pre": "[1, 2]"
            },
            {
              "a0": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "val": "1"
            },
            {
              "N": "2"
            },
            {
              "new": "[2, 1]"
            },
            {
              "pre": "[1, 2]"
            },
            {
              "a0": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "val": "1"
            },
            {
              "N": "2"
            },
            {
              "new": "[2, 1]"
            },
            {
              "pre": "[1, 2]"
            },
            {
              "a0": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "val": "1"
            },
            {
              "N": "2"
            },
            {
              "new": "[2, 1]"
            },
            {
              "pre": "[1, 2]"
            },
            {
              "a0": "1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "pre = list(range(1,N+1))",
          "new = pre[:]",
          "a0 = new[0]",
          "new.remove(a0)",
          "new.append(a0)",
          "val = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "val += pre[i] % new[i]"
        ],
        "4": [
          "print(val)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    pre = list(range(1,N+1))\n    new = pre[:]\n    a0 = new[0]\n    new.remove(a0)\n    new.append(a0)\n    val = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    val += pre[i] % new[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(val)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s244474727": {
      "code": "n = 2\na = list(range(1, n+1))\nb = a[1:]+[1]\nans = 0\nfor i in range(n):\n    ans += a[i] % b[i]\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        5,
        6,
        5,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "ans": "0"
            },
            {
              "n": "2"
            },
            {
              "b": "[2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "ans": "0"
            },
            {
              "n": "2"
            },
            {
              "b": "[2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "ans": "1"
            },
            {
              "n": "2"
            },
            {
              "b": "[2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "ans": "1"
            },
            {
              "n": "2"
            },
            {
              "b": "[2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "ans": "1"
            },
            {
              "n": "2"
            },
            {
              "b": "[2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "ans": "1"
            },
            {
              "n": "2"
            },
            {
              "b": "[2, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1, 2]"
            },
            {
              "ans": "1"
            },
            {
              "n": "2"
            },
            {
              "b": "[2, 1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "a = list(range(1, n+1))",
          "b = a[1:]+[1]",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "ans += a[i] % b[i]"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = list(range(1, n+1))\n    b = a[1:]+[1]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += a[i] % b[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s715373731": {
      "code": "import numpy as np\nN = 2\nprint(np.sum(np.arange(1, N, dtype='int32')))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "N = 2",
          "print(np.sum(np.arange(1, N, dtype='int32')))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    N = 2\n    print(np.sum(np.arange(1, N, dtype='int32')))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s497260562": {
      "code": "import numpy as np\nn = 2\nn_list = np.arange(1, n + 1)\nm_list = np.zeros(n)\nm_list[:-1] = n_list[1:]\nm_list[-1] = n_list[0]\nkekka = 0\namari = n_list % m_list\nprint(int(sum(amari)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "n = 2",
          "n_list = np.arange(1, n + 1)",
          "m_list = np.zeros(n)",
          "m_list[:-1] = n_list[1:]",
          "m_list[-1] = n_list[0]",
          "kekka = 0",
          "amari = n_list % m_list",
          "print(int(sum(amari)))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    n = 2\n    n_list = np.arange(1, n + 1)\n    m_list = np.zeros(n)\n    m_list[:-1] = n_list[1:]\n    m_list[-1] = n_list[0]\n    kekka = 0\n    amari = n_list % m_list\n    print(int(sum(amari)))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s605900646": {
      "code": "N = '2'\nprint(N * (N - 1)/2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '2'",
          "print(N * (N - 1)/2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    print(N * (N - 1)/2)\nNext:\n    <END>\n"
    }
  },
  "p02939": {
    "s355285975": {
      "code": "S = ['a', 'a', 'b', 'b', 'a', 'a']\nS=['_']+S\ni=1\nans=0\nwhile i<=len(S)-3:\n    ans+=1\n    if S[i-1]==S[i]:\n        S[i+1]='_'\n        i+=1\n    i+=1\nif len(S)==2:\n    ans+=1\nelif len(S)-i==1:\n    ans+=1\nelif S[i]!=S[i+1] and S[i+1]!=S[i+2]:\n    ans+=2\nelse:\n    ans+=1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        },
        "9": {
          "range": [
            14,
            14
          ]
        },
        "10": {
          "range": [
            15,
            15
          ]
        },
        "11": {
          "range": [
            16,
            16
          ]
        },
        "12": {
          "range": [
            18,
            18
          ]
        },
        "13": {
          "range": [
            19,
            19
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        5,
        6,
        7,
        8,
        9,
        10,
        5,
        6,
        7,
        10,
        5,
        11,
        13,
        15,
        18,
        19
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "['_', 'a', 'a', 'b', 'b', 'a', 'a']"
            },
            {
              "ans": "0"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['_', 'a', 'a', 'b', 'b', 'a', 'a']"
            },
            {
              "ans": "0"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['_', 'a', 'a', 'b', 'b', 'a', 'a']"
            },
            {
              "ans": "1"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "['_', 'a', 'a', 'b', 'b', 'a', 'a']"
            },
            {
              "ans": "1"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['_', 'a', 'a', 'b', 'b', 'a', 'a']"
            },
            {
              "ans": "1"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['_', 'a', 'a', 'b', 'b', 'a', 'a']"
            },
            {
              "ans": "2"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "2"
            },
            {
              "i": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "2"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "2"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "3"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "3"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "3"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "3"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "3"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "3"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "4"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "S": "['_', 'a', 'a', '_', 'b', 'a', 'a']"
            },
            {
              "ans": "4"
            },
            {
              "i": "5"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = ['a', 'a', 'b', 'b', 'a', 'a']",
          "S=['_']+S",
          "i=1",
          "ans=0"
        ],
        "2": [
          "while i<=len(S)-3:"
        ],
        "3": [
          "ans+=1",
          "(S[i - 1] == S[i])"
        ],
        "4": [
          "S[i+1]='_'",
          "i+=1"
        ],
        "5": [
          "i+=1"
        ],
        "6": [
          "(len(S) == 2)"
        ],
        "7": [
          "ans+=1"
        ],
        "8": [
          "(len(S) - i == 1)"
        ],
        "9": [
          "ans+=1"
        ],
        "10": [
          "(S[i] != S[i + 1] and S[i + 1] != S[i + 2])"
        ],
        "11": [
          "ans+=2"
        ],
        "12": [
          "ans+=1"
        ],
        "13": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = ['a', 'a', 'b', 'b', 'a', 'a']\n    S=['_']+S\n    i=1\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i<=len(S)-3:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    ans+=1\n    (S[i - 1] == S[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    S[i+1]='_'\n    i+=1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (len(S) == 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 13\n\nBlock 8:\nStatement:\n    (len(S) - i == 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 13\n\nBlock 10:\nStatement:\n    (S[i] != S[i + 1] and S[i + 1] != S[i + 2])\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    ans+=2\nNext:\n    Go to Block: 13\n\nBlock 12:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02952": {
    "s544038011": {
      "code": "n = 11\nif n==100000:\n  print(90909)\nelif 10000<=n<=99999:\n  print((n-10000)+910)\nelif 1000<=n<=9999:\n  print(909)\nelif 100<=n<=999:\n  print(n-100)+10\nelif 10<=n<=99:\n  print(9)\nelif 1<=n<=9:\n  print(n)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            8,
            8
          ]
        },
        "8": {
          "range": [
            9,
            9
          ]
        },
        "9": {
          "range": [
            10,
            10
          ]
        },
        "10": {
          "range": [
            11,
            11
          ]
        },
        "11": {
          "range": [
            12,
            12
          ]
        },
        "12": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        4,
        6,
        8,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "n": "11"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 11",
          "(n == 100000)"
        ],
        "2": [
          "print(90909)"
        ],
        "3": [
          "(10000 <= n <= 99999)"
        ],
        "4": [
          "print((n-10000)+910)"
        ],
        "5": [
          "(1000 <= n <= 9999)"
        ],
        "6": [
          "print(909)"
        ],
        "7": [
          "(100 <= n <= 999)"
        ],
        "8": [
          "print(n-100)+10"
        ],
        "9": [
          "(10 <= n <= 99)"
        ],
        "10": [
          "print(9)"
        ],
        "11": [
          "(1 <= n <= 9)"
        ],
        "12": [
          "print(n)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": "<END>"
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 11\n    (n == 100000)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(90909)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (10000 <= n <= 99999)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print((n-10000)+910)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (1000 <= n <= 9999)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(909)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (100 <= n <= 999)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(n-100)+10\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    (10 <= n <= 99)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(9)\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    (1 <= n <= 9)\nNext:\n    If True: Go to Block 12\n    <END>\nBlock 12:\nStatement:\n    print(n)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s722813996": {
      "code": "import math\nN = 11\ndig = len(str(N))\ndig_odd = math.floor(dig / 2)\nA = 0\nfor i in range(dig_odd):\n  A += 9 * 10 ** (2 * i)\nif dig % 2 == 1:\n  A += int(str(N)[1:]) + 1\nprint(A)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        6,
        8,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "N = 11",
          "dig = len(str(N))",
          "dig_odd = math.floor(dig / 2)",
          "A = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(dig_odd)"
        ],
        "3": [
          "A += 9 * 10 ** (2 * i)"
        ],
        "4": [
          "(dig % 2 == 1)"
        ],
        "5": [
          "A += int(str(N)[1:]) + 1"
        ],
        "6": [
          "print(A)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = 11\n    dig = len(str(N))\n    dig_odd = math.floor(dig / 2)\n    A = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(dig_odd)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    A += 9 * 10 ** (2 * i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (dig % 2 == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    A += int(str(N)[1:]) + 1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(A)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s726206765": {
      "code": "N = 11\ncnt = 0\nfor i in range(N):\n  if len(i)%2 == 1:\n    cnt += 0\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "cnt": "0"
            },
            {
              "N": "11"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "0"
            },
            {
              "N": "11"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "0"
            },
            {
              "N": "11"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 11",
          "cnt = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(len(i) % 2 == 1)"
        ],
        "4": [
          "cnt += 0"
        ],
        "5": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 11\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(i) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += 0\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
    },
    "s692211350": {
      "code": "n = 11\nre=0\nfor i in range(1,n):\n  if len(str(i)%2==1):\n    re+=1\nprint(re)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "re": "0"
            },
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "re": "0"
            },
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "re": "0"
            },
            {
              "n": "11"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 11",
          "re=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "(len(str(i) % 2 == 1))"
        ],
        "4": [
          "re+=1"
        ],
        "5": [
          "print(re)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 11\n    re=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(str(i) % 2 == 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    re+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(re)\nNext:\n    <END>\n"
    },
    "s655827477": {
      "code": "n = 11\ncnt=0\nfor i in range(1,n+1):\n  if len(i)%2==1:\n    cnt+=1\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "cnt": "0"
            },
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "0"
            },
            {
              "n": "11"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "0"
            },
            {
              "n": "11"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 11",
          "cnt=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n + 1)"
        ],
        "3": [
          "(len(i) % 2 == 1)"
        ],
        "4": [
          "cnt+=1"
        ],
        "5": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 11\n    cnt=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(i) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
    }
  },
  "p02953": {
    "s577198282": {
      "code": "n = 5\nh = [1, 2, 1, 1, 3]\nfor i in range(n-2):\n    if h[i+1]-h[i]>=2:\n        print(\"No\")\n        break\n    else:\n        if h[i]<h[i+i]:\n            h[i+1]-=1\nelse:\n    if h[-2]<=h[-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        8,
        3,
        4,
        8,
        3,
        4,
        8,
        9,
        3,
        11,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 0, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 0, 3]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 0, 3]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "n": "5"
            },
            {
              "h": "[1, 2, 1, 0, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "h = [1, 2, 1, 1, 3]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n - 2)"
        ],
        "3": [
          "(h[i + 1] - h[i] >= 2)"
        ],
        "4": [
          "print(\"No\")"
        ],
        "5": [
          "(h[i] < h[i + i])"
        ],
        "6": [
          "h[i+1]-=1"
        ],
        "7": [
          "(h[-2] <= h[-1])"
        ],
        "8": [
          "print(\"Yes\")"
        ],
        "9": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    h = [1, 2, 1, 1, 3]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (h[i + 1] - h[i] >= 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (h[i] < h[i + i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    h[i+1]-=1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (h[-2] <= h[-1])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s216988389": {
      "code": "import numpy as np\nflag = False\nN = 5\nH = [1, 2, 1, 1, 3]\nH = np.array(H)\nD = (H[1:]-H[:-1])\nfor i in range(len(H[1:]-H[:-1])):\n    if D[i] < -1:\n        flag = True\n        break\n    elif D[i] == -1:\n        if i-1 < 0:\n            continue\n        elif i+1 == len(D):\n            continue\n        else:\n            if len(D[D[i+1] == -1]) >= 1:\n                flag = True\n                break\n            if len(D[D[i-1] == -1]) >= 1:\n                flag = True\n                break\nif flag == True:\n    print('No')\nelse:\n    print('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            17,
            17
          ]
        },
        "9": {
          "range": [
            18,
            18
          ]
        },
        "10": {
          "range": [
            20,
            20
          ]
        },
        "11": {
          "range": [
            21,
            21
          ]
        },
        "12": {
          "range": [
            23,
            23
          ]
        },
        "13": {
          "range": [
            24,
            24
          ]
        },
        "14": {
          "range": [
            26,
            26
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        7,
        8,
        11,
        12,
        14,
        17,
        20,
        7,
        8,
        11,
        7,
        8,
        11,
        7,
        23,
        26
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 10,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 12,
          "state": []
        },
        {
          "block": 14,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "flag = False",
          "N = 5",
          "H = [1, 2, 1, 1, 3]",
          "H = np.array(H)",
          "D = (H[1:]-H[:-1])"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(H[1:] - H[:-1]))"
        ],
        "3": [
          "(D[i] < -1)"
        ],
        "4": [
          "flag = True"
        ],
        "5": [
          "(D[i] == -1)"
        ],
        "6": [
          "(i - 1 < 0)"
        ],
        "7": [
          "(i + 1 == len(D))"
        ],
        "8": [
          "(len(D[D[i + 1] == -1]) >= 1)"
        ],
        "9": [
          "flag = True"
        ],
        "10": [
          "(len(D[D[i - 1] == -1]) >= 1)"
        ],
        "11": [
          "flag = True"
        ],
        "12": [
          "(flag == True)"
        ],
        "13": [
          "print('No')"
        ],
        "14": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 12
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 12
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 2,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 2,
            "false": 8
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 2
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 12
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 12
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    flag = False\n    N = 5\n    H = [1, 2, 1, 1, 3]\n    H = np.array(H)\n    D = (H[1:]-H[:-1])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(H[1:] - H[:-1]))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 12\n\nBlock 3:\nStatement:\n    (D[i] < -1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    flag = True\nNext:\n    Go to Block: 12\n\nBlock 5:\nStatement:\n    (D[i] == -1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    (i - 1 < 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 7\n\nBlock 7:\nStatement:\n    (i + 1 == len(D))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 8\n\nBlock 8:\nStatement:\n    (len(D[D[i + 1] == -1]) >= 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    flag = True\nNext:\n    Go to Block: 12\n\nBlock 10:\nStatement:\n    (len(D[D[i - 1] == -1]) >= 1)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 2\n\nBlock 11:\nStatement:\n    flag = True\nNext:\n    Go to Block: 12\n\nBlock 12:\nStatement:\n    (flag == True)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s693123568": {
      "code": "n = '5'\nl = [1, 2, 1, 1, 3]\nif l.count(0)+ l.count(1) == len(l):\n    print(\"Yes\")\nelse:\n    l1 = l[1:]+[0]\n    print(l1)\n    d = [i-j for (i,j) in zip(l1, l)][:-1] \n    print(d)\n    if -2 in d:\n        print(\"No\")\n    else:\n        s = ''.join(map(str, d)) \n        spl = s.split(\"-1\") \n        print(spl)\n        if \"\" not in spl:\n            print(\"Yes\")\n        else:\n            if spl[-1] == \"\" and spl[-2] != \"\" and spl[-2] != \"0\" and \"\" not in spl[:-1]:\n                print(\"Yes\")\n            else:\n                if \"\" in spl:\n                    print(\"No\")\n                else:\n                    y = [int(i) for i in spl]\n                    print(y)\n                    if 0 in y:\n                        print(\"No\")\n                    else:\n                        print(\"Yes\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            13,
            16
          ]
        },
        "6": {
          "range": [
            17,
            17
          ]
        },
        "7": {
          "range": [
            19,
            19
          ]
        },
        "8": {
          "range": [
            20,
            20
          ]
        },
        "9": {
          "range": [
            22,
            22
          ]
        },
        "10": {
          "range": [
            23,
            23
          ]
        },
        "11": {
          "range": [
            25,
            27
          ]
        },
        "12": {
          "range": [
            28,
            28
          ]
        },
        "13": {
          "range": [
            30,
            30
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        15,
        16,
        17
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'5'"
            },
            {
              "l": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "'5'"
            },
            {
              "d": "[1, -1, 0, 2]"
            },
            {
              "l1": "[2, 1, 1, 3, 0]"
            },
            {
              "l": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n": "'5'"
            },
            {
              "spl": "['1', '02']"
            },
            {
              "d": "[1, -1, 0, 2]"
            },
            {
              "l1": "[2, 1, 1, 3, 0]"
            },
            {
              "s": "'1-102'"
            },
            {
              "l": "[1, 2, 1, 1, 3]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "n": "'5'"
            },
            {
              "spl": "['1', '02']"
            },
            {
              "d": "[1, -1, 0, 2]"
            },
            {
              "l1": "[2, 1, 1, 3, 0]"
            },
            {
              "s": "'1-102'"
            },
            {
              "l": "[1, 2, 1, 1, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = '5'",
          "l = [1, 2, 1, 1, 3]",
          "(l.count(0) + l.count(1) == len(l))"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "l1 = l[1:]+[0]",
          "print(l1)",
          "d = [i-j for (i,j) in zip(l1, l)][:-1]",
          "print(d)",
          "(-2 in d)"
        ],
        "4": [
          "print(\"No\")"
        ],
        "5": [
          "s = ''.join(map(str, d))",
          "spl = s.split(\"-1\")",
          "print(spl)",
          "('' not in spl)"
        ],
        "6": [
          "print(\"Yes\")"
        ],
        "7": [
          "(spl[-1] == '' and spl[-2] != '' and (spl[-2] != '0') and ('' not in spl[:-1]))"
        ],
        "8": [
          "print(\"Yes\")"
        ],
        "9": [
          "('' in spl)"
        ],
        "10": [
          "print(\"No\")"
        ],
        "11": [
          "y = [int(i) for i in spl]",
          "print(y)",
          "(0 in y)"
        ],
        "12": [
          "print(\"No\")"
        ],
        "13": [
          "print(\"Yes\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    l = [1, 2, 1, 1, 3]\n    (l.count(0) + l.count(1) == len(l))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    l1 = l[1:]+[0]\n    print(l1)\n    d = [i-j for (i,j) in zip(l1, l)][:-1]\n    print(d)\n    (-2 in d)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    s = ''.join(map(str, d))\n    spl = s.split(\"-1\")\n    print(spl)\n    ('' not in spl)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (spl[-1] == '' and spl[-2] != '' and (spl[-2] != '0') and ('' not in spl[:-1]))\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    ('' in spl)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    y = [int(i) for i in spl]\n    print(y)\n    (0 in y)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 13:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s245601232": {
      "code": "n = 5\nH = [1, 2, 1, 1, 3]\nfor i in range(n):\n    if i!=0:\n        H=H[:-1]\n    if max(H)-H(-1)>1:\n        print(\"No\")\n        exit(0)\nprint(\"Yes\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "H": "[1, 2, 1, 1, 3]"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "H": "[1, 2, 1, 1, 3]"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "H": "[1, 2, 1, 1, 3]"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "H": "[1, 2, 1, 1, 3]"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "H = [1, 2, 1, 1, 3]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(i != 0)"
        ],
        "4": [
          "H=H[:-1]"
        ],
        "5": [
          "(max(H) - H(-1) > 1)"
        ],
        "6": [
          "print(\"No\")",
          "exit(0)"
        ],
        "7": [
          "print(\"Yes\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    H = [1, 2, 1, 1, 3]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (i != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    H=H[:-1]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (max(H) - H(-1) > 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"No\")\n    exit(0)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n"
    },
    "s387971753": {
      "code": "n = '5'\nh = [1, 2, 1, 1, 3]\nmax = 0\ni = 0\ny = 1\nfor i in range(n):\n    if h[i] > max:\n        max = h[i]\n    elif h[i] < max-1:\n        y = 0\nif y==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "y": "1"
            },
            {
              "max": "0"
            },
            {
              "i": "0"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            },
            {
              "n": "'5'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "y": "1"
            },
            {
              "max": "0"
            },
            {
              "i": "0"
            },
            {
              "h": "[1, 2, 1, 1, 3]"
            },
            {
              "n": "'5'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '5'",
          "h = [1, 2, 1, 1, 3]",
          "max = 0",
          "i = 0",
          "y = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(h[i] > max)"
        ],
        "4": [
          "max = h[i]"
        ],
        "5": [
          "(h[i] < max - 1)"
        ],
        "6": [
          "y = 0"
        ],
        "7": [
          "(y == 1)"
        ],
        "8": [
          "print(\"Yes\")"
        ],
        "9": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    h = [1, 2, 1, 1, 3]\n    max = 0\n    i = 0\n    y = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (h[i] > max)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    max = h[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (h[i] < max - 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    y = 0\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (y == 1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p02959": {
    "s328656614": {
      "code": "n = 2\na = [3, 5, 2]\nb = [4, 5]\nc = 0\nfor i in range(n):\n  if b[i] >= a[i]:\n    c += a[i]\n  elif b[i]+b[i+1] >= a[i]:\n    c += a[i]\n    b[i+1] -= a[i]-b[i]\n  else:\n    c += b[i]+b[i+1]\n    b[i+1] = 0\nprint(c)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            10
          ]
        },
        "7": {
          "range": [
            12,
            13
          ]
        },
        "8": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "0"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "0"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "0"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "3"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "3"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "3"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "8"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "8"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "[3, 5, 2]"
            },
            {
              "c": "8"
            },
            {
              "n": "2"
            },
            {
              "b": "[4, 5]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "a = [3, 5, 2]",
          "b = [4, 5]",
          "c = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(b[i] >= a[i])"
        ],
        "4": [
          "c += a[i]"
        ],
        "5": [
          "(b[i] + b[i + 1] >= a[i])"
        ],
        "6": [
          "c += a[i]",
          "b[i+1] -= a[i]-b[i]"
        ],
        "7": [
          "c += b[i]+b[i+1]",
          "b[i+1] = 0"
        ],
        "8": [
          "print(c)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 8
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [3, 5, 2]\n    b = [4, 5]\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (b[i] >= a[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    c += a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (b[i] + b[i + 1] >= a[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    c += a[i]\n    b[i+1] -= a[i]-b[i]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    c += b[i]+b[i+1]\n    b[i+1] = 0\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(c)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s073256448": {
      "code": "n = 2\nmonster = [3, 5, 2]\nbrave = [4, 5]\nans = 0\nfor i in range(n):\n  if i == 0:\n    kill = min(monster[0],brave[0])\n    ans += kill \n    brave -= kill\n  else:\n    kill = min(monster[i],brave[i])\n    ans += kill\n    brave[i] -= kill\n    kill = min(monster[i+1],brave[i])\n    ans += kill\n    monster -= kill\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            9
          ]
        },
        "5": {
          "range": [
            11,
            16
          ]
        },
        "6": {
          "range": [
            17,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "2"
            },
            {
              "ans": "0"
            },
            {
              "monster": "[3, 5, 2]"
            },
            {
              "brave": "[4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "2"
            },
            {
              "ans": "0"
            },
            {
              "monster": "[3, 5, 2]"
            },
            {
              "brave": "[4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "2"
            },
            {
              "ans": "0"
            },
            {
              "monster": "[3, 5, 2]"
            },
            {
              "brave": "[4, 5]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n": "2"
            },
            {
              "monster": "[3, 5, 2]"
            },
            {
              "kill": "3"
            },
            {
              "ans": "3"
            },
            {
              "brave": "[4, 5]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -=: 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "monster = [3, 5, 2]",
          "brave = [4, 5]",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(i == 0)"
        ],
        "4": [
          "kill = min(monster[0],brave[0])",
          "ans += kill",
          "brave -= kill"
        ],
        "5": [
          "kill = min(monster[i],brave[i])",
          "ans += kill",
          "brave[i] -= kill",
          "kill = min(monster[i+1],brave[i])",
          "ans += kill",
          "monster -= kill"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    monster = [3, 5, 2]\n    brave = [4, 5]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    kill = min(monster[0],brave[0])\n    ans += kill\n    brave -= kill\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    kill = min(monster[i],brave[i])\n    ans += kill\n    brave[i] -= kill\n    kill = min(monster[i+1],brave[i])\n    ans += kill\n    monster -= kill\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p02963": {
    "s795391233": {
      "code": "s = '3'\nx1 = y1 = x2 = y3 = 0\ny2 = 1\nprint(str(x1) + ' ' +str(y1) + ' ' +str(x2) + ' ' +str(y2) + ' ' + s + ' ' + str(y3))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "y2": "1"
            },
            {
              "x1": "0"
            },
            {
              "x2": "0"
            },
            {
              "s": "'3'"
            },
            {
              "y1": "0"
            },
            {
              "y3": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '3'",
          "x1 = y1 = x2 = y3 = 0",
          "y2 = 1",
          "print(str(x1) + ' ' +str(y1) + ' ' +str(x2) + ' ' +str(y2) + ' ' + s + ' ' + str(y3))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '3'\n    x1 = y1 = x2 = y3 = 0\n    y2 = 1\n    print(str(x1) + ' ' +str(y1) + ' ' +str(x2) + ' ' +str(y2) + ' ' + s + ' ' + str(y3))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02971": {
    "s509144087": {
      "code": "N = 3\nA = [1, 4, 3]\nMAX_1 = max(A)\nMAX_2 = sorted(set(A))[-2]\nfor i in range(N):\n    if A[i] == MAX_1:\n        print(MAX_2)\n    else:\n        print(MAX_1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        5,
        6,
        7,
        5,
        6,
        9,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "MAX_2": "3"
            },
            {
              "N": "3"
            },
            {
              "MAX_1": "4"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "A = [1, 4, 3]",
          "MAX_1 = max(A)",
          "MAX_2 = sorted(set(A))[-2]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(A[i] == MAX_1)"
        ],
        "4": [
          "print(MAX_2)"
        ],
        "5": [
          "print(MAX_1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 4, 3]\n    MAX_1 = max(A)\n    MAX_2 = sorted(set(A))[-2]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (A[i] == MAX_1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(MAX_2)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(MAX_1)\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s235421914": {
      "code": "N = 3\nA = [1, 4, 3]\nif N == 2:\n    print(\"\\n\".join(map(str, A[::-1])))\nelse:\n    for i in range(N):\n        if i == N - 1:\n            print(max(A[:-1]))\n        else:\n            print(max(*A[:i], *A[i+1:]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6,
        7,
        10,
        6,
        7,
        10,
        6,
        7,
        8,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 4, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "A = [1, 4, 3]",
          "(N == 2)"
        ],
        "2": [
          "print(\"\\n\".join(map(str, A[::-1])))"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "4": [
          "(i == N - 1)"
        ],
        "5": [
          "print(max(A[:-1]))"
        ],
        "6": [
          "print(max(*A[:i], *A[i+1:]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 4, 3]\n    (N == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"\\n\".join(map(str, A[::-1])))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    (i == N - 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(max(A[:-1]))\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    print(max(*A[:i], *A[i+1:]))\nNext:\n    Go to Block: 3\n",
      "exception_info": null
    },
    "s533603662": {
      "code": "n = 3\nlist = [1, 4, 3]\nfor i in range(n):\n  listA=list.remove[i]\n  print(max(listA))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "list": "[1, 4, 3]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "list": "[1, 4, 3]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "list": "[1, 4, 3]"
            },
            {
              "n": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'builtin_function_or_method' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "list = [1, 4, 3]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "listA=list.remove[i]",
          "print(max(listA))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    list = [1, 4, 3]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    listA=list.remove[i]\n    print(max(listA))\nNext:\n    Go to Block: 2\n"
    }
  },
  "p02975": {
    "s874814256": {
      "code": "N = 3\nA = [1, 2, 3]\nd = dict()\nfor i in range(N):\n    d[A[i]] = d.get(A[i], 0) + 1\nif len(d) > 3:\n    print('No')\nelse:\n    k = list(d.keys())\n    v = list(d.values())\n    if len(d) == 3 and k[0]^k[1]^k[2] == 0 and v[0]==v[1]==v[2]:\n        print('Yes')\n    elif len(d) == 2 and (k[0] == 0 and v[1] == 2*v[0]) or (k[1] == 0 and v[0] == 2*v[1]):\n        print('Yes')\n    elif len(d) == 1 and k[0] == 0:\n        print('Yes')\n    else:\n        print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            9,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        },
        "9": {
          "range": [
            14,
            14
          ]
        },
        "10": {
          "range": [
            15,
            15
          ]
        },
        "11": {
          "range": [
            16,
            16
          ]
        },
        "12": {
          "range": [
            18,
            18
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6,
        9,
        10,
        11,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{1: 1}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{1: 1}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{1: 1, 2: 1}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{1: 1, 2: 1}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{1: 1, 2: 1, 3: 1}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{1: 1, 2: 1, 3: 1}"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "d": "{1: 1, 2: 1, 3: 1}"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "v": "[1, 1, 1]"
            },
            {
              "d": "{1: 1, 2: 1, 3: 1}"
            },
            {
              "k": "[1, 2, 3]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "v": "[1, 1, 1]"
            },
            {
              "d": "{1: 1, 2: 1, 3: 1}"
            },
            {
              "k": "[1, 2, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "A = [1, 2, 3]",
          "d = dict()"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "d[A[i]] = d.get(A[i], 0) + 1"
        ],
        "4": [
          "(len(d) > 3)"
        ],
        "5": [
          "print('No')"
        ],
        "6": [
          "k = list(d.keys())",
          "v = list(d.values())",
          "(len(d) == 3 and k[0] ^ k[1] ^ k[2] == 0 and (v[0] == v[1] == v[2]))"
        ],
        "7": [
          "print('Yes')"
        ],
        "8": [
          "(len(d) == 2 and (k[0] == 0 and v[1] == 2 * v[0]) or (k[1] == 0 and v[0] == 2 * v[1]))"
        ],
        "9": [
          "print('Yes')"
        ],
        "10": [
          "(len(d) == 1 and k[0] == 0)"
        ],
        "11": [
          "print('Yes')"
        ],
        "12": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 2, 3]\n    d = dict()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    d[A[i]] = d.get(A[i], 0) + 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (len(d) > 3)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    k = list(d.keys())\n    v = list(d.values())\n    (len(d) == 3 and k[0] ^ k[1] ^ k[2] == 0 and (v[0] == v[1] == v[2]))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    (len(d) == 2 and (k[0] == 0 and v[1] == 2 * v[0]) or (k[1] == 0 and v[0] == 2 * v[1]))\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    (len(d) == 1 and k[0] == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    print('No')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s477125504": {
      "code": "N = 3\nA = [1, 2, 3]\nans = list(set(A))\nif len(ans) > 3:\n    print('No')\n    exit()\na0 = ans[0]\na1 = ans[1]\na2 = ans[2]\nif a0 ^ a1 == a2:\n    print('Yes')\nelse:\n    print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            6
          ]
        },
        "3": {
          "range": [
            7,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "[1, 2, 3]"
            },
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "[1, 2, 3]"
            },
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "a0": "1"
            },
            {
              "a1": "2"
            },
            {
              "a2": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "[1, 2, 3]"
            },
            {
              "N": "3"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "a0": "1"
            },
            {
              "a1": "2"
            },
            {
              "a2": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "A = [1, 2, 3]",
          "ans = list(set(A))",
          "(len(ans) > 3)"
        ],
        "2": [
          "print('No')",
          "exit()"
        ],
        "3": [
          "a0 = ans[0]",
          "a1 = ans[1]",
          "a2 = ans[2]",
          "(a0 ^ a1 == a2)"
        ],
        "4": [
          "print('Yes')"
        ],
        "5": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 2, 3]\n    ans = list(set(A))\n    (len(ans) > 3)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    a0 = ans[0]\n    a1 = ans[1]\n    a2 = ans[2]\n    (a0 ^ a1 == a2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('No')\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02984": {
    "s208001228": {
      "code": "import numpy as np\nn = 3\ndam = [4, 4, 8]\na=[[0]*n for x in range(n)]\nfor i in range(n):\n    a[i][i],a[i][(i+1)%n]=1,1\na=np.array(a)\ndam=np.array(dam)\nans=np.linalg.solve(a,dam)\nprint(\" \".join([str(int(ans[i])) for i in range(n)]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        7,
        8,
        9,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "n = 3",
          "dam = [4, 4, 8]",
          "a=[[0]*n for x in range(n)]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "a[i][i],a[i][(i+1)%n]=1,1"
        ],
        "4": [
          "a=np.array(a)",
          "dam=np.array(dam)",
          "ans=np.linalg.solve(a,dam)",
          "print(\" \".join([str(int(ans[i])) for i in range(n)]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    n = 3\n    dam = [4, 4, 8]\n    a=[[0]*n for x in range(n)]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a[i][i],a[i][(i+1)%n]=1,1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    a=np.array(a)\n    dam=np.array(dam)\n    ans=np.linalg.solve(a,dam)\n    print(\" \".join([str(int(ans[i])) for i in range(n)]))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02987": {
    "s226717555": {
      "code": "S = ['A', 'S', 'S', 'A']\nif len(S) == 0:\n    print('No')\nelse:\n    c1 = (len(set(S)) == 2)\n    m = list(set(S))[0]\n    n = list(set(S))[1]\n    m_c, n_c = 0, 0\n    c2 = False\n    if c1:\n        for i in range(len(S)):\n            if S[i] == m:\n                m_c += 1\n            else:\n                n_c += 1\n        if m_c == n_c:\n            c2 = True\n    if c1 and c2:\n        print('Yes')\n    else:\n        print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            15,
            15
          ]
        },
        "8": {
          "range": [
            16,
            16
          ]
        },
        "9": {
          "range": [
            17,
            17
          ]
        },
        "10": {
          "range": [
            18,
            18
          ]
        },
        "11": {
          "range": [
            19,
            19
          ]
        },
        "12": {
          "range": [
            21,
            21
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        11,
        12,
        13,
        11,
        12,
        13,
        11,
        12,
        15,
        11,
        16,
        17,
        18,
        19
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "['A', 'S', 'S', 'A']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n_c": "0"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "0"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n_c": "0"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "0"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n_c": "0"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "0"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "0"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "0"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "0"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "1"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "1"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "1"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n_c": "1"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "n_c": "2"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n_c": "2"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "n_c": "2"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "False"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "n_c": "2"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "True"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "n_c": "2"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "True"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "n_c": "2"
            },
            {
              "n": "'A'"
            },
            {
              "c1": "True"
            },
            {
              "c2": "True"
            },
            {
              "S": "['A', 'S', 'S', 'A']"
            },
            {
              "m_c": "2"
            },
            {
              "m": "'S'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = ['A', 'S', 'S', 'A']",
          "(len(S) == 0)"
        ],
        "2": [
          "print('No')"
        ],
        "3": [
          "c1 = (len(set(S)) == 2)",
          "m = list(set(S))[0]",
          "n = list(set(S))[1]",
          "m_c, n_c = 0, 0",
          "c2 = False",
          "(c1)"
        ],
        "4": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "5": [
          "(S[i] == m)"
        ],
        "6": [
          "m_c += 1"
        ],
        "7": [
          "n_c += 1"
        ],
        "8": [
          "(m_c == n_c)"
        ],
        "9": [
          "c2 = True"
        ],
        "10": [
          "(c1 and c2)"
        ],
        "11": [
          "print('Yes')"
        ],
        "12": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 10
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = ['A', 'S', 'S', 'A']\n    (len(S) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    c1 = (len(set(S)) == 2)\n    m = list(set(S))[0]\n    n = list(set(S))[1]\n    m_c, n_c = 0, 0\n    c2 = False\n    (c1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 10\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (S[i] == m)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    m_c += 1\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    n_c += 1\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    (m_c == n_c)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    c2 = True\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    (c1 and c2)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    print('No')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s304796456": {
      "code": "import pandas\nimport math\nimport numpy\nimport collections\nx = 'ASSA'\nTF =  x.isupper() and x.isalpha()\nif(TF):\n    li = [i for i in x]\n    count_dict = collections.Counter(li)\n    list = [v for k, v in count_dict.items()]\n    if(list == [2,2]):\n        print(True)\n    else:\n        print(False)\nprint(False)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            11
          ]
        },
        "3": {
          "range": [
            12,
            12
          ]
        },
        "4": {
          "range": [
            14,
            14
          ]
        },
        "5": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import pandas",
          "import math",
          "import numpy",
          "import collections",
          "x = 'ASSA'",
          "TF =  x.isupper() and x.isalpha()",
          "(TF)"
        ],
        "2": [
          "li = [i for i in x]",
          "count_dict = collections.Counter(li)",
          "list = [v for k, v in count_dict.items()]",
          "(list == [2, 2])"
        ],
        "3": [
          "print(True)"
        ],
        "4": [
          "print(False)"
        ],
        "5": [
          "print(False)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import pandas\n    import math\n    import numpy\n    import collections\n    x = 'ASSA'\n    TF =  x.isupper() and x.isalpha()\n    (TF)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    li = [i for i in x]\n    count_dict = collections.Counter(li)\n    list = [v for k, v in count_dict.items()]\n    (list == [2, 2])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(True)\nNext:\n    Go to Block: 5\n\nBlock 4:\nStatement:\n    print(False)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(False)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s465066480": {
      "code": "from collections import defaultdict as dedict\ncounter = dedict(int)\na = 'ASSA'\nfor i in list(a):\n  counter[i] += 1\nif ( len(counter) == 2) and (  counter [counter.keys()[0]] == 2):\n  print (\"Yes\")\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'dict_keys' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "from collections import defaultdict as dedict",
          "counter = dedict(int)",
          "a = 'ASSA'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> list(a)"
        ],
        "3": [
          "counter[i] += 1"
        ],
        "4": [
          "(len(counter) == 2 and counter[counter.keys()[0]] == 2)"
        ],
        "5": [
          "print (\"Yes\")"
        ],
        "6": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from collections import defaultdict as dedict\n    counter = dedict(int)\n    a = 'ASSA'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> list(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    counter[i] += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (len(counter) == 2 and counter[counter.keys()[0]] == 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print (\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    }
  },
  "p02989": {
    "s941606223": {
      "code": "import math\nn = 6\nd = [9, 1, 4, 4, 6, 7]\nd.sort()\nif (len(d))%2 == 0:\n  m = (d[(len(d)//2)-1]+d[len(d)//2])/2\nelse:\n  m = d[(len(d)//2)]\np = 0\nq = 0\nfor i in range(len(d)):\n  if d[i]>=m:\n    if d[i] == d[i+1]:\n      break\n    else:\n      p = d[i]\n      q = d[i-1]\n      break\nprint(p-q)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            10
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        },
        "8": {
          "range": [
            16,
            17
          ]
        },
        "9": {
          "range": [
            19,
            19
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        12,
        11,
        12,
        11,
        12,
        11,
        12,
        13,
        16,
        17,
        18,
        19
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 9,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 6",
          "d = [9, 1, 4, 4, 6, 7]",
          "d.sort()",
          "(len(d) % 2 == 0)"
        ],
        "2": [
          "m = (d[(len(d)//2)-1]+d[len(d)//2])/2"
        ],
        "3": [
          "m = d[(len(d)//2)]"
        ],
        "4": [
          "p = 0",
          "q = 0"
        ],
        "5": [
          "iterator -> i, Iterate Over -> range(len(d))"
        ],
        "6": [
          "(d[i] >= m)"
        ],
        "7": [
          "(d[i] == d[i + 1])"
        ],
        "8": [
          "p = d[i]",
          "q = d[i-1]"
        ],
        "9": [
          "print(p-q)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 5
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 9,
            "false": 8
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 6\n    d = [9, 1, 4, 4, 6, 7]\n    d.sort()\n    (len(d) % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    m = (d[(len(d)//2)-1]+d[len(d)//2])/2\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    m = d[(len(d)//2)]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    p = 0\n    q = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    iterator -> i, Iterate Over -> range(len(d))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 9\n\nBlock 6:\nStatement:\n    (d[i] >= m)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 5\n\nBlock 7:\nStatement:\n    (d[i] == d[i + 1])\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 8\n\nBlock 8:\nStatement:\n    p = d[i]\n    q = d[i-1]\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    print(p-q)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s257729864": {
      "code": "n = 6\nd = [9, 1, 4, 4, 6, 7]\np = 0\nq = 0\nm = 0\nd.sort()\nif (len(d))%2 == 0:\n  m = (d[(len(d)//2)-1]+d[len(d)//2])/2\nelse:\n  m = d[(len(d)//2)]\nfor i in range(len(d)):\n  if d[i]>=m:\n    if d[i] == d[i+1]:\n      break\n    else:\n      p = d[i]\n      q = d[i-1]\n      break\nprint(p-q)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            10,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            16,
            17
          ]
        },
        "8": {
          "range": [
            19,
            19
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        12,
        11,
        12,
        11,
        12,
        11,
        12,
        13,
        16,
        17,
        18,
        19
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "q": "0"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "0"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "q": "4"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "6"
            },
            {
              "m": "5.0"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "q": "4"
            },
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "p": "6"
            },
            {
              "m": "5.0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "d = [9, 1, 4, 4, 6, 7]",
          "p = 0",
          "q = 0",
          "m = 0",
          "d.sort()",
          "(len(d) % 2 == 0)"
        ],
        "2": [
          "m = (d[(len(d)//2)-1]+d[len(d)//2])/2"
        ],
        "3": [
          "m = d[(len(d)//2)]"
        ],
        "4": [
          "iterator -> i, Iterate Over -> range(len(d))"
        ],
        "5": [
          "(d[i] >= m)"
        ],
        "6": [
          "(d[i] == d[i + 1])"
        ],
        "7": [
          "p = d[i]",
          "q = d[i-1]"
        ],
        "8": [
          "print(p-q)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 4
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 8,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    d = [9, 1, 4, 4, 6, 7]\n    p = 0\n    q = 0\n    m = 0\n    d.sort()\n    (len(d) % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    m = (d[(len(d)//2)-1]+d[len(d)//2])/2\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    m = d[(len(d)//2)]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(len(d))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (d[i] >= m)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    (d[i] == d[i + 1])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 7\n\nBlock 7:\nStatement:\n    p = d[i]\n    q = d[i-1]\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(p-q)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s952876389": {
      "code": "n = '6'\nl = [9, 1, 4, 4, 6, 7]\nans=0\nfor i in range(n-2):\n    a=l[i:i+3]\n    b=a[1]\n    c=sorted(a)\n    if b==c[1]:\n        ans+=1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "0"
            },
            {
              "l": "[9, 1, 4, 4, 6, 7]"
            },
            {
              "n": "'6'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "l": "[9, 1, 4, 4, 6, 7]"
            },
            {
              "n": "'6'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '6'",
          "l = [9, 1, 4, 4, 6, 7]",
          "ans=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n - 2)"
        ],
        "3": [
          "a=l[i:i+3]",
          "b=a[1]",
          "c=sorted(a)",
          "(b == c[1])"
        ],
        "4": [
          "ans+=1"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '6'\n    l = [9, 1, 4, 4, 6, 7]\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    a=l[i:i+3]\n    b=a[1]\n    c=sorted(a)\n    (b == c[1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s700444152": {
      "code": "n = 6\nl = [9, 1, 4, 4, 6, 7]\nc_idx = n / 2 - 1\nl.sort()\nprint(l[c_idx + 1] - l[c_idx])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "[1, 4, 4, 6, 7, 9]"
            },
            {
              "n": "6"
            },
            {
              "c_idx": "2.0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('list indices must be integers or slices, not float')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "l = [9, 1, 4, 4, 6, 7]",
          "c_idx = n / 2 - 1",
          "l.sort()",
          "print(l[c_idx + 1] - l[c_idx])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    l = [9, 1, 4, 4, 6, 7]\n    c_idx = n / 2 - 1\n    l.sort()\n    print(l[c_idx + 1] - l[c_idx])\nNext:\n    <END>\n"
    },
    "s481360386": {
      "code": "n = 6\nd = [1, 4, 4, 6, 7, 9]\nprint(d[n/2]-d[n/2-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "6"
            },
            {
              "d": "[1, 4, 4, 6, 7, 9]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('list indices must be integers or slices, not float')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "d = [1, 4, 4, 6, 7, 9]",
          "print(d[n/2]-d[n/2-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    d = [1, 4, 4, 6, 7, 9]\n    print(d[n/2]-d[n/2-1])\nNext:\n    <END>\n"
    }
  },
  "p02993": {
    "s827455702": {
      "code": "S = '3776'\ncnt = 0\nfor i in range(1, 4):\n    cnt+=1\n    if S[i] == S[i-1]:\n        print('Bad')\n        break\n    elif cnt == 3:\n        print('Good')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'3776'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'3776'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'3776'"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'3776'"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'3776'"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'3776'"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'3776'"
            },
            {
              "cnt": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = '3776'",
          "cnt = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, 4)"
        ],
        "3": [
          "cnt+=1",
          "(S[i] == S[i - 1])"
        ],
        "4": [
          "print('Bad')"
        ],
        "5": [
          "(cnt == 3)"
        ],
        "6": [
          "print('Good')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '3776'\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, 4)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    cnt+=1\n    (S[i] == S[i - 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('Bad')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (cnt == 3)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print('Good')\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s681484239": {
      "code": "S = 3776\nl=[]\nwhile S>0:\n  l.append(S%10)\n  S//=10\nif l[0]==l[1] or l[1]==l[2] or l[2]==l[3]:\n  print('Bad')\nelse:\n  print('Good')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "[]"
            },
            {
              "S": "3776"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[]"
            },
            {
              "S": "3776"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[6]"
            },
            {
              "S": "377"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[6]"
            },
            {
              "S": "377"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[6, 7]"
            },
            {
              "S": "37"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[6, 7]"
            },
            {
              "S": "37"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[6, 7, 7]"
            },
            {
              "S": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[6, 7, 7]"
            },
            {
              "S": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[6, 7, 7, 3]"
            },
            {
              "S": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[6, 7, 7, 3]"
            },
            {
              "S": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "l": "[6, 7, 7, 3]"
            },
            {
              "S": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "l": "[6, 7, 7, 3]"
            },
            {
              "S": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 3776",
          "l=[]"
        ],
        "2": [
          "while S>0:"
        ],
        "3": [
          "l.append(S%10)",
          "S//=10"
        ],
        "4": [
          "(l[0] == l[1] or l[1] == l[2] or l[2] == l[3])"
        ],
        "5": [
          "print('Bad')"
        ],
        "6": [
          "print('Good')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 3776\n    l=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while S>0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l.append(S%10)\n    S//=10\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (l[0] == l[1] or l[1] == l[2] or l[2] == l[3])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('Bad')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('Good')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s128367746": {
      "code": "n = 3776\nflag = 0\nfor i in range(3):\n  if(n[i] == n[i+1]):\n    flag = 1\n  if(flag == 1):\n    print(\"Bad\")\n    break\nif(flag == 0):\n  print(\"Good\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "3776"
            },
            {
              "flag": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "3776"
            },
            {
              "flag": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "3776"
            },
            {
              "flag": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 3776",
          "flag = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(3)"
        ],
        "3": [
          "(n[i] == n[i + 1])"
        ],
        "4": [
          "flag = 1"
        ],
        "5": [
          "(flag == 1)"
        ],
        "6": [
          "print(\"Bad\")"
        ],
        "7": [
          "(flag == 0)"
        ],
        "8": [
          "print(\"Good\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": "<END>"
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3776\n    flag = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (n[i] == n[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    flag = 1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (flag == 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"Bad\")\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (flag == 0)\nNext:\n    If True: Go to Block 8\n    <END>\nBlock 8:\nStatement:\n    print(\"Good\")\nNext:\n    <END>\n"
    },
    "s255199372": {
      "code": "import collections\nS = ['3', '7', '7', '6']\nc = collections.Counter(S)\nif max(c.values) >= 2:\n  print(\"Bad\")\nelse:\n  print(\"Good\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'builtin_function_or_method' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "import collections",
          "S = ['3', '7', '7', '6']",
          "c = collections.Counter(S)",
          "(max(c.values) >= 2)"
        ],
        "2": [
          "print(\"Bad\")"
        ],
        "3": [
          "print(\"Good\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import collections\n    S = ['3', '7', '7', '6']\n    c = collections.Counter(S)\n    (max(c.values) >= 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Bad\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Good\")\nNext:\n    <END>\n"
    },
    "s982073432": {
      "code": "s = 3776\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "3776"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 3776",
          "(s[0] == s[1] or s[1] == s[2] or s[2] == s[3])"
        ],
        "2": [
          "print('Bad')"
        ],
        "3": [
          "print('Good')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 3776\n    (s[0] == s[1] or s[1] == s[2] or s[2] == s[3])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Bad')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Good')\nNext:\n    <END>\n"
    }
  },
  "p02995": {
    "s686672998": {
      "code": "import math\ninputData = ['4', '9', '2', '3']\nA = int(inputData[0])\nB = int(inputData[1])\nC = int(inputData[2])\nD = int(inputData[3])\nC_q_num = (B // C) - (A // C)\nD_q_num = (B // D) - (A // D)\nCD_lcm = (C * D) // math.gcd(C, D)\nCD_q_num = (B // CD_lcm) - (A // CD_lcm) + 1\nprint((B-A) - C_q_num - D_q_num + CD_q_num)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "inputData = ['4', '9', '2', '3']",
          "A = int(inputData[0])",
          "B = int(inputData[1])",
          "C = int(inputData[2])",
          "D = int(inputData[3])",
          "C_q_num = (B // C) - (A // C)",
          "D_q_num = (B // D) - (A // D)",
          "CD_lcm = (C * D) // math.gcd(C, D)",
          "CD_q_num = (B // CD_lcm) - (A // CD_lcm) + 1",
          "print((B-A) - C_q_num - D_q_num + CD_q_num)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    inputData = ['4', '9', '2', '3']\n    A = int(inputData[0])\n    B = int(inputData[1])\n    C = int(inputData[2])\n    D = int(inputData[3])\n    C_q_num = (B // C) - (A // C)\n    D_q_num = (B // D) - (A // D)\n    CD_lcm = (C * D) // math.gcd(C, D)\n    CD_q_num = (B // CD_lcm) - (A // CD_lcm) + 1\n    print((B-A) - C_q_num - D_q_num + CD_q_num)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03000": {
    "s901273737": {
      "code": "i = [3, 6]\nboundCnt = i[0]\nlimit = i[1]\nlandpoints = [3, 4, 5]\nnowCnt = 0\nnowLandpoints = 0\nfor i in range(boundCnt + 1):\n    if nowLandpoints > limit:\n        break\n    nowCnt += 1\n    nowLandpoints += landpoints[i]\nprint(nowCnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            10,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        11,
        7,
        8,
        10,
        11,
        7,
        8,
        9,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "i": "[3, 6]"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "0"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "0"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "0"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "0"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "0"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "i": "0"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "1"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "1"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "1"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "1"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "1"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "i": "1"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "2"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "2"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "2"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "2"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "2"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "7"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "i": "2"
            },
            {
              "limit": "6"
            },
            {
              "nowCnt": "2"
            },
            {
              "boundCnt": "3"
            },
            {
              "landpoints": "[3, 4, 5]"
            },
            {
              "nowLandpoints": "7"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "i = [3, 6]",
          "boundCnt = i[0]",
          "limit = i[1]",
          "landpoints = [3, 4, 5]",
          "nowCnt = 0",
          "nowLandpoints = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(boundCnt + 1)"
        ],
        "3": [
          "(nowLandpoints > limit)"
        ],
        "4": [
          "nowCnt += 1",
          "nowLandpoints += landpoints[i]"
        ],
        "5": [
          "print(nowCnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 5,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    i = [3, 6]\n    boundCnt = i[0]\n    limit = i[1]\n    landpoints = [3, 4, 5]\n    nowCnt = 0\n    nowLandpoints = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(boundCnt + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (nowLandpoints > limit)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    nowCnt += 1\n    nowLandpoints += landpoints[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(nowCnt)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03042": {
    "s625675575": {
      "code": "s = '1905'\na = 1<= int(s[:2]) <=12\nb = 1<= int(s[2:]) <=12\nif a and b:\n    print(\"AMBIGUOUS\")\nelif a:\n    print('MMYY')\nelif b:\n    print('YYMM')\nelse:\n    print('NA')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        6,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1905'"
            },
            {
              "a": "False"
            },
            {
              "b": "True"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1905'"
            },
            {
              "a": "False"
            },
            {
              "b": "True"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'1905'"
            },
            {
              "a": "False"
            },
            {
              "b": "True"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'1905'"
            },
            {
              "a": "False"
            },
            {
              "b": "True"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1905'",
          "a = 1<= int(s[:2]) <=12",
          "b = 1<= int(s[2:]) <=12",
          "(a and b)"
        ],
        "2": [
          "print(\"AMBIGUOUS\")"
        ],
        "3": [
          "(a)"
        ],
        "4": [
          "print('MMYY')"
        ],
        "5": [
          "(b)"
        ],
        "6": [
          "print('YYMM')"
        ],
        "7": [
          "print('NA')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1905'\n    a = 1<= int(s[:2]) <=12\n    b = 1<= int(s[2:]) <=12\n    (a and b)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"AMBIGUOUS\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (a)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('MMYY')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (b)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('YYMM')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('NA')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s156522193": {
      "code": "lst = ['1', '9', '0', '5']\nlst1 = []\nlst1.append(lst[0]+lst[1])\nlst1.append(lst[2]+lst[3])\nif (int(lst1[0]) >=13 and int(lst1[1]) >=13) or (int(lst1[0]) >=13 and lst1[1] ==\"00\") or (lst1[0] ==\"00\" and lst1[1] >=13):\n  print(\"NA\")\nelif (0<int(lst1[0])<=12 and 0<int(lst1[1])<=12):\n      print(\"AMBIGUOUS\")\nelif 0<lst1[0] <=12:\n      print(\"MMYY\")\nelif 0<lst1[1]<=12:\n      print(\"YYMM\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        7,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "lst1": "['19', '05']"
            },
            {
              "lst": "['1', '9', '0', '5']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lst1": "['19', '05']"
            },
            {
              "lst": "['1', '9', '0', '5']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "lst1": "['19', '05']"
            },
            {
              "lst": "['1', '9', '0', '5']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "lst = ['1', '9', '0', '5']",
          "lst1 = []",
          "lst1.append(lst[0]+lst[1])",
          "lst1.append(lst[2]+lst[3])",
          "(int(lst1[0]) >= 13 and int(lst1[1]) >= 13 or (int(lst1[0]) >= 13 and lst1[1] == '00') or (lst1[0] == '00' and lst1[1] >= 13))"
        ],
        "2": [
          "print(\"NA\")"
        ],
        "3": [
          "(0 < int(lst1[0]) <= 12 and 0 < int(lst1[1]) <= 12)"
        ],
        "4": [
          "print(\"AMBIGUOUS\")"
        ],
        "5": [
          "(0 < lst1[0] <= 12)"
        ],
        "6": [
          "print(\"MMYY\")"
        ],
        "7": [
          "(0 < lst1[1] <= 12)"
        ],
        "8": [
          "print(\"YYMM\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": "<END>"
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    lst = ['1', '9', '0', '5']\n    lst1 = []\n    lst1.append(lst[0]+lst[1])\n    lst1.append(lst[2]+lst[3])\n    (int(lst1[0]) >= 13 and int(lst1[1]) >= 13 or (int(lst1[0]) >= 13 and lst1[1] == '00') or (lst1[0] == '00' and lst1[1] >= 13))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"NA\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (0 < int(lst1[0]) <= 12 and 0 < int(lst1[1]) <= 12)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"AMBIGUOUS\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (0 < lst1[0] <= 12)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"MMYY\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (0 < lst1[1] <= 12)\nNext:\n    If True: Go to Block 8\n    <END>\nBlock 8:\nStatement:\n    print(\"YYMM\")\nNext:\n    <END>\n"
    }
  },
  "p03050": {
    "s733234916": {
      "code": "from math import sqrt\nn = 8\ns=0\nfor i in range(int(sqrt(n))):\n    d,m=divmod(n,i+1)\n    if m == 0:\n        if len(set(divmod(n,d-1))) == 1:\n            s += d-1\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        4,
        5,
        6,
        7,
        8,
        4,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from math import sqrt",
          "n = 8",
          "s=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(int(sqrt(n)))"
        ],
        "3": [
          "d,m=divmod(n,i+1)",
          "(m == 0)"
        ],
        "4": [
          "(len(set(divmod(n, d - 1))) == 1)"
        ],
        "5": [
          "s += d-1"
        ],
        "6": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from math import sqrt\n    n = 8\n    s=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(int(sqrt(n)))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    d,m=divmod(n,i+1)\n    (m == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (len(set(divmod(n, d - 1))) == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    s += d-1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(s)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s640558149": {
      "code": "N = 8\ntotal = 0\nfor q in range(1,N // int(N**0.5) + 1):\n\tif N % (N // q - 1) == N // (N // q - 1):\n\t\ttotal += (N // q) - 1\nprint(total)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        3,
        4,
        3,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "7"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "8"
            },
            {
              "total": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 8",
          "total = 0"
        ],
        "2": [
          "iterator -> q, Iterate Over -> range(1, N // int(N ** 0.5) + 1)"
        ],
        "3": [
          "(N % (N // q - 1) == N // (N // q - 1))"
        ],
        "4": [
          "total += (N // q) - 1"
        ],
        "5": [
          "print(total)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 8\n    total = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> q, Iterate Over -> range(1, N // int(N ** 0.5) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N % (N // q - 1) == N // (N // q - 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    total += (N // q) - 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(total)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03061": {
    "s042255469": {
      "code": "from math import gcd\nn = 3\nA = [7, 6, 8]\nif n == 2:\n    print(max(a))\nelse:\n    r = max(gcd(A[0], A[1]), gcd(A[1], A[2]), gcd(A[2], A[0]))\n    a = gcd(A[0], gcd(A[1], A[2]))\n    for i in range(3, n):\n        r = max(gcd(A[i], r), a)\n        a = gcd(A[i], a)\n    print(r)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from math import gcd",
          "n = 3",
          "A = [7, 6, 8]",
          "(n == 2)"
        ],
        "2": [
          "print(max(a))"
        ],
        "3": [
          "r = max(gcd(A[0], A[1]), gcd(A[1], A[2]), gcd(A[2], A[0]))",
          "a = gcd(A[0], gcd(A[1], A[2]))"
        ],
        "4": [
          "iterator -> i, Iterate Over -> range(3, n)"
        ],
        "5": [
          "r = max(gcd(A[i], r), a)",
          "a = gcd(A[i], a)"
        ],
        "6": [
          "print(r)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from math import gcd\n    n = 3\n    A = [7, 6, 8]\n    (n == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(max(a))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    r = max(gcd(A[0], A[1]), gcd(A[1], A[2]), gcd(A[2], A[0]))\n    a = gcd(A[0], gcd(A[1], A[2]))\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(3, n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    r = max(gcd(A[i], r), a)\n    a = gcd(A[i], a)\nNext:\n    Go to Block: 4\n\nBlock 6:\nStatement:\n    print(r)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s155847723": {
      "code": "import math\nimport copy\nfrom functools import reduce\nn = 3\na = [7, 6, 8]\nans = reduce(math.gcd,a)\nif n==2 or (min(a)==max(a)):\n    print(max(a))\nelse:\n    for i in range(n):\n        _a = copy.copy(a)\n        _a.pop(i)\n        tmp = reduce(math.gcd,_a)\n        if tmp > ans:\n            print(tmp)\n            break\n        else:\n            pass",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            10,
            10
          ]
        },
        "4": {
          "range": [
            11,
            14
          ]
        },
        "5": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "import copy",
          "from functools import reduce",
          "n = 3",
          "a = [7, 6, 8]",
          "ans = reduce(math.gcd,a)",
          "(n == 2 or min(a) == max(a))"
        ],
        "2": [
          "print(max(a))"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "4": [
          "_a = copy.copy(a)",
          "_a.pop(i)",
          "tmp = reduce(math.gcd,_a)",
          "(tmp > ans)"
        ],
        "5": [
          "print(tmp)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    import copy\n    from functools import reduce\n    n = 3\n    a = [7, 6, 8]\n    ans = reduce(math.gcd,a)\n    (n == 2 or min(a) == max(a))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(max(a))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    _a = copy.copy(a)\n    _a.pop(i)\n    tmp = reduce(math.gcd,_a)\n    (tmp > ans)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    print(tmp)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s744907169": {
      "code": "import copy\nimport functools\nimport math\nn = 3\nlstA = [7, 6, 8]\nmaximum=max(lstA)\ngcdlst=[]\nfor i in range(n):\n    cplstA=copy.copy(lstA)\n    del cplstA[i]\n    gcdlst.append(functools.reduce(math.gcd, cplstA))\nprint(max(gcdlst))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        8,
        9,
        10,
        11,
        8,
        9,
        10,
        11,
        8,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import copy",
          "import functools",
          "import math",
          "n = 3",
          "lstA = [7, 6, 8]",
          "maximum=max(lstA)",
          "gcdlst=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "cplstA=copy.copy(lstA)",
          "del cplstA[i]",
          "gcdlst.append(functools.reduce(math.gcd, cplstA))"
        ],
        "4": [
          "print(max(gcdlst))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import copy\n    import functools\n    import math\n    n = 3\n    lstA = [7, 6, 8]\n    maximum=max(lstA)\n    gcdlst=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cplstA=copy.copy(lstA)\n    del cplstA[i]\n    gcdlst.append(functools.reduce(math.gcd, cplstA))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(gcdlst))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s889591555": {
      "code": "from math import gcd\nn = 3\na = [7, 6, 8]\nb=[]\nfor i in range(n):\n  b+=gcd(a[i],a[i-1])\nb.sort()\nprint(b[2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "from math import gcd",
          "n = 3",
          "a = [7, 6, 8]",
          "b=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "b+=gcd(a[i],a[i-1])"
        ],
        "4": [
          "b.sort()",
          "print(b[2])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from math import gcd\n    n = 3\n    a = [7, 6, 8]\n    b=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    b+=gcd(a[i],a[i-1])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    b.sort()\n    print(b[2])\nNext:\n    <END>\n"
    }
  },
  "p03062": {
    "s739185932": {
      "code": "n = 3\na = [-10, 5, -4]\nmns = [ai for ai in a if ai<0]\npls = [ai for ai in a if ai>=0]\nmns.sort()\npls.sort()\nlm = len(mns)\nm_rem = 0\nif lm%2:\n    if pls[0]<-1*mns[-1]:\n        tmp = -1*mns[-1]\n        mns[-1] = -1*pls[0]\n        pls[0] = tmp\n    m_rem = mns.pop()\nprint(sum(pls)-sum(mns) + m_rem)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            9
          ]
        },
        "2": {
          "range": [
            10,
            10
          ]
        },
        "3": {
          "range": [
            11,
            13
          ]
        },
        "4": {
          "range": [
            14,
            14
          ]
        },
        "5": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "lm": "2"
            },
            {
              "n": "3"
            },
            {
              "mns": "[-10, -4]"
            },
            {
              "m_rem": "0"
            },
            {
              "a": "[-10, 5, -4]"
            },
            {
              "pls": "[5]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "lm": "2"
            },
            {
              "n": "3"
            },
            {
              "mns": "[-10, -4]"
            },
            {
              "m_rem": "0"
            },
            {
              "a": "[-10, 5, -4]"
            },
            {
              "pls": "[5]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "a = [-10, 5, -4]",
          "mns = [ai for ai in a if ai<0]",
          "pls = [ai for ai in a if ai>=0]",
          "mns.sort()",
          "pls.sort()",
          "lm = len(mns)",
          "m_rem = 0",
          "(lm % 2)"
        ],
        "2": [
          "(pls[0] < -1 * mns[-1])"
        ],
        "3": [
          "tmp = -1*mns[-1]",
          "mns[-1] = -1*pls[0]",
          "pls[0] = tmp"
        ],
        "4": [
          "m_rem = mns.pop()"
        ],
        "5": [
          "print(sum(pls)-sum(mns) + m_rem)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [-10, 5, -4]\n    mns = [ai for ai in a if ai<0]\n    pls = [ai for ai in a if ai>=0]\n    mns.sort()\n    pls.sort()\n    lm = len(mns)\n    m_rem = 0\n    (lm % 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (pls[0] < -1 * mns[-1])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    tmp = -1*mns[-1]\n    mns[-1] = -1*pls[0]\n    pls[0] = tmp\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    m_rem = mns.pop()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(sum(pls)-sum(mns) + m_rem)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s724385460": {
      "code": "N = 3\nA = [-10, 5, -4]\nAabs=map(abs,A)\nfu=0\nfor i in range(N):\n  if A[i]<0:\n    fu+=1\nif fu % 2 == 0:\n  print(sum(Aabs))\nelse:\n  print(sum(Aabs)-2*min(Aabs))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        5,
        6,
        7,
        5,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "3"
            },
            {
              "Aabs": "<map object at 0x7f799b31d240>"
            },
            {
              "A": "[-10, 5, -4]"
            },
            {
              "fu": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "A = [-10, 5, -4]",
          "Aabs=map(abs,A)",
          "fu=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(A[i] < 0)"
        ],
        "4": [
          "fu+=1"
        ],
        "5": [
          "(fu % 2 == 0)"
        ],
        "6": [
          "print(sum(Aabs))"
        ],
        "7": [
          "print(sum(Aabs)-2*min(Aabs))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [-10, 5, -4]\n    Aabs=map(abs,A)\n    fu=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (A[i] < 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    fu+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (fu % 2 == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(sum(Aabs))\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(sum(Aabs)-2*min(Aabs))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03068": {
    "s644938795": {
      "code": "N = 5\nS = ['e', 'r', 'r', 'o', 'r']\nK = 2\nfor i in range(N):\n    if S[i] == S[K]:\n        pass\n    else:\n        S[i] = '*'\nprint(''.join(map(str, S)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        8,
        4,
        5,
        6,
        4,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "['e', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['e', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['e', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "S = ['e', 'r', 'r', 'o', 'r']",
          "K = 2"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(S[i] == S[K])"
        ],
        "4": [
          "S[i] = '*'"
        ],
        "5": [
          "print(''.join(map(str, S)))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    S = ['e', 'r', 'r', 'o', 'r']\n    K = 2\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] == S[K])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    S[i] = '*'\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(''.join(map(str, S)))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s426923804": {
      "code": "N = 5\nS = 'error'\nK = 2\na = S[K + 1]\nfor i in range(len(S)) :\n    if S[i] != a :\n        print('*', end=\"\")\n    else :\n        print(S[i], end=\"\")\nprint()",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        9,
        5,
        6,
        7,
        5,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "S": "'error'"
            },
            {
              "N": "5"
            },
            {
              "a": "'o'"
            },
            {
              "K": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "S = 'error'",
          "K = 2",
          "a = S[K + 1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "(S[i] != a)"
        ],
        "4": [
          "print('*', end=\"\")"
        ],
        "5": [
          "print(S[i], end=\"\")"
        ],
        "6": [
          "print()"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    S = 'error'\n    K = 2\n    a = S[K + 1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (S[i] != a)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('*', end=\"\")\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(S[i], end=\"\")\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print()\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s603657788": {
      "code": "N = 5\nS = ['e', 'r', 'r', 'o', 'r']\nK = 2\nfor i in range(N):\n    if(S[i] != S[K]):\n        S[i] = '*'\nS = \"\".join(S)\nprint(S)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "['e', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['e', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['e', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['*', 'r', 'r', 'o', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['*', 'r', 'r', '*', 'r']"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'*rr*r'"
            },
            {
              "N": "5"
            },
            {
              "K": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "S = ['e', 'r', 'r', 'o', 'r']",
          "K = 2"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(S[i] != S[K])"
        ],
        "4": [
          "S[i] = '*'"
        ],
        "5": [
          "S = \"\".join(S)",
          "print(S)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    S = ['e', 'r', 'r', 'o', 'r']\n    K = 2\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] != S[K])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    S[i] = '*'\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    S = \"\".join(S)\n    print(S)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s722984367": {
      "code": "N = 5\nS = 'error'\nK = 2\nletter = S[K]\nans = \"\"\nfor s in S:\n    if s != letter:\n        ans += \"*\"\n    else:\n        ans += s\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        10,
        6,
        7,
        10,
        6,
        7,
        8,
        6,
        7,
        10,
        6,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "''"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "''"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "''"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "'*'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'*'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'*'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "'*r'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'*r'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'*r'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "'*rr'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'*rr'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'*rr'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "'*rr*'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'*rr*'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'*rr*'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "'*rr*r'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'*rr*r'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "'*rr*r'"
            },
            {
              "N": "5"
            },
            {
              "letter": "'r'"
            },
            {
              "S": "'error'"
            },
            {
              "K": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "S = 'error'",
          "K = 2",
          "letter = S[K]",
          "ans = \"\""
        ],
        "2": [
          "iterator -> s, Iterate Over -> S"
        ],
        "3": [
          "(s != letter)"
        ],
        "4": [
          "ans += \"*\""
        ],
        "5": [
          "ans += s"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    S = 'error'\n    K = 2\n    letter = S[K]\n    ans = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s != letter)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += \"*\"\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans += s\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s795431373": {
      "code": "n = 5\ns = 'error'\nk = 2\nc = s[k-1]\ni = s.find(c)\ns2 = \"*\"*n\ns2[i] = c\nprint(s2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "2"
            },
            {
              "c": "'r'"
            },
            {
              "i": "1"
            },
            {
              "s": "'error'"
            },
            {
              "s2": "'*****'"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "s = 'error'",
          "k = 2",
          "c = s[k-1]",
          "i = s.find(c)",
          "s2 = \"*\"*n",
          "s2[i] = c",
          "print(s2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    s = 'error'\n    k = 2\n    c = s[k-1]\n    i = s.find(c)\n    s2 = \"*\"*n\n    s2[i] = c\n    print(s2)\nNext:\n    <END>\n"
    },
    "s798103067": {
      "code": "n = 5\ns = 'error'\nk = 2\nc = s[k-1]\ni = s.find(c)\ns2 = \"*\"*n\nfor n in i:\n\ts2[n] = c\nprint(s2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "2"
            },
            {
              "c": "'r'"
            },
            {
              "i": "1"
            },
            {
              "s": "'error'"
            },
            {
              "s2": "'*****'"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "k": "2"
            },
            {
              "c": "'r'"
            },
            {
              "i": "1"
            },
            {
              "s": "'error'"
            },
            {
              "s2": "'*****'"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "s = 'error'",
          "k = 2",
          "c = s[k-1]",
          "i = s.find(c)",
          "s2 = \"*\"*n"
        ],
        "2": [
          "iterator -> n, Iterate Over -> i"
        ],
        "3": [
          "s2[n] = c"
        ],
        "4": [
          "print(s2)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    s = 'error'\n    k = 2\n    c = s[k-1]\n    i = s.find(c)\n    s2 = \"*\"*n\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> i\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s2[n] = c\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(s2)\nNext:\n    <END>\n"
    }
  },
  "p03076": {
    "s586153729": {
      "code": "a = [29, 20, 7, 35, 120]\ndelta = []\ntime = 0\nfor i in range(5):\n    a10 = 0\n    if str(a[i])[-1] != '0':\n        a10 = (10 - int(str(a[i])[-1]))\n        delta.append(a10)\n    time += a[i] + a10\nprint(time-max(delta))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        4,
        5,
        6,
        9,
        4,
        5,
        6,
        7,
        8,
        9,
        4,
        5,
        6,
        7,
        8,
        9,
        4,
        5,
        6,
        9,
        4,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[]"
            },
            {
              "time": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[]"
            },
            {
              "time": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[]"
            },
            {
              "time": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a10": "1"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1]"
            },
            {
              "time": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a10": "1"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1]"
            },
            {
              "time": "30"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a10": "1"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1]"
            },
            {
              "time": "30"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1]"
            },
            {
              "time": "30"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1]"
            },
            {
              "time": "50"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1]"
            },
            {
              "time": "50"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1]"
            },
            {
              "time": "50"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a10": "3"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3]"
            },
            {
              "time": "50"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a10": "3"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3]"
            },
            {
              "time": "60"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a10": "3"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3]"
            },
            {
              "time": "60"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3]"
            },
            {
              "time": "60"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a10": "5"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3, 5]"
            },
            {
              "time": "60"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a10": "5"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3, 5]"
            },
            {
              "time": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a10": "5"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3, 5]"
            },
            {
              "time": "100"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3, 5]"
            },
            {
              "time": "100"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3, 5]"
            },
            {
              "time": "220"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3, 5]"
            },
            {
              "time": "220"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "a10": "0"
            },
            {
              "a": "[29, 20, 7, 35, 120]"
            },
            {
              "delta": "[1, 3, 5]"
            },
            {
              "time": "220"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = [29, 20, 7, 35, 120]",
          "delta = []",
          "time = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(5)"
        ],
        "3": [
          "a10 = 0",
          "(str(a[i])[-1] != '0')"
        ],
        "4": [
          "a10 = (10 - int(str(a[i])[-1]))",
          "delta.append(a10)"
        ],
        "5": [
          "time += a[i] + a10"
        ],
        "6": [
          "print(time-max(delta))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [29, 20, 7, 35, 120]\n    delta = []\n    time = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(5)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    a10 = 0\n    (str(a[i])[-1] != '0')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a10 = (10 - int(str(a[i])[-1]))\n    delta.append(a10)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    time += a[i] + a10\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(time-max(delta))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s743803842": {
      "code": "import math\nnum = ['29', '20', '7', '35', '120']\nnum2 = sorted([list(i)[-1] for i in num],reverse = False)\nnum3 = [n for n in num2 if n != \"0\" ]\nC = 0\nc = 1\nfor i in num:\n\tj = list(i)[-1]\n\tif j == num3[0] and c == 1:\n\t\tC += int(i)\n\t\tc += 1\n\telif c>1:\n\t\tif int(j) >= 5 or int(j) == 0:\n\t\t\tC += round(int(i),-1)\n\t\telif 0< int(j) < 5:\n\t\t\tC += round(int(i),-1)+10\t\t\n\telse:\n\t\tif int(j) >= 5 or int(j) == 0:\n\t\t\tC += round(int(i),-1)\n\t\telif 0< int(j) < 5:\n\t\t\tC += round(int(i),-1)+10\t\nprint(C)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            9
          ]
        },
        "4": {
          "range": [
            10,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        },
        "9": {
          "range": [
            16,
            16
          ]
        },
        "10": {
          "range": [
            18,
            18
          ]
        },
        "11": {
          "range": [
            19,
            19
          ]
        },
        "12": {
          "range": [
            20,
            20
          ]
        },
        "13": {
          "range": [
            21,
            21
          ]
        },
        "14": {
          "range": [
            22,
            22
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        18,
        19,
        7,
        8,
        9,
        12,
        18,
        19,
        7,
        8,
        9,
        12,
        18,
        19,
        7,
        8,
        9,
        10,
        11,
        7,
        8,
        9,
        12,
        13,
        14,
        7,
        22
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 10,
          "state": []
        },
        {
          "block": 11,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 10,
          "state": []
        },
        {
          "block": 11,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 10,
          "state": []
        },
        {
          "block": 11,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 14,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "num = ['29', '20', '7', '35', '120']",
          "num2 = sorted([list(i)[-1] for i in num],reverse = False)",
          "num3 = [n for n in num2 if n != \"0\" ]",
          "C = 0",
          "c = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> num"
        ],
        "3": [
          "j = list(i)[-1]",
          "(j == num3[0] and c == 1)"
        ],
        "4": [
          "C += int(i)",
          "c += 1"
        ],
        "5": [
          "(c > 1)"
        ],
        "6": [
          "(int(j) >= 5 or int(j) == 0)"
        ],
        "7": [
          "C += round(int(i),-1)"
        ],
        "8": [
          "(0 < int(j) < 5)"
        ],
        "9": [
          "C += round(int(i),-1)+10"
        ],
        "10": [
          "(int(j) >= 5 or int(j) == 0)"
        ],
        "11": [
          "C += round(int(i),-1)"
        ],
        "12": [
          "(0 < int(j) < 5)"
        ],
        "13": [
          "C += round(int(i),-1)+10"
        ],
        "14": [
          "print(C)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 14
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 10
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 2
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 2
          },
          "no_condition": null
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    num = ['29', '20', '7', '35', '120']\n    num2 = sorted([list(i)[-1] for i in num],reverse = False)\n    num3 = [n for n in num2 if n != \"0\" ]\n    C = 0\n    c = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> num\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 14\n\nBlock 3:\nStatement:\n    j = list(i)[-1]\n    (j == num3[0] and c == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    C += int(i)\n    c += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (c > 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 10\n\nBlock 6:\nStatement:\n    (int(j) >= 5 or int(j) == 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    C += round(int(i),-1)\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    (0 < int(j) < 5)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 2\n\nBlock 9:\nStatement:\n    C += round(int(i),-1)+10\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    (int(j) >= 5 or int(j) == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    C += round(int(i),-1)\nNext:\n    Go to Block: 2\n\nBlock 12:\nStatement:\n    (0 < int(j) < 5)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 2\n\nBlock 13:\nStatement:\n    C += round(int(i),-1)+10\nNext:\n    Go to Block: 2\n\nBlock 14:\nStatement:\n    print(C)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s170908819": {
      "code": "lst_str = ['29', '20', '7', '35', '120']\nlst_int = [int(x) for x in lst_str]\nlst_diff = []\nsum_lst = sum(lst_int)\nfor i in lst_str:\n    val = 10 - int(i[-1])\n    if val != 10:\n        lst_diff.append(val)\ndiff = sum(lst_diff) - max(lst_diff)\nans = sum_lst + diff\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        5,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "lst_diff": "[]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lst_diff": "[]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "val": "1"
            },
            {
              "lst_diff": "[]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "val": "1"
            },
            {
              "lst_diff": "[1]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "val": "1"
            },
            {
              "lst_diff": "[1]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "val": "10"
            },
            {
              "lst_diff": "[1]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "val": "10"
            },
            {
              "lst_diff": "[1]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "val": "3"
            },
            {
              "lst_diff": "[1]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "val": "3"
            },
            {
              "lst_diff": "[1, 3]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "val": "3"
            },
            {
              "lst_diff": "[1, 3]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "val": "5"
            },
            {
              "lst_diff": "[1, 3]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "val": "5"
            },
            {
              "lst_diff": "[1, 3, 5]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "val": "5"
            },
            {
              "lst_diff": "[1, 3, 5]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "val": "10"
            },
            {
              "lst_diff": "[1, 3, 5]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "val": "10"
            },
            {
              "lst_diff": "[1, 3, 5]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "215"
            },
            {
              "val": "10"
            },
            {
              "lst_diff": "[1, 3, 5]"
            },
            {
              "sum_lst": "211"
            },
            {
              "lst_int": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "4"
            },
            {
              "lst_str": "['29', '20', '7', '35', '120']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "lst_str = ['29', '20', '7', '35', '120']",
          "lst_int = [int(x) for x in lst_str]",
          "lst_diff = []",
          "sum_lst = sum(lst_int)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> lst_str"
        ],
        "3": [
          "val = 10 - int(i[-1])",
          "(val != 10)"
        ],
        "4": [
          "lst_diff.append(val)"
        ],
        "5": [
          "diff = sum(lst_diff) - max(lst_diff)",
          "ans = sum_lst + diff",
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    lst_str = ['29', '20', '7', '35', '120']\n    lst_int = [int(x) for x in lst_str]\n    lst_diff = []\n    sum_lst = sum(lst_int)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> lst_str\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    val = 10 - int(i[-1])\n    (val != 10)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    lst_diff.append(val)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    diff = sum(lst_diff) - max(lst_diff)\n    ans = sum_lst + diff\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s506366898": {
      "code": "x = [29, 20, 7, 35, 120]\na = []\nres = 0\nfor i in x:\n    if i%10!=0:\n        a.append(10-i%10)\nb = max(a)\nc = sum(a)-b\nprint(sum(x)+c)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        4,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1, 3]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1, 3]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1, 3]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1, 3, 5]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1, 3, 5]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1, 3, 5]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "res": "0"
            },
            {
              "a": "[1, 3, 5]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "b": "5"
            },
            {
              "res": "0"
            },
            {
              "a": "[1, 3, 5]"
            },
            {
              "x": "[29, 20, 7, 35, 120]"
            },
            {
              "c": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "x = [29, 20, 7, 35, 120]",
          "a = []",
          "res = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> x"
        ],
        "3": [
          "(i % 10 != 0)"
        ],
        "4": [
          "a.append(10-i%10)"
        ],
        "5": [
          "b = max(a)",
          "c = sum(a)-b",
          "print(sum(x)+c)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = [29, 20, 7, 35, 120]\n    a = []\n    res = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> x\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i % 10 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a.append(10-i%10)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    b = max(a)\n    c = sum(a)-b\n    print(sum(x)+c)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s474514448": {
      "code": "dish = [29, 20, 7, 35, 120]\ndiff = 0\nans = []\nfor index,d in enumerate(dish):\n  if d % 10 != 0:\n    d10 = ((d //10) +1) * 10\n    ans.append(d10)\n    if diff < d10-d:\n      diff = d10-d\n      last= index\n  else:\n    ans.append(d)\nans.remove(ans[last])\nprint(sum(ans)+dish[last])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            8
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            13,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        4,
        5,
        12,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        4,
        5,
        12,
        4,
        13,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "[]"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "[]"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "[]"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "[30]"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "0"
            },
            {
              "d10": "30"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "[30]"
            },
            {
              "last": "0"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "1"
            },
            {
              "d10": "30"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "[30]"
            },
            {
              "last": "0"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "1"
            },
            {
              "d10": "30"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "[30]"
            },
            {
              "last": "0"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "1"
            },
            {
              "d10": "30"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "[30, 20]"
            },
            {
              "last": "0"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "1"
            },
            {
              "d10": "30"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "[30, 20]"
            },
            {
              "last": "0"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "1"
            },
            {
              "d10": "30"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "[30, 20]"
            },
            {
              "last": "0"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "1"
            },
            {
              "d10": "30"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "[30, 20, 10]"
            },
            {
              "last": "0"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "1"
            },
            {
              "d10": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "[30, 20, 10]"
            },
            {
              "last": "2"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "3"
            },
            {
              "d10": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "[30, 20, 10]"
            },
            {
              "last": "2"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "3"
            },
            {
              "d10": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "[30, 20, 10]"
            },
            {
              "last": "2"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "3"
            },
            {
              "d10": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "[30, 20, 10, 40]"
            },
            {
              "last": "2"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "3"
            },
            {
              "d10": "40"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "[30, 20, 10, 40]"
            },
            {
              "last": "3"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "5"
            },
            {
              "d10": "40"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "[30, 20, 10, 40]"
            },
            {
              "last": "3"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "5"
            },
            {
              "d10": "40"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "[30, 20, 10, 40]"
            },
            {
              "last": "3"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "5"
            },
            {
              "d10": "40"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "[30, 20, 10, 40, 120]"
            },
            {
              "last": "3"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "5"
            },
            {
              "d10": "40"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "[30, 20, 10, 40, 120]"
            },
            {
              "last": "3"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "5"
            },
            {
              "d10": "40"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ans": "[30, 20, 10, 120]"
            },
            {
              "last": "3"
            },
            {
              "dish": "[29, 20, 7, 35, 120]"
            },
            {
              "diff": "5"
            },
            {
              "d10": "40"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "dish = [29, 20, 7, 35, 120]",
          "diff = 0",
          "ans = []"
        ],
        "2": [
          "index <- index\n    d <- iterator"
        ],
        "3": [
          "(d % 10 != 0)"
        ],
        "4": [
          "d10 = ((d //10) +1) * 10",
          "ans.append(d10)",
          "(diff < d10 - d)"
        ],
        "5": [
          "diff = d10-d",
          "last= index"
        ],
        "6": [
          "ans.append(d)"
        ],
        "7": [
          "ans.remove(ans[last])",
          "print(sum(ans)+dish[last])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 6
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    dish = [29, 20, 7, 35, 120]\n    diff = 0\n    ans = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    index <- index\n    d <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (d % 10 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    d10 = ((d //10) +1) * 10\n    ans.append(d10)\n    (diff < d10 - d)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    diff = d10-d\n    last= index\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    ans.append(d)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    ans.remove(ans[last])\n    print(sum(ans)+dish[last])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s593709966": {
      "code": "import numpy as np\na = 29\nb = 20\nc = 7\nd = 35\ne = 120\nA = list(str(a))\nB = list(str(b))\nC = list(str(c))\nD = list(str(d))\nE = list(str(e))\nk = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])\nsum = 0\nif A[-1] == 0:\n  sum += a\nelse:\n  sum += a + (10 - int(A[-1]))\nif B[-1] == 0:\n  sum += b\nelse:\n  sum += b + (10 - int(B[-1]))\nif C[-1] == 0:\n  sum += c\nelse:\n  sum += c + (10 - int(C[-1]))\nif D[-1] == 0:\n  sum += d\nelse:\n  sum += d + (10 - int(D[-1]))\nif E[-1] == 0:\n  sum += e\nelse:\n  sum += e + (10 - int(E[-1]))\nsum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]\nprint(sum)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            14
          ]
        },
        "2": {
          "range": [
            15,
            15
          ]
        },
        "3": {
          "range": [
            17,
            17
          ]
        },
        "4": {
          "range": [
            18,
            18
          ]
        },
        "5": {
          "range": [
            19,
            19
          ]
        },
        "6": {
          "range": [
            21,
            21
          ]
        },
        "7": {
          "range": [
            22,
            22
          ]
        },
        "8": {
          "range": [
            23,
            23
          ]
        },
        "9": {
          "range": [
            25,
            25
          ]
        },
        "10": {
          "range": [
            26,
            26
          ]
        },
        "11": {
          "range": [
            27,
            27
          ]
        },
        "12": {
          "range": [
            29,
            29
          ]
        },
        "13": {
          "range": [
            30,
            30
          ]
        },
        "14": {
          "range": [
            31,
            31
          ]
        },
        "15": {
          "range": [
            33,
            33
          ]
        },
        "16": {
          "range": [
            34,
            35
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        18,
        21,
        22,
        25,
        26,
        29,
        30,
        33,
        34
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "sum": "0"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "a": "29"
            },
            {
              "sum": "30"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "a": "29"
            },
            {
              "sum": "30"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "sum": "60"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "sum": "60"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "sum": "70"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "sum": "70"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "sum": "110"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "sum": "110"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "sum": "240"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        },
        {
          "block": 16,
          "state": [
            {
              "k": "<numpy.int64 object at 0x7f71a2289530>"
            },
            {
              "E": "['1', '2', '0']"
            },
            {
              "c": "7"
            },
            {
              "B": "['2', '0']"
            },
            {
              "b": "20"
            },
            {
              "D": "['3', '5']"
            },
            {
              "sum": "240"
            },
            {
              "a": "29"
            },
            {
              "d": "35"
            },
            {
              "e": "120"
            },
            {
              "C": "['7']"
            },
            {
              "A": "['2', '9']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "a = 29",
          "b = 20",
          "c = 7",
          "d = 35",
          "e = 120",
          "A = list(str(a))",
          "B = list(str(b))",
          "C = list(str(c))",
          "D = list(str(d))",
          "E = list(str(e))",
          "k = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])",
          "sum = 0",
          "(A[-1] == 0)"
        ],
        "2": [
          "sum += a"
        ],
        "3": [
          "sum += a + (10 - int(A[-1]))"
        ],
        "4": [
          "(B[-1] == 0)"
        ],
        "5": [
          "sum += b"
        ],
        "6": [
          "sum += b + (10 - int(B[-1]))"
        ],
        "7": [
          "(C[-1] == 0)"
        ],
        "8": [
          "sum += c"
        ],
        "9": [
          "sum += c + (10 - int(C[-1]))"
        ],
        "10": [
          "(D[-1] == 0)"
        ],
        "11": [
          "sum += d"
        ],
        "12": [
          "sum += d + (10 - int(D[-1]))"
        ],
        "13": [
          "(E[-1] == 0)"
        ],
        "14": [
          "sum += e"
        ],
        "15": [
          "sum += e + (10 - int(E[-1]))"
        ],
        "16": [
          "sum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]",
          "print(sum)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        },
        "15": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    a = 29\n    b = 20\n    c = 7\n    d = 35\n    e = 120\n    A = list(str(a))\n    B = list(str(b))\n    C = list(str(c))\n    D = list(str(d))\n    E = list(str(e))\n    k = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])\n    sum = 0\n    (A[-1] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    sum += a\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    sum += a + (10 - int(A[-1]))\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (B[-1] == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    sum += b\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    sum += b + (10 - int(B[-1]))\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (C[-1] == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    sum += c\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    sum += c + (10 - int(C[-1]))\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    (D[-1] == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    sum += d\nNext:\n    Go to Block: 13\n\nBlock 12:\nStatement:\n    sum += d + (10 - int(D[-1]))\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (E[-1] == 0)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    sum += e\nNext:\n    Go to Block: 16\n\nBlock 15:\nStatement:\n    sum += e + (10 - int(E[-1]))\nNext:\n    Go to Block: 16\n\nBlock 16:\nStatement:\n    sum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]\n    print(sum)\nNext:\n    <END>\n"
    }
  },
  "p03085": {
    "s159886354": {
      "code": "dict = {'A':'T','G':'C'}\nb = 'A'\nprint(dict[b])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "dict = {'A':'T','G':'C'}",
          "b = 'A'",
          "print(dict[b])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    dict = {'A':'T','G':'C'}\n    b = 'A'\n    print(dict[b])\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03086": {
    "s533246401": {
      "code": "S = 'ATCODER'\nATCG = ['A','T','C','G']\nans = []\npre = 0\nfor s in S:\n    if s in ATCG:\n        pre += 1\n    else:\n        ans.append(pre)\n        pre = 0\nprint(max(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[]"
            },
            {
              "pre": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0, 0]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0, 0]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0, 0]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0, 0, 0]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0, 0, 0]"
            },
            {
              "pre": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "S": "'ATCODER'"
            },
            {
              "ATCG": "['A', 'T', 'C', 'G']"
            },
            {
              "ans": "[3, 0, 0, 0]"
            },
            {
              "pre": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'ATCODER'",
          "ATCG = ['A','T','C','G']",
          "ans = []",
          "pre = 0"
        ],
        "2": [
          "iterator -> s, Iterate Over -> S"
        ],
        "3": [
          "(s in ATCG)"
        ],
        "4": [
          "pre += 1"
        ],
        "5": [
          "ans.append(pre)",
          "pre = 0"
        ],
        "6": [
          "print(max(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ATCODER'\n    ATCG = ['A','T','C','G']\n    ans = []\n    pre = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s in ATCG)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    pre += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans.append(pre)\n    pre = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(ans))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s515026894": {
      "code": "s = 'ATCODER'\nmoji = (\"A\",\"C\",\"G\",\"T\")\ncount = []\ntmp = 0\nfor i in range(len(s)):\n    if s[i] in moji:\n        tmp +=1\n    else:\n        count.append(tmp)\n        tmp = 0\nprint(max(count))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "1"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "1"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "1"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "2"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "2"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "2"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "3"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "3"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "3"
            },
            {
              "count": "[]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0, 0]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "moji": "('A', 'C', 'G', 'T')"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "tmp": "0"
            },
            {
              "count": "[3, 0, 0, 0]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ATCODER'",
          "moji = (\"A\",\"C\",\"G\",\"T\")",
          "count = []",
          "tmp = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "(s[i] in moji)"
        ],
        "4": [
          "tmp +=1"
        ],
        "5": [
          "count.append(tmp)",
          "tmp = 0"
        ],
        "6": [
          "print(max(count))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ATCODER'\n    moji = (\"A\",\"C\",\"G\",\"T\")\n    count = []\n    tmp = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] in moji)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    tmp +=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    count.append(tmp)\n    tmp = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(count))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s487512039": {
      "code": "S = 'ATCODER'\nList = list(S)\nans = 0\narr = []\nfor i in range(len(List)):\n  if List[i] == \"A\" or List[i] == \"C\" or List[i] == \"G\" or List[i] == \"T\":\n    ans += 1\n  else:\n    arr.append(ans)\n    ans = 0\nprint(max(arr))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "1"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "1"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "1"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "2"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "2"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "2"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "3"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "3"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "arr": "[]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "3"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "arr": "[3]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "arr": "[3]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "arr": "[3]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "arr": "[3, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "arr": "[3, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "arr": "[3, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "arr": "[3, 0, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "arr": "[3, 0, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "arr": "[3, 0, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "arr": "[3, 0, 0, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "arr": "[3, 0, 0, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "arr": "[3, 0, 0, 0]"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "List": "['A', 'T', 'C', 'O', 'D', 'E', 'R']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'ATCODER'",
          "List = list(S)",
          "ans = 0",
          "arr = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(List))"
        ],
        "3": [
          "(List[i] == 'A' or List[i] == 'C' or List[i] == 'G' or (List[i] == 'T'))"
        ],
        "4": [
          "ans += 1"
        ],
        "5": [
          "arr.append(ans)",
          "ans = 0"
        ],
        "6": [
          "print(max(arr))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ATCODER'\n    List = list(S)\n    ans = 0\n    arr = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(List))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (List[i] == 'A' or List[i] == 'C' or List[i] == 'G' or (List[i] == 'T'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    arr.append(ans)\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(arr))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s759651311": {
      "code": "s = 'ATCODER'\nL = [\"A\",\"C\",\"G\",\"T\"]\ncounter = 0\nans_L = []\nfor val in s:\n    if val in L:\n        counter += 1\n    else:\n        ans_L.append(counter)\n        counter = 0\nprint(max(ans_L))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "1"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "1"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "1"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "2"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "2"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "2"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0, 0]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "L": "['A', 'C', 'G', 'T']"
            },
            {
              "ans_L": "[3, 0, 0, 0]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ATCODER'",
          "L = [\"A\",\"C\",\"G\",\"T\"]",
          "counter = 0",
          "ans_L = []"
        ],
        "2": [
          "iterator -> val, Iterate Over -> s"
        ],
        "3": [
          "(val in L)"
        ],
        "4": [
          "counter += 1"
        ],
        "5": [
          "ans_L.append(counter)",
          "counter = 0"
        ],
        "6": [
          "print(max(ans_L))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ATCODER'\n    L = [\"A\",\"C\",\"G\",\"T\"]\n    counter = 0\n    ans_L = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> val, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (val in L)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    counter += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans_L.append(counter)\n    counter = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(ans_L))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s217836369": {
      "code": "s = 'ATCODER'\nans=''\nlis=[]\nfor i in s:\n    if i in 'ATGC':\n        ans += i\n    else:\n        lis.append(ans)\n        ans=''\nprint(len(max(lis)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        8,
        9,
        4,
        5,
        8,
        9,
        4,
        5,
        8,
        9,
        4,
        5,
        8,
        9,
        4,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'A'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'A'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'A'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'AT'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'AT'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'AT'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'ATC'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'ATC'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lis": "[]"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "'ATC'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "lis": "['ATC']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lis": "['ATC']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lis": "['ATC']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "lis": "['ATC', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lis": "['ATC', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lis": "['ATC', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "lis": "['ATC', '', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lis": "['ATC', '', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lis": "['ATC', '', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "lis": "['ATC', '', '', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "lis": "['ATC', '', '', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "lis": "['ATC', '', '', '']"
            },
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "''"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ATCODER'",
          "ans=''",
          "lis=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> s"
        ],
        "3": [
          "(i in 'ATGC')"
        ],
        "4": [
          "ans += i"
        ],
        "5": [
          "lis.append(ans)",
          "ans=''"
        ],
        "6": [
          "print(len(max(lis)))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ATCODER'\n    ans=''\n    lis=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i in 'ATGC')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    lis.append(ans)\n    ans=''\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(len(max(lis)))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s403962833": {
      "code": "s = 'ATCODER'\nnum = []\nlists = [\"A\",\"c\",\"G\",\"T\"]\ncount = 0\nfor i in range(len(s)):\n    if s[i] in lists:\n        count +=1\n    else:\n        num.append(count)\nprint(max(num))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "lists": "['A', 'c', 'G', 'T']"
            },
            {
              "num": "[2, 2, 2, 2, 2]"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ATCODER'",
          "num = []",
          "lists = [\"A\",\"c\",\"G\",\"T\"]",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "(s[i] in lists)"
        ],
        "4": [
          "count +=1"
        ],
        "5": [
          "num.append(count)"
        ],
        "6": [
          "print(max(num))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ATCODER'\n    num = []\n    lists = [\"A\",\"c\",\"G\",\"T\"]\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] in lists)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count +=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    num.append(count)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(num))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s652520918": {
      "code": "S = 'ATCODER'\nnagasa = len(S)\nichi_list = []\ncounter = 0\nfor i in range(nagasa):\n    if S[i] == 'A' or S[i] == 'T' or S[i] == 'C' or S[i] == 'G':\n        counter += 1\n    else:\n        counter = ichi_list.append(counter)\n        counter = 0\nprint(max(ichi_list))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        6,
        9,
        10,
        5,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "1"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "1"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "1"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "2"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "2"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "2"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "3"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "3"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ichi_list": "[]"
            },
            {
              "counter": "3"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ichi_list": "[3]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ichi_list": "[3]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ichi_list": "[3]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ichi_list": "[3, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ichi_list": "[3, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ichi_list": "[3, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ichi_list": "[3, 0, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ichi_list": "[3, 0, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ichi_list": "[3, 0, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ichi_list": "[3, 0, 0, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ichi_list": "[3, 0, 0, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ichi_list": "[3, 0, 0, 0]"
            },
            {
              "counter": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "nagasa": "7"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'ATCODER'",
          "nagasa = len(S)",
          "ichi_list = []",
          "counter = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(nagasa)"
        ],
        "3": [
          "(S[i] == 'A' or S[i] == 'T' or S[i] == 'C' or (S[i] == 'G'))"
        ],
        "4": [
          "counter += 1"
        ],
        "5": [
          "counter = ichi_list.append(counter)",
          "counter = 0"
        ],
        "6": [
          "print(max(ichi_list))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ATCODER'\n    nagasa = len(S)\n    ichi_list = []\n    counter = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(nagasa)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (S[i] == 'A' or S[i] == 'T' or S[i] == 'C' or (S[i] == 'G'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    counter += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    counter = ichi_list.append(counter)\n    counter = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(ichi_list))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s968042783": {
      "code": "s = 'ATCODER'\nd = [\"A\",\"T\",\"G\",\"C\"]\nl = []\ncount = 0\nfor i in range(len(s)):\n    if s[i] not in d:\n        l.append(count)\n        count = 0\n    else:\n        count += 1\nprint(max(l))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        5,
        6,
        10,
        5,
        6,
        10,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0, 0, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0, 0, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "l": "[3, 0, 0, 0]"
            },
            {
              "d": "['A', 'T', 'G', 'C']"
            },
            {
              "count": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ATCODER'",
          "d = [\"A\",\"T\",\"G\",\"C\"]",
          "l = []",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "(s[i] not in d)"
        ],
        "4": [
          "l.append(count)",
          "count = 0"
        ],
        "5": [
          "count += 1"
        ],
        "6": [
          "print(max(l))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ATCODER'\n    d = [\"A\",\"T\",\"G\",\"C\"]\n    l = []\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] not in d)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    l.append(count)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(l))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s571850776": {
      "code": "import re\nS = 'ATCODER'\nprint(max([len(s) for s in re.findall('[ACGT]+',S)]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import re",
          "S = 'ATCODER'",
          "print(max([len(s) for s in re.findall('[ACGT]+',S)]))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import re\n    S = 'ATCODER'\n    print(max([len(s) for s in re.findall('[ACGT]+',S)]))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s055689948": {
      "code": "s = 'ATCODER'\nans = []\ncounter = 0\nfor i in s:\n    if i in 'ATGC':\n        counter += 1\n    else:\n        ans.append(counter)\n        conter = 0\nprint(max(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        8,
        9,
        4,
        5,
        8,
        9,
        4,
        5,
        8,
        9,
        4,
        5,
        8,
        9,
        4,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "0"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "1"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "1"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "1"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "2"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "2"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "2"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3, 3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3, 3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "counter": "3"
            },
            {
              "ans": "[3, 3, 3, 3]"
            },
            {
              "conter": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ATCODER'",
          "ans = []",
          "counter = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> s"
        ],
        "3": [
          "(i in 'ATGC')"
        ],
        "4": [
          "counter += 1"
        ],
        "5": [
          "ans.append(counter)",
          "conter = 0"
        ],
        "6": [
          "print(max(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ATCODER'\n    ans = []\n    counter = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i in 'ATGC')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    counter += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans.append(counter)\n    conter = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(ans))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s012163745": {
      "code": "s = 'ATCODER'\nans=0\ncur=0\nACGT=set(\"A\",\"C\",\"G\",\"T\")\nfor ss in s:\n  if ss in ACGT:\n    cur+=1\n  else:\n    ans=max(cur,ans)\n    cur=0\nprint(max(ans,cur))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ATCODER'"
            },
            {
              "ans": "0"
            },
            {
              "cur": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('set expected at most 1 argument, got 4')"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'ATCODER'",
          "ans=0",
          "cur=0",
          "ACGT=set(\"A\",\"C\",\"G\",\"T\")"
        ],
        "2": [
          "iterator -> ss, Iterate Over -> s"
        ],
        "3": [
          "(ss in ACGT)"
        ],
        "4": [
          "cur+=1"
        ],
        "5": [
          "ans=max(cur,ans)",
          "cur=0"
        ],
        "6": [
          "print(max(ans,cur))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ATCODER'\n    ans=0\n    cur=0\n    ACGT=set(\"A\",\"C\",\"G\",\"T\")\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> ss, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (ss in ACGT)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    cur+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans=max(cur,ans)\n    cur=0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(ans,cur))\nNext:\n    <END>\n"
    },
    "s669241807": {
      "code": "S = 'ATCODER'\nmax = 0\ncount = 0\nfor x in S :\n    if x in \"ATGC\" :\n        count += 1\n    else :\n        max = max(max, count)\n        count = 0\nmax = max(max, count)\nprint(max)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        },
        "6": {
          "range": [
            10,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "count": "1"
            },
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count": "1"
            },
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "count": "1"
            },
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "count": "3"
            },
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count": "3"
            },
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "count": "3"
            },
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "count": "3"
            },
            {
              "max": "0"
            },
            {
              "S": "'ATCODER'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'ATCODER'",
          "max = 0",
          "count = 0"
        ],
        "2": [
          "iterator -> x, Iterate Over -> S"
        ],
        "3": [
          "(x in 'ATGC')"
        ],
        "4": [
          "count += 1"
        ],
        "5": [
          "max = max(max, count)",
          "count = 0"
        ],
        "6": [
          "max = max(max, count)",
          "print(max)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ATCODER'\n    max = 0\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (x in 'ATGC')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    max = max(max, count)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    max = max(max, count)\n    print(max)\nNext:\n    <END>\n"
    }
  },
  "p03107": {
    "s052280814": {
      "code": "S = '0011'\nstack = []\ncnt = 0\nfor s in S:\n    if s == S[0]:\n        stack.append(s)\n    elif s == '0' and s != stack[-1]:\n        stack.pop()\n        cnt += 2\n    elif s == '1' and s != stack[-1]:\n        stack.pop()\n        cnt += 2\n    else:\n        stack.append(s)\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            12
          ]
        },
        "9": {
          "range": [
            14,
            14
          ]
        },
        "10": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        7,
        10,
        11,
        12,
        4,
        5,
        7,
        10,
        11,
        12,
        4,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "stack": "[]"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "stack": "[]"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "stack": "[]"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "stack": "['0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "stack": "['0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "stack": "['0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "stack": "['0', '0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "stack": "['0', '0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "stack": "['0', '0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "stack": "['0', '0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "stack": "['0', '0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "stack": "['0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "stack": "['0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "stack": "['0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "stack": "['0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "stack": "['0']"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "stack": "[]"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "stack": "[]"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "4"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "stack": "[]"
            },
            {
              "S": "'0011'"
            },
            {
              "cnt": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = '0011'",
          "stack = []",
          "cnt = 0"
        ],
        "2": [
          "iterator -> s, Iterate Over -> S"
        ],
        "3": [
          "(s == S[0])"
        ],
        "4": [
          "stack.append(s)"
        ],
        "5": [
          "(s == '0' and s != stack[-1])"
        ],
        "6": [
          "stack.pop()",
          "cnt += 2"
        ],
        "7": [
          "(s == '1' and s != stack[-1])"
        ],
        "8": [
          "stack.pop()",
          "cnt += 2"
        ],
        "9": [
          "stack.append(s)"
        ],
        "10": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '0011'\n    stack = []\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (s == S[0])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    stack.append(s)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (s == '0' and s != stack[-1])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    stack.pop()\n    cnt += 2\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (s == '1' and s != stack[-1])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    stack.pop()\n    cnt += 2\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    stack.append(s)\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s022152697": {
      "code": "s = '0011'\ntimes = 0\nis01 = s.find(\"01\")\nis10 = s.find(\"10\")\nwhile is01 != -1 or is10 != -1:\n    times += 1\n    if is01 != -1:\n        s = s[:is01] + s[is01+2:]\n    else :\n        s = s[:is10] + s[is10+2:]\n    is01 = s.find(\"01\")\n    is10 = s.find(\"10\")\n    print(s)\nprint(times*2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        5,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "'0011'"
            },
            {
              "is01": "1"
            },
            {
              "times": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "'0011'"
            },
            {
              "is01": "1"
            },
            {
              "times": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "'0011'"
            },
            {
              "is01": "1"
            },
            {
              "times": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "'01'"
            },
            {
              "is01": "1"
            },
            {
              "times": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "'01'"
            },
            {
              "is01": "0"
            },
            {
              "times": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "'01'"
            },
            {
              "is01": "0"
            },
            {
              "times": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "'01'"
            },
            {
              "is01": "0"
            },
            {
              "times": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "''"
            },
            {
              "is01": "0"
            },
            {
              "times": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "''"
            },
            {
              "is01": "-1"
            },
            {
              "times": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "''"
            },
            {
              "is01": "-1"
            },
            {
              "times": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "is10": "-1"
            },
            {
              "s": "''"
            },
            {
              "is01": "-1"
            },
            {
              "times": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '0011'",
          "times = 0",
          "is01 = s.find(\"01\")",
          "is10 = s.find(\"10\")"
        ],
        "2": [
          "while is01 != -1 or is10 != -1:"
        ],
        "3": [
          "times += 1",
          "(is01 != -1)"
        ],
        "4": [
          "s = s[:is01] + s[is01+2:]"
        ],
        "5": [
          "s = s[:is10] + s[is10+2:]"
        ],
        "6": [
          "is01 = s.find(\"01\")",
          "is10 = s.find(\"10\")",
          "print(s)"
        ],
        "7": [
          "print(times*2)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '0011'\n    times = 0\n    is01 = s.find(\"01\")\n    is10 = s.find(\"10\")\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while is01 != -1 or is10 != -1:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    times += 1\n    (is01 != -1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s = s[:is01] + s[is01+2:]\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    s = s[:is10] + s[is10+2:]\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    is01 = s.find(\"01\")\n    is10 = s.find(\"10\")\n    print(s)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(times*2)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s070814789": {
      "code": "S = '0011'\nS=S.replace(\"10\",\"3\")\nS=S.replace(\"01\",\"3\")\nres=0\nres+=S.count(3)\nprint(S.replace(\"3\",\"\"))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'031'"
            },
            {
              "res": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('must be str, not int')"
      },
      "cfg_block_statements": {
        "1": [
          "S = '0011'",
          "S=S.replace(\"10\",\"3\")",
          "S=S.replace(\"01\",\"3\")",
          "res=0",
          "res+=S.count(3)",
          "print(S.replace(\"3\",\"\"))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '0011'\n    S=S.replace(\"10\",\"3\")\n    S=S.replace(\"01\",\"3\")\n    res=0\n    res+=S.count(3)\n    print(S.replace(\"3\",\"\"))\nNext:\n    <END>\n"
    },
    "s501450778": {
      "code": "s = '0011'\na = 0\nfor i in s:\n  a += i\nprint(2 * min(a, len(s)-a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'0011'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'0011'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'0011'"
            },
            {
              "a": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '0011'",
          "a = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> s"
        ],
        "3": [
          "a += i"
        ],
        "4": [
          "print(2 * min(a, len(s)-a))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '0011'\n    a = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += i\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(2 * min(a, len(s)-a))\nNext:\n    <END>\n"
    },
    "s890072018": {
      "code": "s = '0011'\nzero =s.count(\"0\")\none =s.count(\"1\")\nMIN =min(zero,one)\nprint(min*2)    ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "MIN": "2"
            },
            {
              "s": "'0011'"
            },
            {
              "zero": "2"
            },
            {
              "one": "2"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for *: 'builtin_function_or_method' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '0011'",
          "zero =s.count(\"0\")",
          "one =s.count(\"1\")",
          "MIN =min(zero,one)",
          "print(min*2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '0011'\n    zero =s.count(\"0\")\n    one =s.count(\"1\")\n    MIN =min(zero,one)\n    print(min*2)\nNext:\n    <END>\n"
    }
  },
  "p03127": {
    "s424911603": {
      "code": "import math\nn = 4\na = [2, 10, 8, 40]\nx = a[0]\nfor i in range(n):\n    x = math.gcd(x, a[i])\nprint(x) ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 4",
          "a = [2, 10, 8, 40]",
          "x = a[0]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "x = math.gcd(x, a[i])"
        ],
        "4": [
          "print(x)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 4\n    a = [2, 10, 8, 40]\n    x = a[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x = math.gcd(x, a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(x)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s182709436": {
      "code": "import math\nN = 4\nA = [2, 10, 8, 40]\ng = math.gcd(A[0], A[1])\nfor a in A:\n    if g == 1:\n        break\n    g = math.gcd(g, a)\nprint(g)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        5,
        6,
        8,
        5,
        6,
        8,
        5,
        6,
        8,
        5,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "N = 4",
          "A = [2, 10, 8, 40]",
          "g = math.gcd(A[0], A[1])"
        ],
        "2": [
          "iterator -> a, Iterate Over -> A"
        ],
        "3": [
          "(g == 1)"
        ],
        "4": [
          "g = math.gcd(g, a)"
        ],
        "5": [
          "print(g)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 5,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = 4\n    A = [2, 10, 8, 40]\n    g = math.gcd(A[0], A[1])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (g == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    g = math.gcd(g, a)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(g)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s353273418": {
      "code": "from math import gcd\nn = 4\nA = [2, 10, 8, 40]\nans = A[0]\nfor a in A[1:]:\n    ans = gcd(ans, a)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from math import gcd",
          "n = 4",
          "A = [2, 10, 8, 40]",
          "ans = A[0]"
        ],
        "2": [
          "iterator -> a, Iterate Over -> A[1:]"
        ],
        "3": [
          "ans = gcd(ans, a)"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from math import gcd\n    n = 4\n    A = [2, 10, 8, 40]\n    ans = A[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A[1:]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = gcd(ans, a)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s377624293": {
      "code": "import math\nn = 4\na = [2, 10, 8, 40]\na.sort()\ng = a[n - 1]\nfor i in range(1, n):\n    g = math.gcd(g, a[i])\nprint(g)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        6,
        7,
        6,
        7,
        6,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 4",
          "a = [2, 10, 8, 40]",
          "a.sort()",
          "g = a[n - 1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "g = math.gcd(g, a[i])"
        ],
        "4": [
          "print(g)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 4\n    a = [2, 10, 8, 40]\n    a.sort()\n    g = a[n - 1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    g = math.gcd(g, a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(g)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s013822748": {
      "code": "import math\nfrom functools import reduce\nN = 4\nA = ['2', '10', '8', '40']\nA = [int(i) for i in A]\nprint(reduce(math.gcd,A))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "from functools import reduce",
          "N = 4",
          "A = ['2', '10', '8', '40']",
          "A = [int(i) for i in A]",
          "print(reduce(math.gcd,A))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    from functools import reduce\n    N = 4\n    A = ['2', '10', '8', '40']\n    A = [int(i) for i in A]\n    print(reduce(math.gcd,A))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s821036793": {
      "code": "n = 4\na = [2, 10, 8, 40]\nimport math\nans = math.gcd(a[0],a[1])\nfor i in a[2:]:\n\tans = math.gcd(ans,i)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        5,
        6,
        5,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[2, 10, 8, 40]"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[2, 10, 8, 40]"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[2, 10, 8, 40]"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[2, 10, 8, 40]"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[2, 10, 8, 40]"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[2, 10, 8, 40]"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[2, 10, 8, 40]"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "a = [2, 10, 8, 40]",
          "import math",
          "ans = math.gcd(a[0],a[1])"
        ],
        "2": [
          "iterator -> i, Iterate Over -> a[2:]"
        ],
        "3": [
          "ans = math.gcd(ans,i)"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2, 10, 8, 40]\n    import math\n    ans = math.gcd(a[0],a[1])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a[2:]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = math.gcd(ans,i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s228834307": {
      "code": "N = 4\nA = [2, 10, 8, 40]\nimport math\nimport itertools\nm = min(A)\nfor v in itertools.combinations(A,2):\n    m1 = math.gcd(*v)\n    if m > m1:\n        m = m1\nprint(m)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "m1": "2"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "m1": "2"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "m1": "2"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "m1": "2"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "m1": "2"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "m1": "2"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "m1": "2"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "m1": "2"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "m1": "10"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "m1": "10"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "m1": "8"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "m1": "8"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "m1": "8"
            },
            {
              "N": "4"
            },
            {
              "A": "[2, 10, 8, 40]"
            },
            {
              "m": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "A = [2, 10, 8, 40]",
          "import math",
          "import itertools",
          "m = min(A)"
        ],
        "2": [
          "iterator -> v, Iterate Over -> itertools.combinations(A, 2)"
        ],
        "3": [
          "m1 = math.gcd(*v)",
          "(m > m1)"
        ],
        "4": [
          "m = m1"
        ],
        "5": [
          "print(m)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2, 10, 8, 40]\n    import math\n    import itertools\n    m = min(A)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> itertools.combinations(A, 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    m1 = math.gcd(*v)\n    (m > m1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    m = m1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(m)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s630108940": {
      "code": "import math\nn = 4\na = [2, 10, 8, 40]\nx = a[0]\nfor i in range(1, n):\n    x = math.gcd(x, a[i])\nprint(x)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 4",
          "a = [2, 10, 8, 40]",
          "x = a[0]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "x = math.gcd(x, a[i])"
        ],
        "4": [
          "print(x)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 4\n    a = [2, 10, 8, 40]\n    x = a[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x = math.gcd(x, a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(x)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s246047787": {
      "code": "import math\nn = 4\na = [2, 10, 8, 40]\ng = a.sort()[n - 1]\nfor i in range(1, n):\n    g = math.gcd(g, a[i])\nprint(g)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 4",
          "a = [2, 10, 8, 40]",
          "g = a.sort()[n - 1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "g = math.gcd(g, a[i])"
        ],
        "4": [
          "print(g)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 4\n    a = [2, 10, 8, 40]\n    g = a.sort()[n - 1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    g = math.gcd(g, a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(g)\nNext:\n    <END>\n"
    }
  },
  "p03160": {
    "s473233259": {
      "code": "N = 4\nh = [10, 30, 40, 20]\nINF = 9999\ndp = [INF]*9999\ndp[0] = 0\ndp[1] = abs(h[1]-h[0])\nfor i in range(N):\n    if i == 0 or i == 1:\n        continue\n    else:\n        dp[i] = min(dp[i-1] + abs(h[i] - h[i-1]), dp[i-2] + abs(h[i]-h[i-2]))\nprint(dp[N-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        7,
        8,
        9,
        7,
        8,
        11,
        7,
        8,
        11,
        7,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            },
            {
              "INF": "9999"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "h = [10, 30, 40, 20]",
          "INF = 9999",
          "dp = [INF]*9999",
          "dp[0] = 0",
          "dp[1] = abs(h[1]-h[0])"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(i == 0 or i == 1)"
        ],
        "4": [
          "dp[i] = min(dp[i-1] + abs(h[i] - h[i-1]), dp[i-2] + abs(h[i]-h[i-2]))"
        ],
        "5": [
          "print(dp[N-1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    h = [10, 30, 40, 20]\n    INF = 9999\n    dp = [INF]*9999\n    dp[0] = 0\n    dp[1] = abs(h[1]-h[0])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i == 0 or i == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    dp[i] = min(dp[i-1] + abs(h[i] - h[i-1]), dp[i-2] + abs(h[i]-h[i-2]))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(dp[N-1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s304769532": {
      "code": "n = 4\nh = [10, 30, 40, 20]\ndp=[0]*n\ndp[0]=0\ndp[1]=abs(h[1]-h[0])\ndp[2]=min(abs(h[1]-h[0]),abs(h[2]-h[0]))\nfor i in range(3,n):\n    dp[i]=min(dp[i-1]+abs(h[i]-h[i-1]),dp[i-2]+abs(h[i]-h[i-2]))\nprint(dp[n-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        7,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "dp": "[0, 20, 20, 0]"
            },
            {
              "n": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dp": "[0, 20, 20, 0]"
            },
            {
              "n": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dp": "[0, 20, 20, 30]"
            },
            {
              "n": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dp": "[0, 20, 20, 30]"
            },
            {
              "n": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "dp": "[0, 20, 20, 30]"
            },
            {
              "n": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "h = [10, 30, 40, 20]",
          "dp=[0]*n",
          "dp[0]=0",
          "dp[1]=abs(h[1]-h[0])",
          "dp[2]=min(abs(h[1]-h[0]),abs(h[2]-h[0]))"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(3, n)"
        ],
        "3": [
          "dp[i]=min(dp[i-1]+abs(h[i]-h[i-1]),dp[i-2]+abs(h[i]-h[i-2]))"
        ],
        "4": [
          "print(dp[n-1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    h = [10, 30, 40, 20]\n    dp=[0]*n\n    dp[0]=0\n    dp[1]=abs(h[1]-h[0])\n    dp[2]=min(abs(h[1]-h[0]),abs(h[2]-h[0]))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    dp[i]=min(dp[i-1]+abs(h[i]-h[i-1]),dp[i-2]+abs(h[i]-h[i-2]))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(dp[n-1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s746052637": {
      "code": "N = 4\nh = [10, 30, 40, 20]\nDP = [0, abs(h[0]-h[1])]\nfor i in range(N-2):\n  DP += min((DP[-2] + abs(h[i]-h[i+2])),(DP[-1] + abs(h[i+2]-h[i+1])))\nprint(DP[-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "DP": "[0, 20]"
            },
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "DP": "[0, 20]"
            },
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "DP": "[0, 20]"
            },
            {
              "N": "4"
            },
            {
              "h": "[10, 30, 40, 20]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "h = [10, 30, 40, 20]",
          "DP = [0, abs(h[0]-h[1])]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N - 2)"
        ],
        "3": [
          "DP += min((DP[-2] + abs(h[i]-h[i+2])),(DP[-1] + abs(h[i+2]-h[i+1])))"
        ],
        "4": [
          "print(DP[-1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    h = [10, 30, 40, 20]\n    DP = [0, abs(h[0]-h[1])]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    DP += min((DP[-2] + abs(h[i]-h[i+2])),(DP[-1] + abs(h[i+2]-h[i+1])))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(DP[-1])\nNext:\n    <END>\n"
    }
  },
  "p03244": {
    "s948630180": {
      "code": "import collections\nn = 4\nv = [3, 1, 3, 2]\nve = [v[2*i] for i in range(n//2)]\nvo = [v[2*i + 1] for i in range(n//2)]\nCve = collections.Counter(ve)\nCvo = collections.Counter(vo)\nCve1 = Cve.most_common()[0]\nCvo1 = Cvo.most_common()[0]\nif len(Cve) == 1 and len(Cvo) == 1:\n    if Cve1[0] == Cvo1[0]: ans = n//2\n    else: ans = 0\nelif len(Cve) == 1 and len(Cvo) != 1:\n    Cvo2 = Cvo.most_common()[1]\n    if Cve1[0] == Cvo1[0]: ans = n//2 - Cvo2[1]\n    else: ans = n//2 - Cvo1[1]\nelif len(Cve) != 1 and len(Cvo) == 1:\n    Cve2 = Cve.most_common()[1]\n    if Cve1[0] == Cvo1[0]: ans = n//2 - Cve2[1]\n    else: ans = n//2 - Cve1[2]\nelse:\n    Cve2 = Cve.most_common()[1]\n    Cvo2 = Cvo.most_common()[1]\n    if Cve1[0] != Cvo1[0]: ans = n - Cve1[1] - Cvo1[1] \n    if Cve1[0] == Cvo1[0]:\n        if Cve1[1] > Cvo1[1]: ans = n - Cve1[1] - Cvo2[1]\n        else: ans = n - Cve2[1] - Cvo1[1]\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            10
          ]
        },
        "2": {
          "range": [
            11,
            11
          ]
        },
        "3": {
          "range": [
            12,
            12
          ]
        },
        "4": {
          "range": [
            13,
            13
          ]
        },
        "5": {
          "range": [
            14,
            15
          ]
        },
        "6": {
          "range": [
            15,
            15
          ]
        },
        "7": {
          "range": [
            16,
            16
          ]
        },
        "8": {
          "range": [
            17,
            17
          ]
        },
        "9": {
          "range": [
            18,
            19
          ]
        },
        "10": {
          "range": [
            19,
            19
          ]
        },
        "11": {
          "range": [
            20,
            20
          ]
        },
        "12": {
          "range": [
            22,
            24
          ]
        },
        "13": {
          "range": [
            24,
            24
          ]
        },
        "14": {
          "range": [
            25,
            25
          ]
        },
        "15": {
          "range": [
            26,
            26
          ]
        },
        "16": {
          "range": [
            27,
            27
          ]
        },
        "17": {
          "range": [
            28,
            28
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        15,
        16,
        28
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 17,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import collections",
          "n = 4",
          "v = [3, 1, 3, 2]",
          "ve = [v[2*i] for i in range(n//2)]",
          "vo = [v[2*i + 1] for i in range(n//2)]",
          "Cve = collections.Counter(ve)",
          "Cvo = collections.Counter(vo)",
          "Cve1 = Cve.most_common()[0]",
          "Cvo1 = Cvo.most_common()[0]",
          "(len(Cve) == 1 and len(Cvo) == 1)"
        ],
        "2": [
          "(Cve1[0] == Cvo1[0])"
        ],
        "3": [
          "else: ans = 0"
        ],
        "4": [
          "(len(Cve) == 1 and len(Cvo) != 1)"
        ],
        "5": [
          "Cvo2 = Cvo.most_common()[1]",
          "(Cve1[0] == Cvo1[0])"
        ],
        "6": [
          "(Cve1[0] == Cvo1[0])"
        ],
        "7": [
          "else: ans = n//2 - Cvo1[1]"
        ],
        "8": [
          "(len(Cve) != 1 and len(Cvo) == 1)"
        ],
        "9": [
          "Cve2 = Cve.most_common()[1]",
          "(Cve1[0] == Cvo1[0])"
        ],
        "10": [
          "(Cve1[0] == Cvo1[0])"
        ],
        "11": [
          "else: ans = n//2 - Cve1[2]"
        ],
        "12": [
          "Cve2 = Cve.most_common()[1]",
          "Cvo2 = Cvo.most_common()[1]",
          "(Cve1[0] != Cvo1[0])"
        ],
        "13": [
          "(Cve1[0] != Cvo1[0])"
        ],
        "14": [
          "(Cve1[0] == Cvo1[0])"
        ],
        "15": [
          "(Cve1[1] > Cvo1[1])"
        ],
        "16": [
          "else: ans = n - Cve2[1] - Cvo1[1]"
        ],
        "17": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 12
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": 15,
            "false": 17
          },
          "no_condition": null
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 14
        },
        "15": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        },
        "16": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import collections\n    n = 4\n    v = [3, 1, 3, 2]\n    ve = [v[2*i] for i in range(n//2)]\n    vo = [v[2*i + 1] for i in range(n//2)]\n    Cve = collections.Counter(ve)\n    Cvo = collections.Counter(vo)\n    Cve1 = Cve.most_common()[0]\n    Cvo1 = Cvo.most_common()[0]\n    (len(Cve) == 1 and len(Cvo) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 2:\nStatement:\n    (Cve1[0] == Cvo1[0])\nNext:\n    Go to Block: 17\n\nBlock 3:\nStatement:\n    else: ans = 0\nNext:\n    Go to Block: 17\n\nBlock 4:\nStatement:\n    (len(Cve) == 1 and len(Cvo) != 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    Cvo2 = Cvo.most_common()[1]\n    (Cve1[0] == Cvo1[0])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    (Cve1[0] == Cvo1[0])\nNext:\n    Go to Block: 17\n\nBlock 7:\nStatement:\n    else: ans = n//2 - Cvo1[1]\nNext:\n    Go to Block: 17\n\nBlock 8:\nStatement:\n    (len(Cve) != 1 and len(Cvo) == 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 12\n\nBlock 9:\nStatement:\n    Cve2 = Cve.most_common()[1]\n    (Cve1[0] == Cvo1[0])\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    (Cve1[0] == Cvo1[0])\nNext:\n    Go to Block: 17\n\nBlock 11:\nStatement:\n    else: ans = n//2 - Cve1[2]\nNext:\n    Go to Block: 17\n\nBlock 12:\nStatement:\n    Cve2 = Cve.most_common()[1]\n    Cvo2 = Cvo.most_common()[1]\n    (Cve1[0] != Cvo1[0])\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    (Cve1[0] != Cvo1[0])\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    (Cve1[0] == Cvo1[0])\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 17\n\nBlock 15:\nStatement:\n    (Cve1[1] > Cvo1[1])\nNext:\n    Go to Block: 17\n\nBlock 16:\nStatement:\n    else: ans = n - Cve2[1] - Cvo1[1]\nNext:\n    Go to Block: 17\n\nBlock 17:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s606056556": {
      "code": "import statistics\nimport collections\nn = 4\nall_str = [3, 1, 3, 2]\ni=0\no_str=[]   \ne_str=[]   \nwhile(2*i+1<n):\n  o_str.append(all_str[2*i])\n  e_str.append(all_str[2*i+1])\n  i+=1\no_mode=statistics.mode(o_str)\ne_mode=statistics.mode(e_str)\nif(o_mode!=e_mode):\n  alt=len(all_str)-o_str.count(o_mode)-e_str.count(e_mode)\nelse:\n  alt=min(o_str.count(o_mode),e_str.count(e_mode))\nprint(alt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            11
          ]
        },
        "4": {
          "range": [
            12,
            14
          ]
        },
        "5": {
          "range": [
            15,
            15
          ]
        },
        "6": {
          "range": [
            17,
            17
          ]
        },
        "7": {
          "range": [
            18,
            18
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        8,
        9,
        10,
        11,
        8,
        12,
        13,
        14,
        15,
        18
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 7,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import statistics",
          "import collections",
          "n = 4",
          "all_str = [3, 1, 3, 2]",
          "i=0",
          "o_str=[]",
          "e_str=[]"
        ],
        "2": [
          "while(2*i+1<n):"
        ],
        "3": [
          "o_str.append(all_str[2*i])",
          "e_str.append(all_str[2*i+1])",
          "i+=1"
        ],
        "4": [
          "o_mode=statistics.mode(o_str)",
          "e_mode=statistics.mode(e_str)",
          "(o_mode != e_mode)"
        ],
        "5": [
          "alt=len(all_str)-o_str.count(o_mode)-e_str.count(e_mode)"
        ],
        "6": [
          "alt=min(o_str.count(o_mode),e_str.count(e_mode))"
        ],
        "7": [
          "print(alt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import statistics\n    import collections\n    n = 4\n    all_str = [3, 1, 3, 2]\n    i=0\n    o_str=[]\n    e_str=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while(2*i+1<n):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    o_str.append(all_str[2*i])\n    e_str.append(all_str[2*i+1])\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    o_mode=statistics.mode(o_str)\n    e_mode=statistics.mode(e_str)\n    (o_mode != e_mode)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    alt=len(all_str)-o_str.count(o_mode)-e_str.count(e_mode)\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    alt=min(o_str.count(o_mode),e_str.count(e_mode))\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(alt)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s904687053": {
      "code": "from collections import Counter\nn = 4\nv = [3, 1, 3, 2]\ni_num = 0\ntwo_0 = []\ntwo_1 = []\nfor i in v:\n    if i_num % 2 == 0:\n        two_0.append(i)\n    else:\n        two_1.append(i)\n    i_num += 1\ntwo_1_counter = Counter(two_1)\nt1_elem = two_1_counter.most_common()[0][0]\nt1 = two_1_counter.most_common()[0][1]\ntwo_0_counter = Counter(two_0)\nif two_0_counter.most_common()[0][0] == t1_elem:\n    if two_0_counter.most_common()[0][1] != len(two_0):\n        if two_1_counter.most_common()[0][0] == len(two_1):\n            if two_0_counter.most_common()[1][1] > two_1_counter.most_common()[1][1]:\n                t0 = two_0_counter.most_common()[1][1]\n            else:\n                t1 = two_1_counter.most_common()[1][1]\n        else:\n            t1 = 0\n    else:\n        t0 = 0\nelse:\n    t0 = two_0_counter.most_common()[0][1]\nprint(n - (t0+t1))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            13,
            17
          ]
        },
        "8": {
          "range": [
            18,
            18
          ]
        },
        "9": {
          "range": [
            19,
            19
          ]
        },
        "10": {
          "range": [
            20,
            20
          ]
        },
        "11": {
          "range": [
            21,
            21
          ]
        },
        "12": {
          "range": [
            23,
            23
          ]
        },
        "13": {
          "range": [
            25,
            25
          ]
        },
        "14": {
          "range": [
            27,
            27
          ]
        },
        "15": {
          "range": [
            29,
            29
          ]
        },
        "16": {
          "range": [
            30,
            30
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        7,
        8,
        11,
        12,
        7,
        8,
        9,
        12,
        7,
        8,
        11,
        12,
        7,
        13,
        14,
        15,
        16,
        17,
        29,
        30
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 15,
          "state": []
        },
        {
          "block": 16,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from collections import Counter",
          "n = 4",
          "v = [3, 1, 3, 2]",
          "i_num = 0",
          "two_0 = []",
          "two_1 = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> v"
        ],
        "3": [
          "(i_num % 2 == 0)"
        ],
        "4": [
          "two_0.append(i)"
        ],
        "5": [
          "two_1.append(i)"
        ],
        "6": [
          "i_num += 1"
        ],
        "7": [
          "two_1_counter = Counter(two_1)",
          "t1_elem = two_1_counter.most_common()[0][0]",
          "t1 = two_1_counter.most_common()[0][1]",
          "two_0_counter = Counter(two_0)",
          "(two_0_counter.most_common()[0][0] == t1_elem)"
        ],
        "8": [
          "(two_0_counter.most_common()[0][1] != len(two_0))"
        ],
        "9": [
          "(two_1_counter.most_common()[0][0] == len(two_1))"
        ],
        "10": [
          "(two_0_counter.most_common()[1][1] > two_1_counter.most_common()[1][1])"
        ],
        "11": [
          "t0 = two_0_counter.most_common()[1][1]"
        ],
        "12": [
          "t1 = two_1_counter.most_common()[1][1]"
        ],
        "13": [
          "t1 = 0"
        ],
        "14": [
          "t0 = 0"
        ],
        "15": [
          "t0 = two_0_counter.most_common()[0][1]"
        ],
        "16": [
          "print(n - (t0+t1))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 15
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 14
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        },
        "15": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from collections import Counter\n    n = 4\n    v = [3, 1, 3, 2]\n    i_num = 0\n    two_0 = []\n    two_1 = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> v\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (i_num % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    two_0.append(i)\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    two_1.append(i)\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    i_num += 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    two_1_counter = Counter(two_1)\n    t1_elem = two_1_counter.most_common()[0][0]\n    t1 = two_1_counter.most_common()[0][1]\n    two_0_counter = Counter(two_0)\n    (two_0_counter.most_common()[0][0] == t1_elem)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 15\n\nBlock 8:\nStatement:\n    (two_0_counter.most_common()[0][1] != len(two_0))\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 14\n\nBlock 9:\nStatement:\n    (two_1_counter.most_common()[0][0] == len(two_1))\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 13\n\nBlock 10:\nStatement:\n    (two_0_counter.most_common()[1][1] > two_1_counter.most_common()[1][1])\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    t0 = two_0_counter.most_common()[1][1]\nNext:\n    Go to Block: 16\n\nBlock 12:\nStatement:\n    t1 = two_1_counter.most_common()[1][1]\nNext:\n    Go to Block: 16\n\nBlock 13:\nStatement:\n    t1 = 0\nNext:\n    Go to Block: 16\n\nBlock 14:\nStatement:\n    t0 = 0\nNext:\n    Go to Block: 16\n\nBlock 15:\nStatement:\n    t0 = two_0_counter.most_common()[0][1]\nNext:\n    Go to Block: 16\n\nBlock 16:\nStatement:\n    print(n - (t0+t1))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s938132719": {
      "code": "from collections import Counter\nn = 4\nv = [3, 1, 3, 2]\nlist0 = []\nlist1 = []\nfor i, a in enumerate(v):\n    if i % 2 == 0:\n        list0.append(a)\n    else:\n        list1.append(a)\nc0 = Counter(list0)\nc1 = Counter(list1)\nc0_most_common = c0.most_common(2)\nc1_most_common = c1.most_common(2)\nif c0_most_common[0][0] != c1_most_common[0][0]:\n    print(n - (c0_most_common[0][1] + c1_most_common[0][1]))\nelse:\n    print(min(n - (c0_most_common[0][1] + c1_most_common[1][1]), n - (c0_most_common[1][1] + c1_most_common[0][1])))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            15
          ]
        },
        "7": {
          "range": [
            16,
            16
          ]
        },
        "8": {
          "range": [
            18,
            18
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        10,
        6,
        7,
        8,
        6,
        7,
        10,
        6,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from collections import Counter",
          "n = 4",
          "v = [3, 1, 3, 2]",
          "list0 = []",
          "list1 = []"
        ],
        "2": [
          "i <- index\n    a <- iterator"
        ],
        "3": [
          "(i % 2 == 0)"
        ],
        "4": [
          "list0.append(a)"
        ],
        "5": [
          "list1.append(a)"
        ],
        "6": [
          "c0 = Counter(list0)",
          "c1 = Counter(list1)",
          "c0_most_common = c0.most_common(2)",
          "c1_most_common = c1.most_common(2)",
          "(c0_most_common[0][0] != c1_most_common[0][0])"
        ],
        "7": [
          "print(n - (c0_most_common[0][1] + c1_most_common[0][1]))"
        ],
        "8": [
          "print(min(n - (c0_most_common[0][1] + c1_most_common[1][1]), n - (c0_most_common[1][1] + c1_most_common[0][1])))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from collections import Counter\n    n = 4\n    v = [3, 1, 3, 2]\n    list0 = []\n    list1 = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    a <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    list0.append(a)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    list1.append(a)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    c0 = Counter(list0)\n    c1 = Counter(list1)\n    c0_most_common = c0.most_common(2)\n    c1_most_common = c1.most_common(2)\n    (c0_most_common[0][0] != c1_most_common[0][0])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(n - (c0_most_common[0][1] + c1_most_common[0][1]))\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(min(n - (c0_most_common[0][1] + c1_most_common[1][1]), n - (c0_most_common[1][1] + c1_most_common[0][1])))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s465094091": {
      "code": "import collections\nn = 4\nX = [3, 1, 3, 2]\nodd=[]\neven=[]\nfor i in range(int(n/2)):\n    odd.append(X[2*i+1])\n    even.append(X[2*i])\nodd_counter=collections.Counter(odd) \neven_counter=collections.Counter(even)\nodd_count=sorted(odd_counter.values(),reverse=True) \neven_count=sorted(even_counter.values(),reverse=True)\nmax_odd_value=max(odd_counter,key=odd_counter.get) \nmax_even_value=max(even_counter,key=even_counter.get)\nif max_odd_value!=max_even_value:\n    print(n-odd_count[0]-even_count[0])\nelse:\n    print(min(n-odd_count[0]-even_count[1],n-odd_count[1]-even_count[0]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            15
          ]
        },
        "5": {
          "range": [
            16,
            16
          ]
        },
        "6": {
          "range": [
            18,
            18
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        8,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import collections",
          "n = 4",
          "X = [3, 1, 3, 2]",
          "odd=[]",
          "even=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(int(n / 2))"
        ],
        "3": [
          "odd.append(X[2*i+1])",
          "even.append(X[2*i])"
        ],
        "4": [
          "odd_counter=collections.Counter(odd)",
          "even_counter=collections.Counter(even)",
          "odd_count=sorted(odd_counter.values(),reverse=True)",
          "even_count=sorted(even_counter.values(),reverse=True)",
          "max_odd_value=max(odd_counter,key=odd_counter.get)",
          "max_even_value=max(even_counter,key=even_counter.get)",
          "(max_odd_value != max_even_value)"
        ],
        "5": [
          "print(n-odd_count[0]-even_count[0])"
        ],
        "6": [
          "print(min(n-odd_count[0]-even_count[1],n-odd_count[1]-even_count[0]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import collections\n    n = 4\n    X = [3, 1, 3, 2]\n    odd=[]\n    even=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(int(n / 2))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    odd.append(X[2*i+1])\n    even.append(X[2*i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    odd_counter=collections.Counter(odd)\n    even_counter=collections.Counter(even)\n    odd_count=sorted(odd_counter.values(),reverse=True)\n    even_count=sorted(even_counter.values(),reverse=True)\n    max_odd_value=max(odd_counter,key=odd_counter.get)\n    max_even_value=max(even_counter,key=even_counter.get)\n    (max_odd_value != max_even_value)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(n-odd_count[0]-even_count[0])\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(min(n-odd_count[0]-even_count[1],n-odd_count[1]-even_count[0]))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s065293773": {
      "code": "from collections import Counter\nn = 4\nv = [3, 1, 3, 2]\na=Counter(v[::2]).most_common() \nb=Counter(v[1::2]).most_common()\nif len(a)==1:\n    a.append([0,0])\nif len(b)==1:\n    b.append([0,0])\nif a[0,0]==b[0,0]:\n    print(min(n-a[1,1]-b[0,1],n-a[0,1]-b[1,1]))\nelse:\n    print(n-a[0,1]-b[0,1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('list indices must be integers or slices, not tuple')"
      },
      "cfg_block_statements": {
        "1": [
          "from collections import Counter",
          "n = 4",
          "v = [3, 1, 3, 2]",
          "a=Counter(v[::2]).most_common()",
          "b=Counter(v[1::2]).most_common()",
          "(len(a) == 1)"
        ],
        "2": [
          "a.append([0,0])"
        ],
        "3": [
          "(len(b) == 1)"
        ],
        "4": [
          "b.append([0,0])"
        ],
        "5": [
          "(a[0, 0] == b[0, 0])"
        ],
        "6": [
          "print(min(n-a[1,1]-b[0,1],n-a[0,1]-b[1,1]))"
        ],
        "7": [
          "print(n-a[0,1]-b[0,1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from collections import Counter\n    n = 4\n    v = [3, 1, 3, 2]\n    a=Counter(v[::2]).most_common()\n    b=Counter(v[1::2]).most_common()\n    (len(a) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a.append([0,0])\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (len(b) == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b.append([0,0])\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a[0, 0] == b[0, 0])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(min(n-a[1,1]-b[0,1],n-a[0,1]-b[1,1]))\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(n-a[0,1]-b[0,1])\nNext:\n    <END>\n"
    }
  },
  "p03282": {
    "s182493020": {
      "code": "b = ['1', '2', '1', '4']\na = 4\nif b[0]==\"1\":\n  print(b[1])\nelse:\n  print(b[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "4"
            },
            {
              "b": "['1', '2', '1', '4']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "4"
            },
            {
              "b": "['1', '2', '1', '4']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "b = ['1', '2', '1', '4']",
          "a = 4",
          "(b[0] == '1')"
        ],
        "2": [
          "print(b[1])"
        ],
        "3": [
          "print(b[0])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    b = ['1', '2', '1', '4']\n    a = 4\n    (b[0] == '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(b[1])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(b[0])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s242408930": {
      "code": "S = '1214'\nK = 4\nc=0\na='1'\nwhile c<K and S[c]=='1':\n c+=1\nprint(S[c])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        5,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'1'"
            },
            {
              "S": "'1214'"
            },
            {
              "c": "0"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "'1'"
            },
            {
              "S": "'1214'"
            },
            {
              "c": "0"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "'1'"
            },
            {
              "S": "'1214'"
            },
            {
              "c": "1"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "'1'"
            },
            {
              "S": "'1214'"
            },
            {
              "c": "1"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "'1'"
            },
            {
              "S": "'1214'"
            },
            {
              "c": "1"
            },
            {
              "K": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = '1214'",
          "K = 4",
          "c=0",
          "a='1'"
        ],
        "2": [
          "while c<K and S[c]=='1':"
        ],
        "3": [
          "c+=1"
        ],
        "4": [
          "print(S[c])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '1214'\n    K = 4\n    c=0\n    a='1'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while c<K and S[c]=='1':\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    c+=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(S[c])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s514883418": {
      "code": "S = ['1', '2', '1', '4']\nK = 4\nif S[0] == 1:\n    if K >= 2:\n        print(S[1])\n    else:\n        print(1)\nelse:\n    print(S[1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "['1', '2', '1', '4']"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "['1', '2', '1', '4']"
            },
            {
              "K": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = ['1', '2', '1', '4']",
          "K = 4",
          "(S[0] == 1)"
        ],
        "2": [
          "(K >= 2)"
        ],
        "3": [
          "print(S[1])"
        ],
        "4": [
          "print(1)"
        ],
        "5": [
          "print(S[1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = ['1', '2', '1', '4']\n    K = 4\n    (S[0] == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (K >= 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(S[1])\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(S[1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s260897971": {
      "code": "s = '1214'\nk = 4\ncount_1=0\nwhile s[0]=='1':\n  count_1+=1\n  s=s.lstrip('1')\nif count_1>=k:\n  print('1')\nelse:\n  print(s[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        7,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "count_1": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "count_1": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1214'",
          "k = 4",
          "count_1=0"
        ],
        "2": [
          "while s[0]=='1':"
        ],
        "3": [
          "count_1+=1",
          "s=s.lstrip('1')"
        ],
        "4": [
          "(count_1 >= k)"
        ],
        "5": [
          "print('1')"
        ],
        "6": [
          "print(s[0])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = 4\n    count_1=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while s[0]=='1':\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    count_1+=1\n    s=s.lstrip('1')\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (count_1 >= k)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('1')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(s[0])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s968138350": {
      "code": "s = '1214'\nk = 4\nif s[0] != \"1\":\n    print(s[0])\nelif s[:k] == \"1\"*k:\n    print(\"1\")\nelse:\n    print(s.replace(\"1\",\"\")[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "k": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1214'",
          "k = 4",
          "(s[0] != '1')"
        ],
        "2": [
          "print(s[0])"
        ],
        "3": [
          "(s[:k] == '1' * k)"
        ],
        "4": [
          "print(\"1\")"
        ],
        "5": [
          "print(s.replace(\"1\",\"\")[0])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = 4\n    (s[0] != '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s[0])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (s[:k] == '1' * k)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"1\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(s.replace(\"1\",\"\")[0])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s512474933": {
      "code": "S = '1214'\nK = 4\nif K == 1:\n    print(S[0])\nelif K >= 2:\n    if S[0] != \"1\":\n        print(S[0])\n        quit()\n    elif S[0:K] == \"1\" * K:\n        print(S[0])\n        quit()\n    else:\n        i = 1\n        while S[i] == \"1\" and len(S) - 2 >= i:\n            i += 1\n        print(S[i])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            11
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        },
        "9": {
          "range": [
            14,
            14
          ]
        },
        "10": {
          "range": [
            15,
            15
          ]
        },
        "11": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        5,
        6,
        9,
        13,
        14,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "K": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = '1214'",
          "K = 4",
          "(K == 1)"
        ],
        "2": [
          "print(S[0])"
        ],
        "3": [
          "(K >= 2)"
        ],
        "4": [
          "(S[0] != '1')"
        ],
        "5": [
          "print(S[0])",
          "quit()"
        ],
        "6": [
          "(S[0:K] == '1' * K)"
        ],
        "7": [
          "print(S[0])",
          "quit()"
        ],
        "8": [
          "i = 1"
        ],
        "9": [
          "while S[i] == \"1\" and len(S) - 2 >= i:"
        ],
        "10": [
          "i += 1"
        ],
        "11": [
          "print(S[i])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '1214'\n    K = 4\n    (K == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S[0])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (K >= 2)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    (S[0] != '1')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(S[0])\n    quit()\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    (S[0:K] == '1' * K)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(S[0])\n    quit()\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    i = 1\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    while S[i] == \"1\" and len(S) - 2 >= i:\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    i += 1\nNext:\n    Go to Block: 9\n\nBlock 11:\nStatement:\n    print(S[i])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s397679625": {
      "code": "s = '1214'\nk = 4\ncount_1=0\nwhile s!='':\n  if s[0]=='1':\n    count_1+=1\n    s=s.lstrip('1')\n  else:\n    break\nif count_1>=k:\n  print('1')\nelse:\n  print(s[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        4,
        5,
        9,
        10,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "count_1": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "count_1": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "count_1": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "'214'"
            },
            {
              "count_1": "1"
            },
            {
              "k": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1214'",
          "k = 4",
          "count_1=0"
        ],
        "2": [
          "while s!='':"
        ],
        "3": [
          "(s[0] == '1')"
        ],
        "4": [
          "count_1+=1",
          "s=s.lstrip('1')"
        ],
        "5": [
          "(count_1 >= k)"
        ],
        "6": [
          "print('1')"
        ],
        "7": [
          "print(s[0])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = 4\n    count_1=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while s!='':\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[0] == '1')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count_1+=1\n    s=s.lstrip('1')\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (count_1 >= k)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('1')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(s[0])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s732153061": {
      "code": "s = '1214'\nk = 4\ncnt=0\ni=0\nwhile s[i] ==\"1\" and i<=len(s):\n    cnt+=1\n    i+=1\nif k<=cnt:\n    print(1)\nelse:\n    print(s[i])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        8,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "0"
            },
            {
              "cnt": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "0"
            },
            {
              "cnt": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "cnt": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "cnt": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "cnt": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "cnt": "1"
            },
            {
              "k": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1214'",
          "k = 4",
          "cnt=0",
          "i=0"
        ],
        "2": [
          "while s[i] ==\"1\" and i<=len(s):"
        ],
        "3": [
          "cnt+=1",
          "i+=1"
        ],
        "4": [
          "(k <= cnt)"
        ],
        "5": [
          "print(1)"
        ],
        "6": [
          "print(s[i])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = 4\n    cnt=0\n    i=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while s[i] ==\"1\" and i<=len(s):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cnt+=1\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (k <= cnt)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(s[i])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s298077453": {
      "code": "s = '1214'\nk = 4\ni = 0\nwhile s[i] == '1' and i < k:\n  i += 1\nprint(int(s[i]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "0"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "i": "1"
            },
            {
              "k": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1214'",
          "k = 4",
          "i = 0"
        ],
        "2": [
          "while s[i] == '1' and i < k:"
        ],
        "3": [
          "i += 1"
        ],
        "4": [
          "print(int(s[i]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = 4\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while s[i] == '1' and i < k:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    i += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(int(s[i]))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s870920177": {
      "code": "import numpy as np\nimport math\nS = '1214'\nK = 4\nk = 0\nwhile S[k] == '1' and k < K:\n    k += 1\nif k == K:\n    print('1')\nelse:\n    print(S[k])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        6,
        8,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "k": "1"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "import math",
          "S = '1214'",
          "K = 4",
          "k = 0"
        ],
        "2": [
          "while S[k] == '1' and k < K:"
        ],
        "3": [
          "k += 1"
        ],
        "4": [
          "(k == K)"
        ],
        "5": [
          "print('1')"
        ],
        "6": [
          "print(S[k])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    import math\n    S = '1214'\n    K = 4\n    k = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while S[k] == '1' and k < K:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    k += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (k == K)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('1')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(S[k])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s106478824": {
      "code": "n = '1214'\nk = 4\nc=0\nfor i in range(len(n)):\n\tif n[i] is '1':\n\t\tc+=1\n\telse:\n\t\tbreak\nprint(n[c])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = '1214'",
          "k = 4",
          "c=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(n))"
        ],
        "3": [
          "(n[i] is '1')"
        ],
        "4": [
          "c+=1"
        ],
        "5": [
          "print(n[c])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '1214'\n    k = 4\n    c=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(n))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n[i] is '1')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    c+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(n[c])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s727823320": {
      "code": "s = '1214'\nk = '4'\nif s[0] == '1':\n    print(s[1])\nelse:\n    print(s[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "k": "'4'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "k": "'4'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1214'",
          "k = '4'",
          "(s[0] == '1')"
        ],
        "2": [
          "print(s[1])"
        ],
        "3": [
          "print(s[0])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = '4'\n    (s[0] == '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s[1])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(s[0])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s352977419": {
      "code": "s = '1214'\nk = '4'\nif s[0]=='1' or len(s)==1:\n    print(s[1])\nelse:\n    for i in s:\n        if int(i)>1:\n            print(i)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "k": "'4'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1214'"
            },
            {
              "k": "'4'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1214'",
          "k = '4'",
          "(s[0] == '1' or len(s) == 1)"
        ],
        "2": [
          "print(s[1])"
        ],
        "3": [
          "iterator -> i, Iterate Over -> s"
        ],
        "4": [
          "(int(i) > 1)"
        ],
        "5": [
          "print(i)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 3
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = '4'\n    (s[0] == '1' or len(s) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s[1])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    (int(i) > 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    print(i)\nNext:\n    Go to Block: 3\n",
      "exception_info": null
    },
    "s623836764": {
      "code": "S = '1214'\nK = 4\nif S[0] == '1':\n    print(S[1])\nelse:\n    print(S[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1214'"
            },
            {
              "K": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = '1214'",
          "K = 4",
          "(S[0] == '1')"
        ],
        "2": [
          "print(S[1])"
        ],
        "3": [
          "print(S[0])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '1214'\n    K = 4\n    (S[0] == '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S[1])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(S[0])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s846249185": {
      "code": "S = ['1', '2', '1', '4']\nK = 4\nfor i in range(len(K)):\n    if S[i] != 1:\n        print(S[i])\n        exit()\nprint(1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "K": "4"
            },
            {
              "S": "['1', '2', '1', '4']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "K": "4"
            },
            {
              "S": "['1', '2', '1', '4']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = ['1', '2', '1', '4']",
          "K = 4"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(K))"
        ],
        "3": [
          "(S[i] != 1)"
        ],
        "4": [
          "print(S[i])",
          "exit()"
        ],
        "5": [
          "print(1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = ['1', '2', '1', '4']\n    K = 4\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(K))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] != 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(S[i])\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(1)\nNext:\n    <END>\n"
    },
    "s008848975": {
      "code": "S = 1214\nK = 4\nif S[0]!=\"1\":\n  print(S[0])\nelse:\n  print(S[1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "1214"
            },
            {
              "K": "4"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 1214",
          "K = 4",
          "(S[0] != '1')"
        ],
        "2": [
          "print(S[0])"
        ],
        "3": [
          "print(S[1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 1214\n    K = 4\n    (S[0] != '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S[0])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(S[1])\nNext:\n    <END>\n"
    }
  },
  "p03289": {
    "s790863175": {
      "code": "s = 'AtCoder'\nflag = \"AC\"\nif s[0] != \"A\":\n    flag = \"WA\"\nif not \"C\" in s[2:-1]:\n    flag = \"WA\"\nls = [c for c in s]\nls.remove(\"A\")\nls.remove(\"C\")\nfor c in ls:\n    if c.isupper():\n        flag = \"WA\"\nprint(flag)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        5,
        7,
        8,
        9,
        10,
        11,
        10,
        11,
        10,
        11,
        10,
        11,
        10,
        11,
        10,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "ls": "['t', 'o', 'd', 'e', 'r']"
            },
            {
              "s": "'AtCoder'"
            },
            {
              "flag": "'AC'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'AtCoder'",
          "flag = \"AC\"",
          "(s[0] != 'A')"
        ],
        "2": [
          "flag = \"WA\""
        ],
        "3": [
          "(not 'C' in s[2:-1])"
        ],
        "4": [
          "flag = \"WA\""
        ],
        "5": [
          "ls = [c for c in s]",
          "ls.remove(\"A\")",
          "ls.remove(\"C\")"
        ],
        "6": [
          "iterator -> c, Iterate Over -> ls"
        ],
        "7": [
          "(c.isupper())"
        ],
        "8": [
          "flag = \"WA\""
        ],
        "9": [
          "print(flag)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 9
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 6
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'AtCoder'\n    flag = \"AC\"\n    (s[0] != 'A')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    flag = \"WA\"\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (not 'C' in s[2:-1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    flag = \"WA\"\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    ls = [c for c in s]\n    ls.remove(\"A\")\n    ls.remove(\"C\")\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> c, Iterate Over -> ls\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 9\n\nBlock 7:\nStatement:\n    (c.isupper())\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 6\n\nBlock 8:\nStatement:\n    flag = \"WA\"\nNext:\n    Go to Block: 6\n\nBlock 9:\nStatement:\n    print(flag)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s635002220": {
      "code": "str = 'AtCoder'\nflag=True\nif str[0]!='A':\n    flag=False\n    str[0]='a'\ncnt=0\nfor i in range(2,len(str)-2):\n    if str[i]=='C':\n        cnt+=1\n        if cnt==1:\n            str[i]='c'\nif cnt!=1:\n    flag=False\nif str.islower():\n    flag=False\nif flag==True:\n    print(\"AC\")\nelse:\n    print(\"WA\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        },
        "10": {
          "range": [
            14,
            14
          ]
        },
        "11": {
          "range": [
            15,
            15
          ]
        },
        "12": {
          "range": [
            16,
            16
          ]
        },
        "13": {
          "range": [
            17,
            17
          ]
        },
        "14": {
          "range": [
            19,
            19
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "str": "'AtCoder'"
            },
            {
              "flag": "True"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "0"
            },
            {
              "str": "'AtCoder'"
            },
            {
              "flag": "True"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "cnt": "0"
            },
            {
              "str": "'AtCoder'"
            },
            {
              "flag": "True"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "cnt": "0"
            },
            {
              "str": "'AtCoder'"
            },
            {
              "flag": "True"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "str": "'AtCoder'"
            },
            {
              "cnt": "1"
            },
            {
              "flag": "True"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "str": "'AtCoder'"
            },
            {
              "cnt": "1"
            },
            {
              "flag": "True"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "str = 'AtCoder'",
          "flag=True",
          "(str[0] != 'A')"
        ],
        "2": [
          "flag=False",
          "str[0]='a'"
        ],
        "3": [
          "cnt=0"
        ],
        "4": [
          "iterator -> i, Iterate Over -> range(2, len(str) - 2)"
        ],
        "5": [
          "(str[i] == 'C')"
        ],
        "6": [
          "cnt+=1",
          "(cnt == 1)"
        ],
        "7": [
          "str[i]='c'"
        ],
        "8": [
          "(cnt != 1)"
        ],
        "9": [
          "flag=False"
        ],
        "10": [
          "(str.islower())"
        ],
        "11": [
          "flag=False"
        ],
        "12": [
          "(flag == True)"
        ],
        "13": [
          "print(\"AC\")"
        ],
        "14": [
          "print(\"WA\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 4
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 4
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 12
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    str = 'AtCoder'\n    flag=True\n    (str[0] != 'A')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    flag=False\n    str[0]='a'\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    cnt=0\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(2, len(str) - 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (str[i] == 'C')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    cnt+=1\n    (cnt == 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 4\n\nBlock 7:\nStatement:\n    str[i]='c'\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    (cnt != 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    flag=False\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    (str.islower())\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    flag=False\nNext:\n    Go to Block: 12\n\nBlock 12:\nStatement:\n    (flag == True)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(\"AC\")\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print(\"WA\")\nNext:\n    <END>\n"
    }
  },
  "p03307": {
    "s210358651": {
      "code": "import math\nN = 3\nprint(2*N//math.gcd(2, N))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "N = 3",
          "print(2*N//math.gcd(2, N))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = 3\n    print(2*N//math.gcd(2, N))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s156026908": {
      "code": "a = '3'\nb=a/2",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '3'",
          "b=a/2"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '3'\n    b=a/2\nNext:\n    <END>\n"
    }
  },
  "p03379": {
    "s114110543": {
      "code": "n = 4\nx = [2, 4, 4, 3]\nN=int(n/2)\ny=sorted(x)\na=y[N-1]\nb=y[N]\nfor j in range(n):\n    if x[j]<a:\n        print(b)\n    elif x[j]==a:\n        print(y[N+1])\n    else:\n        print(a)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        7,
        8,
        10,
        13,
        7,
        8,
        10,
        13,
        7,
        8,
        10,
        11,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "b": "4"
            },
            {
              "n": "4"
            },
            {
              "y": "[2, 3, 4, 4]"
            },
            {
              "a": "3"
            },
            {
              "x": "[2, 4, 4, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "x = [2, 4, 4, 3]",
          "N=int(n/2)",
          "y=sorted(x)",
          "a=y[N-1]",
          "b=y[N]"
        ],
        "2": [
          "iterator -> j, Iterate Over -> range(n)"
        ],
        "3": [
          "(x[j] < a)"
        ],
        "4": [
          "print(b)"
        ],
        "5": [
          "(x[j] == a)"
        ],
        "6": [
          "print(y[N+1])"
        ],
        "7": [
          "print(a)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    x = [2, 4, 4, 3]\n    N=int(n/2)\n    y=sorted(x)\n    a=y[N-1]\n    b=y[N]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> j, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x[j] < a)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(b)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (x[j] == a)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(y[N+1])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(a)\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    }
  },
  "p03427": {
    "s633431242": {
      "code": "n = 100\nnum = len(str(n))\ntmp = pow(10, num)-1\ns = 0\nfor i in range(num+1):\n    if i == num:\n        s = sum(list(map(int, str(tmp-9*pow(10, num-1)+(int(str(n)[0])-1)*pow(10, num-1)))))\n        break\n    elif tmp-pow(10, i) <= n:\n        s = sum(list(map(int, str(tmp-pow(10, i)))))\n        break\nif sum(list(map(int, str(n)))) > s:\n    print(sum(list(map(int. str(n)))))\nelse:\n    print(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        },
        "9": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        7,
        8,
        12,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "18"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "18"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "num": "3"
            },
            {
              "tmp": "999"
            },
            {
              "n": "100"
            },
            {
              "s": "18"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 100",
          "num = len(str(n))",
          "tmp = pow(10, num)-1",
          "s = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(num + 1)"
        ],
        "3": [
          "(i == num)"
        ],
        "4": [
          "s = sum(list(map(int, str(tmp-9*pow(10, num-1)+(int(str(n)[0])-1)*pow(10, num-1)))))"
        ],
        "5": [
          "(tmp - pow(10, i) <= n)"
        ],
        "6": [
          "s = sum(list(map(int, str(tmp-pow(10, i)))))"
        ],
        "7": [
          "(sum(list(map(int, str(n)))) > s)"
        ],
        "8": [
          "print(sum(list(map(int. str(n)))))"
        ],
        "9": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 100\n    num = len(str(n))\n    tmp = pow(10, num)-1\n    s = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(num + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (i == num)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s = sum(list(map(int, str(tmp-9*pow(10, num-1)+(int(str(n)[0])-1)*pow(10, num-1)))))\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (tmp - pow(10, i) <= n)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    s = sum(list(map(int, str(tmp-pow(10, i)))))\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (sum(list(map(int, str(n)))) > s)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(sum(list(map(int. str(n)))))\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(s)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s528667914": {
      "code": "N = '100'\nl = len(str(N))-1\nprint(l*9 + (N//(10**l)-1))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "2"
            },
            {
              "N": "'100'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '100'",
          "l = len(str(N))-1",
          "print(l*9 + (N//(10**l)-1))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '100'\n    l = len(str(N))-1\n    print(l*9 + (N//(10**l)-1))\nNext:\n    <END>\n"
    }
  },
  "p03486": {
    "s557376053": {
      "code": "s = 'yx'\nt = 'axy'\nsorted_s = sorted(s)\nsorted_t = sorted(t, reverse=True)\nlen_s = len(sorted_s)\nflag = 0\nfor i in range(len_s):\n    s_i = sorted_s[i]\n    t_i = sorted_t[i]\n    if s_i < t_i:\n        flag = 1\n        break\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        },
        "6": {
          "range": [
            14,
            14
          ]
        },
        "7": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "flag": "0"
            },
            {
              "t": "'axy'"
            },
            {
              "sorted_s": "['x', 'y']"
            },
            {
              "s": "'yx'"
            },
            {
              "len_s": "2"
            },
            {
              "sorted_t": "['y', 'x', 'a']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "flag": "0"
            },
            {
              "t": "'axy'"
            },
            {
              "sorted_s": "['x', 'y']"
            },
            {
              "s": "'yx'"
            },
            {
              "len_s": "2"
            },
            {
              "sorted_t": "['y', 'x', 'a']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "flag": "0"
            },
            {
              "t": "'axy'"
            },
            {
              "sorted_s": "['x', 'y']"
            },
            {
              "s": "'yx'"
            },
            {
              "len_s": "2"
            },
            {
              "t_i": "'y'"
            },
            {
              "sorted_t": "['y', 'x', 'a']"
            },
            {
              "s_i": "'x'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "flag": "1"
            },
            {
              "t": "'axy'"
            },
            {
              "sorted_s": "['x', 'y']"
            },
            {
              "s": "'yx'"
            },
            {
              "len_s": "2"
            },
            {
              "t_i": "'y'"
            },
            {
              "sorted_t": "['y', 'x', 'a']"
            },
            {
              "s_i": "'x'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "flag": "1"
            },
            {
              "t": "'axy'"
            },
            {
              "sorted_s": "['x', 'y']"
            },
            {
              "s": "'yx'"
            },
            {
              "len_s": "2"
            },
            {
              "t_i": "'y'"
            },
            {
              "sorted_t": "['y', 'x', 'a']"
            },
            {
              "s_i": "'x'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "1"
            },
            {
              "t": "'axy'"
            },
            {
              "sorted_s": "['x', 'y']"
            },
            {
              "s": "'yx'"
            },
            {
              "len_s": "2"
            },
            {
              "t_i": "'y'"
            },
            {
              "sorted_t": "['y', 'x', 'a']"
            },
            {
              "s_i": "'x'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'yx'",
          "t = 'axy'",
          "sorted_s = sorted(s)",
          "sorted_t = sorted(t, reverse=True)",
          "len_s = len(sorted_s)",
          "flag = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len_s)"
        ],
        "3": [
          "s_i = sorted_s[i]",
          "t_i = sorted_t[i]",
          "(s_i < t_i)"
        ],
        "4": [
          "flag = 1"
        ],
        "5": [
          "(flag)"
        ],
        "6": [
          "print(\"Yes\")"
        ],
        "7": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'yx'\n    t = 'axy'\n    sorted_s = sorted(s)\n    sorted_t = sorted(t, reverse=True)\n    len_s = len(sorted_s)\n    flag = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len_s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    s_i = sorted_s[i]\n    t_i = sorted_t[i]\n    (s_i < t_i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    flag = 1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (flag)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03523": {
    "s516645795": {
      "code": "S = 'KIHBR'\nList = ['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']\nnum = 0\nfor i in range(len(S)):\n    if S[i] == List[num]:\n        num += 1\n    elif List[num] == 'A':\n        num += 1\n        if S[i] == List[num]:\n            num += 1\n        else:\n            print('NO')\n            exit()\n    else:\n        print('NO')\n        exit()\nprint('YES')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            12,
            13
          ]
        },
        "9": {
          "range": [
            15,
            16
          ]
        },
        "10": {
          "range": [
            17,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        7,
        8,
        9,
        10,
        4,
        5,
        7,
        8,
        9,
        10,
        4,
        17
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "num": "1"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "num": "2"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "2"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "2"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "3"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "3"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "3"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "4"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "4"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "4"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "4"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "num": "5"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "num": "6"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "6"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "6"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "num": "6"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "num": "7"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "num": "8"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "8"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "num": "8"
            },
            {
              "S": "'KIHBR'"
            },
            {
              "List": "['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'KIHBR'",
          "List = ['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']",
          "num = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "(S[i] == List[num])"
        ],
        "4": [
          "num += 1"
        ],
        "5": [
          "(List[num] == 'A')"
        ],
        "6": [
          "num += 1",
          "(S[i] == List[num])"
        ],
        "7": [
          "num += 1"
        ],
        "8": [
          "print('NO')",
          "exit()"
        ],
        "9": [
          "print('NO')",
          "exit()"
        ],
        "10": [
          "print('YES')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'KIHBR'\n    List = ['A', 'K', 'I', 'H', 'A', 'B', 'A', 'R', 'A']\n    num = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (S[i] == List[num])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    num += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (List[num] == 'A')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 9\n\nBlock 6:\nStatement:\n    num += 1\n    (S[i] == List[num])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    num += 1\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print('NO')\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print('NO')\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print('YES')\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03544": {
    "s325913022": {
      "code": "N = 5\npre2 = 2\npre1 = 1\nfor i in range(2,N+1):\n    l = pre2 + pre1\n    pre2,pre1 = pre1,l\nelse:print(l)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "pre2": "2"
            },
            {
              "N": "5"
            },
            {
              "pre1": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pre2": "2"
            },
            {
              "N": "5"
            },
            {
              "pre1": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pre2": "1"
            },
            {
              "N": "5"
            },
            {
              "l": "3"
            },
            {
              "pre1": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pre2": "1"
            },
            {
              "N": "5"
            },
            {
              "l": "3"
            },
            {
              "pre1": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pre2": "3"
            },
            {
              "N": "5"
            },
            {
              "l": "4"
            },
            {
              "pre1": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pre2": "3"
            },
            {
              "N": "5"
            },
            {
              "l": "4"
            },
            {
              "pre1": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pre2": "4"
            },
            {
              "N": "5"
            },
            {
              "l": "7"
            },
            {
              "pre1": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pre2": "4"
            },
            {
              "N": "5"
            },
            {
              "l": "7"
            },
            {
              "pre1": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pre2": "7"
            },
            {
              "N": "5"
            },
            {
              "l": "11"
            },
            {
              "pre1": "11"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pre2": "7"
            },
            {
              "N": "5"
            },
            {
              "l": "11"
            },
            {
              "pre1": "11"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "pre2": "7"
            },
            {
              "N": "5"
            },
            {
              "l": "11"
            },
            {
              "pre1": "11"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "pre2 = 2",
          "pre1 = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(2, N + 1)"
        ],
        "3": [
          "l = pre2 + pre1",
          "pre2,pre1 = pre1,l"
        ],
        "4": [
          "else:print(l)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    pre2 = 2\n    pre1 = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l = pre2 + pre1\n    pre2,pre1 = pre1,l\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    else:print(l)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s425264444": {
      "code": "n = 5\nj = 2\nk = 1\nfor i in range(1,n):\n    l = j + k\n    j = k\n    k = l\nprint(l)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "j": "2"
            },
            {
              "k": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "2"
            },
            {
              "k": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "1"
            },
            {
              "l": "3"
            },
            {
              "k": "3"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "1"
            },
            {
              "l": "3"
            },
            {
              "k": "3"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "3"
            },
            {
              "l": "4"
            },
            {
              "k": "4"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "3"
            },
            {
              "l": "4"
            },
            {
              "k": "4"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "4"
            },
            {
              "l": "7"
            },
            {
              "k": "7"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "4"
            },
            {
              "l": "7"
            },
            {
              "k": "7"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "7"
            },
            {
              "l": "11"
            },
            {
              "k": "11"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "7"
            },
            {
              "l": "11"
            },
            {
              "k": "11"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "j": "7"
            },
            {
              "l": "11"
            },
            {
              "k": "11"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "j = 2",
          "k = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "l = j + k",
          "j = k",
          "k = l"
        ],
        "4": [
          "print(l)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    j = 2\n    k = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l = j + k\n    j = k\n    k = l\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(l)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s404344297": {
      "code": "n = 5\nL=[2,1]\nfor i in range(n):\n  l=L[i]+[i+1]\n  L.append(l)\nprint(L)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "L": "[2, 1]"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "L": "[2, 1]"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "L": "[2, 1]"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "L=[2,1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "l=L[i]+[i+1]",
          "L.append(l)"
        ],
        "4": [
          "print(L)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    L=[2,1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l=L[i]+[i+1]\n    L.append(l)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(L)\nNext:\n    <END>\n"
    }
  },
  "p03569": {
    "s252087975": {
      "code": "s = ['x', 'a', 'b', 'x', 'a']\nl, r = 0, len(s) - 1\nans = 0\nwhile l != r:\n    if s[l] == s[r]:\n        l += 1\n        r -= 1\n    else:\n        if s[l] == \"x\":\n            l += 1\n            ans += 1\n        elif s[r] == \"x\":\n            r -= 1\n            ans += 1\n        else:\n            ans = -1\n            break\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            14
          ]
        },
        "9": {
          "range": [
            16,
            16
          ]
        },
        "10": {
          "range": [
            18,
            18
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        9,
        10,
        11,
        4,
        5,
        6,
        7,
        4,
        5,
        9,
        12,
        13,
        14,
        4,
        18
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "0"
            },
            {
              "r": "4"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "0"
            },
            {
              "r": "4"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "0"
            },
            {
              "r": "4"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "0"
            },
            {
              "r": "4"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "1"
            },
            {
              "r": "4"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "1"
            },
            {
              "r": "4"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "1"
            },
            {
              "r": "4"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "2"
            },
            {
              "r": "3"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "2"
            },
            {
              "r": "3"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "2"
            },
            {
              "r": "3"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "2"
            },
            {
              "r": "3"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "2"
            },
            {
              "r": "3"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "2"
            },
            {
              "r": "2"
            },
            {
              "ans": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "2"
            },
            {
              "r": "2"
            },
            {
              "ans": "2"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "s": "['x', 'a', 'b', 'x', 'a']"
            },
            {
              "l": "2"
            },
            {
              "r": "2"
            },
            {
              "ans": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = ['x', 'a', 'b', 'x', 'a']",
          "l, r = 0, len(s) - 1",
          "ans = 0"
        ],
        "2": [
          "while l != r:"
        ],
        "3": [
          "(s[l] == s[r])"
        ],
        "4": [
          "l += 1",
          "r -= 1"
        ],
        "5": [
          "(s[l] == 'x')"
        ],
        "6": [
          "l += 1",
          "ans += 1"
        ],
        "7": [
          "(s[r] == 'x')"
        ],
        "8": [
          "r -= 1",
          "ans += 1"
        ],
        "9": [
          "ans = -1"
        ],
        "10": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = ['x', 'a', 'b', 'x', 'a']\n    l, r = 0, len(s) - 1\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while l != r:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (s[l] == s[r])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    l += 1\n    r -= 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (s[l] == 'x')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    l += 1\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (s[r] == 'x')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    r -= 1\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    ans = -1\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03611": {
    "s198956184": {
      "code": "N = 7\na = [3, 1, 4, 1, 5, 9, 2]\ncnt=[0]*10000\nprint(a)\nfor t in a:\n    cnt[t] += 1\n    cnt[t-1] += 1\n    cnt[t+1] += 1\nprint(max(cnt))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 7",
          "a = [3, 1, 4, 1, 5, 9, 2]",
          "cnt=[0]*10000",
          "print(a)"
        ],
        "2": [
          "iterator -> t, Iterate Over -> a"
        ],
        "3": [
          "cnt[t] += 1",
          "cnt[t-1] += 1",
          "cnt[t+1] += 1"
        ],
        "4": [
          "print(max(cnt))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    a = [3, 1, 4, 1, 5, 9, 2]\n    cnt=[0]*10000\n    print(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> t, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cnt[t] += 1\n    cnt[t-1] += 1\n    cnt[t+1] += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(cnt))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s974068385": {
      "code": "N = 7\na = [3, 1, 4, 1, 5, 9, 2]\ncnt=[0]*10000\nfor t in a:\n    cnt[t] += 1\n    cnt[t-1] += 1\n    cnt[t+1] += 1\nprint(max(cnt))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        5,
        6,
        7,
        4,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "7"
            },
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 7",
          "a = [3, 1, 4, 1, 5, 9, 2]",
          "cnt=[0]*10000"
        ],
        "2": [
          "iterator -> t, Iterate Over -> a"
        ],
        "3": [
          "cnt[t] += 1",
          "cnt[t-1] += 1",
          "cnt[t+1] += 1"
        ],
        "4": [
          "print(max(cnt))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    a = [3, 1, 4, 1, 5, 9, 2]\n    cnt=[0]*10000\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> t, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cnt[t] += 1\n    cnt[t-1] += 1\n    cnt[t+1] += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(cnt))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s202620076": {
      "code": "N = 7\na = [3, 1, 4, 1, 5, 9, 2]\nl = [0]*10**5+2\nfor i in a:\n    l[i] +=1\n    l[i+1] +=1\n    l[i+2] +=1\nprint(max(l))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[3, 1, 4, 1, 5, 9, 2]"
            },
            {
              "N": "7"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate list (not \"int\") to list')"
      },
      "cfg_block_statements": {
        "1": [
          "N = 7",
          "a = [3, 1, 4, 1, 5, 9, 2]",
          "l = [0]*10**5+2"
        ],
        "2": [
          "iterator -> i, Iterate Over -> a"
        ],
        "3": [
          "l[i] +=1",
          "l[i+1] +=1",
          "l[i+2] +=1"
        ],
        "4": [
          "print(max(l))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    a = [3, 1, 4, 1, 5, 9, 2]\n    l = [0]*10**5+2\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l[i] +=1\n    l[i+1] +=1\n    l[i+2] +=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(l))\nNext:\n    <END>\n"
    }
  },
  "p03612": {
    "s325691839": {
      "code": "n = 5\np_list = [1, 4, 3, 5, 2]\ncnt = 0\nfor i in range(n):\n    if p_list[i] == i+1:\n        p_list[i+1] = p_list[i]\n        cnt += 1\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        4,
        5,
        4,
        5,
        6,
        7,
        4,
        5,
        4,
        5,
        4,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "p_list": "[1, 4, 3, 5, 2]"
            },
            {
              "cnt": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "p_list": "[1, 4, 3, 5, 2]"
            },
            {
              "cnt": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p_list": "[1, 4, 3, 5, 2]"
            },
            {
              "cnt": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "p_list": "[1, 1, 3, 5, 2]"
            },
            {
              "cnt": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "p_list": "[1, 1, 3, 5, 2]"
            },
            {
              "cnt": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p_list": "[1, 1, 3, 5, 2]"
            },
            {
              "cnt": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "p_list": "[1, 1, 3, 5, 2]"
            },
            {
              "cnt": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p_list": "[1, 1, 3, 5, 2]"
            },
            {
              "cnt": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "p_list": "[1, 1, 3, 3, 2]"
            },
            {
              "cnt": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "p_list": "[1, 1, 3, 3, 2]"
            },
            {
              "cnt": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p_list": "[1, 1, 3, 3, 2]"
            },
            {
              "cnt": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "p_list": "[1, 1, 3, 3, 2]"
            },
            {
              "cnt": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p_list": "[1, 1, 3, 3, 2]"
            },
            {
              "cnt": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "p_list": "[1, 1, 3, 3, 2]"
            },
            {
              "cnt": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "p_list": "[1, 1, 3, 3, 2]"
            },
            {
              "cnt": "2"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "p_list = [1, 4, 3, 5, 2]",
          "cnt = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(p_list[i] == i + 1)"
        ],
        "4": [
          "p_list[i+1] = p_list[i]",
          "cnt += 1"
        ],
        "5": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    p_list = [1, 4, 3, 5, 2]\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (p_list[i] == i + 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    p_list[i+1] = p_list[i]\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s806511339": {
      "code": "N = 5\np = [1, 4, 3, 5, 2]\nplen = len(p)\ncount = 0\nfor i in range(plen):\n    if p[i] == i + 1:\n        p[i], p[i + 1] = p[i + 1], p[i]\n        count += 1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        5,
        6,
        7,
        8,
        5,
        6,
        5,
        6,
        5,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "0"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "0"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "0"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            },
            {
              "plen": "5"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "count": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            },
            {
              "plen": "5"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "p = [1, 4, 3, 5, 2]",
          "plen = len(p)",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(plen)"
        ],
        "3": [
          "(p[i] == i + 1)"
        ],
        "4": [
          "p[i], p[i + 1] = p[i + 1], p[i]",
          "count += 1"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    p = [1, 4, 3, 5, 2]\n    plen = len(p)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(plen)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (p[i] == i + 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    p[i], p[i + 1] = p[i + 1], p[i]\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s795476955": {
      "code": "n = 5\np = [1, 4, 3, 5, 2]\ncnt = 0\nfor i in range(n):\n    if p[i] == i + 1:\n        cnt += 1\n        if i != n:\n            p[i], p[i+1] = p[i+1], p[i]\nelse:\n    print(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        4,
        5,
        4,
        5,
        6,
        7,
        8,
        4,
        5,
        4,
        5,
        4,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "cnt": "0"
            },
            {
              "n": "5"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "0"
            },
            {
              "n": "5"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "0"
            },
            {
              "n": "5"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "cnt": "1"
            },
            {
              "n": "5"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "cnt": "1"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "1"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "1"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "1"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "1"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "cnt": "2"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "cnt": "2"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "2"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "2"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "2"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "2"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "2"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "cnt": "2"
            },
            {
              "n": "5"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "p = [1, 4, 3, 5, 2]",
          "cnt = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(p[i] == i + 1)"
        ],
        "4": [
          "cnt += 1",
          "(i != n)"
        ],
        "5": [
          "p[i], p[i+1] = p[i+1], p[i]"
        ],
        "6": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    p = [1, 4, 3, 5, 2]\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (p[i] == i + 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += 1\n    (i != n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    p[i], p[i+1] = p[i+1], p[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s154270872": {
      "code": "N = 5\np = [1, 4, 3, 5, 2]\ncnt = 0\nfor i in range(N):\n    if p[i] == i+1:\n        value = p[i]\n        p[i] = p[i+1]\n        p[i+1] = value\n        cnt += 1\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        4,
        5,
        4,
        5,
        6,
        7,
        8,
        9,
        4,
        5,
        4,
        5,
        4,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "cnt": "0"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "cnt": "0"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "cnt": "0"
            },
            {
              "p": "[1, 4, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "value": "1"
            },
            {
              "N": "5"
            },
            {
              "cnt": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "value": "1"
            },
            {
              "N": "5"
            },
            {
              "cnt": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "value": "1"
            },
            {
              "N": "5"
            },
            {
              "cnt": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "value": "1"
            },
            {
              "N": "5"
            },
            {
              "cnt": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "value": "1"
            },
            {
              "N": "5"
            },
            {
              "cnt": "1"
            },
            {
              "p": "[4, 1, 3, 5, 2]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "value": "3"
            },
            {
              "N": "5"
            },
            {
              "cnt": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "value": "3"
            },
            {
              "N": "5"
            },
            {
              "cnt": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "value": "3"
            },
            {
              "N": "5"
            },
            {
              "cnt": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "value": "3"
            },
            {
              "N": "5"
            },
            {
              "cnt": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "value": "3"
            },
            {
              "N": "5"
            },
            {
              "cnt": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "value": "3"
            },
            {
              "N": "5"
            },
            {
              "cnt": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "value": "3"
            },
            {
              "N": "5"
            },
            {
              "cnt": "2"
            },
            {
              "p": "[4, 1, 5, 3, 2]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "p = [1, 4, 3, 5, 2]",
          "cnt = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(p[i] == i + 1)"
        ],
        "4": [
          "value = p[i]",
          "p[i] = p[i+1]",
          "p[i+1] = value",
          "cnt += 1"
        ],
        "5": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    p = [1, 4, 3, 5, 2]\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (p[i] == i + 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    value = p[i]\n    p[i] = p[i+1]\n    p[i+1] = value\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03624": {
    "s972454743": {
      "code": "alp=[chr(i) for i in range(97, 97+26)]\ns = ['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']\nfor i in range(len(s)):\n    if s[i]!=alp[i]:\n        print(alp[i])\n        break\n    if i==len(s)-1:\n        if len(s) != len(alp):\n            print(alph[i+1])\n        else:\n            print(\"None\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            },
            {
              "s": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            },
            {
              "s": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            },
            {
              "s": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            },
            {
              "s": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            },
            {
              "s": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            },
            {
              "s": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            },
            {
              "s": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "alp=[chr(i) for i in range(97, 97+26)]",
          "s = ['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "(s[i] != alp[i])"
        ],
        "4": [
          "print(alp[i])"
        ],
        "5": [
          "(i == len(s) - 1)"
        ],
        "6": [
          "(len(s) != len(alp))"
        ],
        "7": [
          "print(alph[i+1])"
        ],
        "8": [
          "print(\"None\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    alp=[chr(i) for i in range(97, 97+26)]\n    s = ['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (s[i] != alp[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(alp[i])\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (i == len(s) - 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    (len(s) != len(alp))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(alph[i+1])\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(\"None\")\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s918277847": {
      "code": "S = ['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']\nans=None\nfor i in range(97,97+26):\n  if chr(i)!=S[i-97]:\n    ans=chr(i)\n    break\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            },
            {
              "ans": "None"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            },
            {
              "ans": "None"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            },
            {
              "ans": "None"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            },
            {
              "ans": "None"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            },
            {
              "ans": "None"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            },
            {
              "ans": "'b'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']"
            },
            {
              "ans": "'b'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = ['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']",
          "ans=None"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(97, 97 + 26)"
        ],
        "3": [
          "(chr(i) != S[i - 97])"
        ],
        "4": [
          "ans=chr(i)"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = ['a', 'c', 'd', 'e', 'g', 'l', 'n', 'o', 'r', 's', 't', 'u']\n    ans=None\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(97, 97 + 26)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (chr(i) != S[i - 97])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans=chr(i)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s811620281": {
      "code": "S = ['a', 't', 'c', 'o', 'd', 'e', 'r', 'r', 'e', 'g', 'u', 'l', 'a', 'r', 'c', 'o', 'n', 't', 'e', 's', 't']\nalpha_list = [chr(i) for i in range(97,97+26)]\nS = set(S)\nalpha_list = set(alpha_list)\nanswer = alpha_list - S\nanswer = sorted(list(answer))[0]\nprint(answer)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "alpha_list": "{'z', 'q', 'v', 'h', 'r', 'g', 'd', 'i', 's', 'm', 'y', 'k', 'c', 'e', 'a', 'f', 'n', 't', 'o', 'j', 'w', 'b', 'x', 'u', 'l', 'p'}"
            },
            {
              "S": "{'s', 'n', 't', 'u', 'l', 'o', 'c', 'r', 'g', 'e', 'a', 'd'}"
            },
            {
              "answer": "'b'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = ['a', 't', 'c', 'o', 'd', 'e', 'r', 'r', 'e', 'g', 'u', 'l', 'a', 'r', 'c', 'o', 'n', 't', 'e', 's', 't']",
          "alpha_list = [chr(i) for i in range(97,97+26)]",
          "S = set(S)",
          "alpha_list = set(alpha_list)",
          "answer = alpha_list - S",
          "answer = sorted(list(answer))[0]",
          "print(answer)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = ['a', 't', 'c', 'o', 'd', 'e', 'r', 'r', 'e', 'g', 'u', 'l', 'a', 'r', 'c', 'o', 'n', 't', 'e', 's', 't']\n    alpha_list = [chr(i) for i in range(97,97+26)]\n    S = set(S)\n    alpha_list = set(alpha_list)\n    answer = alpha_list - S\n    answer = sorted(list(answer))[0]\n    print(answer)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s247852043": {
      "code": "s = 'atcoderregularcontest'\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nfor i in range(alphabet):\n  if alphabet[i] not in s:\n    print(i)\n    break",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "alphabet": "'abcdefghijklmnopqrstuvwxyz'"
            },
            {
              "s": "'atcoderregularcontest'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "alphabet": "'abcdefghijklmnopqrstuvwxyz'"
            },
            {
              "s": "'atcoderregularcontest'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'atcoderregularcontest'",
          "alphabet = \"abcdefghijklmnopqrstuvwxyz\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(alphabet)"
        ],
        "3": [
          "(alphabet[i] not in s)"
        ],
        "4": [
          "print(i)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'atcoderregularcontest'\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(alphabet)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (alphabet[i] not in s)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\nNext:\n    <END>\n"
    }
  },
  "p03625": {
    "s957707261": {
      "code": "n = 6\na = [3, 1, 2, 4, 2, 1]\nfrom collections import Counter\ndata=Counter(a)\ntwo=[]\nfour=[]\nfor i,j in data.items():\n    if 2<=j<=3:\n        two.append(i)\n    elif 4<=j:\n        four.append(i)\nif len(four)==0:\n    four.append(0)\n    four.append(0)\n    four[1]=0\nelif len(two)==0:\n    two.append(0)\n    two.append(0)\nprint(max(four[0]*four[0],four[0]*four[1],two[0]*two[1],two[0]*four[0]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            15
          ]
        },
        "9": {
          "range": [
            16,
            16
          ]
        },
        "10": {
          "range": [
            17,
            18
          ]
        },
        "11": {
          "range": [
            19,
            19
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        7,
        8,
        9,
        7,
        8,
        9,
        7,
        8,
        10,
        7,
        12,
        13,
        14,
        15,
        19
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1, 2]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1, 2]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1, 2]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1, 2]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1, 2]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[]"
            },
            {
              "two": "[1, 2]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[0, 0]"
            },
            {
              "two": "[1, 2]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "data": "Counter({3: 1, 1: 2, 2: 2, 4: 1})"
            },
            {
              "n": "6"
            },
            {
              "four": "[0, 0]"
            },
            {
              "two": "[1, 2]"
            },
            {
              "a": "[3, 1, 2, 4, 2, 1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "a = [3, 1, 2, 4, 2, 1]",
          "from collections import Counter",
          "data=Counter(a)",
          "two=[]",
          "four=[]"
        ],
        "2": [
          "i <- index\n    j <- iterator"
        ],
        "3": [
          "(2 <= j <= 3)"
        ],
        "4": [
          "two.append(i)"
        ],
        "5": [
          "(4 <= j)"
        ],
        "6": [
          "four.append(i)"
        ],
        "7": [
          "(len(four) == 0)"
        ],
        "8": [
          "four.append(0)",
          "four.append(0)",
          "four[1]=0"
        ],
        "9": [
          "(len(two) == 0)"
        ],
        "10": [
          "two.append(0)",
          "two.append(0)"
        ],
        "11": [
          "print(max(four[0]*four[0],four[0]*four[1],two[0]*two[1],two[0]*four[0]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [3, 1, 2, 4, 2, 1]\n    from collections import Counter\n    data=Counter(a)\n    two=[]\n    four=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    j <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (2 <= j <= 3)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    two.append(i)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (4 <= j)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    four.append(i)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (len(four) == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    four.append(0)\n    four.append(0)\n    four[1]=0\nNext:\n    Go to Block: 11\n\nBlock 9:\nStatement:\n    (len(two) == 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    two.append(0)\n    two.append(0)\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    print(max(four[0]*four[0],four[0]*four[1],two[0]*two[1],two[0]*four[0]))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03633": {
    "s175984446": {
      "code": "import math\nN = 2\nT = [2, 3]\nLCM = []\nfor i in range(N-1):\n    lcm = T[i] * T[i+1] // math.gcd(T[i], T[i+1])\n    LCM.append(lcm)\nprint(LCM[-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "N = 2",
          "T = [2, 3]",
          "LCM = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N - 1)"
        ],
        "3": [
          "lcm = T[i] * T[i+1] // math.gcd(T[i], T[i+1])",
          "LCM.append(lcm)"
        ],
        "4": [
          "print(LCM[-1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = 2\n    T = [2, 3]\n    LCM = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    lcm = T[i] * T[i+1] // math.gcd(T[i], T[i+1])\n    LCM.append(lcm)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(LCM[-1])\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03644": {
    "s611505008": {
      "code": "N = 7\ni = 1\nfor i in range(1,10):\n  if 2 ** i <= N:\n    ans = 2*i\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "7"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "2"
            },
            {
              "i": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "2"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "2"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "8"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "8"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "9"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "9"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "9"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "7"
            },
            {
              "ans": "4"
            },
            {
              "i": "9"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 7",
          "i = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, 10)"
        ],
        "3": [
          "(2 ** i <= N)"
        ],
        "4": [
          "ans = 2*i"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    i = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, 10)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (2 ** i <= N)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans = 2*i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s170217939": {
      "code": "N = 7\npower = [64,32,16,8,4,2,1]\nfor i in power:\n  if N <= power:\n    print(power)\n    break",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "power": "[64, 32, 16, 8, 4, 2, 1]"
            },
            {
              "N": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "power": "[64, 32, 16, 8, 4, 2, 1]"
            },
            {
              "N": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "power": "[64, 32, 16, 8, 4, 2, 1]"
            },
            {
              "N": "7"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<=' not supported between instances of 'int' and 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 7",
          "power = [64,32,16,8,4,2,1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> power"
        ],
        "3": [
          "(N <= power)"
        ],
        "4": [
          "print(power)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    power = [64,32,16,8,4,2,1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> power\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (N <= power)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(power)\nNext:\n    <END>\n"
    }
  },
  "p03673": {
    "s294131208": {
      "code": "n = 4\na = [1, 2, 3, 4]\nprint(*a[::-2],*a[n%2::2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[1, 2, 3, 4]"
            },
            {
              "n": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "a = [1, 2, 3, 4]",
          "print(*a[::-2],*a[n%2::2])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [1, 2, 3, 4]\n    print(*a[::-2],*a[n%2::2])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s487184888": {
      "code": "n = 4\na = [1, 2, 3, 4]\nprint(*reversed(a[(len(a)+1) % 2::2]), *a[len(a) % 2::2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[1, 2, 3, 4]"
            },
            {
              "n": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "a = [1, 2, 3, 4]",
          "print(*reversed(a[(len(a)+1) % 2::2]), *a[len(a) % 2::2])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [1, 2, 3, 4]\n    print(*reversed(a[(len(a)+1) % 2::2]), *a[len(a) % 2::2])\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03695": {
    "s087684073": {
      "code": "n = 4\na = [2100, 2500, 2700, 2700]\nflag = [False]*8\nt = 0\nfor i in a:\n  if i < 400: flag[0] = True\n  elif i < 800: flag[1] = True\n  elif i < 1200: flag[2] = True\n  elif i < 1600: flag[3] = True\n  elif i < 2000: flag[4] = True\n  elif i < 2400: flag[5] = True\n  elif i < 2800: flag[6] = True\n  elif i < 3200: flag[7] = True\n  elif 3200 <= i: t += 1\nminNum = 0\np = flag.count(True)\nif p > 0: minNum = p\nelif p == 0 and t > 0:\n  minNum = 1\n  t -= 1\nmaxNum = 0\nif minNum < 8:\n  maxNum = min(8, minNum + t)\nelse: maxNum = minNUm\nprint(minNum,maxNum)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        },
        "9": {
          "range": [
            12,
            12
          ]
        },
        "10": {
          "range": [
            13,
            13
          ]
        },
        "11": {
          "range": [
            14,
            14
          ]
        },
        "12": {
          "range": [
            15,
            17
          ]
        },
        "13": {
          "range": [
            17,
            17
          ]
        },
        "14": {
          "range": [
            18,
            18
          ]
        },
        "15": {
          "range": [
            19,
            20
          ]
        },
        "16": {
          "range": [
            21,
            22
          ]
        },
        "17": {
          "range": [
            23,
            23
          ]
        },
        "18": {
          "range": [
            24,
            24
          ]
        },
        "19": {
          "range": [
            25,
            25
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        5,
        15,
        16,
        17,
        21,
        22,
        23,
        25
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "flag": "[False, False, False, False, False, False, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "flag": "[False, False, False, False, False, False, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "flag": "[False, False, False, False, False, False, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "flag": "[False, False, False, False, False, False, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "flag": "[False, False, False, False, False, False, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "[False, False, False, False, False, False, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "flag": "[False, False, False, False, False, False, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, False, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "minNum": "2"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "p": "2"
            }
          ]
        },
        {
          "block": 16,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "maxNum": "0"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "minNum": "2"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "p": "2"
            }
          ]
        },
        {
          "block": 17,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "maxNum": "2"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "minNum": "2"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "p": "2"
            }
          ]
        },
        {
          "block": 19,
          "state": [
            {
              "flag": "[False, False, False, False, False, True, True, False]"
            },
            {
              "maxNum": "2"
            },
            {
              "t": "0"
            },
            {
              "n": "4"
            },
            {
              "minNum": "2"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "p": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "a = [2100, 2500, 2700, 2700]",
          "flag = [False]*8",
          "t = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> a"
        ],
        "3": [
          "(i < 400)"
        ],
        "4": [
          "(i < 800)"
        ],
        "5": [
          "(i < 1200)"
        ],
        "6": [
          "(i < 1600)"
        ],
        "7": [
          "(i < 2000)"
        ],
        "8": [
          "(i < 2400)"
        ],
        "9": [
          "(i < 2800)"
        ],
        "10": [
          "(i < 3200)"
        ],
        "11": [
          "(3200 <= i)"
        ],
        "12": [
          "minNum = 0",
          "p = flag.count(True)",
          "(p > 0)"
        ],
        "13": [
          "(p > 0)"
        ],
        "14": [
          "(p == 0 and t > 0)"
        ],
        "15": [
          "minNum = 1",
          "t -= 1"
        ],
        "16": [
          "maxNum = 0",
          "(minNum < 8)"
        ],
        "17": [
          "maxNum = min(8, minNum + t)"
        ],
        "18": [
          "else: maxNum = minNUm"
        ],
        "19": [
          "print(minNum,maxNum)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 12
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        },
        "16": {
          "with_condition": {
            "true": 17,
            "false": 18
          },
          "no_condition": null
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        },
        "14": {
          "with_condition": {
            "true": 15,
            "false": 16
          },
          "no_condition": null
        },
        "15": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 16
        },
        "17": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        },
        "18": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2100, 2500, 2700, 2700]\n    flag = [False]*8\n    t = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 12\n\nBlock 3:\nStatement:\n    (i < 400)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (i < 800)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i < 1200)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (i < 1600)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (i < 2000)\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    (i < 2400)\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (i < 2800)\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    (i < 3200)\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (3200 <= i)\nNext:\n    Go to Block: 2\n\nBlock 12:\nStatement:\n    minNum = 0\n    p = flag.count(True)\n    (p > 0)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    (p > 0)\nNext:\n    Go to Block: 16\n\nBlock 14:\nStatement:\n    (p == 0 and t > 0)\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 16\n\nBlock 15:\nStatement:\n    minNum = 1\n    t -= 1\nNext:\n    Go to Block: 16\n\nBlock 16:\nStatement:\n    maxNum = 0\n    (minNum < 8)\nNext:\n    If True: Go to Block 17\n    If False: Go to Block 18\n\nBlock 17:\nStatement:\n    maxNum = min(8, minNum + t)\nNext:\n    Go to Block: 19\n\nBlock 18:\nStatement:\n    else: maxNum = minNUm\nNext:\n    Go to Block: 19\n\nBlock 19:\nStatement:\n    print(minNum,maxNum)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s654497442": {
      "code": "N = 4\na = [2100, 2500, 2700, 2700]\na.sort()\nmin_color = [0] * 8\nmax_color = [0] * 8\nextra = 0\nfor i in a:\n    if i >= 3200:\n        if sum(min_color) == 0:\n            min_color[0] = 1\n        if sum(max_color + extra) < 8:\n            extra += 1\n    else:\n        min_color[i // 400] = 1\n        max_color[i // 400] = 1\nprint( sum(min_color), sum(max_color) + extra)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            14,
            15
          ]
        },
        "9": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        14,
        15,
        7,
        8,
        14,
        15,
        7,
        8,
        14,
        15,
        7,
        8,
        14,
        15,
        7,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 0, 0, 0]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 0, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 0, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 0, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 0, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 0, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 0, 0]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "N": "4"
            },
            {
              "extra": "0"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            },
            {
              "min_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            },
            {
              "max_color": "[0, 0, 0, 0, 0, 1, 1, 0]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "a = [2100, 2500, 2700, 2700]",
          "a.sort()",
          "min_color = [0] * 8",
          "max_color = [0] * 8",
          "extra = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> a"
        ],
        "3": [
          "(i >= 3200)"
        ],
        "4": [
          "(sum(min_color) == 0)"
        ],
        "5": [
          "min_color[0] = 1"
        ],
        "6": [
          "(sum(max_color + extra) < 8)"
        ],
        "7": [
          "extra += 1"
        ],
        "8": [
          "min_color[i // 400] = 1",
          "max_color[i // 400] = 1"
        ],
        "9": [
          "print( sum(min_color), sum(max_color) + extra)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 9
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 8
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    a = [2100, 2500, 2700, 2700]\n    a.sort()\n    min_color = [0] * 8\n    max_color = [0] * 8\n    extra = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (i >= 3200)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 8\n\nBlock 4:\nStatement:\n    (sum(min_color) == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    min_color[0] = 1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    (sum(max_color + extra) < 8)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 2\n\nBlock 7:\nStatement:\n    extra += 1\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    min_color[i // 400] = 1\n    max_color[i // 400] = 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print( sum(min_color), sum(max_color) + extra)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s269664657": {
      "code": "N = 4\na = [2100, 2500, 2700, 2700]\ncolors = [0] * 9\nfor i in range(N):\n    if 1 <= a[i] and a[i] <= 399:\n        colors[0] = 1\n    elif 400 <= a[i] and a[i] <= 799:\n        colors[1] = 1\n    elif 800 <= a[i] and a[i] <= 1199:\n        colors[2] = 1\n    elif 1200 <= a[i] and a[i] <= 1599:\n        colors[3] = 1\n    elif 1600 <= a[i] and a[i] <= 1999:\n        colors[4] = 1\n    elif 2000 <= a[i] and a[i] <= 2399:\n        colors[5] = 1\n    elif 2400 <= a[i] and a[i] <= 2799:\n        colors[6] = 1\n    elif 2800 <= a[i] and a[i] <= 3199:\n        colors[7] = 1\n    else:\n        colors[8] += 1\nif sum(colors[0:8] == 0) and colors[9] >= 1:\n    MIN = 1\nelse:\n    MIN = sum(colors[0:8])\nMAX = sum(colors)\nprint(MIN, MAX)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            10,
            10
          ]
        },
        "9": {
          "range": [
            11,
            11
          ]
        },
        "10": {
          "range": [
            12,
            12
          ]
        },
        "11": {
          "range": [
            13,
            13
          ]
        },
        "12": {
          "range": [
            14,
            14
          ]
        },
        "13": {
          "range": [
            15,
            15
          ]
        },
        "14": {
          "range": [
            16,
            16
          ]
        },
        "15": {
          "range": [
            17,
            17
          ]
        },
        "16": {
          "range": [
            18,
            18
          ]
        },
        "17": {
          "range": [
            19,
            19
          ]
        },
        "18": {
          "range": [
            20,
            20
          ]
        },
        "19": {
          "range": [
            22,
            22
          ]
        },
        "20": {
          "range": [
            23,
            23
          ]
        },
        "21": {
          "range": [
            24,
            24
          ]
        },
        "22": {
          "range": [
            26,
            26
          ]
        },
        "23": {
          "range": [
            27,
            28
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        11,
        13,
        15,
        16,
        4,
        5,
        7,
        9,
        11,
        13,
        15,
        17,
        18,
        4,
        5,
        7,
        9,
        11,
        13,
        15,
        17,
        18,
        4,
        5,
        7,
        9,
        11,
        13,
        15,
        17,
        18,
        4,
        23
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 14,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 16,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 16,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 16,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        },
        {
          "block": 20,
          "state": [
            {
              "N": "4"
            },
            {
              "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
            },
            {
              "a": "[2100, 2500, 2700, 2700]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'bool' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "a = [2100, 2500, 2700, 2700]",
          "colors = [0] * 9"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(1 <= a[i] and a[i] <= 399)"
        ],
        "4": [
          "colors[0] = 1"
        ],
        "5": [
          "(400 <= a[i] and a[i] <= 799)"
        ],
        "6": [
          "colors[1] = 1"
        ],
        "7": [
          "(800 <= a[i] and a[i] <= 1199)"
        ],
        "8": [
          "colors[2] = 1"
        ],
        "9": [
          "(1200 <= a[i] and a[i] <= 1599)"
        ],
        "10": [
          "colors[3] = 1"
        ],
        "11": [
          "(1600 <= a[i] and a[i] <= 1999)"
        ],
        "12": [
          "colors[4] = 1"
        ],
        "13": [
          "(2000 <= a[i] and a[i] <= 2399)"
        ],
        "14": [
          "colors[5] = 1"
        ],
        "15": [
          "(2400 <= a[i] and a[i] <= 2799)"
        ],
        "16": [
          "colors[6] = 1"
        ],
        "17": [
          "(2800 <= a[i] and a[i] <= 3199)"
        ],
        "18": [
          "colors[7] = 1"
        ],
        "19": [
          "colors[8] += 1"
        ],
        "20": [
          "(sum(colors[0:8] == 0) and colors[9] >= 1)"
        ],
        "21": [
          "MIN = 1"
        ],
        "22": [
          "MIN = sum(colors[0:8])"
        ],
        "23": [
          "MAX = sum(colors)",
          "print(MIN, MAX)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 20
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": 17
          },
          "no_condition": null
        },
        "16": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "17": {
          "with_condition": {
            "true": 18,
            "false": 19
          },
          "no_condition": null
        },
        "18": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "19": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "20": {
          "with_condition": {
            "true": 21,
            "false": 22
          },
          "no_condition": null
        },
        "21": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 23
        },
        "22": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 23
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    a = [2100, 2500, 2700, 2700]\n    colors = [0] * 9\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 20\n\nBlock 3:\nStatement:\n    (1 <= a[i] and a[i] <= 399)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    colors[0] = 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (400 <= a[i] and a[i] <= 799)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    colors[1] = 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (800 <= a[i] and a[i] <= 1199)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    colors[2] = 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (1200 <= a[i] and a[i] <= 1599)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    colors[3] = 1\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (1600 <= a[i] and a[i] <= 1999)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    colors[4] = 1\nNext:\n    Go to Block: 2\n\nBlock 13:\nStatement:\n    (2000 <= a[i] and a[i] <= 2399)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    colors[5] = 1\nNext:\n    Go to Block: 2\n\nBlock 15:\nStatement:\n    (2400 <= a[i] and a[i] <= 2799)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    colors[6] = 1\nNext:\n    Go to Block: 2\n\nBlock 17:\nStatement:\n    (2800 <= a[i] and a[i] <= 3199)\nNext:\n    If True: Go to Block 18\n    If False: Go to Block 19\n\nBlock 18:\nStatement:\n    colors[7] = 1\nNext:\n    Go to Block: 2\n\nBlock 19:\nStatement:\n    colors[8] += 1\nNext:\n    Go to Block: 2\n\nBlock 20:\nStatement:\n    (sum(colors[0:8] == 0) and colors[9] >= 1)\nNext:\n    If True: Go to Block 21\n    If False: Go to Block 22\n\nBlock 21:\nStatement:\n    MIN = 1\nNext:\n    Go to Block: 23\n\nBlock 22:\nStatement:\n    MIN = sum(colors[0:8])\nNext:\n    Go to Block: 23\n\nBlock 23:\nStatement:\n    MAX = sum(colors)\n    print(MIN, MAX)\nNext:\n    <END>\n"
    }
  },
  "p03745": {
    "s232873811": {
      "code": "import numpy as np\nn = 6\na = [1, 2, 3, 2, 2, 1]\nflg = np.sign(a[1] - a[0])\nskp = 1\ncnt = 1\ntemp = a[0]\nfor i in range(1,n):\n    dif = a[i] - temp\n    direct = np.sign(dif)\n    if dif != 0:\n        if skp:\n            flg = direct\n            skp = 0\n            continue\n        elif direct != flg:\n            flg = direct\n            cnt+=1\n            skp = 1\n    temp = a[i]\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        },
        "5": {
          "range": [
            13,
            14
          ]
        },
        "6": {
          "range": [
            16,
            16
          ]
        },
        "7": {
          "range": [
            17,
            19
          ]
        },
        "8": {
          "range": [
            20,
            20
          ]
        },
        "9": {
          "range": [
            21,
            21
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        8,
        9,
        10,
        11,
        12,
        16,
        20,
        8,
        9,
        10,
        11,
        12,
        16,
        17,
        18,
        19,
        20,
        8,
        9,
        10,
        11,
        20,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        8,
        21
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 9,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "n = 6",
          "a = [1, 2, 3, 2, 2, 1]",
          "flg = np.sign(a[1] - a[0])",
          "skp = 1",
          "cnt = 1",
          "temp = a[0]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "dif = a[i] - temp",
          "direct = np.sign(dif)",
          "(dif != 0)"
        ],
        "4": [
          "(skp)"
        ],
        "5": [
          "flg = direct",
          "skp = 0"
        ],
        "6": [
          "(direct != flg)"
        ],
        "7": [
          "flg = direct",
          "cnt+=1",
          "skp = 1"
        ],
        "8": [
          "temp = a[i]"
        ],
        "9": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 9
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 8
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    n = 6\n    a = [1, 2, 3, 2, 2, 1]\n    flg = np.sign(a[1] - a[0])\n    skp = 1\n    cnt = 1\n    temp = a[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    dif = a[i] - temp\n    direct = np.sign(dif)\n    (dif != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 8\n\nBlock 4:\nStatement:\n    (skp)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    flg = direct\n    skp = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (direct != flg)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    flg = direct\n    cnt+=1\n    skp = 1\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    temp = a[i]\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03760": {
    "s759970630": {
      "code": "o = 'xyz'\ne = 'abc'\na=[]\nfor i in range(max(len(o),len(e))):\n    a.append(o[i]+e[i])\nb=''.join(a)\nprint(b)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[]"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[]"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['xa']"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['xa']"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['xa', 'yb']"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['xa', 'yb']"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['xa', 'yb', 'zc']"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['xa', 'yb', 'zc']"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "b": "'xaybzc'"
            },
            {
              "a": "['xa', 'yb', 'zc']"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "o = 'xyz'",
          "e = 'abc'",
          "a=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(max(len(o), len(e)))"
        ],
        "3": [
          "a.append(o[i]+e[i])"
        ],
        "4": [
          "b=''.join(a)",
          "print(b)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    o = 'xyz'\n    e = 'abc'\n    a=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(max(len(o), len(e)))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a.append(o[i]+e[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    b=''.join(a)\n    print(b)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s073751835": {
      "code": "O = 'xyz'\nE = 'abc'\nfor i in range(len(O)):\n    print(O[i] + E[i], end=\"\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        4,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "O": "'xyz'"
            },
            {
              "E": "'abc'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "O": "'xyz'"
            },
            {
              "E": "'abc'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "O": "'xyz'"
            },
            {
              "E": "'abc'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "O": "'xyz'"
            },
            {
              "E": "'abc'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "O": "'xyz'"
            },
            {
              "E": "'abc'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "O": "'xyz'"
            },
            {
              "E": "'abc'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "O": "'xyz'"
            },
            {
              "E": "'abc'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "O": "'xyz'"
            },
            {
              "E": "'abc'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "O = 'xyz'",
          "E = 'abc'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(O))"
        ],
        "3": [
          "print(O[i] + E[i], end=\"\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    O = 'xyz'\n    E = 'abc'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(O))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(O[i] + E[i], end=\"\")\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s899045619": {
      "code": "o = 'xyz'\ne = 'abc'\npw = \"\"\nfor i in range(len(o)):\n    pw += o[i] + e[i]\nelse:\n    print(pw)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "pw": "''"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pw": "''"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pw": "'xa'"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pw": "'xa'"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pw": "'xayb'"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pw": "'xayb'"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pw": "'xaybzc'"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pw": "'xaybzc'"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "pw": "'xaybzc'"
            },
            {
              "e": "'abc'"
            },
            {
              "o": "'xyz'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "o = 'xyz'",
          "e = 'abc'",
          "pw = \"\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(o))"
        ],
        "3": [
          "pw += o[i] + e[i]"
        ],
        "4": [
          "print(pw)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    o = 'xyz'\n    e = 'abc'\n    pw = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(o))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    pw += o[i] + e[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(pw)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s719280694": {
      "code": "o = 'xyz'\ne = 'abc'\nans = ''\nn = len(o)\na = 0\nwhile a < n:\n  ans += o[a]\n  if a <= len(e):\n    ans += e[a]\n  a += 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        6,
        7,
        8,
        9,
        10,
        6,
        7,
        8,
        9,
        10,
        6,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "''"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "''"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'x'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "'xa'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "'xa'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'xa'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'xay'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "'xayb'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "'xayb'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'xayb'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'xaybz'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "'xaybzc'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "'xaybzc'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'xaybzc'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "3"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "'xaybzc'"
            },
            {
              "e": "'abc'"
            },
            {
              "n": "3"
            },
            {
              "o": "'xyz'"
            },
            {
              "a": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "o = 'xyz'",
          "e = 'abc'",
          "ans = ''",
          "n = len(o)",
          "a = 0"
        ],
        "2": [
          "while a < n:"
        ],
        "3": [
          "ans += o[a]",
          "(a <= len(e))"
        ],
        "4": [
          "ans += e[a]"
        ],
        "5": [
          "a += 1"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    o = 'xyz'\n    e = 'abc'\n    ans = ''\n    n = len(o)\n    a = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while a < n:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    ans += o[a]\n    (a <= len(e))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += e[a]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    a += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s782093418": {
      "code": "o = 'xyz'\ne = 'abc'\nans = \"\"\nfor i in len(o):\n  ans += o[i]\n  if len(e) > i:\n    ans += e[i]\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "e": "'abc'"
            },
            {
              "ans": "''"
            },
            {
              "o": "'xyz'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "e": "'abc'"
            },
            {
              "ans": "''"
            },
            {
              "o": "'xyz'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "o = 'xyz'",
          "e = 'abc'",
          "ans = \"\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> len(o)"
        ],
        "3": [
          "ans += o[i]",
          "(len(e) > i)"
        ],
        "4": [
          "ans += e[i]"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    o = 'xyz'\n    e = 'abc'\n    ans = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(o)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ans += o[i]\n    (len(e) > i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += e[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s742498343": {
      "code": "o = ['x', 'y', 'z']\ne = ['a', 'b', 'c']\nif len(o) > len(e):\n  e.append(\"\")\nfor i in range(o):\n  print(o[i] + e[i], end='')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "o": "['x', 'y', 'z']"
            },
            {
              "e": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "o": "['x', 'y', 'z']"
            },
            {
              "e": "['a', 'b', 'c']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "o = ['x', 'y', 'z']",
          "e = ['a', 'b', 'c']",
          "(len(o) > len(e))"
        ],
        "2": [
          "e.append(\"\")"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(o)"
        ],
        "4": [
          "print(o[i] + e[i], end='')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    o = ['x', 'y', 'z']\n    e = ['a', 'b', 'c']\n    (len(o) > len(e))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    e.append(\"\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(o)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    print(o[i] + e[i], end='')\nNext:\n    Go to Block: 3\n"
    }
  },
  "p03796": {
    "s605672343": {
      "code": "from decimal import Decimal\nn = 3\ntraining = 1\nfor i in range(1, n):\n    training *= i\nprint(Decimal(training) % (10 ** 9 + 7))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from decimal import Decimal",
          "n = 3",
          "training = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "training *= i"
        ],
        "4": [
          "print(Decimal(training) % (10 ** 9 + 7))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from decimal import Decimal\n    n = 3\n    training = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    training *= i\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(Decimal(training) % (10 ** 9 + 7))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03854": {
    "s588480428": {
      "code": "import sys\ns = 'erasedream'\ni = 0\nwhile i < len(s):\n    if i + 5 <= len(s) and s[i:i+5] == 'dream': \n        if i + 6 < len(s) and s[i+5] == 'e' and s[i+6] == 'r': \n            if s[i+7] == 'a': \n                i += 5\n            else: \n                i += 7\n        else: \n            i += 5\n    elif i + 5 <= len(s) and s[i:i+5] == 'erase':\n        if i + 5 < len(s) and s[i+5] == 'r': \n            i += 6\n        else: \n            i += 5\n    else:\n        print('NO')\n        sys.exit()\nprint('YES')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        },
        "10": {
          "range": [
            14,
            14
          ]
        },
        "11": {
          "range": [
            15,
            15
          ]
        },
        "12": {
          "range": [
            17,
            17
          ]
        },
        "13": {
          "range": [
            19,
            20
          ]
        },
        "14": {
          "range": [
            21,
            21
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        13,
        14,
        17,
        4,
        5,
        6,
        12,
        4,
        21
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 9,
          "state": []
        },
        {
          "block": 10,
          "state": []
        },
        {
          "block": 12,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 14,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys",
          "s = 'erasedream'",
          "i = 0"
        ],
        "2": [
          "while i < len(s):"
        ],
        "3": [
          "(i + 5 <= len(s) and s[i:i + 5] == 'dream')"
        ],
        "4": [
          "(i + 6 < len(s) and s[i + 5] == 'e' and (s[i + 6] == 'r'))"
        ],
        "5": [
          "(s[i + 7] == 'a')"
        ],
        "6": [
          "i += 5"
        ],
        "7": [
          "i += 7"
        ],
        "8": [
          "i += 5"
        ],
        "9": [
          "(i + 5 <= len(s) and s[i:i + 5] == 'erase')"
        ],
        "10": [
          "(i + 5 < len(s) and s[i + 5] == 'r')"
        ],
        "11": [
          "i += 6"
        ],
        "12": [
          "i += 5"
        ],
        "13": [
          "print('NO')",
          "sys.exit()"
        ],
        "14": [
          "print('YES')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 14
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 9
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    s = 'erasedream'\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i < len(s):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 14\n\nBlock 3:\nStatement:\n    (i + 5 <= len(s) and s[i:i + 5] == 'dream')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 9\n\nBlock 4:\nStatement:\n    (i + 6 < len(s) and s[i + 5] == 'e' and (s[i + 6] == 'r'))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (s[i + 7] == 'a')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    i += 5\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    i += 7\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    i += 5\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (i + 5 <= len(s) and s[i:i + 5] == 'erase')\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 13\n\nBlock 10:\nStatement:\n    (i + 5 < len(s) and s[i + 5] == 'r')\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    i += 6\nNext:\n    Go to Block: 2\n\nBlock 12:\nStatement:\n    i += 5\nNext:\n    Go to Block: 2\n\nBlock 13:\nStatement:\n    print('NO')\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 14:\nStatement:\n    print('YES')\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03994": {
    "s342284024": {
      "code": "S = 'xyz'\nK = 4\nalp = [chr(i) for i in range(97, 97+26)]\nans = ''\nfor s in S:\n    loc = alp.index(s)\n    if s == 'a': continue\n    if loc + K >= 26:\n        K -= 26 - loc\n        ans += 'a'\n    else:\n        ans += s\nif K > 0:\n    K %= 26\n    ans = ans[:-1] + alp[(alp.index(ans[-1])+K)%26]\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        },
        "8": {
          "range": [
            14,
            15
          ]
        },
        "9": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        5,
        6,
        7,
        8,
        12,
        5,
        6,
        7,
        8,
        9,
        10,
        5,
        13,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "''"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "4"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "''"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "4"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "''"
            },
            {
              "loc": "23"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "4"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "''"
            },
            {
              "loc": "23"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "4"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "'a'"
            },
            {
              "loc": "23"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "1"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'a'"
            },
            {
              "loc": "23"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "1"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'a'"
            },
            {
              "loc": "24"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "1"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "'a'"
            },
            {
              "loc": "24"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "1"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "'ay'"
            },
            {
              "loc": "24"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "1"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'ay'"
            },
            {
              "loc": "24"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "1"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "'ay'"
            },
            {
              "loc": "25"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "1"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "'ay'"
            },
            {
              "loc": "25"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "1"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "'aya'"
            },
            {
              "loc": "25"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "0"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "'aya'"
            },
            {
              "loc": "25"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "0"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ans": "'aya'"
            },
            {
              "loc": "25"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "0"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "ans": "'aya'"
            },
            {
              "loc": "25"
            },
            {
              "S": "'xyz'"
            },
            {
              "K": "0"
            },
            {
              "alp": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'xyz'",
          "K = 4",
          "alp = [chr(i) for i in range(97, 97+26)]",
          "ans = ''"
        ],
        "2": [
          "iterator -> s, Iterate Over -> S"
        ],
        "3": [
          "loc = alp.index(s)",
          "(s == 'a')"
        ],
        "4": [
          "(loc + K >= 26)"
        ],
        "5": [
          "K -= 26 - loc",
          "ans += 'a'"
        ],
        "6": [
          "ans += s"
        ],
        "7": [
          "(K > 0)"
        ],
        "8": [
          "K %= 26",
          "ans = ans[:-1] + alp[(alp.index(ans[-1])+K)%26]"
        ],
        "9": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'xyz'\n    K = 4\n    alp = [chr(i) for i in range(97, 97+26)]\n    ans = ''\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    loc = alp.index(s)\n    (s == 'a')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (loc + K >= 26)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    K -= 26 - loc\n    ans += 'a'\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    ans += s\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (K > 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    K %= 26\n    ans = ans[:-1] + alp[(alp.index(ans[-1])+K)%26]\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s909828422": {
      "code": "s = 'xyz'\na=[ord(c)-ord('a') for c in s]\nK = 4\nfor i in range(len(s)):\n    if 26-a[i]>K:\n        continue\n    else:\n        K-=26-a[i]\n        a[i]=0\na[-1]+=K\nprint(''.join([chr(ord('a')+ai) for ai in a]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        },
        "5": {
          "range": [
            10,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        4,
        5,
        6,
        4,
        5,
        8,
        9,
        4,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[23, 24, 25]"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[23, 24, 25]"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[23, 24, 25]"
            },
            {
              "K": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[0, 24, 25]"
            },
            {
              "K": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[0, 24, 25]"
            },
            {
              "K": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[0, 24, 25]"
            },
            {
              "K": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[0, 24, 25]"
            },
            {
              "K": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[0, 24, 25]"
            },
            {
              "K": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[0, 24, 0]"
            },
            {
              "K": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[0, 24, 0]"
            },
            {
              "K": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'xyz'"
            },
            {
              "a": "[0, 24, 0]"
            },
            {
              "K": "0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'xyz'",
          "a=[ord(c)-ord('a') for c in s]",
          "K = 4"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "(26 - a[i] > K)"
        ],
        "4": [
          "K-=26-a[i]",
          "a[i]=0"
        ],
        "5": [
          "a[-1]+=K",
          "print(''.join([chr(ord('a')+ai) for ai in a]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'xyz'\n    a=[ord(c)-ord('a') for c in s]\n    K = 4\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (26 - a[i] > K)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    K-=26-a[i]\n    a[i]=0\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    a[-1]+=K\n    print(''.join([chr(ord('a')+ai) for ai in a]))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03998": {
    "s668646186": {
      "code": "A = ['a', 'c', 'a']\nB = ['a', 'c', 'c', 'c']\nC = ['c', 'a']\nans = 1\nif len(A) == 1 and A[0] == 'a':\n    print('A')\nelse:\n    card = A[0]\n    del A[0]\n    while ans == 1:\n        if card == 'a':\n            card = A[0]\n            del A[0]\n            if card == 'a' and len(A) == 0:\n                print('A')\n                ans = 0\n        elif card == 'b':\n            card = B[0]\n            del B[0]\n            if card == 'b' and len(B) == 0:\n                print('B')\n                ans = 0\n        elif card == 'c':\n            card = C[0]\n            del C[0]\n            if card == 'c' and len(C) == 0:\n                print('C')\n                ans = 0",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            14
          ]
        },
        "7": {
          "range": [
            15,
            16
          ]
        },
        "8": {
          "range": [
            17,
            17
          ]
        },
        "9": {
          "range": [
            18,
            20
          ]
        },
        "10": {
          "range": [
            21,
            22
          ]
        },
        "11": {
          "range": [
            23,
            23
          ]
        },
        "12": {
          "range": [
            24,
            26
          ]
        },
        "13": {
          "range": [
            27,
            28
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        10,
        11,
        17,
        23,
        24,
        25,
        26,
        10,
        11,
        17,
        23,
        24,
        25,
        26,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['a', 'c', 'a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['c', 'a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['c', 'a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['c', 'a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['c', 'a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "card": "'c'"
            },
            {
              "ans": "1"
            },
            {
              "C": "['a']"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "1"
            },
            {
              "C": "[]"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "1"
            },
            {
              "C": "[]"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "1"
            },
            {
              "C": "[]"
            },
            {
              "A": "['a']"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "1"
            },
            {
              "C": "[]"
            },
            {
              "A": "[]"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "0"
            },
            {
              "C": "[]"
            },
            {
              "A": "[]"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "card": "'a'"
            },
            {
              "ans": "0"
            },
            {
              "C": "[]"
            },
            {
              "A": "[]"
            },
            {
              "B": "['a', 'c', 'c', 'c']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "A = ['a', 'c', 'a']",
          "B = ['a', 'c', 'c', 'c']",
          "C = ['c', 'a']",
          "ans = 1",
          "(len(A) == 1 and A[0] == 'a')"
        ],
        "2": [
          "print('A')"
        ],
        "3": [
          "card = A[0]",
          "del A[0]"
        ],
        "4": [
          "while ans == 1:"
        ],
        "5": [
          "(card == 'a')"
        ],
        "6": [
          "card = A[0]",
          "del A[0]",
          "(card == 'a' and len(A) == 0)"
        ],
        "7": [
          "print('A')",
          "ans = 0"
        ],
        "8": [
          "(card == 'b')"
        ],
        "9": [
          "card = B[0]",
          "del B[0]",
          "(card == 'b' and len(B) == 0)"
        ],
        "10": [
          "print('B')",
          "ans = 0"
        ],
        "11": [
          "(card == 'c')"
        ],
        "12": [
          "card = C[0]",
          "del C[0]",
          "(card == 'c' and len(C) == 0)"
        ],
        "13": [
          "print('C')",
          "ans = 0"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": "<END>"
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 8
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 4
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 11
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 4
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 4
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 4
          },
          "no_condition": null
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    A = ['a', 'c', 'a']\n    B = ['a', 'c', 'c', 'c']\n    C = ['c', 'a']\n    ans = 1\n    (len(A) == 1 and A[0] == 'a')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('A')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    card = A[0]\n    del A[0]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    while ans == 1:\nNext:\n    If True: Go to Block 5\n    <END>\nBlock 5:\nStatement:\n    (card == 'a')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 8\n\nBlock 6:\nStatement:\n    card = A[0]\n    del A[0]\n    (card == 'a' and len(A) == 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 4\n\nBlock 7:\nStatement:\n    print('A')\n    ans = 0\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    (card == 'b')\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 11\n\nBlock 9:\nStatement:\n    card = B[0]\n    del B[0]\n    (card == 'b' and len(B) == 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 4\n\nBlock 10:\nStatement:\n    print('B')\n    ans = 0\nNext:\n    Go to Block: 4\n\nBlock 11:\nStatement:\n    (card == 'c')\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 4\n\nBlock 12:\nStatement:\n    card = C[0]\n    del C[0]\n    (card == 'c' and len(C) == 0)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 4\n\nBlock 13:\nStatement:\n    print('C')\n    ans = 0\nNext:\n    Go to Block: 4\n",
      "exception_info": null
    },
    "s847588099": {
      "code": "Sa = ['a', 'c', 'a']\nSb = ['a', 'c', 'c', 'c']\nSc = ['c', 'a']\nSa.pop()\nSb.pop()\nS=Sa.pop(0)\nWin=\"A\"\nwhile(S!=\"\"):\n  if(S==\"a\"):\n    S=\"\"\n    if(len(Sa)!=0):\n    \tS=Sa.pop(0)\n    Win=\"A\"\n  elif(S==\"b\"):\n    S=\"\"\n    if(len(Sb)!=0):\n\t    S=Sb.pop(0)\n    Win=\"B\"\n  elif(S==\"c\"):\n    S=\"\"\n    if(len(Sc)!=0):\n    \tS=Sc.pop(0)\n    Win=\"C\"\nprint(Win)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            15,
            16
          ]
        },
        "9": {
          "range": [
            17,
            17
          ]
        },
        "10": {
          "range": [
            18,
            18
          ]
        },
        "11": {
          "range": [
            19,
            19
          ]
        },
        "12": {
          "range": [
            20,
            21
          ]
        },
        "13": {
          "range": [
            22,
            22
          ]
        },
        "14": {
          "range": [
            23,
            23
          ]
        },
        "15": {
          "range": [
            24,
            24
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        8,
        9,
        14,
        19,
        20,
        21,
        22,
        23,
        8,
        9,
        14,
        19,
        20,
        21,
        22,
        23,
        8,
        9,
        10,
        11,
        13,
        8,
        24
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'a'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "['c']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'a'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "['c']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'a'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "['c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "''"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "['c']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "''"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['c', 'a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 14,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'c'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "''"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "['a']"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'a'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "[]"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 14,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'a'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "[]"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'a'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "[]"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "'a'"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "[]"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "Win": "'C'"
            },
            {
              "S": "''"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "[]"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "''"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "[]"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "''"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "[]"
            },
            {
              "Sa": "[]"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "Win": "'A'"
            },
            {
              "S": "''"
            },
            {
              "Sb": "['a', 'c', 'c']"
            },
            {
              "Sc": "[]"
            },
            {
              "Sa": "[]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "Sa = ['a', 'c', 'a']",
          "Sb = ['a', 'c', 'c', 'c']",
          "Sc = ['c', 'a']",
          "Sa.pop()",
          "Sb.pop()",
          "S=Sa.pop(0)",
          "Win=\"A\""
        ],
        "2": [
          "while(S!=\"\"):"
        ],
        "3": [
          "(S == 'a')"
        ],
        "4": [
          "S=\"\"",
          "(len(Sa) != 0)"
        ],
        "5": [
          "S=Sa.pop(0)"
        ],
        "6": [
          "Win=\"A\""
        ],
        "7": [
          "(S == 'b')"
        ],
        "8": [
          "S=\"\"",
          "(len(Sb) != 0)"
        ],
        "9": [
          "S=Sb.pop(0)"
        ],
        "10": [
          "Win=\"B\""
        ],
        "11": [
          "(S == 'c')"
        ],
        "12": [
          "S=\"\"",
          "(len(Sc) != 0)"
        ],
        "13": [
          "S=Sc.pop(0)"
        ],
        "14": [
          "Win=\"C\""
        ],
        "15": [
          "print(Win)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 15
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 2
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 14
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    Sa = ['a', 'c', 'a']\n    Sb = ['a', 'c', 'c', 'c']\n    Sc = ['c', 'a']\n    Sa.pop()\n    Sb.pop()\n    S=Sa.pop(0)\n    Win=\"A\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while(S!=\"\"):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 15\n\nBlock 3:\nStatement:\n    (S == 'a')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    S=\"\"\n    (len(Sa) != 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    S=Sa.pop(0)\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    Win=\"A\"\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (S == 'b')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    S=\"\"\n    (len(Sb) != 0)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    S=Sb.pop(0)\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    Win=\"B\"\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (S == 'c')\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 2\n\nBlock 12:\nStatement:\n    S=\"\"\n    (len(Sc) != 0)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    S=Sc.pop(0)\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    Win=\"C\"\nNext:\n    Go to Block: 2\n\nBlock 15:\nStatement:\n    print(Win)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p04030": {
    "s421055895": {
      "code": "S = '01B0'\nret = []\nfor s in S:\n    if s == 'B' and len(s):\n        ret.pop()\n    else:\n        ret.append(s)\nprint(''.join(ret))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        3,
        4,
        7,
        3,
        4,
        5,
        3,
        4,
        7,
        3,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ret": "[]"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ret": "[]"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ret": "[]"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ret": "['0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ret": "['0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ret": "['0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ret": "['0', '1']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ret": "['0', '1']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ret": "['0', '1']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ret": "['0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ret": "['0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ret": "['0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ret": "['0', '0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ret": "['0', '0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ret": "['0', '0']"
            },
            {
              "S": "'01B0'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = '01B0'",
          "ret = []"
        ],
        "2": [
          "iterator -> s, Iterate Over -> S"
        ],
        "3": [
          "(s == 'B' and len(s))"
        ],
        "4": [
          "ret.pop()"
        ],
        "5": [
          "ret.append(s)"
        ],
        "6": [
          "print(''.join(ret))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '01B0'\n    ret = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s == 'B' and len(s))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ret.pop()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ret.append(s)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(''.join(ret))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s398023400": {
      "code": "a = ['0', '1', 'B', '0']\nans = []\nfor b in a:\n    if  b == \"0\":\n        ans.append(\"0\")\n    elif b == \"1\":\n        ans.append(\"1\")\n    else:\n        ans.pop()\nprint(\"\".join(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        3,
        4,
        6,
        7,
        3,
        4,
        6,
        9,
        3,
        4,
        5,
        3,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0', '1']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0', '1']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0', '1']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0', '1']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0', '0']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0', '0']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "['0', '1', 'B', '0']"
            },
            {
              "ans": "['0', '0']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = ['0', '1', 'B', '0']",
          "ans = []"
        ],
        "2": [
          "iterator -> b, Iterate Over -> a"
        ],
        "3": [
          "(b == '0')"
        ],
        "4": [
          "ans.append(\"0\")"
        ],
        "5": [
          "(b == '1')"
        ],
        "6": [
          "ans.append(\"1\")"
        ],
        "7": [
          "ans.pop()"
        ],
        "8": [
          "print(\"\".join(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 8
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = ['0', '1', 'B', '0']\n    ans = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> b, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (b == '0')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans.append(\"0\")\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (b == '1')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans.append(\"1\")\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    ans.pop()\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(\"\".join(ans))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s046304858": {
      "code": "s = '01B0'\neditor = [\"\"]\nfor e in s:\n    if e == \"0\":\n        editor.append(\"0\")\n    elif e == \"1\":\n        editor.append(\"1\")\n    elif e == \"B\" and editor != \"\":\n        del editor[-1]\nprint(\"\".join(editor))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            8,
            8
          ]
        },
        "8": {
          "range": [
            9,
            9
          ]
        },
        "9": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        3,
        4,
        6,
        7,
        3,
        4,
        6,
        8,
        9,
        3,
        4,
        5,
        3,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "editor": "['']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "editor": "['']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "editor": "['']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "editor": "['', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "editor": "['', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "editor": "['', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "editor": "['', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "editor": "['', '0', '1']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "editor": "['', '0', '1']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "editor": "['', '0', '1']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "editor": "['', '0', '1']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "editor": "['', '0', '1']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "editor": "['', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "editor": "['', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "editor": "['', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "editor": "['', '0', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "editor": "['', '0', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "editor": "['', '0', '0']"
            },
            {
              "s": "'01B0'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '01B0'",
          "editor = [\"\"]"
        ],
        "2": [
          "iterator -> e, Iterate Over -> s"
        ],
        "3": [
          "(e == '0')"
        ],
        "4": [
          "editor.append(\"0\")"
        ],
        "5": [
          "(e == '1')"
        ],
        "6": [
          "editor.append(\"1\")"
        ],
        "7": [
          "(e == 'B' and editor != '')"
        ],
        "8": [
          "del editor[-1]"
        ],
        "9": [
          "print(\"\".join(editor))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 9
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 2
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '01B0'\n    editor = [\"\"]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> e, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (e == '0')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    editor.append(\"0\")\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (e == '1')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    editor.append(\"1\")\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (e == 'B' and editor != '')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    del editor[-1]\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(\"\".join(editor))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s608211282": {
      "code": "s = '01B0'\nresult = []\nfor i in range(len(s)):\n  if '0' == i[s]:\n    result.append(0)\n  elif '1' == i[s]:\n    result.append(1)\n  elif 'B' == i[s]:\n    if 0 == len(result):\n      pass\n    else:\n      result.pop()\nprint(result)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            8,
            8
          ]
        },
        "8": {
          "range": [
            9,
            9
          ]
        },
        "9": {
          "range": [
            12,
            12
          ]
        },
        "10": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "result": "[]"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "[]"
            },
            {
              "s": "'01B0'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "result": "[]"
            },
            {
              "s": "'01B0'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '01B0'",
          "result = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "('0' == i[s])"
        ],
        "4": [
          "result.append(0)"
        ],
        "5": [
          "('1' == i[s])"
        ],
        "6": [
          "result.append(1)"
        ],
        "7": [
          "('B' == i[s])"
        ],
        "8": [
          "(0 == len(result))"
        ],
        "9": [
          "result.pop()"
        ],
        "10": [
          "print(result)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 2
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 2,
            "false": 9
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '01B0'\n    result = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    ('0' == i[s])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    result.append(0)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ('1' == i[s])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    result.append(1)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    ('B' == i[s])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    (0 == len(result))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 9\n\nBlock 9:\nStatement:\n    result.pop()\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(result)\nNext:\n    <END>\n"
    }
  },
  "p03705": {
    "s224923781": {
      "code": "import sys\nN = ['4', '4', '6']\nN[0] = int(N[0])\nN[1] = int(N[1])\nN[2] = int(N[2])\nif(N[1] > N[2]):\n    print(\"0\")\n    exit(1)\nprint((N[2] * (N[0] -1) + N[1]) - (N[1] * (N[0] - 1) + N[2]) + 1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys",
          "N = ['4', '4', '6']",
          "N[0] = int(N[0])",
          "N[1] = int(N[1])",
          "N[2] = int(N[2])",
          "(N[1] > N[2])"
        ],
        "2": [
          "print(\"0\")",
          "exit(1)"
        ],
        "3": [
          "print((N[2] * (N[0] -1) + N[1]) - (N[1] * (N[0] - 1) + N[2]) + 1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    N = ['4', '4', '6']\n    N[0] = int(N[0])\n    N[1] = int(N[1])\n    N[2] = int(N[2])\n    (N[1] > N[2])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"0\")\n    exit(1)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    print((N[2] * (N[0] -1) + N[1]) - (N[1] * (N[0] - 1) + N[2]) + 1)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03077": {
    "s990571923": {
      "code": "n = 5\nc = [3, 2, 4, 3, 5]\nb = min(c)\nif b >= n:\n  print(5)\nelse:\n  t = (n - b) // b\n  if t % b != 0:\n    t += 1\n  print(t + 5)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "c": "[3, 2, 4, 3, 5]"
            },
            {
              "n": "5"
            },
            {
              "b": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "c": "[3, 2, 4, 3, 5]"
            },
            {
              "t": "1"
            },
            {
              "n": "5"
            },
            {
              "b": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "c": "[3, 2, 4, 3, 5]"
            },
            {
              "t": "2"
            },
            {
              "n": "5"
            },
            {
              "b": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "c": "[3, 2, 4, 3, 5]"
            },
            {
              "t": "2"
            },
            {
              "n": "5"
            },
            {
              "b": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "c = [3, 2, 4, 3, 5]",
          "b = min(c)",
          "(b >= n)"
        ],
        "2": [
          "print(5)"
        ],
        "3": [
          "t = (n - b) // b",
          "(t % b != 0)"
        ],
        "4": [
          "t += 1"
        ],
        "5": [
          "print(t + 5)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    c = [3, 2, 4, 3, 5]\n    b = min(c)\n    (b >= n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(5)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    t = (n - b) // b\n    (t % b != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    t += 1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(t + 5)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s658316838": {
      "code": "import math\nn = 5\na = [3, 2, 4, 3, 5]\nprint(4+math.ceil(n/min(a)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 5",
          "a = [3, 2, 4, 3, 5]",
          "print(4+math.ceil(n/min(a)))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 5\n    a = [3, 2, 4, 3, 5]\n    print(4+math.ceil(n/min(a)))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s393541542": {
      "code": "N = 5\ncities = [3, 2, 4, 3, 5]\nmin_city = min(cities)\nif N < min_city:\n  print(5)\nelse:\n  times = N//min_city\n  print(5+times)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "min_city": "2"
            },
            {
              "cities": "[3, 2, 4, 3, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "times": "2"
            },
            {
              "N": "5"
            },
            {
              "min_city": "2"
            },
            {
              "cities": "[3, 2, 4, 3, 5]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "cities = [3, 2, 4, 3, 5]",
          "min_city = min(cities)",
          "(N < min_city)"
        ],
        "2": [
          "print(5)"
        ],
        "3": [
          "times = N//min_city",
          "print(5+times)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    cities = [3, 2, 4, 3, 5]\n    min_city = min(cities)\n    (N < min_city)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(5)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    times = N//min_city\n    print(5+times)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s047558971": {
      "code": "import math\nn = 5\nlis = [3, 2, 4, 3, 5]\nprint(5 + math.ceil(n/min(lis))-1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 5",
          "lis = [3, 2, 4, 3, 5]",
          "print(5 + math.ceil(n/min(lis))-1)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 5\n    lis = [3, 2, 4, 3, 5]\n    print(5 + math.ceil(n/min(lis))-1)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s098143935": {
      "code": "import math\nn = 5\ns = [3, 2, 4, 3, 5]\nprint(math.ceil(n/min(s))+4)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 5",
          "s = [3, 2, 4, 3, 5]",
          "print(math.ceil(n/min(s))+4)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 5\n    s = [3, 2, 4, 3, 5]\n    print(math.ceil(n/min(s))+4)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s176228774": {
      "code": "import math\nn = 5\na = 3\nb = 2\nc = 4\nd = 3\ne = 5\nmiti=[a,b,c,d,e]\nmini=min(miti)\nretu=n//miti\nif n<=mini:\n  print(5)\nelse:\n  print(4+retu)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            11
          ]
        },
        "2": {
          "range": [
            12,
            12
          ]
        },
        "3": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for //: 'int' and 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 5",
          "a = 3",
          "b = 2",
          "c = 4",
          "d = 3",
          "e = 5",
          "miti=[a,b,c,d,e]",
          "mini=min(miti)",
          "retu=n//miti",
          "(n <= mini)"
        ],
        "2": [
          "print(5)"
        ],
        "3": [
          "print(4+retu)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 5\n    a = 3\n    b = 2\n    c = 4\n    d = 3\n    e = 5\n    miti=[a,b,c,d,e]\n    mini=min(miti)\n    retu=n//miti\n    (n <= mini)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(5)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(4+retu)\nNext:\n    <END>\n"
    }
  },
  "p02607": {
    "s947060378": {
      "code": "N = 5\na = [1, 3, 4, 5, 7]\ncnt=0\nfor i in range(int(len(a)/2)+1):\n    if a[2*i]%2==1:\n        cnt+=1\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        6,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "cnt": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "a = [1, 3, 4, 5, 7]",
          "cnt=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(int(len(a) / 2) + 1)"
        ],
        "3": [
          "(a[2 * i] % 2 == 1)"
        ],
        "4": [
          "cnt+=1"
        ],
        "5": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    a = [1, 3, 4, 5, 7]\n    cnt=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(int(len(a) / 2) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a[2 * i] % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s012808045": {
      "code": "n = 5\nlst = [1, 3, 4, 5, 7]\nans=0\nfor i in range(0,n+1):\n if (i+1)%2==0:\n    pass\n elif lst[i]%2!=0:\n    ans+=1\n else:\n  pass\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        4,
        5,
        6,
        4,
        5,
        7,
        10,
        4,
        5,
        6,
        4,
        5,
        7,
        8,
        4,
        5,
        6,
        4,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "0"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "5"
            },
            {
              "lst": "[1, 3, 4, 5, 7]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "lst = [1, 3, 4, 5, 7]",
          "ans=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, n + 1)"
        ],
        "3": [
          "((i + 1) % 2 == 0)"
        ],
        "4": [
          "(lst[i] % 2 != 0)"
        ],
        "5": [
          "ans+=1"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    lst = [1, 3, 4, 5, 7]\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, n + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    ((i + 1) % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (lst[i] % 2 != 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s439474357": {
      "code": "N = 5\nA = [1, 3, 4, 5, 7]\nans=0\nfor i in range(0,N+1,2):\n  if A[i]%2!=0:\n    ans+=1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        6,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "1"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "1"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "1"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "1"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "1"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "2"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "2"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "2"
            },
            {
              "A": "[1, 3, 4, 5, 7]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [1, 3, 4, 5, 7]",
          "ans=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, N + 1, 2)"
        ],
        "3": [
          "(A[i] % 2 != 0)"
        ],
        "4": [
          "ans+=1"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [1, 3, 4, 5, 7]\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, N + 1, 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (A[i] % 2 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s260923755": {
      "code": "n = 5\na = [1, 3, 4, 5, 7]\ncount = 0\nfor i in range(0,n+1,2):\n  if a[i]%2==1:\n    count+=1\n  else:\n    continue\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        8,
        4,
        5,
        6,
        4,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "n": "5"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "a = [1, 3, 4, 5, 7]",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, n + 1, 2)"
        ],
        "3": [
          "(a[i] % 2 == 1)"
        ],
        "4": [
          "count+=1"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [1, 3, 4, 5, 7]\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, n + 1, 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a[i] % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s351877007": {
      "code": "N = 5\na = [1, 3, 4, 5, 7]\nif(N%2 == 0):\n  N = (N/2)\nelse:\n  N = int(N/2)+1\ncount = 0\nfor i in range(1,N+1):\n  if(a[(2*i-1)-1]%2 == 1):\n    count += 1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        8,
        9,
        8,
        9,
        10,
        8,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "3"
            },
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "a = [1, 3, 4, 5, 7]",
          "(N % 2 == 0)"
        ],
        "2": [
          "N = (N/2)"
        ],
        "3": [
          "N = int(N/2)+1"
        ],
        "4": [
          "count = 0"
        ],
        "5": [
          "iterator -> i, Iterate Over -> range(1, N + 1)"
        ],
        "6": [
          "(a[2 * i - 1 - 1] % 2 == 1)"
        ],
        "7": [
          "count += 1"
        ],
        "8": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 8
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 5
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    a = [1, 3, 4, 5, 7]\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    N = (N/2)\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    N = int(N/2)+1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    count = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 8\n\nBlock 6:\nStatement:\n    (a[2 * i - 1 - 1] % 2 == 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 5\n\nBlock 7:\nStatement:\n    count += 1\nNext:\n    Go to Block: 5\n\nBlock 8:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s564507642": {
      "code": "n = 5\na = [1, 3, 4, 5, 7]\nans =0\nfor i in range(n+1):\n    if i%2==0 and a[i]%2!=0:\n        ans+=1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "1"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "[1, 3, 4, 5, 7]"
            },
            {
              "ans": "2"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "a = [1, 3, 4, 5, 7]",
          "ans =0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n + 1)"
        ],
        "3": [
          "(i % 2 == 0 and a[i] % 2 != 0)"
        ],
        "4": [
          "ans+=1"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [1, 3, 4, 5, 7]\n    ans =0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i % 2 == 0 and a[i] % 2 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s796409155": {
      "code": "import math\nN = '5'\nai = ['1', '3', '4', '5', '7']\nnum = 0\nfor i in range(N/2):\n    if ai[i + 1] % 2 == 1:\n        num += 1\nprint(num)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import math",
          "N = '5'",
          "ai = ['1', '3', '4', '5', '7']",
          "num = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N / 2)"
        ],
        "3": [
          "(ai[i + 1] % 2 == 1)"
        ],
        "4": [
          "num += 1"
        ],
        "5": [
          "print(num)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = '5'\n    ai = ['1', '3', '4', '5', '7']\n    num = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N / 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (ai[i + 1] % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    num += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(num)\nNext:\n    <END>\n"
    }
  },
  "p02933": {
    "s256152204": {
      "code": "a = 3200\ns = 'pink'\nif a>=3200:\n    print(s)\nelse:\n    print(red)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'pink'"
            },
            {
              "a": "3200"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'pink'"
            },
            {
              "a": "3200"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = 3200",
          "s = 'pink'",
          "(a >= 3200)"
        ],
        "2": [
          "print(s)"
        ],
        "3": [
          "print(red)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 3200\n    s = 'pink'\n    (a >= 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(red)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s287751789": {
      "code": "import numpy\nA = 3200\nS = 'pink'\nif A >= 3200:\n    print(S)\nelse:\n    print(\"red\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy",
          "A = 3200",
          "S = 'pink'",
          "(A >= 3200)"
        ],
        "2": [
          "print(S)"
        ],
        "3": [
          "print(\"red\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy\n    A = 3200\n    S = 'pink'\n    (A >= 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"red\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s206508383": {
      "code": "a = 3200\ns = 'pink'\nif a < 3200:\n    print(red)\nelse:\n    print(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'pink'"
            },
            {
              "a": "3200"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'pink'"
            },
            {
              "a": "3200"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = 3200",
          "s = 'pink'",
          "(a < 3200)"
        ],
        "2": [
          "print(red)"
        ],
        "3": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 3200\n    s = 'pink'\n    (a < 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(red)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(s)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s672192222": {
      "code": "a = 3200\ns = 'pink'\nif a>=3200:\n  print(s)\nelse:\n  input('red')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'pink'"
            },
            {
              "a": "3200"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'pink'"
            },
            {
              "a": "3200"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = 3200",
          "s = 'pink'",
          "(a >= 3200)"
        ],
        "2": [
          "print(s)"
        ],
        "3": [
          "input('red')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 3200\n    s = 'pink'\n    (a >= 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    input('red')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s099738094": {
      "code": "a = ['3200']\ns = 'pink'\nif a >= 3200:\n\tprint(s)\nelse:\n\tprint('Red')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "['3200']"
            },
            {
              "s": "'pink'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = ['3200']",
          "s = 'pink'",
          "(a >= 3200)"
        ],
        "2": [
          "print(s)"
        ],
        "3": [
          "print('Red')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = ['3200']\n    s = 'pink'\n    (a >= 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Red')\nNext:\n    <END>\n"
    },
    "s680614153": {
      "code": "a = '3200'\ns = 'pink'\nif a < 3200:\n    print(s)\nelif a >= 3200:\n    print(\"red\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'3200'"
            },
            {
              "s": "'pink'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '3200'",
          "s = 'pink'",
          "(a < 3200)"
        ],
        "2": [
          "print(s)"
        ],
        "3": [
          "(a >= 3200)"
        ],
        "4": [
          "print(\"red\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '3200'\n    s = 'pink'\n    (a < 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (a >= 3200)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    print(\"red\")\nNext:\n    <END>\n"
    },
    "s869800649": {
      "code": "a = '3200'\ns = 'pink'\nif a >= 3200 :\n  print( s )\nelse:\n  print( 'red' )",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'3200'"
            },
            {
              "s": "'pink'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '3200'",
          "s = 'pink'",
          "(a >= 3200)"
        ],
        "2": [
          "print( s )"
        ],
        "3": [
          "print( 'red' )"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '3200'\n    s = 'pink'\n    (a >= 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print( s )\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print( 'red' )\nNext:\n    <END>\n"
    }
  },
  "p03643": {
    "s948567598": {
      "code": "a=[1,2,4,8,16,32,64,128]\nn = 100\ni=0\nwhile a[i]<=n:\n    i+=1\nprint(a[i-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "i": "0"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "0"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "1"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "1"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "2"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "2"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "3"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "3"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "4"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "4"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "5"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "5"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "6"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "6"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "7"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "7"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "i": "7"
            },
            {
              "a": "[1, 2, 4, 8, 16, 32, 64, 128]"
            },
            {
              "n": "100"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a=[1,2,4,8,16,32,64,128]",
          "n = 100",
          "i=0"
        ],
        "2": [
          "while a[i]<=n:"
        ],
        "3": [
          "i+=1"
        ],
        "4": [
          "print(a[i-1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a=[1,2,4,8,16,32,64,128]\n    n = 100\n    i=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while a[i]<=n:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(a[i-1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s001621180": {
      "code": "a = 100\nprint(\"ABC\"+a)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "100"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "a = 100",
          "print(\"ABC\"+a)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 100\n    print(\"ABC\"+a)\nNext:\n    <END>\n"
    },
    "s121246938": {
      "code": "input_N = '100'\nprint ('ABC') + input_N",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "input_N": "'100'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'NoneType' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "input_N = '100'",
          "print ('ABC') + input_N"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    input_N = '100'\n    print ('ABC') + input_N\nNext:\n    <END>\n"
    }
  },
  "p03846": {
    "s104302684": {
      "code": "from collections import Counter\nn = 5\na = [2, 4, 4, 0, 2]\nm = n//2\nca = Counter(a)\nif n % 2 == 0 and all(ca[i*2 + 1] == 2 for i in range(m)):\n    ans = 2 ** m % (1e9 + 7)\n    print(int(ans))\nelif n % 2 == 1 and ca[0] == 1 and all(ca[(i+1)*2] == 2 for i in range(m)):\n    ans = 2 ** m % (1e9 + 7)\n    print(int(ans))\nelse:\n    print(0)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            11
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from collections import Counter",
          "n = 5",
          "a = [2, 4, 4, 0, 2]",
          "m = n//2",
          "ca = Counter(a)",
          "(n % 2 == 0 and all((ca[i * 2 + 1] == 2 for i in range(m))))"
        ],
        "2": [
          "ans = 2 ** m % (1e9 + 7)",
          "print(int(ans))"
        ],
        "3": [
          "(n % 2 == 1 and ca[0] == 1 and all((ca[(i + 1) * 2] == 2 for i in range(m))))"
        ],
        "4": [
          "ans = 2 ** m % (1e9 + 7)",
          "print(int(ans))"
        ],
        "5": [
          "print(0)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from collections import Counter\n    n = 5\n    a = [2, 4, 4, 0, 2]\n    m = n//2\n    ca = Counter(a)\n    (n % 2 == 0 and all((ca[i * 2 + 1] == 2 for i in range(m))))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = 2 ** m % (1e9 + 7)\n    print(int(ans))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n % 2 == 1 and ca[0] == 1 and all((ca[(i + 1) * 2] == 2 for i in range(m))))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans = 2 ** m % (1e9 + 7)\n    print(int(ans))\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(0)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s975600161": {
      "code": "import math\nfrom collections import Counter\nn = 5\na = [2, 4, 4, 0, 2]\nc = Counter(a)\nflag = 1\nif n % 2 == 0:\n    start = 1\nelse:\n    if c[0] < 1:\n        flag = 0\n    start = 2\nfor i in range(start, n, 2):\n    if c[i] != 2:\n        flag = 0\n        break\nif flag == 0:\n    print(0)\n    exit()\nelse:\n    print(int(math.pow(2, n // 2)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            10,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        },
        "9": {
          "range": [
            17,
            17
          ]
        },
        "10": {
          "range": [
            18,
            19
          ]
        },
        "11": {
          "range": [
            21,
            21
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        14,
        13,
        14,
        13,
        17,
        21
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "1"
            },
            {
              "n": "5"
            },
            {
              "start": "2"
            },
            {
              "a": "[2, 4, 4, 0, 2]"
            },
            {
              "c": "Counter({2: 2, 4: 2, 0: 1})"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "flag": "1"
            },
            {
              "n": "5"
            },
            {
              "start": "2"
            },
            {
              "a": "[2, 4, 4, 0, 2]"
            },
            {
              "c": "Counter({2: 2, 4: 2, 0: 1})"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "1"
            },
            {
              "n": "5"
            },
            {
              "start": "2"
            },
            {
              "a": "[2, 4, 4, 0, 2]"
            },
            {
              "c": "Counter({2: 2, 4: 2, 0: 1})"
            }
          ]
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 9,
          "state": []
        },
        {
          "block": 11,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "from collections import Counter",
          "n = 5",
          "a = [2, 4, 4, 0, 2]",
          "c = Counter(a)",
          "flag = 1",
          "(n % 2 == 0)"
        ],
        "2": [
          "start = 1"
        ],
        "3": [
          "(c[0] < 1)"
        ],
        "4": [
          "flag = 0"
        ],
        "5": [
          "start = 2"
        ],
        "6": [
          "iterator -> i, Iterate Over -> range(start, n, 2)"
        ],
        "7": [
          "(c[i] != 2)"
        ],
        "8": [
          "flag = 0"
        ],
        "9": [
          "(flag == 0)"
        ],
        "10": [
          "print(0)",
          "exit()"
        ],
        "11": [
          "print(int(math.pow(2, n // 2)))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 9
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 6
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    from collections import Counter\n    n = 5\n    a = [2, 4, 4, 0, 2]\n    c = Counter(a)\n    flag = 1\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    start = 1\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    (c[0] < 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    flag = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    start = 2\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> i, Iterate Over -> range(start, n, 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 9\n\nBlock 7:\nStatement:\n    (c[i] != 2)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 6\n\nBlock 8:\nStatement:\n    flag = 0\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (flag == 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(0)\n    exit()\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print(int(math.pow(2, n // 2)))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s855272054": {
      "code": "N = 5\nA = [2, 4, 4, 0, 2]\nL = len(A)\nif L % 2 == 0:\n    lst = [2*i+1 for i in range(L//2)]\n    if set(lst) == set(A):\n        print(2**(L//2))\n    else:\n        pront(0)\n        quit()\nelse:\n    lst = [2*i for i in range(L//2+1)]\n    if set(lst) == set(A):\n        print(2**(L//2+1))\n    else:\n        pront(0)\n        quit()",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            9,
            10
          ]
        },
        "5": {
          "range": [
            12,
            13
          ]
        },
        "6": {
          "range": [
            14,
            14
          ]
        },
        "7": {
          "range": [
            16,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        12,
        13,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[2, 4, 4, 0, 2]"
            },
            {
              "L": "5"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "lst": "[0, 2, 4]"
            },
            {
              "A": "[2, 4, 4, 0, 2]"
            },
            {
              "L": "5"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "lst": "[0, 2, 4]"
            },
            {
              "A": "[2, 4, 4, 0, 2]"
            },
            {
              "L": "5"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [2, 4, 4, 0, 2]",
          "L = len(A)",
          "(L % 2 == 0)"
        ],
        "2": [
          "lst = [2*i+1 for i in range(L//2)]",
          "(set(lst) == set(A))"
        ],
        "3": [
          "print(2**(L//2))"
        ],
        "4": [
          "pront(0)",
          "quit()"
        ],
        "5": [
          "lst = [2*i for i in range(L//2+1)]",
          "(set(lst) == set(A))"
        ],
        "6": [
          "print(2**(L//2+1))"
        ],
        "7": [
          "pront(0)",
          "quit()"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [2, 4, 4, 0, 2]\n    L = len(A)\n    (L % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    lst = [2*i+1 for i in range(L//2)]\n    (set(lst) == set(A))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(2**(L//2))\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    pront(0)\n    quit()\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    lst = [2*i for i in range(L//2+1)]\n    (set(lst) == set(A))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(2**(L//2+1))\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    pront(0)\n    quit()\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s044828209": {
      "code": "import math\nfrom collections import Counter\nmod = 1000000007\nn = 5\na = [2, 4, 4, 0, 2]\nc = Counter(a)\nflag = 1\nif n % 2 == 0:\n    start = 1\nelse:\n    if c[0] != 1:\n        flag = 0\n    start = 2\nfor i in range(start, n, 2):\n    if c[i] != 2:\n        flag = 0\n        break\nif flag == 0:\n    print(0)\nelse:\n    print(int(math.pow(2, n // 2)) % mod)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        },
        "2": {
          "range": [
            9,
            9
          ]
        },
        "3": {
          "range": [
            11,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        },
        "6": {
          "range": [
            14,
            14
          ]
        },
        "7": {
          "range": [
            15,
            15
          ]
        },
        "8": {
          "range": [
            16,
            16
          ]
        },
        "9": {
          "range": [
            18,
            18
          ]
        },
        "10": {
          "range": [
            19,
            19
          ]
        },
        "11": {
          "range": [
            21,
            21
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        14,
        15,
        14,
        15,
        14,
        18,
        21
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "1"
            },
            {
              "n": "5"
            },
            {
              "start": "2"
            },
            {
              "mod": "1000000007"
            },
            {
              "a": "[2, 4, 4, 0, 2]"
            },
            {
              "c": "Counter({2: 2, 4: 2, 0: 1})"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "flag": "1"
            },
            {
              "n": "5"
            },
            {
              "start": "2"
            },
            {
              "mod": "1000000007"
            },
            {
              "a": "[2, 4, 4, 0, 2]"
            },
            {
              "c": "Counter({2: 2, 4: 2, 0: 1})"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "flag": "1"
            },
            {
              "n": "5"
            },
            {
              "start": "2"
            },
            {
              "mod": "1000000007"
            },
            {
              "a": "[2, 4, 4, 0, 2]"
            },
            {
              "c": "Counter({2: 2, 4: 2, 0: 1})"
            }
          ]
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 9,
          "state": []
        },
        {
          "block": 11,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "from collections import Counter",
          "mod = 1000000007",
          "n = 5",
          "a = [2, 4, 4, 0, 2]",
          "c = Counter(a)",
          "flag = 1",
          "(n % 2 == 0)"
        ],
        "2": [
          "start = 1"
        ],
        "3": [
          "(c[0] != 1)"
        ],
        "4": [
          "flag = 0"
        ],
        "5": [
          "start = 2"
        ],
        "6": [
          "iterator -> i, Iterate Over -> range(start, n, 2)"
        ],
        "7": [
          "(c[i] != 2)"
        ],
        "8": [
          "flag = 0"
        ],
        "9": [
          "(flag == 0)"
        ],
        "10": [
          "print(0)"
        ],
        "11": [
          "print(int(math.pow(2, n // 2)) % mod)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 9
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 6
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    from collections import Counter\n    mod = 1000000007\n    n = 5\n    a = [2, 4, 4, 0, 2]\n    c = Counter(a)\n    flag = 1\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    start = 1\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    (c[0] != 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    flag = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    start = 2\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> i, Iterate Over -> range(start, n, 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 9\n\nBlock 7:\nStatement:\n    (c[i] != 2)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 6\n\nBlock 8:\nStatement:\n    flag = 0\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (flag == 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print(int(math.pow(2, n // 2)) % mod)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s448890587": {
      "code": "N = 5\nA = [2, 4, 4, 0, 2]\nA.sort()\ni = 0\nif N % 2 == 1:\n  i = 1\n  if A[0] == A[1]:\n    print(0)\n    exit(0)\n  if A[0] == 1:\n    print(0)\n    exit(0)\nelse:\n  i = 2\n  if A[0] != A[1]:\n    print(0)\n    exit(0)\n  if A[0] == 0:\n    print(0)\n    exit(0)\nres = 1\nwhile i < N - 1:\n  print(\"a\", i)\n  if A[i] == A[i + 1]:\n    if N % 2 == 0:\n      if A[i] != 2 * (i / 2 + 1) - 1:\n        res = 0\n        break\n    else:\n      if A[i] != 2 * (i // 2 + 1):\n        res = 0\n        break\n    res *= 2\n    i += 2\n  else:\n    res = 0\n    break\nprint(res)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            7
          ]
        },
        "3": {
          "range": [
            8,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            11,
            12
          ]
        },
        "6": {
          "range": [
            14,
            15
          ]
        },
        "7": {
          "range": [
            16,
            17
          ]
        },
        "8": {
          "range": [
            18,
            18
          ]
        },
        "9": {
          "range": [
            19,
            20
          ]
        },
        "10": {
          "range": [
            21,
            21
          ]
        },
        "11": {
          "range": [
            22,
            22
          ]
        },
        "12": {
          "range": [
            23,
            24
          ]
        },
        "13": {
          "range": [
            25,
            25
          ]
        },
        "14": {
          "range": [
            26,
            26
          ]
        },
        "15": {
          "range": [
            27,
            27
          ]
        },
        "16": {
          "range": [
            30,
            30
          ]
        },
        "17": {
          "range": [
            31,
            31
          ]
        },
        "18": {
          "range": [
            33,
            34
          ]
        },
        "19": {
          "range": [
            36,
            36
          ]
        },
        "20": {
          "range": [
            38,
            38
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        21,
        22,
        23,
        24,
        25,
        30,
        33,
        34,
        22,
        23,
        24,
        25,
        30,
        33,
        34,
        22,
        38
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "i": "0"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "1"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "i": "1"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "i": "1"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "1"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "i": "1"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "1"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "i": "1"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "1"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "i": "1"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "1"
            }
          ]
        },
        {
          "block": 16,
          "state": [
            {
              "i": "1"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "1"
            }
          ]
        },
        {
          "block": 18,
          "state": [
            {
              "i": "3"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "2"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "i": "3"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "2"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "i": "3"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "2"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "i": "3"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "2"
            }
          ]
        },
        {
          "block": 16,
          "state": [
            {
              "i": "3"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "2"
            }
          ]
        },
        {
          "block": 18,
          "state": [
            {
              "i": "5"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "4"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "i": "5"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "4"
            }
          ]
        },
        {
          "block": 20,
          "state": [
            {
              "i": "5"
            },
            {
              "N": "5"
            },
            {
              "A": "[0, 2, 2, 4, 4]"
            },
            {
              "res": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [2, 4, 4, 0, 2]",
          "A.sort()",
          "i = 0",
          "(N % 2 == 1)"
        ],
        "2": [
          "i = 1",
          "(A[0] == A[1])"
        ],
        "3": [
          "print(0)",
          "exit(0)"
        ],
        "4": [
          "(A[0] == 1)"
        ],
        "5": [
          "print(0)",
          "exit(0)"
        ],
        "6": [
          "i = 2",
          "(A[0] != A[1])"
        ],
        "7": [
          "print(0)",
          "exit(0)"
        ],
        "8": [
          "(A[0] == 0)"
        ],
        "9": [
          "print(0)",
          "exit(0)"
        ],
        "10": [
          "res = 1"
        ],
        "11": [
          "while i < N - 1:"
        ],
        "12": [
          "print(\"a\", i)",
          "(A[i] == A[i + 1])"
        ],
        "13": [
          "(N % 2 == 0)"
        ],
        "14": [
          "(A[i] != 2 * (i / 2 + 1) - 1)"
        ],
        "15": [
          "res = 0"
        ],
        "16": [
          "(A[i] != 2 * (i // 2 + 1))"
        ],
        "17": [
          "res = 0"
        ],
        "18": [
          "res *= 2",
          "i += 2"
        ],
        "19": [
          "res = 0"
        ],
        "20": [
          "print(res)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 6
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 20
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 19
          },
          "no_condition": null
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 16
          },
          "no_condition": null
        },
        "18": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "14": {
          "with_condition": {
            "true": 15,
            "false": 18
          },
          "no_condition": null
        },
        "15": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 20
        },
        "16": {
          "with_condition": {
            "true": 17,
            "false": 18
          },
          "no_condition": null
        },
        "17": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 20
        },
        "19": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 20
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [2, 4, 4, 0, 2]\n    A.sort()\n    i = 0\n    (N % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 6\n\nBlock 2:\nStatement:\n    i = 1\n    (A[0] == A[1])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(0)\n    exit(0)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (A[0] == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 10\n\nBlock 5:\nStatement:\n    print(0)\n    exit(0)\nNext:\n    Go to Block: 10\n\nBlock 6:\nStatement:\n    i = 2\n    (A[0] != A[1])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(0)\n    exit(0)\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    (A[0] == 0)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    print(0)\n    exit(0)\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    res = 1\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    while i < N - 1:\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 20\n\nBlock 12:\nStatement:\n    print(\"a\", i)\n    (A[i] == A[i + 1])\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 19\n\nBlock 13:\nStatement:\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 16\n\nBlock 14:\nStatement:\n    (A[i] != 2 * (i / 2 + 1) - 1)\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 18\n\nBlock 15:\nStatement:\n    res = 0\nNext:\n    Go to Block: 20\n\nBlock 16:\nStatement:\n    (A[i] != 2 * (i // 2 + 1))\nNext:\n    If True: Go to Block 17\n    If False: Go to Block 18\n\nBlock 17:\nStatement:\n    res = 0\nNext:\n    Go to Block: 20\n\nBlock 18:\nStatement:\n    res *= 2\n    i += 2\nNext:\n    Go to Block: 11\n\nBlock 19:\nStatement:\n    res = 0\nNext:\n    Go to Block: 20\n\nBlock 20:\nStatement:\n    print(res)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s724620537": {
      "code": "N = 5\nA = [2, 4, 4, 0, 2]\nB=[]\nif N%2==0:\n    B= sorted([2*i-1 for i in range(1,N//2+1)]*2)\n    if sorted(A)==B:\n        ans=(pow(2,N/2))%(10**9+7)\n    else:\n        ans=0\nelse:\n    B= [0]+sorted([2*i for i in range(1,N//2+1)]*2)\n    if sorted(A)==B:\n        ans=(pow(2,(N-1)/2))%(10**9+7)\n    else:\n        ans=0\nprint(int(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            15,
            15
          ]
        },
        "8": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        11,
        12,
        13,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "B": "[]"
            },
            {
              "A": "[2, 4, 4, 0, 2]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "B": "[0, 2, 2, 4, 4]"
            },
            {
              "A": "[2, 4, 4, 0, 2]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "B": "[0, 2, 2, 4, 4]"
            },
            {
              "A": "[2, 4, 4, 0, 2]"
            },
            {
              "ans": "4.0"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "5"
            },
            {
              "B": "[0, 2, 2, 4, 4]"
            },
            {
              "A": "[2, 4, 4, 0, 2]"
            },
            {
              "ans": "4.0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [2, 4, 4, 0, 2]",
          "B=[]",
          "(N % 2 == 0)"
        ],
        "2": [
          "B= sorted([2*i-1 for i in range(1,N//2+1)]*2)",
          "(sorted(A) == B)"
        ],
        "3": [
          "ans=(pow(2,N/2))%(10**9+7)"
        ],
        "4": [
          "ans=0"
        ],
        "5": [
          "B= [0]+sorted([2*i for i in range(1,N//2+1)]*2)",
          "(sorted(A) == B)"
        ],
        "6": [
          "ans=(pow(2,(N-1)/2))%(10**9+7)"
        ],
        "7": [
          "ans=0"
        ],
        "8": [
          "print(int(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [2, 4, 4, 0, 2]\n    B=[]\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    B= sorted([2*i-1 for i in range(1,N//2+1)]*2)\n    (sorted(A) == B)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans=(pow(2,N/2))%(10**9+7)\nNext:\n    Go to Block: 8\n\nBlock 4:\nStatement:\n    ans=0\nNext:\n    Go to Block: 8\n\nBlock 5:\nStatement:\n    B= [0]+sorted([2*i for i in range(1,N//2+1)]*2)\n    (sorted(A) == B)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans=(pow(2,(N-1)/2))%(10**9+7)\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    ans=0\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(int(ans))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s941087143": {
      "code": "import math\nn = 5\nl = None\nfor i,x in enumerate(l):\n  if n%2 and x!=int((i+1)/2):\n    print(0)\n  else:\n    if i%2 and i+1!=x:\n      print(0)\n    elif i!=x:\n      print(0)\nelse:\n  print(((n/2)**2)%10**9+7)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 5",
          "l = None"
        ],
        "2": [
          "i <- index\n    x <- iterator"
        ],
        "3": [
          "(n % 2 and x != int((i + 1) / 2))"
        ],
        "4": [
          "print(0)"
        ],
        "5": [
          "(i % 2 and i + 1 != x)"
        ],
        "6": [
          "print(0)"
        ],
        "7": [
          "(i != x)"
        ],
        "8": [
          "print(0)"
        ],
        "9": [
          "print(((n/2)**2)%10**9+7)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 9
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 2
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 5\n    l = None\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    x <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (n % 2 and x != int((i + 1) / 2))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i % 2 and i + 1 != x)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (i != x)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(((n/2)**2)%10**9+7)\nNext:\n    <END>\n"
    }
  },
  "p03012": {
    "s228619938": {
      "code": "import math\nn = 3\nw = [1, 2, 3]\nmin=math.inf\nfor t in range(1,n):\n    a = sum(w[:t])\n    b = sum(w[t:])\n    if min > abs(a - b):\n        min = abs(a - b)\nprint(min)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        5,
        6,
        7,
        8,
        9,
        5,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 3",
          "w = [1, 2, 3]",
          "min=math.inf"
        ],
        "2": [
          "iterator -> t, Iterate Over -> range(1, n)"
        ],
        "3": [
          "a = sum(w[:t])",
          "b = sum(w[t:])",
          "(min > abs(a - b))"
        ],
        "4": [
          "min = abs(a - b)"
        ],
        "5": [
          "print(min)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 3\n    w = [1, 2, 3]\n    min=math.inf\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> t, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    a = sum(w[:t])\n    b = sum(w[t:])\n    (min > abs(a - b))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    min = abs(a - b)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(min)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s462240786": {
      "code": "import math\nn = 3\nw = [1, 2, 3]\nmin = math.inf\nfor i in range(1,n):\n    sa = abs( sum(w[0:i]) - sum(w[i:]) )\n    if(sa < min):\n        min = sa\nprint(min)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 3",
          "w = [1, 2, 3]",
          "min = math.inf"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "sa = abs( sum(w[0:i]) - sum(w[i:]) )",
          "(sa < min)"
        ],
        "4": [
          "min = sa"
        ],
        "5": [
          "print(min)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 3\n    w = [1, 2, 3]\n    min = math.inf\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    sa = abs( sum(w[0:i]) - sum(w[i:]) )\n    (sa < min)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    min = sa\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(min)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s744953209": {
      "code": "N = 3\nL = [1, 2, 3]\nv=[]\nfor i in range(N-1):\n  v.append(abs(sum(L[:i+1]-L[i+1:])))\nans=min(v)\nprint(v)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "L": "[1, 2, 3]"
            },
            {
              "N": "3"
            },
            {
              "v": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "L": "[1, 2, 3]"
            },
            {
              "N": "3"
            },
            {
              "v": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "L": "[1, 2, 3]"
            },
            {
              "N": "3"
            },
            {
              "v": "[]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "L = [1, 2, 3]",
          "v=[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N - 1)"
        ],
        "3": [
          "v.append(abs(sum(L[:i+1]-L[i+1:])))"
        ],
        "4": [
          "ans=min(v)",
          "print(v)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    L = [1, 2, 3]\n    v=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    v.append(abs(sum(L[:i+1]-L[i+1:])))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    ans=min(v)\n    print(v)\nNext:\n    <END>\n"
    },
    "s857082134": {
      "code": "n = 3\nmlist = [1, 2, 3]\nnlist =[]\nfor i in range(n):\n  nlist.append(abs(mlist[:i]-mlist[i:]))\nprint(min(nlist))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "nlist": "[]"
            },
            {
              "n": "3"
            },
            {
              "mlist": "[1, 2, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "nlist": "[]"
            },
            {
              "n": "3"
            },
            {
              "mlist": "[1, 2, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "nlist": "[]"
            },
            {
              "n": "3"
            },
            {
              "mlist": "[1, 2, 3]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "mlist = [1, 2, 3]",
          "nlist =[]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "nlist.append(abs(mlist[:i]-mlist[i:]))"
        ],
        "4": [
          "print(min(nlist))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    mlist = [1, 2, 3]\n    nlist =[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    nlist.append(abs(mlist[:i]-mlist[i:]))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(nlist))\nNext:\n    <END>\n"
    }
  },
  "p03060": {
    "s723409156": {
      "code": "from functools import reduce\nfrom operator import add\nn = 3\nv = [10, 2, 5]\nc = [6, 3, 4]\nprint(reduce(add,[v[i]-c[i] for i in range(n) if v[i]>c[i]]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from functools import reduce",
          "from operator import add",
          "n = 3",
          "v = [10, 2, 5]",
          "c = [6, 3, 4]",
          "print(reduce(add,[v[i]-c[i] for i in range(n) if v[i]>c[i]]))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    from functools import reduce\n    from operator import add\n    n = 3\n    v = [10, 2, 5]\n    c = [6, 3, 4]\n    print(reduce(add,[v[i]-c[i] for i in range(n) if v[i]>c[i]]))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s122534982": {
      "code": "Number = '3'\ntresure_value = [10, 2, 5]\ncost = [6, 3, 4]\ncount = 0\nfor i in range(Number):\n  benefit = int(tresure_value[i] - cost[i])\n  if benefit  > 0:\n    count += benefit \nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "Number": "'3'"
            },
            {
              "cost": "[6, 3, 4]"
            },
            {
              "tresure_value": "[10, 2, 5]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "Number": "'3'"
            },
            {
              "cost": "[6, 3, 4]"
            },
            {
              "tresure_value": "[10, 2, 5]"
            },
            {
              "count": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "Number = '3'",
          "tresure_value = [10, 2, 5]",
          "cost = [6, 3, 4]",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(Number)"
        ],
        "3": [
          "benefit = int(tresure_value[i] - cost[i])",
          "(benefit > 0)"
        ],
        "4": [
          "count += benefit"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    Number = '3'\n    tresure_value = [10, 2, 5]\n    cost = [6, 3, 4]\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(Number)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    benefit = int(tresure_value[i] - cost[i])\n    (benefit > 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count += benefit\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    }
  },
  "p03150": {
    "s017540100": {
      "code": "s = 'keyofscience'\nt=\"keyence\"\nk=0\nfor i in range(len(s)):\n    if t[k]==s[i]:\n        k+=1\nif k==len(t):\n    print(\"YES\")\nelse:\n    print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "4"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "6"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "7"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "7"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "t": "'keyence'"
            },
            {
              "k": "7"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'keyofscience'",
          "t=\"keyence\"",
          "k=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "(t[k] == s[i])"
        ],
        "4": [
          "k+=1"
        ],
        "5": [
          "(k == len(t))"
        ],
        "6": [
          "print(\"YES\")"
        ],
        "7": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'keyofscience'\n    t=\"keyence\"\n    k=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (t[k] == s[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    k+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (k == len(t))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s893044136": {
      "code": "s = 'keyofscience'\nsa = 'keyence'\nsl = 0\nfor i in range(len(s)):\n    if s[i] == sa[sl]:\n        sl += 1\nif sl == len(sa) and s[0] == sa[0] and s[-1] == sa[-1]:\n    print('Yes')\nelse:\n    print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "0"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "0"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "0"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "1"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "1"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "1"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "2"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "2"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "2"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "4"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "4"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "4"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "5"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "5"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "5"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "6"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "6"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "6"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "7"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "7"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "7"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "7"
            },
            {
              "sa": "'keyence'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'keyofscience'",
          "sa = 'keyence'",
          "sl = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "(s[i] == sa[sl])"
        ],
        "4": [
          "sl += 1"
        ],
        "5": [
          "(sl == len(sa) and s[0] == sa[0] and (s[-1] == sa[-1]))"
        ],
        "6": [
          "print('Yes')"
        ],
        "7": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'keyofscience'\n    sa = 'keyence'\n    sl = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] == sa[sl])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    sl += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (sl == len(sa) and s[0] == sa[0] and (s[-1] == sa[-1]))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('No')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s645713321": {
      "code": "s = 'keyofscience'\nsa = 'keyence'\nsl = 0\nfor i in range(len(s)):\n    if s[i] == sa[sl]:\n        sl += 1\nif sl == len(sa) and s[0] == sa[0] and s[-1] == sa[-1]:\n    print('Yes')\nelse:\n    print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        5,
        6,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "0"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "0"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "0"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "1"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "1"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "1"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "2"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "2"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "2"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "3"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "4"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "4"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "4"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "5"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "5"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "5"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "6"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "6"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "6"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "7"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "7"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "7"
            },
            {
              "sa": "'keyence'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "'keyofscience'"
            },
            {
              "sl": "7"
            },
            {
              "sa": "'keyence'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'keyofscience'",
          "sa = 'keyence'",
          "sl = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s))"
        ],
        "3": [
          "(s[i] == sa[sl])"
        ],
        "4": [
          "sl += 1"
        ],
        "5": [
          "(sl == len(sa) and s[0] == sa[0] and (s[-1] == sa[-1]))"
        ],
        "6": [
          "print('Yes')"
        ],
        "7": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'keyofscience'\n    sa = 'keyence'\n    sl = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] == sa[sl])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    sl += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (sl == len(sa) and s[0] == sa[0] and (s[-1] == sa[-1]))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('No')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s087574518": {
      "code": "ans = list(\"keyence\")\nS = 'keyofscience'\nfor i in range(len(S)):\n  if S[i] == ans[0]:\n    ans.pop(0)\nif len(ans) == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['k', 'e', 'y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['k', 'e', 'y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['k', 'e', 'y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['y', 'e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e', 'n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['n', 'c', 'e']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['c', 'e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['c', 'e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['c', 'e']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "['e']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "[]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "S": "'keyofscience'"
            },
            {
              "ans": "[]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "ans = list(\"keyence\")",
          "S = 'keyofscience'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "(S[i] == ans[0])"
        ],
        "4": [
          "ans.pop(0)"
        ],
        "5": [
          "(len(ans) == 0)"
        ],
        "6": [
          "print(\"YES\")"
        ],
        "7": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    ans = list(\"keyence\")\n    S = 'keyofscience'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] == ans[0])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans.pop(0)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (len(ans) == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02696": {
    "s712417679": {
      "code": "L = [5, 7, 4]\nA=L[0]\nB=L[1]\nN=L[2]\nif N>=B-1:\n    print(int(A*(B-1)/B))\nelse:\n    print(int(A*N/B))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "B": "7"
            },
            {
              "A": "5"
            },
            {
              "L": "[5, 7, 4]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "B": "7"
            },
            {
              "A": "5"
            },
            {
              "L": "[5, 7, 4]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "L = [5, 7, 4]",
          "A=L[0]",
          "B=L[1]",
          "N=L[2]",
          "(N >= B - 1)"
        ],
        "2": [
          "print(int(A*(B-1)/B))"
        ],
        "3": [
          "print(int(A*N/B))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    L = [5, 7, 4]\n    A=L[0]\n    B=L[1]\n    N=L[2]\n    (N >= B - 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(int(A*(B-1)/B))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(int(A*N/B))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03433": {
    "s650039901": {
      "code": "n = 2018\na = 218\nif n%a<=a:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "218"
            },
            {
              "n": "2018"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "218"
            },
            {
              "n": "2018"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 2018",
          "a = 218",
          "(n % a <= a)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2018\n    a = 218\n    (n % a <= a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s541876609": {
      "code": "N = 2018\nA = 218\nb = int(N / A)\nc = N - 500 * b\nif c > A:\n    print(\"No\")\nelse:\n    print(\"Yes\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2018"
            },
            {
              "b": "9"
            },
            {
              "c": "-2482"
            },
            {
              "A": "218"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2018"
            },
            {
              "b": "9"
            },
            {
              "c": "-2482"
            },
            {
              "A": "218"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2018",
          "A = 218",
          "b = int(N / A)",
          "c = N - 500 * b",
          "(c > A)"
        ],
        "2": [
          "print(\"No\")"
        ],
        "3": [
          "print(\"Yes\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2018\n    A = 218\n    b = int(N / A)\n    c = N - 500 * b\n    (c > A)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s795616312": {
      "code": "n = '2018'\na = '218'\nx = n%500\nif x<=a:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'218'"
            },
            {
              "n": "'2018'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '2018'",
          "a = '218'",
          "x = n%500",
          "(x <= a)"
        ],
        "2": [
          "print(\"YES\")"
        ],
        "3": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '2018'\n    a = '218'\n    x = n%500\n    (x <= a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
    },
    "s808940603": {
      "code": "N = '2018'\nA = '218'\nB=N%500\nif(int(B)-int(A)==0):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'2018'"
            },
            {
              "A": "'218'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '2018'",
          "A = '218'",
          "B=N%500",
          "(int(B) - int(A) == 0)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '2018'\n    A = '218'\n    B=N%500\n    (int(B) - int(A) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p03261": {
    "s085026771": {
      "code": "N = 4\na = ['hoge', 'english', 'hoge', 'enigma']\nfor num in range(1, N):\n  if a[num][-1] != a[num+1][0]:\n    print('No')\n    break\n  if a[num] in a:\n    print('No')\n    break\n  print('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "a": "['hoge', 'english', 'hoge', 'enigma']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "4"
            },
            {
              "a": "['hoge', 'english', 'hoge', 'enigma']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "4"
            },
            {
              "a": "['hoge', 'english', 'hoge', 'enigma']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "4"
            },
            {
              "a": "['hoge', 'english', 'hoge', 'enigma']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "4"
            },
            {
              "a": "['hoge', 'english', 'hoge', 'enigma']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "a = ['hoge', 'english', 'hoge', 'enigma']"
        ],
        "2": [
          "iterator -> num, Iterate Over -> range(1, N)"
        ],
        "3": [
          "(a[num][-1] != a[num + 1][0])"
        ],
        "4": [
          "print('No')"
        ],
        "5": [
          "(a[num] in a)"
        ],
        "6": [
          "print('No')"
        ],
        "7": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    a = ['hoge', 'english', 'hoge', 'enigma']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> num, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (a[num][-1] != a[num + 1][0])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (a[num] in a)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    }
  },
  "p03464": {
    "s453077548": {
      "code": "K = 4\nA = [3, 4, 3, 2]\nA.pop()\nm, M = 2, 2\nfor a in A[::-1] :\n    x = (2 * M - 1) // a\n    M = a * x\nif M >= 2 :\n    print(M, M + A[0] - 1)\nelse :\n    print(-1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "2"
            },
            {
              "K": "4"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "2"
            },
            {
              "K": "4"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "3"
            },
            {
              "K": "4"
            },
            {
              "x": "1"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "3"
            },
            {
              "K": "4"
            },
            {
              "x": "1"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "4"
            },
            {
              "K": "4"
            },
            {
              "x": "1"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "4"
            },
            {
              "K": "4"
            },
            {
              "x": "1"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "6"
            },
            {
              "K": "4"
            },
            {
              "x": "2"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "6"
            },
            {
              "K": "4"
            },
            {
              "x": "2"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "6"
            },
            {
              "K": "4"
            },
            {
              "x": "2"
            },
            {
              "m": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "A": "[3, 4, 3]"
            },
            {
              "M": "6"
            },
            {
              "K": "4"
            },
            {
              "x": "2"
            },
            {
              "m": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "K = 4",
          "A = [3, 4, 3, 2]",
          "A.pop()",
          "m, M = 2, 2"
        ],
        "2": [
          "iterator -> a, Iterate Over -> A[::-1]"
        ],
        "3": [
          "x = (2 * M - 1) // a",
          "M = a * x"
        ],
        "4": [
          "(M >= 2)"
        ],
        "5": [
          "print(M, M + A[0] - 1)"
        ],
        "6": [
          "print(-1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    K = 4\n    A = [3, 4, 3, 2]\n    A.pop()\n    m, M = 2, 2\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A[::-1]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x = (2 * M - 1) // a\n    M = a * x\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (M >= 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(M, M + A[0] - 1)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(-1)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s687570691": {
      "code": "import sys\nK = 4\nA = [3, 4, 3, 2]\nA.reverse()\njmax, jmin = 2,2\nif A[0] != 2:\n    print(-1)\n    sys.exit()\nfor i in range(0,K-1):  \n    Round = list(range(jmin,jmax+1))\n    if not(0 in Round % A[i]):\n        print(-1)\n        sys.exit()\n    jmin = (int(jmin/A[i])+1)*A[i]\n    jmax = (int(jmax/A[i]))*A[i] +A[i]-1\njmax = jmax + A[K-1] -1\nprint(jmin, jmax)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            11
          ]
        },
        "5": {
          "range": [
            12,
            13
          ]
        },
        "6": {
          "range": [
            14,
            15
          ]
        },
        "7": {
          "range": [
            16,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import sys",
          "K = 4",
          "A = [3, 4, 3, 2]",
          "A.reverse()",
          "jmax, jmin = 2,2",
          "(A[0] != 2)"
        ],
        "2": [
          "print(-1)",
          "sys.exit()"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(0, K - 1)"
        ],
        "4": [
          "Round = list(range(jmin,jmax+1))",
          "(not 0 in Round % A[i])"
        ],
        "5": [
          "print(-1)",
          "sys.exit()"
        ],
        "6": [
          "jmin = (int(jmin/A[i])+1)*A[i]",
          "jmax = (int(jmax/A[i]))*A[i] +A[i]-1"
        ],
        "7": [
          "jmax = jmax + A[K-1] -1",
          "print(jmin, jmax)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 7
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    K = 4\n    A = [3, 4, 3, 2]\n    A.reverse()\n    jmax, jmin = 2,2\n    (A[0] != 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(0, K - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    Round = list(range(jmin,jmax+1))\n    (not 0 in Round % A[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    jmin = (int(jmin/A[i])+1)*A[i]\n    jmax = (int(jmax/A[i]))*A[i] +A[i]-1\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    jmax = jmax + A[K-1] -1\n    print(jmin, jmax)\nNext:\n    <END>\n"
    }
  },
  "p03072": {
    "s484974426": {
      "code": "n = 4\nh = [6, 5, 6, 8]\nans=0\nhighest=h[1]\nfor i in range(n):\n  if h[i] >= highest:\n    ans += 1\n    highest=h[i]\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "highest": "5"
            },
            {
              "ans": "0"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "highest": "5"
            },
            {
              "ans": "0"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "highest": "5"
            },
            {
              "ans": "0"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "highest": "6"
            },
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "highest": "6"
            },
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "highest": "6"
            },
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "highest": "6"
            },
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "highest": "6"
            },
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "highest": "6"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "highest": "6"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "highest": "6"
            },
            {
              "ans": "2"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "highest": "8"
            },
            {
              "ans": "3"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "highest": "8"
            },
            {
              "ans": "3"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "highest": "8"
            },
            {
              "ans": "3"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "h = [6, 5, 6, 8]",
          "ans=0",
          "highest=h[1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(h[i] >= highest)"
        ],
        "4": [
          "ans += 1",
          "highest=h[i]"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    h = [6, 5, 6, 8]\n    ans=0\n    highest=h[1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (h[i] >= highest)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\n    highest=h[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s431500304": {
      "code": "n = 4\nh = [6, 5, 6, 8]\nans = 1\nif h[0] <= h[1]:\n  ans += 1\nfor i in range(2,n):\n  if h[0] <= h[i]:\n    if h[1] <= h[i]:\n      if h[i-1] <= h[i]:\n        ans += 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        6,
        7,
        8,
        9,
        10,
        6,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "1"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "2"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ans": "3"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "3"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "ans": "3"
            },
            {
              "n": "4"
            },
            {
              "h": "[6, 5, 6, 8]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "h = [6, 5, 6, 8]",
          "ans = 1",
          "(h[0] <= h[1])"
        ],
        "2": [
          "ans += 1"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(2, n)"
        ],
        "4": [
          "(h[0] <= h[i])"
        ],
        "5": [
          "(h[1] <= h[i])"
        ],
        "6": [
          "(h[i - 1] <= h[i])"
        ],
        "7": [
          "ans += 1"
        ],
        "8": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 8
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 3
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 3
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 3
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    h = [6, 5, 6, 8]\n    ans = 1\n    (h[0] <= h[1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(2, n)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 8\n\nBlock 4:\nStatement:\n    (h[0] <= h[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    (h[1] <= h[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 3\n\nBlock 6:\nStatement:\n    (h[i - 1] <= h[i])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 3\n\nBlock 7:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 3\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s837883195": {
      "code": "n = 4\nh = [6, 5, 6, 8]\nmax = 0\nfor i in n:\n    if max <= h[i]:\n        max = h[i]\n        count += 1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "h": "[6, 5, 6, 8]"
            },
            {
              "max": "0"
            },
            {
              "n": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "h": "[6, 5, 6, 8]"
            },
            {
              "max": "0"
            },
            {
              "n": "4"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "h = [6, 5, 6, 8]",
          "max = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> n"
        ],
        "3": [
          "(max <= h[i])"
        ],
        "4": [
          "max = h[i]",
          "count += 1"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    h = [6, 5, 6, 8]\n    max = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> n\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (max <= h[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    max = h[i]\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    },
    "s663429194": {
      "code": "N = 4\nlist = ['6', '5', '6', '8']\nans = 0\nmaxHeight = -1\nfor i in range(N):\n  if list[i] >= maxHeight:\n    ans += 1\n    maxHeight = list[i]\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "maxHeight": "-1"
            },
            {
              "N": "4"
            },
            {
              "list": "['6', '5', '6', '8']"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "maxHeight": "-1"
            },
            {
              "N": "4"
            },
            {
              "list": "['6', '5', '6', '8']"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "maxHeight": "-1"
            },
            {
              "N": "4"
            },
            {
              "list": "['6', '5', '6', '8']"
            },
            {
              "ans": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "list = ['6', '5', '6', '8']",
          "ans = 0",
          "maxHeight = -1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(list[i] >= maxHeight)"
        ],
        "4": [
          "ans += 1",
          "maxHeight = list[i]"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    list = ['6', '5', '6', '8']\n    ans = 0\n    maxHeight = -1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (list[i] >= maxHeight)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\n    maxHeight = list[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s924100658": {
      "code": "N = '4'\nH = [6, 5, 6, 8]\ncnt=1\nfor i in range(N+1):\n  if H[i] < H[i+1]:\n    cnt+=1\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "cnt": "1"
            },
            {
              "N": "'4'"
            },
            {
              "H": "[6, 5, 6, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "1"
            },
            {
              "N": "'4'"
            },
            {
              "H": "[6, 5, 6, 8]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '4'",
          "H = [6, 5, 6, 8]",
          "cnt=1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N + 1)"
        ],
        "3": [
          "(H[i] < H[i + 1])"
        ],
        "4": [
          "cnt+=1"
        ],
        "5": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    H = [6, 5, 6, 8]\n    cnt=1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (H[i] < H[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
    }
  },
  "p03605": {
    "s971753276": {
      "code": "n = 29\na = n//10\nb = n-a*10\nif a==9 or b==9:\n  print(\"Yes\")\nelse:\n  pront(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "2"
            },
            {
              "n": "29"
            },
            {
              "b": "9"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "2"
            },
            {
              "n": "29"
            },
            {
              "b": "9"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 29",
          "a = n//10",
          "b = n-a*10",
          "(a == 9 or b == 9)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "pront(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 29\n    a = n//10\n    b = n-a*10\n    (a == 9 or b == 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    pront(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s454398762": {
      "code": "n = 29\nif 9 in n:\n\tprint('Yes')\nelse:\n\tprint('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "29"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"argument of type 'int' is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 29",
          "(9 in n)"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 29\n    (9 in n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    },
    "s109347653": {
      "code": "n = 29\nif n in 9:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "29"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"argument of type 'int' is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 29",
          "(n in 9)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 29\n    (n in 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s355102675": {
      "code": "a = 29\nif 9 in a:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "29"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"argument of type 'int' is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = 29",
          "(9 in a)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 29\n    (9 in a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p03502": {
    "s636965233": {
      "code": "n = 12\nntmp = n\nsum = 0\nwhile ntmp >= 10:\n    sum += ntmp % 10\n    ntmp = ntmp // 10\nif n % sum == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 12",
          "ntmp = n",
          "sum = 0"
        ],
        "2": [
          "while ntmp >= 10:"
        ],
        "3": [
          "sum += ntmp % 10",
          "ntmp = ntmp // 10"
        ],
        "4": [
          "(n % sum == 0)"
        ],
        "5": [
          "print(\"Yes\")"
        ],
        "6": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 12\n    ntmp = n\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while ntmp >= 10:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum += ntmp % 10\n    ntmp = ntmp // 10\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (n % sum == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s571220668": {
      "code": "N = '12'\nf=int(N[0])+int(N[1])\nif int(N)%f==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "f": "3"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "f": "3"
            },
            {
              "N": "'12'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = '12'",
          "f=int(N[0])+int(N[1])",
          "(int(N) % f == 0)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '12'\n    f=int(N[0])+int(N[1])\n    (int(N) % f == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s315532364": {
      "code": "N = 12\nif N%sum(list(str(N))) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "12"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 12",
          "(N % sum(list(str(N))) == 0)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 12\n    (N % sum(list(str(N))) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s974978480": {
      "code": "x = '12'\nl = len(x)\na = 0\nfor i in range(l):\n  a += int(x[i])\nif a%x ==0:\n  print('Yes')\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "2"
            },
            {
              "x": "'12'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "2"
            },
            {
              "x": "'12'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "1"
            },
            {
              "l": "2"
            },
            {
              "x": "'12'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "1"
            },
            {
              "l": "2"
            },
            {
              "x": "'12'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "3"
            },
            {
              "l": "2"
            },
            {
              "x": "'12'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "3"
            },
            {
              "l": "2"
            },
            {
              "x": "'12'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "3"
            },
            {
              "l": "2"
            },
            {
              "x": "'12'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for %: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '12'",
          "l = len(x)",
          "a = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(l)"
        ],
        "3": [
          "a += int(x[i])"
        ],
        "4": [
          "(a % x == 0)"
        ],
        "5": [
          "print('Yes')"
        ],
        "6": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '12'\n    l = len(x)\n    a = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(l)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += int(x[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (a % x == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    },
    "s399987976": {
      "code": "N = '12'\nf=0\nfor i in range(len(N)):\n  f+=int(N[i])\nif N%f==0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "f": "0"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "f": "0"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'12'"
            },
            {
              "f": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'12'"
            },
            {
              "f": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "f": "3"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "f": "3"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "f": "3"
            },
            {
              "N": "'12'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '12'",
          "f=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(N))"
        ],
        "3": [
          "f+=int(N[i])"
        ],
        "4": [
          "(N % f == 0)"
        ],
        "5": [
          "print(\"Yes\")"
        ],
        "6": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '12'\n    f=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(N))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    f+=int(N[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (N % f == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s145687210": {
      "code": "N = '12'\nX = 0\nfor i in range(len(N)):\n  X += int(N[i])\nif N % X == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X": "0"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X": "0"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "X": "1"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X": "1"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "X": "3"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X": "3"
            },
            {
              "N": "'12'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "X": "3"
            },
            {
              "N": "'12'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '12'",
          "X = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(N))"
        ],
        "3": [
          "X += int(N[i])"
        ],
        "4": [
          "(N % X == 0)"
        ],
        "5": [
          "print(\"Yes\")"
        ],
        "6": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '12'\n    X = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(N))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    X += int(N[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (N % X == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p02646": {
    "s815377361": {
      "code": "a = [1, 2]\nb = [3, 1]\nc = 3\ne = a[1]-b[1]\nif e == 0 or e <= 0:\n  print(\"NO\")\ng = a[0]*e\nh = g-b[0]\nif h % e == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "[3, 1]"
            },
            {
              "e": "1"
            },
            {
              "a": "[1, 2]"
            },
            {
              "c": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "b": "[3, 1]"
            },
            {
              "e": "1"
            },
            {
              "h": "-2"
            },
            {
              "g": "1"
            },
            {
              "a": "[1, 2]"
            },
            {
              "c": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "b": "[3, 1]"
            },
            {
              "e": "1"
            },
            {
              "h": "-2"
            },
            {
              "g": "1"
            },
            {
              "a": "[1, 2]"
            },
            {
              "c": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = [1, 2]",
          "b = [3, 1]",
          "c = 3",
          "e = a[1]-b[1]",
          "(e == 0 or e <= 0)"
        ],
        "2": [
          "print(\"NO\")"
        ],
        "3": [
          "g = a[0]*e",
          "h = g-b[0]",
          "(h % e == 0)"
        ],
        "4": [
          "print(\"YES\")"
        ],
        "5": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [1, 2]\n    b = [3, 1]\n    c = 3\n    e = a[1]-b[1]\n    (e == 0 or e <= 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"NO\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    g = a[0]*e\n    h = g-b[0]\n    (h % e == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03380": {
    "s952977425": {
      "code": "import itertools\nn = 5\na = [6, 9, 4, 2, 11]\nbase = max(a)\nans = 0\nans_set = []\nfor x in a:\n    if x == base:\n        pass\n    elif len(list(itertools.combinations(range(1, base+1), x))) > ans:\n        ans = len(list(itertools.combinations(range(1, base+1), x)))\n        ans_set = [base, x]\nprint(*ans_set)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            11,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        11,
        12,
        7,
        8,
        10,
        7,
        8,
        10,
        7,
        8,
        10,
        7,
        8,
        9,
        7,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import itertools",
          "n = 5",
          "a = [6, 9, 4, 2, 11]",
          "base = max(a)",
          "ans = 0",
          "ans_set = []"
        ],
        "2": [
          "iterator -> x, Iterate Over -> a"
        ],
        "3": [
          "(x == base)"
        ],
        "4": [
          "(len(list(itertools.combinations(range(1, base + 1), x))) > ans)"
        ],
        "5": [
          "ans = len(list(itertools.combinations(range(1, base+1), x)))",
          "ans_set = [base, x]"
        ],
        "6": [
          "print(*ans_set)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import itertools\n    n = 5\n    a = [6, 9, 4, 2, 11]\n    base = max(a)\n    ans = 0\n    ans_set = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (x == base)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (len(list(itertools.combinations(range(1, base + 1), x))) > ans)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    ans = len(list(itertools.combinations(range(1, base+1), x)))\n    ans_set = [base, x]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(*ans_set)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s298035701": {
      "code": "from bisect import bisect_left,bisect\nn = 5\na = [6, 9, 4, 2, 11]\na.sort()\nai=max(a)\nif ai%2==0:\n    ai2=ai//2-1\nelse:\n    ai2=ai//2\njj=bisect(a,ai2)\nif abs(a[jj]-ai2)>abs(a[jj+1]-ai2):\n    jj=jj+1\nif jj==n-1:\n    jj=jj-1\naj=a[jj]\nprint(ai,aj)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            15,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        13,
        15,
        16
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 8,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from bisect import bisect_left,bisect",
          "n = 5",
          "a = [6, 9, 4, 2, 11]",
          "a.sort()",
          "ai=max(a)",
          "(ai % 2 == 0)"
        ],
        "2": [
          "ai2=ai//2-1"
        ],
        "3": [
          "ai2=ai//2"
        ],
        "4": [
          "jj=bisect(a,ai2)",
          "(abs(a[jj] - ai2) > abs(a[jj + 1] - ai2))"
        ],
        "5": [
          "jj=jj+1"
        ],
        "6": [
          "(jj == n - 1)"
        ],
        "7": [
          "jj=jj-1"
        ],
        "8": [
          "aj=a[jj]",
          "print(ai,aj)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from bisect import bisect_left,bisect\n    n = 5\n    a = [6, 9, 4, 2, 11]\n    a.sort()\n    ai=max(a)\n    (ai % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ai2=ai//2-1\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    ai2=ai//2\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    jj=bisect(a,ai2)\n    (abs(a[jj] - ai2) > abs(a[jj + 1] - ai2))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    jj=jj+1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    (jj == n - 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    jj=jj-1\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    aj=a[jj]\n    print(ai,aj)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02554": {
    "s193846977": {
      "code": "N = 2\nmod = 10**9+7\nif N == 1:\n  print(0)\nelif N == 2:\n  print(2)\nelse:\n  ans = 10*8*6*10**(3(N-3))*2\n  print(ans%mod)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        0,
        1,
        2,
        3,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "mod = 10**9+7",
          "(N == 1)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "(N == 2)"
        ],
        "4": [
          "print(2)"
        ],
        "5": [
          "ans = 10*8*6*10**(3(N-3))*2",
          "print(ans%mod)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    mod = 10**9+7\n    (N == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (N == 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(2)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    ans = 10*8*6*10**(3(N-3))*2\n    print(ans%mod)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s068690134": {
      "code": "import sys\nimport math\nfrom scipy.special import comb\nmod = 10 ** 9 + 7\nN = 2\nif N <= 1:\n    print(0)\n    sys.exit()\nans = 10 ** N - 8 ** N - (9 ** N - 8 ** N) * 2\nprint(ans % mod)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            8
          ]
        },
        "3": {
          "range": [
            9,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys",
          "import math",
          "from scipy.special import comb",
          "mod = 10 ** 9 + 7",
          "N = 2",
          "(N <= 1)"
        ],
        "2": [
          "print(0)",
          "sys.exit()"
        ],
        "3": [
          "ans = 10 ** N - 8 ** N - (9 ** N - 8 ** N) * 2",
          "print(ans % mod)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    import math\n    from scipy.special import comb\n    mod = 10 ** 9 + 7\n    N = 2\n    (N <= 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    ans = 10 ** N - 8 ** N - (9 ** N - 8 ** N) * 2\n    print(ans % mod)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s762059480": {
      "code": "import math\nN = 2\nhoge = 10**9+7\nif N == 1:\n    print(0)\nelse:\n    a = math.factorial(N) / math.factorial(N-2)\n    b = 10**(N-2)\n    print(a*b%hoge)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "N = 2",
          "hoge = 10**9+7",
          "(N == 1)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "a = math.factorial(N) / math.factorial(N-2)",
          "b = 10**(N-2)",
          "print(a*b%hoge)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = 2\n    hoge = 10**9+7\n    (N == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    a = math.factorial(N) / math.factorial(N-2)\n    b = 10**(N-2)\n    print(a*b%hoge)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s702177154": {
      "code": "import numpy as np\nN = 2\nMOD = 1000000007\nif N==1 or N==0:\n    ans=0\nelif N==2:\n    ans =2\nelse:\n    ans = (  ( N*(N-1) ) %MOD  ) * (  (  10**(N-2) - (N-2)*(N-3)/2   )%MOD)\n    ans = ans % MOD\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        6,
        7,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "N = 2",
          "MOD = 1000000007",
          "(N == 1 or N == 0)"
        ],
        "2": [
          "ans=0"
        ],
        "3": [
          "(N == 2)"
        ],
        "4": [
          "ans =2"
        ],
        "5": [
          "ans = (  ( N*(N-1) ) %MOD  ) * (  (  10**(N-2) - (N-2)*(N-3)/2   )%MOD)",
          "ans = ans % MOD"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    N = 2\n    MOD = 1000000007\n    (N == 1 or N == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans=0\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    (N == 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans =2\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    ans = (  ( N*(N-1) ) %MOD  ) * (  (  10**(N-2) - (N-2)*(N-3)/2   )%MOD)\n    ans = ans % MOD\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02707": {
    "s228820223": {
      "code": "N = 5\nA = [1, 1, 2, 2]\nfor i in range(1,N+1):\n    print(A.count(i))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 1, 2, 2]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [1, 1, 2, 2]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, N + 1)"
        ],
        "3": [
          "print(A.count(i))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [1, 1, 2, 2]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(A.count(i))\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s274672316": {
      "code": "N = 5\nA = ['1', '1', '2', '2']\nfor i in range(1,N+1):\n    print(A.count(str(i)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = ['1', '1', '2', '2']"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, N + 1)"
        ],
        "3": [
          "print(A.count(str(i)))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = ['1', '1', '2', '2']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(A.count(str(i)))\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s074277481": {
      "code": "N = '5'\nA = ['1', '1', '2', '2']\nfor i in range(int(N-1)):\n  print(A.count(str(i+1)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'5'"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'5'"
            },
            {
              "A": "['1', '1', '2', '2']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '5'",
          "A = ['1', '1', '2', '2']"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(int(N - 1))"
        ],
        "3": [
          "print(A.count(str(i+1)))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    A = ['1', '1', '2', '2']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(int(N - 1))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(A.count(str(i+1)))\nNext:\n    Go to Block: 2\n"
    }
  },
  "p03779": {
    "s477364918": {
      "code": "X = 6\nfor t in range(1,X):\n  total = t*(t+1)/2\n  if total>=X:\n    break\nprint(t)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            4
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        2,
        3,
        4,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "total": "1.0"
            },
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "total": "1.0"
            },
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "total": "3.0"
            },
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "total": "3.0"
            },
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "total": "6.0"
            },
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "total": "6.0"
            },
            {
              "X": "6"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "X = 6"
        ],
        "2": [
          "iterator -> t, Iterate Over -> range(1, X)"
        ],
        "3": [
          "total = t*(t+1)/2",
          "(total >= X)"
        ],
        "4": [
          "print(t)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    X = 6\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> t, Iterate Over -> range(1, X)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    total = t*(t+1)/2\n    (total >= X)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(t)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s703539923": {
      "code": "import bisect\nx = 6\nnum_list = list(range(x))\na = [0]*x\na[0] = num_list[0]\nfor i in range(1,x):\n    a[i] = a[i-1] + num_list[i]\nprint(bisect.bisect_left(a, x))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        6,
        7,
        6,
        7,
        6,
        7,
        6,
        7,
        6,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import bisect",
          "x = 6",
          "num_list = list(range(x))",
          "a = [0]*x",
          "a[0] = num_list[0]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, x)"
        ],
        "3": [
          "a[i] = a[i-1] + num_list[i]"
        ],
        "4": [
          "print(bisect.bisect_left(a, x))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import bisect\n    x = 6\n    num_list = list(range(x))\n    a = [0]*x\n    a[0] = num_list[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, x)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a[i] = a[i-1] + num_list[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(bisect.bisect_left(a, x))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s248148999": {
      "code": "x = 6\nfor i in range(x):\n    if i*(i+1)/2 >= x:\n        ans =i\n        break \n    else:\n        continue\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        7,
        2,
        3,
        7,
        2,
        3,
        7,
        2,
        3,
        4,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "3"
            },
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "3"
            },
            {
              "x": "6"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "x = 6"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(x)"
        ],
        "3": [
          "(i * (i + 1) / 2 >= x)"
        ],
        "4": [
          "ans =i"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = 6\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(x)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i * (i + 1) / 2 >= x)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans =i\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s348022778": {
      "code": "num = 6\ni = 0\nwhile True:\n    bef = range(1,i)\n    i += 1\n    aft = range(1,i)\n    if bef < num <= aft:\n        print(i-1)\n        break",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "i": "0"
            },
            {
              "num": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "0"
            },
            {
              "num": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "aft": "range(1, 1)"
            },
            {
              "num": "6"
            },
            {
              "bef": "range(1, 0)"
            },
            {
              "i": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'range' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "num = 6",
          "i = 0"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "bef = range(1,i)",
          "i += 1",
          "aft = range(1,i)",
          "(bef < num <= aft)"
        ],
        "4": [
          "print(i-1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    num = 6\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    bef = range(1,i)\n    i += 1\n    aft = range(1,i)\n    (bef < num <= aft)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i-1)\nNext:\n    <END>\n"
    },
    "s557080328": {
      "code": "X = 6\nfor i in range(1, 10**6):\n    if X <= 0.5 * i (i + 1):\n        print(i)\n        break",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "X": "6"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "X = 6"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, 10 ** 6)"
        ],
        "3": [
          "(X <= 0.5 * i(i + 1))"
        ],
        "4": [
          "print(i)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    X = 6\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, 10 ** 6)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (X <= 0.5 * i(i + 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\nNext:\n    <END>\n"
    }
  },
  "p03696": {
    "s605826339": {
      "code": "n = 3\ns = '())'\nx = n - s[::-1].find(\")\")\nl = 0\nr = 0\nfor i in range(x):\n    if s[i] == \"(\":\n        l += 1\n    else:\n        r += 1\nif l < r:\n    ans = \"(\" * (r - l) + s\nprint(ans + \")\" * max(0, (ans.count(\"(\") - ans.count(\")\"))))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        10,
        6,
        7,
        10,
        6,
        11,
        12,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "0"
            },
            {
              "l": "0"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "0"
            },
            {
              "l": "0"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "r": "0"
            },
            {
              "l": "0"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "r": "0"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "0"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "r": "0"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "r": "1"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "1"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "r": "1"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "r": "2"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "2"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "r": "2"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "r": "2"
            },
            {
              "ans": "'(())'"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "r": "2"
            },
            {
              "ans": "'(())'"
            },
            {
              "l": "1"
            },
            {
              "n": "3"
            },
            {
              "s": "'())'"
            },
            {
              "x": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "s = '())'",
          "x = n - s[::-1].find(\")\")",
          "l = 0",
          "r = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(x)"
        ],
        "3": [
          "(s[i] == '(')"
        ],
        "4": [
          "l += 1"
        ],
        "5": [
          "r += 1"
        ],
        "6": [
          "(l < r)"
        ],
        "7": [
          "ans = \"(\" * (r - l) + s"
        ],
        "8": [
          "print(ans + \")\" * max(0, (ans.count(\"(\") - ans.count(\")\"))))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    s = '())'\n    x = n - s[::-1].find(\")\")\n    l = 0\n    r = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(x)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] == '(')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    l += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    r += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (l < r)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans = \"(\" * (r - l) + s\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(ans + \")\" * max(0, (ans.count(\"(\") - ans.count(\")\"))))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03434": {
    "s884123560": {
      "code": "N = 2\na = [3, 1]\nA = 0\nB = 0\naa = sorted(a)\nfor i in range(0, N, 2):\n    A += aa[-i-1]\n    B += aa[-i-2]\nprint(A-B)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "A": "0"
            },
            {
              "aa": "[1, 3]"
            },
            {
              "a": "[3, 1]"
            },
            {
              "B": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "A": "0"
            },
            {
              "aa": "[1, 3]"
            },
            {
              "a": "[3, 1]"
            },
            {
              "B": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "A": "3"
            },
            {
              "aa": "[1, 3]"
            },
            {
              "a": "[3, 1]"
            },
            {
              "B": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "A": "3"
            },
            {
              "aa": "[1, 3]"
            },
            {
              "a": "[3, 1]"
            },
            {
              "B": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "2"
            },
            {
              "A": "3"
            },
            {
              "aa": "[1, 3]"
            },
            {
              "a": "[3, 1]"
            },
            {
              "B": "1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "a = [3, 1]",
          "A = 0",
          "B = 0",
          "aa = sorted(a)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, N, 2)"
        ],
        "3": [
          "A += aa[-i-1]",
          "B += aa[-i-2]"
        ],
        "4": [
          "print(A-B)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    a = [3, 1]\n    A = 0\n    B = 0\n    aa = sorted(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, N, 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    A += aa[-i-1]\n    B += aa[-i-2]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(A-B)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s164654811": {
      "code": "N = 2\nalise=0\nbob=0\na_list = [3, 1]\na_sort=sorted(a_list)[::-1]\nfor i in range(N//2+N%2):\n    alise+=a_sort.pop(0)\n    bob+=a_sort.pop(0)\nprint(alise-bob)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "bob": "0"
            },
            {
              "a_sort": "[3, 1]"
            },
            {
              "a_list": "[3, 1]"
            },
            {
              "N": "2"
            },
            {
              "alise": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "bob": "0"
            },
            {
              "a_sort": "[3, 1]"
            },
            {
              "a_list": "[3, 1]"
            },
            {
              "N": "2"
            },
            {
              "alise": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "bob": "1"
            },
            {
              "a_sort": "[]"
            },
            {
              "a_list": "[3, 1]"
            },
            {
              "N": "2"
            },
            {
              "alise": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "bob": "1"
            },
            {
              "a_sort": "[]"
            },
            {
              "a_list": "[3, 1]"
            },
            {
              "N": "2"
            },
            {
              "alise": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "bob": "1"
            },
            {
              "a_sort": "[]"
            },
            {
              "a_list": "[3, 1]"
            },
            {
              "N": "2"
            },
            {
              "alise": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "alise=0",
          "bob=0",
          "a_list = [3, 1]",
          "a_sort=sorted(a_list)[::-1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N // 2 + N % 2)"
        ],
        "3": [
          "alise+=a_sort.pop(0)",
          "bob+=a_sort.pop(0)"
        ],
        "4": [
          "print(alise-bob)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    alise=0\n    bob=0\n    a_list = [3, 1]\n    a_sort=sorted(a_list)[::-1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N // 2 + N % 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    alise+=a_sort.pop(0)\n    bob+=a_sort.pop(0)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(alise-bob)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s791501784": {
      "code": "n = 2\na = [3, 1]\nalice=0\nbob=0\na=sorted(a)\nwhile a:\n    alice+=a[-1]\n    a.pop()\n    bob+=a[-1]\n    a.pop()\nprint(alice-bob)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        6,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "alice": "0"
            },
            {
              "bob": "0"
            },
            {
              "a": "[1, 3]"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "alice": "0"
            },
            {
              "bob": "0"
            },
            {
              "a": "[1, 3]"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "alice": "3"
            },
            {
              "bob": "1"
            },
            {
              "a": "[]"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "alice": "3"
            },
            {
              "bob": "1"
            },
            {
              "a": "[]"
            },
            {
              "n": "2"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "alice": "3"
            },
            {
              "bob": "1"
            },
            {
              "a": "[]"
            },
            {
              "n": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "a = [3, 1]",
          "alice=0",
          "bob=0",
          "a=sorted(a)"
        ],
        "2": [
          "while a:"
        ],
        "3": [
          "alice+=a[-1]",
          "a.pop()",
          "bob+=a[-1]",
          "a.pop()"
        ],
        "4": [
          "print(alice-bob)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [3, 1]\n    alice=0\n    bob=0\n    a=sorted(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while a:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    alice+=a[-1]\n    a.pop()\n    bob+=a[-1]\n    a.pop()\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(alice-bob)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s110762283": {
      "code": "n = 2\nls = [3, 1]\nA = 0\nB = 0\nlsn = sorted(ls,reverse = True)\nif n%2 == 1:\n  lsn = lsn.append(0)\nfor i in range(0,len(lsn),2):\n  A += lsn[i]\n  B += lsn[i+1]\nprint(A-B)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            10
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        9,
        10,
        8,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "lsn": "[3, 1]"
            },
            {
              "A": "0"
            },
            {
              "n": "2"
            },
            {
              "ls": "[3, 1]"
            },
            {
              "B": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lsn": "[3, 1]"
            },
            {
              "A": "0"
            },
            {
              "n": "2"
            },
            {
              "ls": "[3, 1]"
            },
            {
              "B": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "lsn": "[3, 1]"
            },
            {
              "A": "3"
            },
            {
              "n": "2"
            },
            {
              "ls": "[3, 1]"
            },
            {
              "B": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "lsn": "[3, 1]"
            },
            {
              "A": "3"
            },
            {
              "n": "2"
            },
            {
              "ls": "[3, 1]"
            },
            {
              "B": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "lsn": "[3, 1]"
            },
            {
              "A": "3"
            },
            {
              "n": "2"
            },
            {
              "ls": "[3, 1]"
            },
            {
              "B": "1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "ls = [3, 1]",
          "A = 0",
          "B = 0",
          "lsn = sorted(ls,reverse = True)",
          "(n % 2 == 1)"
        ],
        "2": [
          "lsn = lsn.append(0)"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(0, len(lsn), 2)"
        ],
        "4": [
          "A += lsn[i]",
          "B += lsn[i+1]"
        ],
        "5": [
          "print(A-B)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    ls = [3, 1]\n    A = 0\n    B = 0\n    lsn = sorted(ls,reverse = True)\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    lsn = lsn.append(0)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(0, len(lsn), 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    A += lsn[i]\n    B += lsn[i+1]\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    print(A-B)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s108768318": {
      "code": "N = 2\nLIST = [3, 1]\nLIST.sort()\nBob = 0\nAlice = 0\nwhile True:\n    if len(LIST)==0:\n        break\n    Alice = Alice + LIST.pop()\n    Bob = Bob + LIST.pop()\nprint(Alice - Bob)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            9,
            10
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        6,
        7,
        8,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "LIST": "[1, 3]"
            },
            {
              "Bob": "0"
            },
            {
              "N": "2"
            },
            {
              "Alice": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "LIST": "[1, 3]"
            },
            {
              "Bob": "0"
            },
            {
              "N": "2"
            },
            {
              "Alice": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "LIST": "[1, 3]"
            },
            {
              "Bob": "0"
            },
            {
              "N": "2"
            },
            {
              "Alice": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "LIST": "[]"
            },
            {
              "Bob": "1"
            },
            {
              "N": "2"
            },
            {
              "Alice": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "LIST": "[]"
            },
            {
              "Bob": "1"
            },
            {
              "N": "2"
            },
            {
              "Alice": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "LIST": "[]"
            },
            {
              "Bob": "1"
            },
            {
              "N": "2"
            },
            {
              "Alice": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "LIST": "[]"
            },
            {
              "Bob": "1"
            },
            {
              "N": "2"
            },
            {
              "Alice": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "LIST = [3, 1]",
          "LIST.sort()",
          "Bob = 0",
          "Alice = 0"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "(len(LIST) == 0)"
        ],
        "4": [
          "Alice = Alice + LIST.pop()",
          "Bob = Bob + LIST.pop()"
        ],
        "5": [
          "print(Alice - Bob)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 5,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    LIST = [3, 1]\n    LIST.sort()\n    Bob = 0\n    Alice = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(LIST) == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    Alice = Alice + LIST.pop()\n    Bob = Bob + LIST.pop()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(Alice - Bob)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s725927473": {
      "code": "N = 2\nscore = [3, 1]\ntotal = 0\nscore.sort(reverse=True)\nfor i in range(0, N, 2):\n  if score[i+1] == None:\n    total += score[i]\n  else:\n    total += score[i]-score[i+1]\nprint(total)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        5,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "total": "0"
            },
            {
              "score": "[3, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "total": "0"
            },
            {
              "score": "[3, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "2"
            },
            {
              "total": "0"
            },
            {
              "score": "[3, 1]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "2"
            },
            {
              "total": "2"
            },
            {
              "score": "[3, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "2"
            },
            {
              "total": "2"
            },
            {
              "score": "[3, 1]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "2"
            },
            {
              "total": "2"
            },
            {
              "score": "[3, 1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "score = [3, 1]",
          "total = 0",
          "score.sort(reverse=True)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, N, 2)"
        ],
        "3": [
          "(score[i + 1] == None)"
        ],
        "4": [
          "total += score[i]"
        ],
        "5": [
          "total += score[i]-score[i+1]"
        ],
        "6": [
          "print(total)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    score = [3, 1]\n    total = 0\n    score.sort(reverse=True)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, N, 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (score[i + 1] == None)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    total += score[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    total += score[i]-score[i+1]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(total)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s475468464": {
      "code": "N = 2\nnum = ['3', '1']\nnum.sort(reverse=True)\nprint(sum(num[0::2])-sum(num[1::2]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "num": "['3', '1']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "num = ['3', '1']",
          "num.sort(reverse=True)",
          "print(sum(num[0::2])-sum(num[1::2]))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    num = ['3', '1']\n    num.sort(reverse=True)\n    print(sum(num[0::2])-sum(num[1::2]))\nNext:\n    <END>\n"
    },
    "s697525370": {
      "code": "n = 2\nl = [3, 1]\na = 0\nb = 0\nl.sort(reverser=True)\nfor i in range(n):\n  if i % 2 == 0:\n    a += l[i]\n  else:\n    b += l[i]\nprint(a-b)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "2"
            },
            {
              "l": "[3, 1]"
            },
            {
              "b": "0"
            },
            {
              "a": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'reverser' is an invalid keyword argument for sort()\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "l = [3, 1]",
          "a = 0",
          "b = 0",
          "l.sort(reverser=True)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(i % 2 == 0)"
        ],
        "4": [
          "a += l[i]"
        ],
        "5": [
          "b += l[i]"
        ],
        "6": [
          "print(a-b)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    l = [3, 1]\n    a = 0\n    b = 0\n    l.sort(reverser=True)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a += l[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    b += l[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(a-b)\nNext:\n    <END>\n"
    },
    "s186139215": {
      "code": "N = 2\na = [3, 1]\nAlice=0\nBob=0\na.sort(reversed=True)\nfor i in range(N):\n    if i % 2 == 0:\n        Alice+=a[i]\n    else:\n        Bob+=a[i]\nif Alice>Bob:\n    print(Alice-Bob)\nelse:\n    print(Bob-Alice)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "Alice": "0"
            },
            {
              "Bob": "0"
            },
            {
              "a": "[3, 1]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'reversed' is an invalid keyword argument for sort()\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "a = [3, 1]",
          "Alice=0",
          "Bob=0",
          "a.sort(reversed=True)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(i % 2 == 0)"
        ],
        "4": [
          "Alice+=a[i]"
        ],
        "5": [
          "Bob+=a[i]"
        ],
        "6": [
          "(Alice > Bob)"
        ],
        "7": [
          "print(Alice-Bob)"
        ],
        "8": [
          "print(Bob-Alice)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    a = [3, 1]\n    Alice=0\n    Bob=0\n    a.sort(reversed=True)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    Alice+=a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    Bob+=a[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (Alice > Bob)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(Alice-Bob)\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(Bob-Alice)\nNext:\n    <END>\n"
    }
  },
  "p02767": {
    "s403984613": {
      "code": "import math\nN = 2\nx = [1, 4]\ns = float((x[0] + x[1])/2)\nfor i in range(2,N-1):\n\ts = (s + x[i]) / 2\nmin = math.floor(s)\nprint(min)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "N = 2",
          "x = [1, 4]",
          "s = float((x[0] + x[1])/2)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(2, N - 1)"
        ],
        "3": [
          "s = (s + x[i]) / 2"
        ],
        "4": [
          "min = math.floor(s)",
          "print(min)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = 2\n    x = [1, 4]\n    s = float((x[0] + x[1])/2)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s = (s + x[i]) / 2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    min = math.floor(s)\n    print(min)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s090022213": {
      "code": "import numpy as np\nn = '2'\nx = ['1', '4']\nn = int(n)\nx = list(map(int,x))\nx = np.array(x)\nmaxed = np.max(x)\ncand = []\nfor p in range(1,maxed):\n    xp = (x - p) ** 2\n    cand.append(np.sum(xp))\ny = np.min(cand)\nprint(y)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        },
        "2": {
          "range": [
            9,
            9
          ]
        },
        "3": {
          "range": [
            10,
            11
          ]
        },
        "4": {
          "range": [
            12,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        9,
        10,
        11,
        9,
        10,
        11,
        9,
        12,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "n = '2'",
          "x = ['1', '4']",
          "n = int(n)",
          "x = list(map(int,x))",
          "x = np.array(x)",
          "maxed = np.max(x)",
          "cand = []"
        ],
        "2": [
          "iterator -> p, Iterate Over -> range(1, maxed)"
        ],
        "3": [
          "xp = (x - p) ** 2",
          "cand.append(np.sum(xp))"
        ],
        "4": [
          "y = np.min(cand)",
          "print(y)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    n = '2'\n    x = ['1', '4']\n    n = int(n)\n    x = list(map(int,x))\n    x = np.array(x)\n    maxed = np.max(x)\n    cand = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> p, Iterate Over -> range(1, maxed)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    xp = (x - p) ** 2\n    cand.append(np.sum(xp))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    y = np.min(cand)\n    print(y)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s291708531": {
      "code": "N = 2\nX = [1, 4]\nprint(X)\nX_max = max(X)\nX_min = min(X)\nanswerlist = []\nfor i in range(X_min,X_max):\n  newX = [(n-i)**2 for n in X]\n  print(newX)\n  total = sum(newX)\n  answerlist.append(total)\nprint(min(answerlist))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        7,
        8,
        9,
        10,
        11,
        7,
        8,
        9,
        10,
        11,
        7,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[]"
            },
            {
              "N": "2"
            },
            {
              "X_max": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[]"
            },
            {
              "N": "2"
            },
            {
              "X_max": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[9]"
            },
            {
              "N": "2"
            },
            {
              "total": "9"
            },
            {
              "X_max": "4"
            },
            {
              "newX": "[0, 9]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[9]"
            },
            {
              "N": "2"
            },
            {
              "total": "9"
            },
            {
              "X_max": "4"
            },
            {
              "newX": "[0, 9]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[9, 5]"
            },
            {
              "N": "2"
            },
            {
              "total": "5"
            },
            {
              "X_max": "4"
            },
            {
              "newX": "[1, 4]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[9, 5]"
            },
            {
              "N": "2"
            },
            {
              "total": "5"
            },
            {
              "X_max": "4"
            },
            {
              "newX": "[1, 4]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[9, 5, 5]"
            },
            {
              "N": "2"
            },
            {
              "total": "5"
            },
            {
              "X_max": "4"
            },
            {
              "newX": "[4, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[9, 5, 5]"
            },
            {
              "N": "2"
            },
            {
              "total": "5"
            },
            {
              "X_max": "4"
            },
            {
              "newX": "[4, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "X_min": "1"
            },
            {
              "X": "[1, 4]"
            },
            {
              "answerlist": "[9, 5, 5]"
            },
            {
              "N": "2"
            },
            {
              "total": "5"
            },
            {
              "X_max": "4"
            },
            {
              "newX": "[4, 1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "X = [1, 4]",
          "print(X)",
          "X_max = max(X)",
          "X_min = min(X)",
          "answerlist = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(X_min, X_max)"
        ],
        "3": [
          "newX = [(n-i)**2 for n in X]",
          "print(newX)",
          "total = sum(newX)",
          "answerlist.append(total)"
        ],
        "4": [
          "print(min(answerlist))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    X = [1, 4]\n    print(X)\n    X_max = max(X)\n    X_min = min(X)\n    answerlist = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(X_min, X_max)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    newX = [(n-i)**2 for n in X]\n    print(newX)\n    total = sum(newX)\n    answerlist.append(total)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(answerlist))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02716": {
    "s789567569": {
      "code": "N = 6\nA = [1, 2, 3, 4, 5, 6]\nDP = [[0]*3 for n in range(N)] \nDP[0][0] = A[0]\nfor n in range(N):\n    DP[n][0] = DP[n-2][0] + A[n]\n    DP[n][1] = max((DP[n-2][1],DP[n-3][0]))+A[n]\n    DP[n][2] = max((DP[n-2][2],DP[n-3][1],DP[n-4][0]))+A[n]\nprint(max(DP[N-1]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        6,
        7,
        8,
        5,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "A = [1, 2, 3, 4, 5, 6]",
          "DP = [[0]*3 for n in range(N)]",
          "DP[0][0] = A[0]"
        ],
        "2": [
          "iterator -> n, Iterate Over -> range(N)"
        ],
        "3": [
          "DP[n][0] = DP[n-2][0] + A[n]",
          "DP[n][1] = max((DP[n-2][1],DP[n-3][0]))+A[n]",
          "DP[n][2] = max((DP[n-2][2],DP[n-3][1],DP[n-4][0]))+A[n]"
        ],
        "4": [
          "print(max(DP[N-1]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    A = [1, 2, 3, 4, 5, 6]\n    DP = [[0]*3 for n in range(N)]\n    DP[0][0] = A[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    DP[n][0] = DP[n-2][0] + A[n]\n    DP[n][1] = max((DP[n-2][1],DP[n-3][0]))+A[n]\n    DP[n][2] = max((DP[n-2][2],DP[n-3][1],DP[n-4][0]))+A[n]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(DP[N-1]))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s361374349": {
      "code": "n = 6\na = [1, 2, 3, 4, 5, 6]\npartial_solution = [[float('-inf') for _ in range(4)] for _ in range(len(a))]\npartial_solution[0] = [0, float('-inf'), float('-inf'), a[0]]\npartial_solution[1] = [0, float('-inf'), a[0], a[1]]\npartial_solution[2] = [max(a[:2]), a[2], float('-inf'), a[0]+a[2]]\npartial_solution[3] = [max(a[:3]), a[3], a[0]+a[2], max(a[0]+a[3], a[1]+a[3])]\nfor idx, value in enumerate(a[4:]):\n  idx = idx+4\n  if idx%2!=0:\n    partial_solution[idx][0] = max(partial_solution[idx-1][0], partial_solution[idx-1][1])\n    partial_solution[idx][1] = a[idx] + max(partial_solution[idx-2][0], partial_solution[idx-2][1])\n    partial_solution[idx][2] = max(partial_solution[idx-1][2], partial_solution[idx-1][3])\n    partial_solution[idx][3] = a[idx] + partial_solution[idx-1][0]\n  else:\n    partial_solution[idx][0] = max(partial_solution[idx-1][2], partial_solution[idx-1][3])\n    partial_solution[idx][1] = a[idx] + partial_solution[idx-1][0]\n    partial_solution[idx][2] = float('-inf')\n    partial_solution[idx][3] = a[idx] + partial_solution[idx-1][2]\nif n%2==0:\n  ans = max(partial_solution[n-1][2], partial_solution[n-1][3])\nelse:\n  ans = max(partial_solution[n-1][0], partial_solution[n-1][1])\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            10
          ]
        },
        "4": {
          "range": [
            11,
            14
          ]
        },
        "5": {
          "range": [
            16,
            19
          ]
        },
        "6": {
          "range": [
            20,
            20
          ]
        },
        "7": {
          "range": [
            21,
            21
          ]
        },
        "8": {
          "range": [
            23,
            23
          ]
        },
        "9": {
          "range": [
            24,
            24
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        16,
        17,
        18,
        19,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        8,
        20,
        21,
        24
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "6"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "6"
            },
            {
              "idx": "0"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "6"
            },
            {
              "idx": "4"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "n": "6"
            },
            {
              "idx": "4"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "6"
            },
            {
              "idx": "1"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "6"
            },
            {
              "idx": "5"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n": "6"
            },
            {
              "idx": "5"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "6"
            },
            {
              "idx": "5"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "n": "6"
            },
            {
              "idx": "5"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "ans": "12"
            },
            {
              "n": "6"
            },
            {
              "idx": "5"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "ans": "12"
            },
            {
              "n": "6"
            },
            {
              "idx": "5"
            },
            {
              "a": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "a = [1, 2, 3, 4, 5, 6]",
          "partial_solution = [[float('-inf') for _ in range(4)] for _ in range(len(a))]",
          "partial_solution[0] = [0, float('-inf'), float('-inf'), a[0]]",
          "partial_solution[1] = [0, float('-inf'), a[0], a[1]]",
          "partial_solution[2] = [max(a[:2]), a[2], float('-inf'), a[0]+a[2]]",
          "partial_solution[3] = [max(a[:3]), a[3], a[0]+a[2], max(a[0]+a[3], a[1]+a[3])]"
        ],
        "2": [
          "idx <- index\n    value <- iterator"
        ],
        "3": [
          "idx = idx+4",
          "(idx % 2 != 0)"
        ],
        "4": [
          "partial_solution[idx][0] = max(partial_solution[idx-1][0], partial_solution[idx-1][1])",
          "partial_solution[idx][1] = a[idx] + max(partial_solution[idx-2][0], partial_solution[idx-2][1])",
          "partial_solution[idx][2] = max(partial_solution[idx-1][2], partial_solution[idx-1][3])",
          "partial_solution[idx][3] = a[idx] + partial_solution[idx-1][0]"
        ],
        "5": [
          "partial_solution[idx][0] = max(partial_solution[idx-1][2], partial_solution[idx-1][3])",
          "partial_solution[idx][1] = a[idx] + partial_solution[idx-1][0]",
          "partial_solution[idx][2] = float('-inf')",
          "partial_solution[idx][3] = a[idx] + partial_solution[idx-1][2]"
        ],
        "6": [
          "(n % 2 == 0)"
        ],
        "7": [
          "ans = max(partial_solution[n-1][2], partial_solution[n-1][3])"
        ],
        "8": [
          "ans = max(partial_solution[n-1][0], partial_solution[n-1][1])"
        ],
        "9": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [1, 2, 3, 4, 5, 6]\n    partial_solution = [[float('-inf') for _ in range(4)] for _ in range(len(a))]\n    partial_solution[0] = [0, float('-inf'), float('-inf'), a[0]]\n    partial_solution[1] = [0, float('-inf'), a[0], a[1]]\n    partial_solution[2] = [max(a[:2]), a[2], float('-inf'), a[0]+a[2]]\n    partial_solution[3] = [max(a[:3]), a[3], a[0]+a[2], max(a[0]+a[3], a[1]+a[3])]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    idx <- index\n    value <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    idx = idx+4\n    (idx % 2 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    partial_solution[idx][0] = max(partial_solution[idx-1][0], partial_solution[idx-1][1])\n    partial_solution[idx][1] = a[idx] + max(partial_solution[idx-2][0], partial_solution[idx-2][1])\n    partial_solution[idx][2] = max(partial_solution[idx-1][2], partial_solution[idx-1][3])\n    partial_solution[idx][3] = a[idx] + partial_solution[idx-1][0]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    partial_solution[idx][0] = max(partial_solution[idx-1][2], partial_solution[idx-1][3])\n    partial_solution[idx][1] = a[idx] + partial_solution[idx-1][0]\n    partial_solution[idx][2] = float('-inf')\n    partial_solution[idx][3] = a[idx] + partial_solution[idx-1][2]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans = max(partial_solution[n-1][2], partial_solution[n-1][3])\nNext:\n    Go to Block: 9\n\nBlock 8:\nStatement:\n    ans = max(partial_solution[n-1][0], partial_solution[n-1][1])\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s402044561": {
      "code": "N = 6\nA = [1, 2, 3, 4, 5, 6]\nDP=[[-10**16 for i in range(N)]for j in range(3)]\nDP[1][0]=0\nDP[2][0]=0\nDP[2][1]=0\nDP[0][0]=A[0]\nDP[1][1]=A[1]\nDP[2][2]=A[2]\nfor i in range(2,N):\n    DP[0][i]=DP[0][i-2]+A[i]\n    DP[1][i]=DP[1][i-2]+A[i]\n    DP[2][i]=DP[2][i-2]+A[i]\n    if i-3>=0:\n        DP[1][i]=max(DP[1][i],DP[0][i-3]+A[i])\n        DP[2][i]=max(DP[2][i],DP[1][i-3]+A[i])\n    if i-4>=0:\n        DP[2][i]=max(DP[2][i],DP[0][i-4]+A[i])\nif N%2==0:\n    print(max(DP[0][-2],DP[1][-1]))\nelse:\n    print(max(DP[0][-3],DP[1][-2],DP[2][-1]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            9
          ]
        },
        "2": {
          "range": [
            10,
            10
          ]
        },
        "3": {
          "range": [
            11,
            14
          ]
        },
        "4": {
          "range": [
            15,
            16
          ]
        },
        "5": {
          "range": [
            17,
            17
          ]
        },
        "6": {
          "range": [
            18,
            18
          ]
        },
        "7": {
          "range": [
            19,
            19
          ]
        },
        "8": {
          "range": [
            20,
            20
          ]
        },
        "9": {
          "range": [
            22,
            22
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        10,
        19,
        20
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "6"
            },
            {
              "A": "[1, 2, 3, 4, 5, 6]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "A = [1, 2, 3, 4, 5, 6]",
          "DP=[[-10**16 for i in range(N)]for j in range(3)]",
          "DP[1][0]=0",
          "DP[2][0]=0",
          "DP[2][1]=0",
          "DP[0][0]=A[0]",
          "DP[1][1]=A[1]",
          "DP[2][2]=A[2]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(2, N)"
        ],
        "3": [
          "DP[0][i]=DP[0][i-2]+A[i]",
          "DP[1][i]=DP[1][i-2]+A[i]",
          "DP[2][i]=DP[2][i-2]+A[i]",
          "(i - 3 >= 0)"
        ],
        "4": [
          "DP[1][i]=max(DP[1][i],DP[0][i-3]+A[i])",
          "DP[2][i]=max(DP[2][i],DP[1][i-3]+A[i])"
        ],
        "5": [
          "(i - 4 >= 0)"
        ],
        "6": [
          "DP[2][i]=max(DP[2][i],DP[0][i-4]+A[i])"
        ],
        "7": [
          "(N % 2 == 0)"
        ],
        "8": [
          "print(max(DP[0][-2],DP[1][-1]))"
        ],
        "9": [
          "print(max(DP[0][-3],DP[1][-2],DP[2][-1]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    A = [1, 2, 3, 4, 5, 6]\n    DP=[[-10**16 for i in range(N)]for j in range(3)]\n    DP[1][0]=0\n    DP[2][0]=0\n    DP[2][1]=0\n    DP[0][0]=A[0]\n    DP[1][1]=A[1]\n    DP[2][2]=A[2]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    DP[0][i]=DP[0][i-2]+A[i]\n    DP[1][i]=DP[1][i-2]+A[i]\n    DP[2][i]=DP[2][i-2]+A[i]\n    (i - 3 >= 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    DP[1][i]=max(DP[1][i],DP[0][i-3]+A[i])\n    DP[2][i]=max(DP[2][i],DP[1][i-3]+A[i])\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (i - 4 >= 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    DP[2][i]=max(DP[2][i],DP[0][i-4]+A[i])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(max(DP[0][-2],DP[1][-1]))\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(max(DP[0][-3],DP[1][-2],DP[2][-1]))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02829": {
    "s548951977": {
      "code": "a = 3\nb = 1\nif a == 1:\n  if b == 2:\n    print(3)\n  else:\n    print(2)\nif a == 2:\n  if b == 1:\n    print(3)\n  else:\n    print(1)\nif a == 3:\n  if b == 1:\n    print(2)\n  else:\n    printj(1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        },
        "10": {
          "range": [
            14,
            14
          ]
        },
        "11": {
          "range": [
            15,
            15
          ]
        },
        "12": {
          "range": [
            17,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        8,
        13,
        14,
        15
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "3"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "3"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "a": "3"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "a": "3"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "a": "3"
            },
            {
              "b": "1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = 3",
          "b = 1",
          "(a == 1)"
        ],
        "2": [
          "(b == 2)"
        ],
        "3": [
          "print(3)"
        ],
        "4": [
          "print(2)"
        ],
        "5": [
          "(a == 2)"
        ],
        "6": [
          "(b == 1)"
        ],
        "7": [
          "print(3)"
        ],
        "8": [
          "print(1)"
        ],
        "9": [
          "(a == 3)"
        ],
        "10": [
          "(b == 1)"
        ],
        "11": [
          "print(2)"
        ],
        "12": [
          "printj(1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 9
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": "<END>"
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 3\n    b = 1\n    (a == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (b == 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(3)\nNext:\n    Go to Block: 5\n\nBlock 4:\nStatement:\n    print(2)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a == 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 9\n\nBlock 6:\nStatement:\n    (b == 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(3)\nNext:\n    Go to Block: 9\n\nBlock 8:\nStatement:\n    print(1)\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (a == 3)\nNext:\n    If True: Go to Block 10\n    <END>\nBlock 10:\nStatement:\n    (b == 1)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    print(2)\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    printj(1)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s644682405": {
      "code": "a = 3\nb = '1'\nprint(6 - (a+b))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "3"
            },
            {
              "b": "'1'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = 3",
          "b = '1'",
          "print(6 - (a+b))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 3\n    b = '1'\n    print(6 - (a+b))\nNext:\n    <END>\n"
    },
    "s451495331": {
      "code": "a = '3'\nb = '1'\nprint(6-a-b)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "'1'"
            },
            {
              "a": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '3'",
          "b = '1'",
          "print(6-a-b)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '3'\n    b = '1'\n    print(6-a-b)\nNext:\n    <END>\n"
    }
  },
  "p02613": {
    "s425730815": {
      "code": "N = 6\nstr_list = ['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']\ncount_ac = 0\ncount_wa = 0\ncount_tle = 0\ncount_re = 0\nfor s in str_list:\n    if s == 'AC':\n        count_ac = count_ac + 1\n    elif s == 'WA':\n        count_wa = count_wa + 1\n    elif s == 'TLE':\n        count_tle = count_tle + 1\n    elif s == 'RE':\n        coun_re == count_re + 1\nprint('AC x ' + str(count_ac))\nprint('WA x ' + str(count_wa))\nprint('TLE x ' + str(count_tle))\nprint('RE x ' + str(count_re))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        },
        "9": {
          "range": [
            14,
            14
          ]
        },
        "10": {
          "range": [
            15,
            15
          ]
        },
        "11": {
          "range": [
            16,
            19
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        7,
        8,
        10,
        12,
        13,
        7,
        8,
        9,
        7,
        8,
        9,
        7,
        8,
        10,
        11,
        7,
        8,
        10,
        12,
        13,
        7,
        16,
        17,
        18,
        19
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "count_ac": "0"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "0"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count_ac": "0"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "0"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "count_ac": "0"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "0"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "count_ac": "1"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "0"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count_ac": "1"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "0"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "count_ac": "1"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "0"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "count_ac": "1"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "0"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "count_ac": "1"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "0"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "count_ac": "1"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count_ac": "1"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "count_ac": "1"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "count_ac": "2"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count_ac": "2"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "count_ac": "2"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "0"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "1"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "1"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "1"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "1"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "1"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "1"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "1"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "2"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "1"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "2"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "count_ac": "3"
            },
            {
              "count_wa": "1"
            },
            {
              "N": "6"
            },
            {
              "count_re": "0"
            },
            {
              "count_tle": "2"
            },
            {
              "str_list": "['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 6",
          "str_list = ['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']",
          "count_ac = 0",
          "count_wa = 0",
          "count_tle = 0",
          "count_re = 0"
        ],
        "2": [
          "iterator -> s, Iterate Over -> str_list"
        ],
        "3": [
          "(s == 'AC')"
        ],
        "4": [
          "count_ac = count_ac + 1"
        ],
        "5": [
          "(s == 'WA')"
        ],
        "6": [
          "count_wa = count_wa + 1"
        ],
        "7": [
          "(s == 'TLE')"
        ],
        "8": [
          "count_tle = count_tle + 1"
        ],
        "9": [
          "(s == 'RE')"
        ],
        "10": [
          "coun_re == count_re + 1"
        ],
        "11": [
          "print('AC x ' + str(count_ac))",
          "print('WA x ' + str(count_wa))",
          "print('TLE x ' + str(count_tle))",
          "print('RE x ' + str(count_re))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 11
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 2
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    str_list = ['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']\n    count_ac = 0\n    count_wa = 0\n    count_tle = 0\n    count_re = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> str_list\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    (s == 'AC')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count_ac = count_ac + 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (s == 'WA')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    count_wa = count_wa + 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (s == 'TLE')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    count_tle = count_tle + 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (s == 'RE')\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 2\n\nBlock 10:\nStatement:\n    coun_re == count_re + 1\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    print('AC x ' + str(count_ac))\n    print('WA x ' + str(count_wa))\n    print('TLE x ' + str(count_tle))\n    print('RE x ' + str(count_re))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03352": {
    "s844353727": {
      "code": "x = 10\nfor i in range(1,x+1):\n  if (i**2)>x:\n    ans=(i-1)**2\n    break\nprint(ans)    ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "9"
            },
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "9"
            },
            {
              "x": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "x = 10"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, x + 1)"
        ],
        "3": [
          "(i ** 2 > x)"
        ],
        "4": [
          "ans=(i-1)**2"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = 10\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, x + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i ** 2 > x)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans=(i-1)**2\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s091013992": {
      "code": "x = 10\nfor i in range(1,x+1):\n  if i**2>x:\n    ans=(i-1)**2\n    break\nprint(ans)    ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        2,
        3,
        2,
        3,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ans": "9"
            },
            {
              "x": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "9"
            },
            {
              "x": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "x = 10"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, x + 1)"
        ],
        "3": [
          "(i ** 2 > x)"
        ],
        "4": [
          "ans=(i-1)**2"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = 10\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, x + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i ** 2 > x)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans=(i-1)**2\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03071": {
    "s534050876": {
      "code": "Number = [5, 3]\nNumber.sort()\nif Number[0] == Number[1]:\n    print(Number.sum())\nelse:\n    print(Number[1]*2 -1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "Number": "[3, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "Number": "[3, 5]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "Number = [5, 3]",
          "Number.sort()",
          "(Number[0] == Number[1])"
        ],
        "2": [
          "print(Number.sum())"
        ],
        "3": [
          "print(Number[1]*2 -1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    Number = [5, 3]\n    Number.sort()\n    (Number[0] == Number[1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(Number.sum())\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(Number[1]*2 -1)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s099624324": {
      "code": "btns = ['5', '3']\nX=btns[0]\nY=btns[1]\nCoins=0\nfor i in range(2):\n    if X > Y:\n        Coins+=X\n        X -= 1\n    else:\n        Coins+=Y\n        Y-=1\nprint(Coins)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            10,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "btns": "['5', '3']"
            },
            {
              "X": "'5'"
            },
            {
              "Coins": "0"
            },
            {
              "Y": "'3'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "btns": "['5', '3']"
            },
            {
              "X": "'5'"
            },
            {
              "Coins": "0"
            },
            {
              "Y": "'3'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "btns": "['5', '3']"
            },
            {
              "X": "'5'"
            },
            {
              "Coins": "0"
            },
            {
              "Y": "'3'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "btns": "['5', '3']"
            },
            {
              "X": "'5'"
            },
            {
              "Coins": "0"
            },
            {
              "Y": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "btns = ['5', '3']",
          "X=btns[0]",
          "Y=btns[1]",
          "Coins=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(2)"
        ],
        "3": [
          "(X > Y)"
        ],
        "4": [
          "Coins+=X",
          "X -= 1"
        ],
        "5": [
          "Coins+=Y",
          "Y-=1"
        ],
        "6": [
          "print(Coins)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    btns = ['5', '3']\n    X=btns[0]\n    Y=btns[1]\n    Coins=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (X > Y)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    Coins+=X\n    X -= 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    Coins+=Y\n    Y-=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(Coins)\nNext:\n    <END>\n"
    }
  },
  "p02753": {
    "s965900984": {
      "code": "s = 'ABA'\nif s[1]==s[2] and s[2]==s[3]:\n  print(\"No\")\nelse:\n  print(\"Yes\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ABA'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'ABA'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ABA'",
          "(s[1] == s[2] and s[2] == s[3])"
        ],
        "2": [
          "print(\"No\")"
        ],
        "3": [
          "print(\"Yes\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABA'\n    (s[1] == s[2] and s[2] == s[3])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s441836411": {
      "code": "S = 'ABA'\nif S[0] == S[1] == S[2] == S[3]:\n    print(\"no\")\nelse:\n    print(\"yes\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'ABA'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABA'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'ABA'",
          "(S[0] == S[1] == S[2] == S[3])"
        ],
        "2": [
          "print(\"no\")"
        ],
        "3": [
          "print(\"yes\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ABA'\n    (S[0] == S[1] == S[2] == S[3])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"no\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"yes\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s653302455": {
      "code": "S = 'ABA'\nif S[0] == S[1] and s[1] == S[2]:\n  print('No')\nelse:\n  print('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'ABA'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABA'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'ABA'",
          "(S[0] == S[1] and s[1] == S[2])"
        ],
        "2": [
          "print('No')"
        ],
        "3": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ABA'\n    (S[0] == S[1] and s[1] == S[2])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s921806927": {
      "code": "S = 'ABA'\nif S[1]==S[2] and S[2]==S[3]:\n  print('No')\nelse:\n  print('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'ABA'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'ABA'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'ABA'",
          "(S[1] == S[2] and S[2] == S[3])"
        ],
        "2": [
          "print('No')"
        ],
        "3": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ABA'\n    (S[1] == S[2] and S[2] == S[3])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s364568452": {
      "code": "s = ['ABA']\nif s in 'A' and s in 'B':\n  print('Yes')\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "['ABA']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'in <string>' requires string as left operand, not list\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = ['ABA']",
          "(s in 'A' and s in 'B')"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = ['ABA']\n    (s in 'A' and s in 'B')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    },
    "s783795016": {
      "code": "s = 'ABA'\nif s==\"AAA\" | s==\"BBB\":\n    print(\"No\")\nelse: \n    print(\"Yes\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ABA'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for |: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'ABA'",
          "(s == 'AAA' | s == 'BBB')"
        ],
        "2": [
          "print(\"No\")"
        ],
        "3": [
          "print(\"Yes\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABA'\n    (s == 'AAA' | s == 'BBB')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n"
    }
  },
  "p02859": {
    "s787317021": {
      "code": "r = 2\nreturn r * r",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "r = 2",
          "return r * r"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    return r * r\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s158223517": {
      "code": "r = '2'\nprint(r^2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ^: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "r = '2'",
          "print(r^2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    print(r^2)\nNext:\n    <END>\n"
    },
    "s044719801": {
      "code": "a = '2'\nprint(int(a * a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '2'",
          "print(int(a * a))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(int(a * a))\nNext:\n    <END>\n"
    },
    "s544327326": {
      "code": "r = '2'\nprint(r*r)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "r = '2'",
          "print(r*r)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    print(r*r)\nNext:\n    <END>\n"
    },
    "s334248196": {
      "code": "r = '2'\nprint(r**2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "r = '2'",
          "print(r**2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    print(r**2)\nNext:\n    <END>\n"
    }
  },
  "p02633": {
    "s563557816": {
      "code": "import math\nx = 90\nx=180-x\nif(x>90):\n    print(1//0)\nprint(360//math.gcd(360,x))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "x = 90",
          "x=180-x",
          "(x > 90)"
        ],
        "2": [
          "print(1//0)"
        ],
        "3": [
          "print(360//math.gcd(360,x))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    x = 90\n    x=180-x\n    (x > 90)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1//0)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    print(360//math.gcd(360,x))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03264": {
    "s555214370": {
      "code": "k = 3\nif k % 2 == 0:\n\tanswer = (k/2) * (K/2)\nelse:\n\tanswer = (k//2) * ((k//2) + 1) \nprint(int(answer))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "answer": "2"
            },
            {
              "k": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "answer": "2"
            },
            {
              "k": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "k = 3",
          "(k % 2 == 0)"
        ],
        "2": [
          "answer = (k/2) * (K/2)"
        ],
        "3": [
          "answer = (k//2) * ((k//2) + 1)"
        ],
        "4": [
          "print(int(answer))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    k = 3\n    (k % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    answer = (k/2) * (K/2)\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    answer = (k//2) * ((k//2) + 1)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(int(answer))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s179612777": {
      "code": "k = '3'\nif k%2 ==0:\n    print((k/2)*(k/2))\nelse:\n    print(((k-1)/2)*((k+1)/2))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "k = '3'",
          "(k % 2 == 0)"
        ],
        "2": [
          "print((k/2)*(k/2))"
        ],
        "3": [
          "print(((k-1)/2)*((k+1)/2))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    k = '3'\n    (k % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print((k/2)*(k/2))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(((k-1)/2)*((k+1)/2))\nNext:\n    <END>\n"
    },
    "s512580293": {
      "code": "N = 3\nif N % 2 == 0:\n  print((N/2)**2)\nelse:\n  print((N // 2)((N // 2) + 1))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "(N % 2 == 0)"
        ],
        "2": [
          "print((N/2)**2)"
        ],
        "3": [
          "print((N // 2)((N // 2) + 1))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print((N/2)**2)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print((N // 2)((N // 2) + 1))\nNext:\n    <END>\n"
    }
  },
  "p03252": {
    "s581831042": {
      "code": "aaa = 'azzel'\nbbb = 'apple'\nd = {}\nans = 'Yes'\nfor a, b in zip(aaa, bbb):\n  if a in d and d.get(a) != b:\n    print ('%s %s %s %s' % (aaa, bbb, a,b ))\n    ans = 'No'\n  d[a] = b\nvs = list(d.values())\nif max([vs.count(k) for k in vs]) >= 2:\n  ans = 'No'\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        6,
        9,
        5,
        10,
        11,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a'}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a'}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p'}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p'}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p'}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p'}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p', 'e': 'l'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p', 'e': 'l'}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p', 'e': 'l'}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p', 'e': 'l', 'l': 'e'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p', 'e': 'l', 'l': 'e'}"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p', 'e': 'l', 'l': 'e'}"
            },
            {
              "vs": "['a', 'p', 'l', 'e']"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "aaa": "'azzel'"
            },
            {
              "bbb": "'apple'"
            },
            {
              "ans": "'Yes'"
            },
            {
              "d": "{'a': 'a', 'z': 'p', 'e': 'l', 'l': 'e'}"
            },
            {
              "vs": "['a', 'p', 'l', 'e']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "aaa = 'azzel'",
          "bbb = 'apple'",
          "d = {}",
          "ans = 'Yes'"
        ],
        "2": [
          "a <- index\n    b <- iterator"
        ],
        "3": [
          "(a in d and d.get(a) != b)"
        ],
        "4": [
          "print ('%s %s %s %s' % (aaa, bbb, a,b ))",
          "ans = 'No'"
        ],
        "5": [
          "d[a] = b"
        ],
        "6": [
          "vs = list(d.values())",
          "(max([vs.count(k) for k in vs]) >= 2)"
        ],
        "7": [
          "ans = 'No'"
        ],
        "8": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    aaa = 'azzel'\n    bbb = 'apple'\n    d = {}\n    ans = 'Yes'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    a <- index\n    b <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (a in d and d.get(a) != b)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print ('%s %s %s %s' % (aaa, bbb, a,b ))\n    ans = 'No'\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    d[a] = b\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    vs = list(d.values())\n    (max([vs.count(k) for k in vs]) >= 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans = 'No'\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s845077520": {
      "code": "S = ['a', 'z', 'z', 'e', 'l']\nT = ['a', 'p', 'p', 'l', 'e']\ndic = {}\nfor i in range(len(S)):\n    if i == 0:\n        dic[S[i]] = T[i]\n        dic[T[i]] = S[i]\n        S[i] = T[i]\n    else:\n        if T[i] in S[:i]:\n            if dic[S[i]] != T[i]:\n                print('No')\n                exit()\n        else:\n            dic[S[i]] = T[i]\n            dic[T[i]] = S[i]\n            S[i] = T[i]\nprint('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            13
          ]
        },
        "8": {
          "range": [
            15,
            17
          ]
        },
        "9": {
          "range": [
            18,
            18
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        4,
        5,
        10,
        15,
        16,
        17,
        4,
        5,
        10,
        11,
        4,
        5,
        10,
        15,
        16,
        17,
        4,
        5,
        10,
        15,
        16,
        17,
        4,
        18
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'z', 'z', 'e', 'l']"
            },
            {
              "dic": "{}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'z', 'z', 'e', 'l']"
            },
            {
              "dic": "{}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'z', 'z', 'e', 'l']"
            },
            {
              "dic": "{}"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'z', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'z', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a'}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'z', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a'}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'z', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a'}"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z'}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z'}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z'}"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z'}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z'}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'e', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z'}"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'l', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z', 'e': 'l', 'l': 'e'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'l', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z', 'e': 'l', 'l': 'e'}"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'l', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z', 'e': 'l', 'l': 'e'}"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'l', 'l']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z', 'e': 'l', 'l': 'e'}"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'l', 'e']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z', 'e': 'l', 'l': 'e'}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'l', 'e']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z', 'e': 'l', 'l': 'e'}"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "T": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "S": "['a', 'p', 'z', 'l', 'e']"
            },
            {
              "dic": "{'a': 'a', 'z': 'p', 'p': 'z', 'e': 'l', 'l': 'e'}"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = ['a', 'z', 'z', 'e', 'l']",
          "T = ['a', 'p', 'p', 'l', 'e']",
          "dic = {}"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "(i == 0)"
        ],
        "4": [
          "dic[S[i]] = T[i]",
          "dic[T[i]] = S[i]",
          "S[i] = T[i]"
        ],
        "5": [
          "(T[i] in S[:i])"
        ],
        "6": [
          "(dic[S[i]] != T[i])"
        ],
        "7": [
          "print('No')",
          "exit()"
        ],
        "8": [
          "dic[S[i]] = T[i]",
          "dic[T[i]] = S[i]",
          "S[i] = T[i]"
        ],
        "9": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 9
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 8
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 2
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = ['a', 'z', 'z', 'e', 'l']\n    T = ['a', 'p', 'p', 'l', 'e']\n    dic = {}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    dic[S[i]] = T[i]\n    dic[T[i]] = S[i]\n    S[i] = T[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (T[i] in S[:i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 8\n\nBlock 6:\nStatement:\n    (dic[S[i]] != T[i])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 2\n\nBlock 7:\nStatement:\n    print('No')\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    dic[S[i]] = T[i]\n    dic[T[i]] = S[i]\n    S[i] = T[i]\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s789742924": {
      "code": "S = 'azzel'\nT = 'apple'\nf = [-1 for _ in range(130)]\ng = [-1 for _ in range(130)]\nans = \"Yes\"\nfor i in len(S):\n  s = ord(S[i])\n  t = ord(T[i])\n  if f[s] == -1:\n    f[s] = t\n  else:\n    if f[s] != t:\n      ans = \"No\"\n  if g[t] == -1:\n    g[t] = s\n  else:\n    if g[t] != s:\n      ans = \"No\"\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        },
        "9": {
          "range": [
            17,
            17
          ]
        },
        "10": {
          "range": [
            18,
            18
          ]
        },
        "11": {
          "range": [
            19,
            19
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'azzel'"
            },
            {
              "T": "'apple'"
            },
            {
              "f
            },
            {
              "ans": "'Yes'"
            },
            {
              "g
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'azzel'"
            },
            {
              "T": "'apple'"
            },
            {
              "f
            },
            {
              "ans": "'Yes'"
            },
            {
              "g
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'azzel'",
          "T = 'apple'",
          "f = [-1 for _ in range(130)]",
          "g = [-1 for _ in range(130)]",
          "ans = \"Yes\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> len(S)"
        ],
        "3": [
          "s = ord(S[i])",
          "t = ord(T[i])",
          "(f[s] == -1)"
        ],
        "4": [
          "f[s] = t"
        ],
        "5": [
          "(f[s] != t)"
        ],
        "6": [
          "ans = \"No\""
        ],
        "7": [
          "(g[t] == -1)"
        ],
        "8": [
          "g[t] = s"
        ],
        "9": [
          "(g[t] != s)"
        ],
        "10": [
          "ans = \"No\""
        ],
        "11": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 11
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 2
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'azzel'\n    T = 'apple'\n    f = [-1 for _ in range(130)]\n    g = [-1 for _ in range(130)]\n    ans = \"Yes\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(S)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    s = ord(S[i])\n    t = ord(T[i])\n    (f[s] == -1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    f[s] = t\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (f[s] != t)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans = \"No\"\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (g[t] == -1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    g[t] = s\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (g[t] != s)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 2\n\nBlock 10:\nStatement:\n    ans = \"No\"\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03211": {
    "s842898958": {
      "code": "S = '1234567876'\ndiff = 999\nfor i in range(0,8):\n    n = int(S[i:i+3])\n    if diff > abs(753-n):\n        diff = abs(753-n)\nprint(diff)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        3,
        4,
        5,
        6,
        3,
        4,
        5,
        6,
        3,
        4,
        5,
        6,
        3,
        4,
        5,
        6,
        3,
        4,
        5,
        6,
        3,
        4,
        5,
        6,
        3,
        4,
        5,
        3,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "diff": "999"
            },
            {
              "S": "'1234567876'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "999"
            },
            {
              "S": "'1234567876'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "diff": "999"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "123"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "diff": "630"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "123"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "630"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "123"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "diff": "630"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "234"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "diff": "519"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "234"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "519"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "234"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "diff": "519"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "345"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "diff": "408"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "345"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "408"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "345"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "diff": "408"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "456"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "diff": "297"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "456"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "297"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "456"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "diff": "297"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "567"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "diff": "186"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "567"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "186"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "567"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "diff": "186"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "678"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "diff": "75"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "678"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "75"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "678"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "diff": "75"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "787"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "diff": "34"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "787"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "34"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "787"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "diff": "34"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "876"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "diff": "34"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "876"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "diff": "34"
            },
            {
              "S": "'1234567876'"
            },
            {
              "n": "876"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = '1234567876'",
          "diff = 999"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, 8)"
        ],
        "3": [
          "n = int(S[i:i+3])",
          "(diff > abs(753 - n))"
        ],
        "4": [
          "diff = abs(753-n)"
        ],
        "5": [
          "print(diff)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '1234567876'\n    diff = 999\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, 8)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    n = int(S[i:i+3])\n    (diff > abs(753 - n))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    diff = abs(753-n)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(diff)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s804954957": {
      "code": "s = '1234567876'",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        }
      },
      "ground_truth_execution_order": [
        1
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1234567876'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '1234567876'"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1234567876'\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s752401145": {
      "code": "S = '1234567876'\nans = 111111111\nfor i in range(2,9):\n    temp = abs(753 - (100 * int(S[i - 2]) + 10 * int(S[i - 1]) + int(S[i])))\n    ans = min(ans, temp)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        4,
        5,
        3,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "111111111"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "111111111"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "630"
            },
            {
              "temp": "630"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "630"
            },
            {
              "temp": "630"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "519"
            },
            {
              "temp": "519"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "519"
            },
            {
              "temp": "519"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "408"
            },
            {
              "temp": "408"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "408"
            },
            {
              "temp": "408"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "297"
            },
            {
              "temp": "297"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "297"
            },
            {
              "temp": "297"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "186"
            },
            {
              "temp": "186"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "186"
            },
            {
              "temp": "186"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "75"
            },
            {
              "temp": "75"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "75"
            },
            {
              "temp": "75"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "34"
            },
            {
              "temp": "34"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "34"
            },
            {
              "temp": "34"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "S": "'1234567876'"
            },
            {
              "ans": "34"
            },
            {
              "temp": "34"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = '1234567876'",
          "ans = 111111111"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(2, 9)"
        ],
        "3": [
          "temp = abs(753 - (100 * int(S[i - 2]) + 10 * int(S[i - 1]) + int(S[i])))",
          "ans = min(ans, temp)"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '1234567876'\n    ans = 111111111\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, 9)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    temp = abs(753 - (100 * int(S[i - 2]) + 10 * int(S[i - 1]) + int(S[i])))\n    ans = min(ans, temp)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s916410505": {
      "code": "s = '1234567876'\na = []\nfor i in range(len(str(s))-2):\n  a.extend(abs(s[i]*100+s[i+1]*10+s[i+2]-753))\nprint(min(a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1234567876'"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1234567876'"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1234567876'"
            },
            {
              "a": "[]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '1234567876'",
          "a = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(str(s)) - 2)"
        ],
        "3": [
          "a.extend(abs(s[i]*100+s[i+1]*10+s[i+2]-753))"
        ],
        "4": [
          "print(min(a))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1234567876'\n    a = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(str(s)) - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a.extend(abs(s[i]*100+s[i+1]*10+s[i+2]-753))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(a))\nNext:\n    <END>\n"
    },
    "s708948944": {
      "code": "s = '1234567876'\na = []\nfor i in range(len(s)-2):\n  a.append(abs(s[i]*100+s[i+1]*10+s[i+2]-753))\nprint(min(a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'1234567876'"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1234567876'"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1234567876'"
            },
            {
              "a": "[]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '1234567876'",
          "a = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(s) - 2)"
        ],
        "3": [
          "a.append(abs(s[i]*100+s[i+1]*10+s[i+2]-753))"
        ],
        "4": [
          "print(min(a))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '1234567876'\n    a = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s) - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a.append(abs(s[i]*100+s[i+1]*10+s[i+2]-753))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(a))\nNext:\n    <END>\n"
    }
  },
  "p03337": {
    "s746180927": {
      "code": "num = ['3', '1']\na, b =int(num[0]), int(num[1])\nans = sorted([a+b, a-b, a*b , a//b])\nprint(ans[-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "num": "['3', '1']"
            },
            {
              "a": "3"
            },
            {
              "ans": "[2, 3, 3, 4]"
            },
            {
              "b": "1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "num = ['3', '1']",
          "a, b =int(num[0]), int(num[1])",
          "ans = sorted([a+b, a-b, a*b , a//b])",
          "print(ans[-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    num = ['3', '1']\n    a, b =int(num[0]), int(num[1])\n    ans = sorted([a+b, a-b, a*b , a//b])\n    print(ans[-1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s863754581": {
      "code": "li = [3, 1]\nans = [li[0]+li[1],li[0]-li[1],li[1]-li[0],li[0]*li[1]].sort()\nprint(ans[3])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "None"
            },
            {
              "li": "[3, 1]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "li = [3, 1]",
          "ans = [li[0]+li[1],li[0]-li[1],li[1]-li[0],li[0]*li[1]].sort()",
          "print(ans[3])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    li = [3, 1]\n    ans = [li[0]+li[1],li[0]-li[1],li[1]-li[0],li[0]*li[1]].sort()\n    print(ans[3])\nNext:\n    <END>\n"
    }
  },
  "p03291": {
    "s904265993": {
      "code": "a = 0\nab = 0\nabc = 0\nr = 1\ns = 'A??C'\nfor c in s:\n    if c == \"A\":\n        a += r\n    elif c == \"B\":\n        ab += a\n    elif c == \"C\":\n        abc += ab\n    else:\n        abc = abc * 3 + ab\n        ab = ab * 3 + a\n        a = a * 3 + r\n        r *= 3\nprint(abc % 1_000_000_007)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            14,
            17
          ]
        },
        "10": {
          "range": [
            18,
            18
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        6,
        7,
        9,
        11,
        14,
        15,
        16,
        17,
        6,
        7,
        9,
        11,
        14,
        15,
        16,
        17,
        6,
        7,
        9,
        11,
        12,
        6,
        18
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "1"
            },
            {
              "ab": "0"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "1"
            },
            {
              "ab": "0"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "r": "1"
            },
            {
              "ab": "0"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "r": "1"
            },
            {
              "ab": "0"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "1"
            },
            {
              "ab": "0"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "r": "1"
            },
            {
              "ab": "0"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "r": "1"
            },
            {
              "ab": "0"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "r": "1"
            },
            {
              "ab": "0"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "1"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "r": "3"
            },
            {
              "ab": "1"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "3"
            },
            {
              "ab": "1"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "r": "3"
            },
            {
              "ab": "1"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "r": "3"
            },
            {
              "ab": "1"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "4"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "r": "3"
            },
            {
              "ab": "1"
            },
            {
              "abc": "0"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "4"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "r": "9"
            },
            {
              "ab": "7"
            },
            {
              "abc": "1"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "15"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "9"
            },
            {
              "ab": "7"
            },
            {
              "abc": "1"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "15"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "r": "9"
            },
            {
              "ab": "7"
            },
            {
              "abc": "1"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "15"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "r": "9"
            },
            {
              "ab": "7"
            },
            {
              "abc": "1"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "15"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "r": "9"
            },
            {
              "ab": "7"
            },
            {
              "abc": "1"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "15"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "r": "9"
            },
            {
              "ab": "7"
            },
            {
              "abc": "8"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "15"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "9"
            },
            {
              "ab": "7"
            },
            {
              "abc": "8"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "15"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "r": "9"
            },
            {
              "ab": "7"
            },
            {
              "abc": "8"
            },
            {
              "s": "'A??C'"
            },
            {
              "a": "15"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = 0",
          "ab = 0",
          "abc = 0",
          "r = 1",
          "s = 'A??C'"
        ],
        "2": [
          "iterator -> c, Iterate Over -> s"
        ],
        "3": [
          "(c == 'A')"
        ],
        "4": [
          "a += r"
        ],
        "5": [
          "(c == 'B')"
        ],
        "6": [
          "ab += a"
        ],
        "7": [
          "(c == 'C')"
        ],
        "8": [
          "abc += ab"
        ],
        "9": [
          "abc = abc * 3 + ab",
          "ab = ab * 3 + a",
          "a = a * 3 + r",
          "r *= 3"
        ],
        "10": [
          "print(abc % 1_000_000_007)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 0\n    ab = 0\n    abc = 0\n    r = 1\n    s = 'A??C'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> c, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (c == 'A')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a += r\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (c == 'B')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ab += a\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (c == 'C')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    abc += ab\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    abc = abc * 3 + ab\n    ab = ab * 3 + a\n    a = a * 3 + r\n    r *= 3\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(abc % 1_000_000_007)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02687": {
    "s788459277": {
      "code": "s = 'ABC'\nif (s=='ABC'):\n  print('ARC')\nelse:\n  prin('ABC')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ABC'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ABC'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ABC'",
          "(s == 'ABC')"
        ],
        "2": [
          "print('ARC')"
        ],
        "3": [
          "prin('ABC')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABC'\n    (s == 'ABC')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('ARC')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    prin('ABC')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s140940441": {
      "code": "s = 'ABC'\nif s == 'ABC':\n  print('ARC')\nelse:\n  pritn('ABC')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ABC'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ABC'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'ABC'",
          "(s == 'ABC')"
        ],
        "2": [
          "print('ARC')"
        ],
        "3": [
          "pritn('ABC')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABC'\n    (s == 'ABC')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('ARC')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    pritn('ABC')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s768314304": {
      "code": "s = 'ABC'\nif s[1]=='B':\n  s[1]='R'\nelse:\n  s[1]='B'\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'ABC'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'ABC'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'ABC'",
          "(s[1] == 'B')"
        ],
        "2": [
          "s[1]='R'"
        ],
        "3": [
          "s[1]='B'"
        ],
        "4": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABC'\n    (s[1] == 'B')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    s[1]='R'\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    s[1]='B'\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(s)\nNext:\n    <END>\n"
    }
  },
  "p03385": {
    "s080307003": {
      "code": "S = 'bac'\nprint(S[0])\nif len(set((S[0], S[1], S[2]))) == 3:\n    print(\"Yes\")\nelse:\n    pritn(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'bac'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'bac'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'bac'",
          "print(S[0])",
          "(len(set((S[0], S[1], S[2]))) == 3)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "pritn(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'bac'\n    print(S[0])\n    (len(set((S[0], S[1], S[2]))) == 3)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    pritn(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s342603390": {
      "code": "import re\nS = 'bac'\nfind_a= re.findall(\"a\")\nfind_b = re.findall(\"b\")\nfind_c = re.findall(\"c\")\nif find_a and find_b and find_c:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"findall() missing 1 required positional argument: 'string'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import re",
          "S = 'bac'",
          "find_a= re.findall(\"a\")",
          "find_b = re.findall(\"b\")",
          "find_c = re.findall(\"c\")",
          "(find_a and find_b and find_c)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import re\n    S = 'bac'\n    find_a= re.findall(\"a\")\n    find_b = re.findall(\"b\")\n    find_c = re.findall(\"c\")\n    (find_a and find_b and find_c)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p03147": {
    "s385249229": {
      "code": "import numpy as np\nn = 4\nh = [1, 2, 2, 1]\nh = np.array(h)\nh_zero = np.hstack([np.zeros(1), h, np.zeros(1)])\nd = np.diff(h_zero)\na= (d[:-1] * d[1:]) < 0\nh_a = h[a == True]\ns = 0\nfor k in range(len(h_a)):\n    if k%2 == 0:\n        if k == 0:\n            s += h_a[k] - h_a[k+1]\n        elif k == len(h_a)-1:\n            s += h_a[k] - h_a[k-1] \n        else:\n            s += h_a[k] - np.max([h_a[k-1], h_a[k+1]])\n    else:\n        s += h_a[k]\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            9
          ]
        },
        "2": {
          "range": [
            10,
            10
          ]
        },
        "3": {
          "range": [
            11,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        },
        "6": {
          "range": [
            14,
            14
          ]
        },
        "7": {
          "range": [
            15,
            15
          ]
        },
        "8": {
          "range": [
            17,
            17
          ]
        },
        "9": {
          "range": [
            19,
            19
          ]
        },
        "10": {
          "range": [
            20,
            20
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        20
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 10,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "n = 4",
          "h = [1, 2, 2, 1]",
          "h = np.array(h)",
          "h_zero = np.hstack([np.zeros(1), h, np.zeros(1)])",
          "d = np.diff(h_zero)",
          "a= (d[:-1] * d[1:]) < 0",
          "h_a = h[a == True]",
          "s = 0"
        ],
        "2": [
          "iterator -> k, Iterate Over -> range(len(h_a))"
        ],
        "3": [
          "(k % 2 == 0)"
        ],
        "4": [
          "(k == 0)"
        ],
        "5": [
          "s += h_a[k] - h_a[k+1]"
        ],
        "6": [
          "(k == len(h_a) - 1)"
        ],
        "7": [
          "s += h_a[k] - h_a[k-1]"
        ],
        "8": [
          "s += h_a[k] - np.max([h_a[k-1], h_a[k+1]])"
        ],
        "9": [
          "s += h_a[k]"
        ],
        "10": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 9
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    n = 4\n    h = [1, 2, 2, 1]\n    h = np.array(h)\n    h_zero = np.hstack([np.zeros(1), h, np.zeros(1)])\n    d = np.diff(h_zero)\n    a= (d[:-1] * d[1:]) < 0\n    h_a = h[a == True]\n    s = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(len(h_a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (k % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 9\n\nBlock 4:\nStatement:\n    (k == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    s += h_a[k] - h_a[k+1]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (k == len(h_a) - 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    s += h_a[k] - h_a[k-1]\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    s += h_a[k] - np.max([h_a[k-1], h_a[k+1]])\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    s += h_a[k]\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(s)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02947": {
    "s701298379": {
      "code": "from scipy.special import comb\nn = 3\ns = ['abbemnoptu', 'acinnorstt', 'acinnorstt']\nans = 0\ntmp = 1\nfor i in range(1, n):\n    if s[i] == s[i - 1]:\n        tmp += 1\n    else:\n        ans += comb(tmp, 2, exact = True)\n        tmp = 1\nans += comb(tmp, 2, exact = True)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            11
          ]
        },
        "6": {
          "range": [
            12,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        6,
        7,
        8,
        6,
        12,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from scipy.special import comb",
          "n = 3",
          "s = ['abbemnoptu', 'acinnorstt', 'acinnorstt']",
          "ans = 0",
          "tmp = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "(s[i] == s[i - 1])"
        ],
        "4": [
          "tmp += 1"
        ],
        "5": [
          "ans += comb(tmp, 2, exact = True)",
          "tmp = 1"
        ],
        "6": [
          "ans += comb(tmp, 2, exact = True)",
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from scipy.special import comb\n    n = 3\n    s = ['abbemnoptu', 'acinnorstt', 'acinnorstt']\n    ans = 0\n    tmp = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] == s[i - 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    tmp += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans += comb(tmp, 2, exact = True)\n    tmp = 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    ans += comb(tmp, 2, exact = True)\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s940582341": {
      "code": "import collections\nfrom scipy.special import comb\nN = 3\nstring_list = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\nans = 0\nc = collections.Counter(string_list)\nfor v in c.values():\n    ans += comb(v, 2, exact=True)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        7,
        8,
        7,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "string_list": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
            },
            {
              "ans": "1"
            },
            {
              "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "string_list": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
            },
            {
              "ans": "1"
            },
            {
              "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "string_list": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
            },
            {
              "ans": "1"
            },
            {
              "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
            }
          ]
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import collections",
          "from scipy.special import comb",
          "N = 3",
          "string_list = ['acinnorstt', 'abbemnoptu', 'acinnorstt']",
          "ans = 0",
          "c = collections.Counter(string_list)"
        ],
        "2": [
          "iterator -> v, Iterate Over -> c.values()"
        ],
        "3": [
          "ans += comb(v, 2, exact=True)"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import collections\n    from scipy.special import comb\n    N = 3\n    string_list = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\n    ans = 0\n    c = collections.Counter(string_list)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> c.values()\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += comb(v, 2, exact=True)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s688858487": {
      "code": "import math\nn = 3\ns = ['acornistnt', 'peanutbomb', 'constraint']\ns = [''.join(sorted(i)) for i in s]\nc = [math.factorial(s.count(i)) for i in set(s) if s.count(i) != 1]\nprint(sum(c)/2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 3",
          "s = ['acornistnt', 'peanutbomb', 'constraint']",
          "s = [''.join(sorted(i)) for i in s]",
          "c = [math.factorial(s.count(i)) for i in set(s) if s.count(i) != 1]",
          "print(sum(c)/2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 3\n    s = ['acornistnt', 'peanutbomb', 'constraint']\n    s = [''.join(sorted(i)) for i in s]\n    c = [math.factorial(s.count(i)) for i in set(s) if s.count(i) != 1]\n    print(sum(c)/2)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s251556349": {
      "code": "n = 3\ns = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\nans=0\ndict={}\nfor i in s:\n    if i in dict:\n        ans+=dict[s]\n        dict[s]+=1\n    else:\n        dict[s]=1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "0"
            },
            {
              "dict": "{}"
            },
            {
              "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "dict": "{}"
            },
            {
              "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "dict": "{}"
            },
            {
              "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "0"
            },
            {
              "dict": "{}"
            },
            {
              "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
            },
            {
              "n": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unhashable type: 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "s = ['acinnorstt', 'abbemnoptu', 'acinnorstt']",
          "ans=0",
          "dict={}"
        ],
        "2": [
          "iterator -> i, Iterate Over -> s"
        ],
        "3": [
          "(i in dict)"
        ],
        "4": [
          "ans+=dict[s]",
          "dict[s]+=1"
        ],
        "5": [
          "dict[s]=1"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    s = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\n    ans=0\n    dict={}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i in dict)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans+=dict[s]\n    dict[s]+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    dict[s]=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s879099582": {
      "code": "from collections import Counter\nn = 3\nstring_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]\nstring_set=set(string_list)\ncnt=0\nfor s in string_set:\n  n=string_list.count(s)\n  cnt+=int(n*(n-1)/2)\nprint(cnt)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unhashable type: 'Counter'\")"
      },
      "cfg_block_statements": {
        "1": [
          "from collections import Counter",
          "n = 3",
          "string_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]",
          "string_set=set(string_list)",
          "cnt=0"
        ],
        "2": [
          "iterator -> s, Iterate Over -> string_set"
        ],
        "3": [
          "n=string_list.count(s)",
          "cnt+=int(n*(n-1)/2)"
        ],
        "4": [
          "print(cnt)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from collections import Counter\n    n = 3\n    string_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]\n    string_set=set(string_list)\n    cnt=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> string_set\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n=string_list.count(s)\n    cnt+=int(n*(n-1)/2)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
    }
  },
  "p02880": {
    "s795776916": {
      "code": "N = 10\nfor i in range(2, N):\n    if N%i == 0:\n        a = i\n        b = N//i\n        if a <= 9 and b <= 9:\n            break\nif N <= 2:\n    print(\"Yes\")\nelif a <= 9 and b <= 9:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "10"
            },
            {
              "a": "2"
            },
            {
              "b": "5"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "10"
            },
            {
              "a": "2"
            },
            {
              "b": "5"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "N": "10"
            },
            {
              "a": "2"
            },
            {
              "b": "5"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "N": "10"
            },
            {
              "a": "2"
            },
            {
              "b": "5"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 10"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(2, N)"
        ],
        "3": [
          "(N % i == 0)"
        ],
        "4": [
          "a = i",
          "b = N//i",
          "(a <= 9 and b <= 9)"
        ],
        "5": [
          "(N <= 2)"
        ],
        "6": [
          "print(\"Yes\")"
        ],
        "7": [
          "(a <= 9 and b <= 9)"
        ],
        "8": [
          "print(\"Yes\")"
        ],
        "9": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a = i\n    b = N//i\n    (a <= 9 and b <= 9)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    (N <= 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (a <= 9 and b <= 9)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s420840103": {
      "code": "n = 10\ns = [2,3,4,5,6,7,8,9]\nfrag = False\nfor i in s:\n    if n % i == 0:\n        print(\"Yes\")\n        flag = True\n        break\nif not flag:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "frag": "False"
            },
            {
              "s": "[2, 3, 4, 5, 6, 7, 8, 9]"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "frag": "False"
            },
            {
              "s": "[2, 3, 4, 5, 6, 7, 8, 9]"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "frag": "False"
            },
            {
              "s": "[2, 3, 4, 5, 6, 7, 8, 9]"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "frag": "False"
            },
            {
              "s": "[2, 3, 4, 5, 6, 7, 8, 9]"
            },
            {
              "flag": "True"
            },
            {
              "n": "10"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "frag": "False"
            },
            {
              "s": "[2, 3, 4, 5, 6, 7, 8, 9]"
            },
            {
              "flag": "True"
            },
            {
              "n": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "s = [2,3,4,5,6,7,8,9]",
          "frag = False"
        ],
        "2": [
          "iterator -> i, Iterate Over -> s"
        ],
        "3": [
          "(n % i == 0)"
        ],
        "4": [
          "print(\"Yes\")",
          "flag = True"
        ],
        "5": [
          "(not flag)"
        ],
        "6": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": "<END>"
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = [2,3,4,5,6,7,8,9]\n    frag = False\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"Yes\")\n    flag = True\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (not flag)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s941450875": {
      "code": "a = 10\nif a>81:\n  print(\"No\")\nelse:\n  c = 1\n  for i in range(7):\n    b = a/(9-i)\n    if b.is_integer()==True and b<10:\n      c = 0\n    else:\n      c = c*1\nif c==0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        },
        "10": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5,
        6,
        7,
        8,
        11,
        6,
        7,
        8,
        11,
        6,
        7,
        8,
        11,
        6,
        7,
        8,
        11,
        6,
        7,
        8,
        9,
        6,
        7,
        8,
        11,
        6,
        7,
        8,
        11,
        6,
        12,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.1111111111111112"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.1111111111111112"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.1111111111111112"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.25"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.25"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.25"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.4285714285714286"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.4285714285714286"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.4285714285714286"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.6666666666666667"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.6666666666666667"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "1.6666666666666667"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "1"
            },
            {
              "b": "2.0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "2.0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "2.0"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "2.5"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "2.5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "2.5"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "3.3333333333333335"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "3.3333333333333335"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "3.3333333333333335"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "3.3333333333333335"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "a": "10"
            },
            {
              "c": "0"
            },
            {
              "b": "3.3333333333333335"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = 10",
          "(a > 81)"
        ],
        "2": [
          "print(\"No\")"
        ],
        "3": [
          "c = 1"
        ],
        "4": [
          "iterator -> i, Iterate Over -> range(7)"
        ],
        "5": [
          "b = a/(9-i)",
          "(b.is_integer() == True and b < 10)"
        ],
        "6": [
          "c = 0"
        ],
        "7": [
          "c = c*1"
        ],
        "8": [
          "(c == 0)"
        ],
        "9": [
          "print(\"Yes\")"
        ],
        "10": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 10\n    (a > 81)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    Go to Block: 8\n\nBlock 3:\nStatement:\n    c = 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(7)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    b = a/(9-i)\n    (b.is_integer() == True and b < 10)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    c = 0\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    c = c*1\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    (c == 0)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s247945080": {
      "code": "n = 10\nans = 0\nfor s, t in range(8):\n  if n == s*t:\n    ans += 1\nif ans == 0:\n  print('No')\nelse:\n  print('Yes')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "10"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "10"
            },
            {
              "ans": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('cannot unpack non-iterable int object')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "ans = 0"
        ],
        "2": [
          "s <- index\n    t <- iterator"
        ],
        "3": [
          "(n == s * t)"
        ],
        "4": [
          "ans += 1"
        ],
        "5": [
          "(ans == 0)"
        ],
        "6": [
          "print('No')"
        ],
        "7": [
          "print('Yes')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    s <- index\n    t <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n == s * t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (ans == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n"
    }
  },
  "p03011": {
    "s410345666": {
      "code": "A = [1, 3, 4]\nA = sorted(A)\nreturn sum(A[:2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "A": "[1, 3, 4]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "A = [1, 3, 4]",
          "A = sorted(A)",
          "return sum(A[:2])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    A = [1, 3, 4]\n    A = sorted(A)\n    return sum(A[:2])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s381497584": {
      "code": "l = ['1', '3', '4']\ns_l = l.sort()\nprint(s_l[0] + s_l[1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "['1', '3', '4']"
            },
            {
              "s_l": "None"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "l = ['1', '3', '4']",
          "s_l = l.sort()",
          "print(s_l[0] + s_l[1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    l = ['1', '3', '4']\n    s_l = l.sort()\n    print(s_l[0] + s_l[1])\nNext:\n    <END>\n"
    }
  },
  "p03524": {
    "s677302401": {
      "code": "S = 'abac'\na = S.count(\"a\")\nb = S.count(\"b\")\nc = S.count(\"c\")\nif abs(a-b) <= 1 and abs(a-c) <= 1 and abs(b-c) <= 1:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'abac'"
            },
            {
              "a": "2"
            },
            {
              "c": "1"
            },
            {
              "b": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'abac'"
            },
            {
              "a": "2"
            },
            {
              "c": "1"
            },
            {
              "b": "1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "S = 'abac'",
          "a = S.count(\"a\")",
          "b = S.count(\"b\")",
          "c = S.count(\"c\")",
          "(abs(a - b) <= 1 and abs(a - c) <= 1 and (abs(b - c) <= 1))"
        ],
        "2": [
          "print(\"YES\")"
        ],
        "3": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'abac'\n    a = S.count(\"a\")\n    b = S.count(\"b\")\n    c = S.count(\"c\")\n    (abs(a - b) <= 1 and abs(a - c) <= 1 and (abs(b - c) <= 1))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s121643215": {
      "code": "from collections import Counter\nS = 'abac'\nCS = Counter(S)\nV = list(CS.values())\nans = 'YES'\nif V.count(0) == 2:\n  ans = 'NO'\nelif V.count(0) <= 1:\n  if V[0] >= 2*V[1]:\n    ans = 'NO'\nelse:\n  if V[0] >= 2*V[1] and V[0] >= 6*V[2]:\n    ans = 'NO'\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        },
        "8": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        9,
        10,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 8,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from collections import Counter",
          "S = 'abac'",
          "CS = Counter(S)",
          "V = list(CS.values())",
          "ans = 'YES'",
          "(V.count(0) == 2)"
        ],
        "2": [
          "ans = 'NO'"
        ],
        "3": [
          "(V.count(0) <= 1)"
        ],
        "4": [
          "(V[0] >= 2 * V[1])"
        ],
        "5": [
          "ans = 'NO'"
        ],
        "6": [
          "(V[0] >= 2 * V[1] and V[0] >= 6 * V[2])"
        ],
        "7": [
          "ans = 'NO'"
        ],
        "8": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 6
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 8
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from collections import Counter\n    S = 'abac'\n    CS = Counter(S)\n    V = list(CS.values())\n    ans = 'YES'\n    (V.count(0) == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = 'NO'\nNext:\n    Go to Block: 8\n\nBlock 3:\nStatement:\n    (V.count(0) <= 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (V[0] >= 2 * V[1])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    ans = 'NO'\nNext:\n    Go to Block: 8\n\nBlock 6:\nStatement:\n    (V[0] >= 2 * V[1] and V[0] >= 6 * V[2])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans = 'NO'\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03229": {
    "s376794746": {
      "code": "N = 5\nA = [6, 8, 1, 2, 3]\nA.sort()\nif N % 2 == 0:\n    print((sum(A[N//2:N]) - sum(A[:N//2]))*2 - (A[N//2+1] - A[N//2]))\nelse:\n    print((sum(A[N//2+1:N]) - sum(A[:N//2]))*2 - min(A[N//2+1] - A[N//2], A[N//2] - A[N//2-1]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 2, 3, 6, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "A": "[1, 2, 3, 6, 8]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [6, 8, 1, 2, 3]",
          "A.sort()",
          "(N % 2 == 0)"
        ],
        "2": [
          "print((sum(A[N//2:N]) - sum(A[:N//2]))*2 - (A[N//2+1] - A[N//2]))"
        ],
        "3": [
          "print((sum(A[N//2+1:N]) - sum(A[:N//2]))*2 - min(A[N//2+1] - A[N//2], A[N//2] - A[N//2-1]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [6, 8, 1, 2, 3]\n    A.sort()\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print((sum(A[N//2:N]) - sum(A[:N//2]))*2 - (A[N//2+1] - A[N//2]))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print((sum(A[N//2+1:N]) - sum(A[:N//2]))*2 - min(A[N//2+1] - A[N//2], A[N//2] - A[N//2-1]))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s957592910": {
      "code": "n = 5\nA = [6, 8, 1, 2, 3]\nA.sort()\nif n%2==1:\n    ans1 = 2*sum(A[n//2+2:]) + sum(A[2:n//2+2]) -2*sum(A[:2])\n    ans2 = 2*sum(A[n//2+1:]) - sum(A[n//2-1:n//2+1]) -2*sum(A[:n//2-1])\n    print(max(ans1,ans2))\nelse:\n    print(-2*sum(A[:(n-2)/2])-A[(n-2)/2]+A[(n-2)/2+1]+2*sum(A[(n-2)/2+2:]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            7
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "A": "[1, 2, 3, 6, 8]"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans2": "21"
            },
            {
              "A": "[1, 2, 3, 6, 8]"
            },
            {
              "ans1": "19"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "A = [6, 8, 1, 2, 3]",
          "A.sort()",
          "(n % 2 == 1)"
        ],
        "2": [
          "ans1 = 2*sum(A[n//2+2:]) + sum(A[2:n//2+2]) -2*sum(A[:2])",
          "ans2 = 2*sum(A[n//2+1:]) - sum(A[n//2-1:n//2+1]) -2*sum(A[:n//2-1])",
          "print(max(ans1,ans2))"
        ],
        "3": [
          "print(-2*sum(A[:(n-2)/2])-A[(n-2)/2]+A[(n-2)/2+1]+2*sum(A[(n-2)/2+2:]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    A = [6, 8, 1, 2, 3]\n    A.sort()\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans1 = 2*sum(A[n//2+2:]) + sum(A[2:n//2+2]) -2*sum(A[:2])\n    ans2 = 2*sum(A[n//2+1:]) - sum(A[n//2-1:n//2+1]) -2*sum(A[:n//2-1])\n    print(max(ans1,ans2))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(-2*sum(A[:(n-2)/2])-A[(n-2)/2]+A[(n-2)/2+1]+2*sum(A[(n-2)/2+2:]))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02393": {
    "s299088576": {
      "code": "data = [1, 3, 8]\ns=\"\"\nfor x in data:\n\ts+=(str(x)+\" \")\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "''"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "''"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1 '"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1 '"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1 3 '"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1 3 '"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'1 3 8 '"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'1 3 8 '"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'1 3 8 '"
            },
            {
              "data": "[1, 3, 8]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "data = [1, 3, 8]",
          "s=\"\""
        ],
        "2": [
          "iterator -> x, Iterate Over -> data"
        ],
        "3": [
          "s+=(str(x)+\" \")"
        ],
        "4": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    data = [1, 3, 8]\n    s=\"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> data\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s+=(str(x)+\" \")\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(s)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s429159591": {
      "code": "inp = [3, 8, 1]\nl=inp.sort()\nprint(l[0],l[1],l[2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "None"
            },
            {
              "inp": "[1, 3, 8]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "inp = [3, 8, 1]",
          "l=inp.sort()",
          "print(l[0],l[1],l[2])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    inp = [3, 8, 1]\n    l=inp.sort()\n    print(l[0],l[1],l[2])\nNext:\n    <END>\n"
    },
    "s925834274": {
      "code": "z = '3 8 1'\nl = z.split()\nl.sort()\nprint(\"%s %s %s\" % l[0],l[1],l[2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "z": "'3 8 1'"
            },
            {
              "l": "['1', '3', '8']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not enough arguments for format string')"
      },
      "cfg_block_statements": {
        "1": [
          "z = '3 8 1'",
          "l = z.split()",
          "l.sort()",
          "print(\"%s %s %s\" % l[0],l[1],l[2])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    z = '3 8 1'\n    l = z.split()\n    l.sort()\n    print(\"%s %s %s\" % l[0],l[1],l[2])\nNext:\n    <END>\n"
    },
    "s157478426": {
      "code": "x = ['3', '8', '1']\ni = list(map(int(x)))\na = i[0]\nb = i[1]\nc = i[2]\nprint('{} {} {}'.format(c,b,a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "['3', '8', '1']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = ['3', '8', '1']",
          "i = list(map(int(x)))",
          "a = i[0]",
          "b = i[1]",
          "c = i[2]",
          "print('{} {} {}'.format(c,b,a))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = ['3', '8', '1']\n    i = list(map(int(x)))\n    a = i[0]\n    b = i[1]\n    c = i[2]\n    print('{} {} {}'.format(c,b,a))\nNext:\n    <END>\n"
    }
  },
  "p03456": {
    "s088114092": {
      "code": "a = '1 21'\ns = 0\nfor i in range(int(a[0]+a[2]+a[3])+1):\n    if int(a[0]+a[2]+a[3]) == i**2:\n        s += 1\n        break\nif s == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "0"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "1"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "1"
            },
            {
              "a": "'1 21'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "s": "1"
            },
            {
              "a": "'1 21'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = '1 21'",
          "s = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(int(a[0] + a[2] + a[3]) + 1)"
        ],
        "3": [
          "(int(a[0] + a[2] + a[3]) == i ** 2)"
        ],
        "4": [
          "s += 1"
        ],
        "5": [
          "(s == 1)"
        ],
        "6": [
          "print(\"Yes\")"
        ],
        "7": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '1 21'\n    s = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(int(a[0] + a[2] + a[3]) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (int(a[0] + a[2] + a[3]) == i ** 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    s += 1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (s == 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02784": {
    "s464908933": {
      "code": "a = ['10', '3']\nh, n = int(a[0]), int(a[1])\nnums = ['4', '5', '6']\nnums = list(map(int, nums))\nx = max(nums)\nxx = nums.index(x)\ndel nums[xx]\ny = max(nums)\nz = x + y\nif z >= h:\n  print(\"yes\")\nelse:\n  print(\"no\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            10
          ]
        },
        "2": {
          "range": [
            11,
            11
          ]
        },
        "3": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "xx": "2"
            },
            {
              "nums": "[4, 5]"
            },
            {
              "z": "11"
            },
            {
              "n": "3"
            },
            {
              "h": "10"
            },
            {
              "y": "5"
            },
            {
              "a": "['10', '3']"
            },
            {
              "x": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "xx": "2"
            },
            {
              "nums": "[4, 5]"
            },
            {
              "z": "11"
            },
            {
              "n": "3"
            },
            {
              "h": "10"
            },
            {
              "y": "5"
            },
            {
              "a": "['10', '3']"
            },
            {
              "x": "6"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = ['10', '3']",
          "h, n = int(a[0]), int(a[1])",
          "nums = ['4', '5', '6']",
          "nums = list(map(int, nums))",
          "x = max(nums)",
          "xx = nums.index(x)",
          "del nums[xx]",
          "y = max(nums)",
          "z = x + y",
          "(z >= h)"
        ],
        "2": [
          "print(\"yes\")"
        ],
        "3": [
          "print(\"no\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = ['10', '3']\n    h, n = int(a[0]), int(a[1])\n    nums = ['4', '5', '6']\n    nums = list(map(int, nums))\n    x = max(nums)\n    xx = nums.index(x)\n    del nums[xx]\n    y = max(nums)\n    z = x + y\n    (z >= h)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"no\")\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03951": {
    "s757893287": {
      "code": "N = 3\ns = ['a', 'b', 'c']\nt = ['c', 'd', 'e']\ncnt = 0\nif s==t:\n    ans = N\nelse:\n    for i in range(N):\n        if s[i:]==t[:-i]:\n            ans = N*2 - (N-i)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        8,
        9,
        8,
        9,
        10,
        8,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "ans": "5"
            },
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "5"
            },
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "ans": "5"
            },
            {
              "N": "3"
            },
            {
              "t": "['c', 'd', 'e']"
            },
            {
              "cnt": "0"
            },
            {
              "s": "['a', 'b', 'c']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "s = ['a', 'b', 'c']",
          "t = ['c', 'd', 'e']",
          "cnt = 0",
          "(s == t)"
        ],
        "2": [
          "ans = N"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "4": [
          "(s[i:] == t[:-i])"
        ],
        "5": [
          "ans = N*2 - (N-i)"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 6
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 3
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    s = ['a', 'b', 'c']\n    t = ['c', 'd', 'e']\n    cnt = 0\n    (s == t)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = N\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (s[i:] == t[:-i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    ans = N*2 - (N-i)\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03487": {
    "s648771683": {
      "code": "from astropy.units import count\nn = 4\na = [3, 3, 3, 3]\na.sort()\nv = a[0]\ncount = 1\nresult = 0\nfor i in range(1,n):\n    if v == a[i]:\n        count += 1\n    else:\n        if v == count:\n            v = a[i]\n            count = 1\n        else:\n            if count > v:\n                result += count -v\n                v = a[i]\n                count = 1\n            else:\n                result += count\n                v = a[i]\n                count = 1\nif v != count:\n    if count > v:\n        result += count -v\n    else:\n        result += count\nprint(result)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            14
          ]
        },
        "7": {
          "range": [
            16,
            16
          ]
        },
        "8": {
          "range": [
            17,
            19
          ]
        },
        "9": {
          "range": [
            21,
            23
          ]
        },
        "10": {
          "range": [
            24,
            24
          ]
        },
        "11": {
          "range": [
            25,
            25
          ]
        },
        "12": {
          "range": [
            26,
            26
          ]
        },
        "13": {
          "range": [
            28,
            28
          ]
        },
        "14": {
          "range": [
            29,
            29
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        24,
        25,
        26,
        29
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "1"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "1"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "1"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "2"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "2"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "2"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "3"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "3"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "3"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "4"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "4"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "4"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "result": "0"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "4"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 12,
          "state": [
            {
              "result": "1"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "4"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        },
        {
          "block": 14,
          "state": [
            {
              "result": "1"
            },
            {
              "n": "4"
            },
            {
              "v": "3"
            },
            {
              "count": "4"
            },
            {
              "a": "[3, 3, 3, 3]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from astropy.units import count",
          "n = 4",
          "a = [3, 3, 3, 3]",
          "a.sort()",
          "v = a[0]",
          "count = 1",
          "result = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "(v == a[i])"
        ],
        "4": [
          "count += 1"
        ],
        "5": [
          "(v == count)"
        ],
        "6": [
          "v = a[i]",
          "count = 1"
        ],
        "7": [
          "(count > v)"
        ],
        "8": [
          "result += count -v",
          "v = a[i]",
          "count = 1"
        ],
        "9": [
          "result += count",
          "v = a[i]",
          "count = 1"
        ],
        "10": [
          "(v != count)"
        ],
        "11": [
          "(count > v)"
        ],
        "12": [
          "result += count -v"
        ],
        "13": [
          "result += count"
        ],
        "14": [
          "print(result)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 10
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 14
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 14
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 14
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from astropy.units import count\n    n = 4\n    a = [3, 3, 3, 3]\n    a.sort()\n    v = a[0]\n    count = 1\n    result = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (v == a[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (v == count)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    v = a[i]\n    count = 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (count > v)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    result += count -v\n    v = a[i]\n    count = 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    result += count\n    v = a[i]\n    count = 1\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    (v != count)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 14\n\nBlock 11:\nStatement:\n    (count > v)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    result += count -v\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    result += count\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    print(result)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s034647570": {
      "code": "N = '4'\nlist = ['3', '3', '3', '3']\ncount = 0\nA = len(list)\nfor i in range(A):\n    if list[i] != list.count(list[i]):\n        list.remove(list[i])\n        count += 1\n    if i == len(list)-1:\n        break\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = '4'",
          "list = ['3', '3', '3', '3']",
          "count = 0",
          "A = len(list)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(A)"
        ],
        "3": [
          "(list[i] != list.count(list[i]))"
        ],
        "4": [
          "list.remove(list[i])",
          "count += 1"
        ],
        "5": [
          "(i == len(list) - 1)"
        ],
        "6": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    list = ['3', '3', '3', '3']\n    count = 0\n    A = len(list)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(A)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (list[i] != list.count(list[i]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    list.remove(list[i])\n    count += 1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (i == len(list) - 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s280021116": {
      "code": "n = 4\nalist = [3, 3, 3, 3]\nfrom collections import Counter\nadic = Counter(alist)\ncount = 0\nfor key,value in adic:\n  if int(key) <= value:\n    count+=(value-int(key))\n  else:\n    count+=value\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "alist": "[3, 3, 3, 3]"
            },
            {
              "adic": "Counter({3: 4})"
            },
            {
              "count": "0"
            },
            {
              "n": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "alist": "[3, 3, 3, 3]"
            },
            {
              "adic": "Counter({3: 4})"
            },
            {
              "count": "0"
            },
            {
              "n": "4"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('cannot unpack non-iterable int object')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "alist = [3, 3, 3, 3]",
          "from collections import Counter",
          "adic = Counter(alist)",
          "count = 0"
        ],
        "2": [
          "key <- index\n    value <- iterator"
        ],
        "3": [
          "(int(key) <= value)"
        ],
        "4": [
          "count+=(value-int(key))"
        ],
        "5": [
          "count+=value"
        ],
        "6": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    alist = [3, 3, 3, 3]\n    from collections import Counter\n    adic = Counter(alist)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    key <- index\n    value <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (int(key) <= value)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count+=(value-int(key))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    count+=value\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    }
  },
  "p02546": {
    "s344059027": {
      "code": "st = 'apple'\nif st[-1] == 's':\n  return st + 'es'\nelse:\n  return st + 's'",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "st": "'apple'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "st": "'apple'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "st = 'apple'",
          "(st[-1] == 's')"
        ],
        "2": [
          "return st + 'es'"
        ],
        "3": [
          "return st + 's'"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    st = 'apple'\n    (st[-1] == 's')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    return st + 'es'\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    return st + 's'\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s934097827": {
      "code": "s = 'apple'\nif s[-1]=='s':\n  s+='es'\n  return s\ns+='s'\nreturn s",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'apple'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'apples'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'apple'",
          "(s[-1] == 's')"
        ],
        "2": [
          "s+='es'",
          "return s"
        ],
        "3": [
          "s+='s'",
          "return s"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'apple'\n    (s[-1] == 's')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    s+='es'\n    return s\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    s+='s'\n    return s\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s252416134": {
      "code": "s = 'apple'\ns_list=list(s)\nx=len(s_list)\na_list=reversed(s_list)\nif a_list[0]==\"s\":\n  s_list[x]=\"e\"\n  s_list[x+1]=\"s\"\nelse:\n  s_list[x+1]=\"s\"\nprint(s_list)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            7
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s_list": "['a', 'p', 'p', 'l', 'e']"
            },
            {
              "a_list": "<list_reverseiterator object at 0x7f4bacfab2b0>"
            },
            {
              "s": "'apple'"
            },
            {
              "x": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list_reverseiterator' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'apple'",
          "s_list=list(s)",
          "x=len(s_list)",
          "a_list=reversed(s_list)",
          "(a_list[0] == 's')"
        ],
        "2": [
          "s_list[x]=\"e\"",
          "s_list[x+1]=\"s\""
        ],
        "3": [
          "s_list[x+1]=\"s\""
        ],
        "4": [
          "print(s_list)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'apple'\n    s_list=list(s)\n    x=len(s_list)\n    a_list=reversed(s_list)\n    (a_list[0] == 's')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    s_list[x]=\"e\"\n    s_list[x+1]=\"s\"\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    s_list[x+1]=\"s\"\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(s_list)\nNext:\n    <END>\n"
    }
  },
  "p02665": {
    "s465881763": {
      "code": "import math, numpy\nn = 3\na = [0, 1, 1, 2]\nl = [1]\ncumsum_a = numpy.cumsum(a[::-1])[::-1]\nif (n > 0) and (a[0] > 0):\n    print(-1)\nelse:\n    for i in range(1, n):\n        b_max1 = 2 * (l[i - 1] - a[i - 1])\n        b_max2 = cumsum_a[i]\n        if a[i] > 2 ** i - math.ceil(l[i-1]/2):\n            l = -1\n            break\n        l.append(min(b_max1, b_max2))\n    if l != -1:\n        l.append(a[-1])\n        print(sum(l))\n    else:\n        print(-1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            12
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        },
        "6": {
          "range": [
            15,
            15
          ]
        },
        "7": {
          "range": [
            16,
            16
          ]
        },
        "8": {
          "range": [
            17,
            18
          ]
        },
        "9": {
          "range": [
            20,
            20
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        10,
        11,
        12,
        15,
        9,
        10,
        11,
        12,
        15,
        9,
        16,
        17,
        18
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math, numpy",
          "n = 3",
          "a = [0, 1, 1, 2]",
          "l = [1]",
          "cumsum_a = numpy.cumsum(a[::-1])[::-1]",
          "(n > 0 and a[0] > 0)"
        ],
        "2": [
          "print(-1)"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "4": [
          "b_max1 = 2 * (l[i - 1] - a[i - 1])",
          "b_max2 = cumsum_a[i]",
          "(a[i] > 2 ** i - math.ceil(l[i - 1] / 2))"
        ],
        "5": [
          "l = -1"
        ],
        "6": [
          "l.append(min(b_max1, b_max2))"
        ],
        "7": [
          "(l != -1)"
        ],
        "8": [
          "l.append(a[-1])",
          "print(sum(l))"
        ],
        "9": [
          "print(-1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math, numpy\n    n = 3\n    a = [0, 1, 1, 2]\n    l = [1]\n    cumsum_a = numpy.cumsum(a[::-1])[::-1]\n    (n > 0 and a[0] > 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    b_max1 = 2 * (l[i - 1] - a[i - 1])\n    b_max2 = cumsum_a[i]\n    (a[i] > 2 ** i - math.ceil(l[i - 1] / 2))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    l = -1\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    l.append(min(b_max1, b_max2))\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    (l != -1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    l.append(a[-1])\n    print(sum(l))\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(-1)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03073": {
    "s037257264": {
      "code": "s = '000'\nc = 0\nfor i, a in enumerate(s):\n    if i % 2 == 0 and a == '0':\n        c += 1\n    if i % 2 == 1 and a == '1':\n        c += 1\nprint(min(c, len(s)-c))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        3,
        4,
        6,
        3,
        4,
        5,
        6,
        3,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "2"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "'000'"
            },
            {
              "c": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '000'",
          "c = 0"
        ],
        "2": [
          "i <- index\n    a <- iterator"
        ],
        "3": [
          "(i % 2 == 0 and a == '0')"
        ],
        "4": [
          "c += 1"
        ],
        "5": [
          "(i % 2 == 1 and a == '1')"
        ],
        "6": [
          "c += 1"
        ],
        "7": [
          "print(min(c, len(s)-c))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '000'\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    a <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (i % 2 == 0 and a == '0')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    c += 1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (i % 2 == 1 and a == '1')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    c += 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(min(c, len(s)-c))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s083311115": {
      "code": "s = ['0', '0', '0']\nprev = s[0]\ncount  = 0\nfor i in range(1, len(s)):\n    print(s)\n    if prev == s[i]:\n        count += 1\n        if prev == '0':\n            s[i] = '1'\n        else:\n            s[i] = '0'\n    prev = s[i]\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        4,
        5,
        6,
        12,
        4,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "['0', '0', '0']"
            },
            {
              "prev": "'0'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['0', '0', '0']"
            },
            {
              "prev": "'0'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "['0', '0', '0']"
            },
            {
              "prev": "'0'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "s": "['0', '0', '0']"
            },
            {
              "prev": "'0'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "s": "['0', '1', '0']"
            },
            {
              "prev": "'0'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "['0', '1', '0']"
            },
            {
              "prev": "'1'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['0', '1', '0']"
            },
            {
              "prev": "'1'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "['0', '1', '0']"
            },
            {
              "prev": "'1'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "s": "['0', '1', '0']"
            },
            {
              "prev": "'0'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['0', '1', '0']"
            },
            {
              "prev": "'0'"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "s": "['0', '1', '0']"
            },
            {
              "prev": "'0'"
            },
            {
              "count": "1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = ['0', '0', '0']",
          "prev = s[0]",
          "count  = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, len(s))"
        ],
        "3": [
          "print(s)",
          "(prev == s[i])"
        ],
        "4": [
          "count += 1",
          "(prev == '0')"
        ],
        "5": [
          "s[i] = '1'"
        ],
        "6": [
          "s[i] = '0'"
        ],
        "7": [
          "prev = s[i]"
        ],
        "8": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 8
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = ['0', '0', '0']\n    prev = s[0]\n    count  = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    print(s)\n    (prev == s[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    count += 1\n    (prev == '0')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    s[i] = '1'\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    s[i] = '0'\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    prev = s[i]\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(count)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s240367657": {
      "code": "import sys\ninput = sys.stdin.readline\nS = ['0', '0', '0']\nS = [int(i) for i in S]\ncount_0 = 0\ncount_1 = 0\nfor i in range(len(S)):\n\tif (i % 2 == 1) ^ S[i]:\n\t\tcount_0 += 1\n\telse:\n\t\tcount_1 += 1\nprint(min(count_0, count_1))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        7,
        8,
        9,
        7,
        8,
        11,
        7,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys",
          "input = sys.stdin.readline",
          "S = ['0', '0', '0']",
          "S = [int(i) for i in S]",
          "count_0 = 0",
          "count_1 = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "((i % 2 == 1) ^ S[i])"
        ],
        "4": [
          "count_0 += 1"
        ],
        "5": [
          "count_1 += 1"
        ],
        "6": [
          "print(min(count_0, count_1))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    input = sys.stdin.readline\n    S = ['0', '0', '0']\n    S = [int(i) for i in S]\n    count_0 = 0\n    count_1 = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    ((i % 2 == 1) ^ S[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count_0 += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    count_1 += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(min(count_0, count_1))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s965439296": {
      "code": "import sys\ninput = sys.stdin.readline\nS = ['0', '0', '0']\nS = [int(i) for i in S]\ncount_0 = 0\ncount_1 = 0\nfor i in range(len(S)):\n\tif (i % 2 == 1) ^ S[i]:\n\t\tcount_0 += 1\n\telse:\n\t\tcount_1 += 1\nprint(min(count_0, count_1))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        7,
        8,
        9,
        7,
        8,
        11,
        7,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys",
          "input = sys.stdin.readline",
          "S = ['0', '0', '0']",
          "S = [int(i) for i in S]",
          "count_0 = 0",
          "count_1 = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "((i % 2 == 1) ^ S[i])"
        ],
        "4": [
          "count_0 += 1"
        ],
        "5": [
          "count_1 += 1"
        ],
        "6": [
          "print(min(count_0, count_1))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    input = sys.stdin.readline\n    S = ['0', '0', '0']\n    S = [int(i) for i in S]\n    count_0 = 0\n    count_1 = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    ((i % 2 == 1) ^ S[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count_0 += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    count_1 += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(min(count_0, count_1))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s578937044": {
      "code": "s = '000'\nn=len(s)\ns = bin(int(s, 2))\ns_10 = '1' * (n % 2) + '01' * (n // 2)\ns_01 = '0' * (n % 2) + '10' * (n // 2)\ns_10 = bin(int(s_10, 2))\ns_01 = bin(int(s_01, 2))\nr = s ^ s_01\nl = s ^ s_10\nprint(min(r.count('1'), l.count('1')))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s_10": "'0b101'"
            },
            {
              "s": "'0b0'"
            },
            {
              "s_01": "'0b10'"
            },
            {
              "n": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ^: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '000'",
          "n=len(s)",
          "s = bin(int(s, 2))",
          "s_10 = '1' * (n % 2) + '01' * (n // 2)",
          "s_01 = '0' * (n % 2) + '10' * (n // 2)",
          "s_10 = bin(int(s_10, 2))",
          "s_01 = bin(int(s_01, 2))",
          "r = s ^ s_01",
          "l = s ^ s_10",
          "print(min(r.count('1'), l.count('1')))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '000'\n    n=len(s)\n    s = bin(int(s, 2))\n    s_10 = '1' * (n % 2) + '01' * (n // 2)\n    s_01 = '0' * (n % 2) + '10' * (n // 2)\n    s_10 = bin(int(s_10, 2))\n    s_01 = bin(int(s_01, 2))\n    r = s ^ s_01\n    l = s ^ s_10\n    print(min(r.count('1'), l.count('1')))\nNext:\n    <END>\n"
    }
  },
  "p02958": {
    "s343118043": {
      "code": "n = 5\np = [5, 2, 3, 4, 1]\np2 = sorted(p)   \nif p == p2:\n    print('YES')\nelse:\n    for i in range(1,n-1):\n        if p[i] == p2[n-i]:\n            p3 = p.remove(p[i],p[n-1])\n            p4 = sorted(p3)\n            if p3 == p4:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8,
        16,
        7,
        8,
        16,
        7,
        8,
        16,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p2": "[1, 2, 3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "p = [5, 2, 3, 4, 1]",
          "p2 = sorted(p)",
          "(p == p2)"
        ],
        "2": [
          "print('YES')"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(1, n - 1)"
        ],
        "4": [
          "(p[i] == p2[n - i])"
        ],
        "5": [
          "p3 = p.remove(p[i],p[n-1])",
          "p4 = sorted(p3)",
          "(p3 == p4)"
        ],
        "6": [
          "print('YES')"
        ],
        "7": [
          "print('NO')"
        ],
        "8": [
          "print('NO')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    p = [5, 2, 3, 4, 1]\n    p2 = sorted(p)\n    (p == p2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n - 1)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    (p[i] == p2[n - i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    p3 = p.remove(p[i],p[n-1])\n    p4 = sorted(p3)\n    (p3 == p4)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('YES')\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    print('NO')\nNext:\n    Go to Block: 3\n\nBlock 8:\nStatement:\n    print('NO')\nNext:\n    Go to Block: 3\n",
      "exception_info": null
    },
    "s627333014": {
      "code": "N = 5\np = [5, 2, 3, 4, 1]\nP=sorted(p)\nprint(p)\nprint(P)\nflag=0\nfor i in range(0,5):\n    if p[i]!=P[i]:\n        flag+=1\nif (flag==2)or(flag==0):\n    print('YES')\nelse :\n    print('NO')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        7,
        8,
        7,
        8,
        7,
        8,
        7,
        8,
        9,
        7,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "0"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "0"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "0"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "1"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "2"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "2"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "2"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "N": "5"
            },
            {
              "flag": "2"
            },
            {
              "P": "[1, 2, 3, 4, 5]"
            },
            {
              "p": "[5, 2, 3, 4, 1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "p = [5, 2, 3, 4, 1]",
          "P=sorted(p)",
          "print(p)",
          "print(P)",
          "flag=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, 5)"
        ],
        "3": [
          "(p[i] != P[i])"
        ],
        "4": [
          "flag+=1"
        ],
        "5": [
          "(flag == 2 or flag == 0)"
        ],
        "6": [
          "print('YES')"
        ],
        "7": [
          "print('NO')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    p = [5, 2, 3, 4, 1]\n    P=sorted(p)\n    print(p)\n    print(P)\n    flag=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, 5)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (p[i] != P[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    flag+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (flag == 2 or flag == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('NO')\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s194280001": {
      "code": "N = 5\npi = [5, 2, 3, 4, 1]\npis = sorted(pi)\ncount = 0\nfor i in range(5):\n    if pi[i] != pis [i]:\n        count += 1\nif count <= 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        6,
        7,
        5,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "2"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "pi": "[5, 2, 3, 4, 1]"
            },
            {
              "N": "5"
            },
            {
              "pis": "[1, 2, 3, 4, 5]"
            },
            {
              "count": "2"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "pi = [5, 2, 3, 4, 1]",
          "pis = sorted(pi)",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(5)"
        ],
        "3": [
          "(pi[i] != pis[i])"
        ],
        "4": [
          "count += 1"
        ],
        "5": [
          "(count <= 2)"
        ],
        "6": [
          "print(\"YES\")"
        ],
        "7": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    pi = [5, 2, 3, 4, 1]\n    pis = sorted(pi)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(5)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (pi[i] != pis[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (count <= 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s936041126": {
      "code": "n = '5'\nli = [5, 2, 3, 4, 1]\nfalse = 0\nfor i in range(n):\n    if i != li[i]:\n        false += 1\nif false == 0 or false == 2:\n    print('YES')\nelse:\n    print('N0')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'5'"
            },
            {
              "false": "0"
            },
            {
              "li": "[5, 2, 3, 4, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'5'"
            },
            {
              "false": "0"
            },
            {
              "li": "[5, 2, 3, 4, 1]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '5'",
          "li = [5, 2, 3, 4, 1]",
          "false = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(i != li[i])"
        ],
        "4": [
          "false += 1"
        ],
        "5": [
          "(false == 0 or false == 2)"
        ],
        "6": [
          "print('YES')"
        ],
        "7": [
          "print('N0')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    li = [5, 2, 3, 4, 1]\n    false = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i != li[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    false += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (false == 0 or false == 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('N0')\nNext:\n    <END>\n"
    }
  },
  "p02732": {
    "s527877978": {
      "code": "import collections\nimport numpy as np\nn = 5\nli = [1, 1, 2, 1, 2]\ndi = collections.Counter(li)\narr = np.array(list(di.values()))\narrr = arr - 1\nc = np.dot(arr, arrr) // 2\nfor v in li:\n    x = int(di[v])\n    if x == 1:\n        print(c)\n    else:\n        print(c-(x-1))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        },
        "2": {
          "range": [
            9,
            9
          ]
        },
        "3": {
          "range": [
            10,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        },
        "5": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        9,
        10,
        11,
        14,
        9,
        10,
        11,
        14,
        9,
        10,
        11,
        14,
        9,
        10,
        11,
        14,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import collections",
          "import numpy as np",
          "n = 5",
          "li = [1, 1, 2, 1, 2]",
          "di = collections.Counter(li)",
          "arr = np.array(list(di.values()))",
          "arrr = arr - 1",
          "c = np.dot(arr, arrr) // 2"
        ],
        "2": [
          "iterator -> v, Iterate Over -> li"
        ],
        "3": [
          "x = int(di[v])",
          "(x == 1)"
        ],
        "4": [
          "print(c)"
        ],
        "5": [
          "print(c-(x-1))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import collections\n    import numpy as np\n    n = 5\n    li = [1, 1, 2, 1, 2]\n    di = collections.Counter(li)\n    arr = np.array(list(di.values()))\n    arrr = arr - 1\n    c = np.dot(arr, arrr) // 2\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> li\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    x = int(di[v])\n    (x == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(c)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(c-(x-1))\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s953706585": {
      "code": "import copy\nimport numpy as np\nimport collections\nn = 5\na = [1, 1, 2, 1, 2]\nfor i in range(n):\n  ans = 0\n  b = copy.copy(a)\n  b.pop(i)\n  c = np.array(list(collections.Counter(b).values()))\n  d = int(sum(c*(c-np.ones(len(c)))//2))\n  print(d)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import copy",
          "import numpy as np",
          "import collections",
          "n = 5",
          "a = [1, 1, 2, 1, 2]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "ans = 0",
          "b = copy.copy(a)",
          "b.pop(i)",
          "c = np.array(list(collections.Counter(b).values()))",
          "d = int(sum(c*(c-np.ones(len(c)))//2))",
          "print(d)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import copy\n    import numpy as np\n    import collections\n    n = 5\n    a = [1, 1, 2, 1, 2]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    ans = 0\n    b = copy.copy(a)\n    b.pop(i)\n    c = np.array(list(collections.Counter(b).values()))\n    d = int(sum(c*(c-np.ones(len(c)))//2))\n    print(d)\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    }
  },
  "p02934": {
    "s409453841": {
      "code": "N = '2'\nnums = ['10', '30']\nreturn 1 / sum(1 / int(num) for num in nums)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'2'"
            },
            {
              "nums": "['10', '30']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = '2'",
          "nums = ['10', '30']",
          "return 1 / sum(1 / int(num) for num in nums)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    nums = ['10', '30']\n    return 1 / sum(1 / int(num) for num in nums)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s903088688": {
      "code": "import numpy as np\nN = '2'\nA = [10, 30]\nSum = sum(A)\ns = []\nmulti = np.lcm.reduce(A)\nfor a in A:\n    s.append(int(multi / a))\nprint(int(multi / sum(s)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        7,
        8,
        7,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "N = '2'",
          "A = [10, 30]",
          "Sum = sum(A)",
          "s = []",
          "multi = np.lcm.reduce(A)"
        ],
        "2": [
          "iterator -> a, Iterate Over -> A"
        ],
        "3": [
          "s.append(int(multi / a))"
        ],
        "4": [
          "print(int(multi / sum(s)))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    N = '2'\n    A = [10, 30]\n    Sum = sum(A)\n    s = []\n    multi = np.lcm.reduce(A)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s.append(int(multi / a))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(int(multi / sum(s)))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s761018129": {
      "code": "a = ['2']\nr = 0\nfor i in a:\n    r += 1 / i\nprint(1/r)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "['2']"
            },
            {
              "r": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['2']"
            },
            {
              "r": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['2']"
            },
            {
              "r": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = ['2']",
          "r = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> a"
        ],
        "3": [
          "r += 1 / i"
        ],
        "4": [
          "print(1/r)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = ['2']\n    r = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    r += 1 / i\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(1/r)\nNext:\n    <END>\n"
    }
  },
  "p02724": {
    "s612443530": {
      "code": "X = 1024\nwhile True:\n    if X >= 500:\n        C = X // 500\n        X = X - (500 * C)\n    elif X >= 5:\n        D = X // 5\n        X = X - (5 * D)\n    else:\n        break\ntotal = (500 * C) + (5 * D)\nprint(total)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            8
          ]
        },
        "7": {
          "range": [
            11,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        2,
        3,
        6,
        7,
        8,
        2,
        3,
        6,
        10,
        11,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X": "1024"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "X": "1024"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "X": "1024"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "C": "2"
            },
            {
              "X": "24"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "C": "2"
            },
            {
              "X": "24"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "C": "2"
            },
            {
              "X": "24"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "C": "2"
            },
            {
              "X": "24"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "D": "4"
            },
            {
              "C": "2"
            },
            {
              "X": "4"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "D": "4"
            },
            {
              "C": "2"
            },
            {
              "X": "4"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "D": "4"
            },
            {
              "C": "2"
            },
            {
              "X": "4"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "D": "4"
            },
            {
              "C": "2"
            },
            {
              "X": "4"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "D": "4"
            },
            {
              "C": "2"
            },
            {
              "total": "1020"
            },
            {
              "X": "4"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "X = 1024"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "(X >= 500)"
        ],
        "4": [
          "C = X // 500",
          "X = X - (500 * C)"
        ],
        "5": [
          "(X >= 5)"
        ],
        "6": [
          "D = X // 5",
          "X = X - (5 * D)"
        ],
        "7": [
          "total = (500 * C) + (5 * D)",
          "print(total)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    X = 1024\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (X >= 500)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    C = X // 500\n    X = X - (500 * C)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (X >= 5)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    D = X // 5\n    X = X - (5 * D)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    total = (500 * C) + (5 * D)\n    print(total)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s485021256": {
      "code": "X = 1024\nA=0\nG=0\nN=0\nM=0\nZ=0\nN=X/500\nM=int(X%500)\nZ=M/5\nN=N+Z\nfor i in range(0,N):\n    if X-500:\n        X=X-500\n        G=G+1000\n    elif X-5:\n        X=X-5\n        G=G+5\n    else:\n        break\nprint(G)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            10
          ]
        },
        "2": {
          "range": [
            11,
            11
          ]
        },
        "3": {
          "range": [
            12,
            12
          ]
        },
        "4": {
          "range": [
            13,
            14
          ]
        },
        "5": {
          "range": [
            15,
            15
          ]
        },
        "6": {
          "range": [
            16,
            17
          ]
        },
        "7": {
          "range": [
            20,
            20
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "6.848"
            },
            {
              "M": "24"
            },
            {
              "Z": "4.8"
            },
            {
              "G": "0"
            },
            {
              "A": "0"
            },
            {
              "X": "1024"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "6.848"
            },
            {
              "M": "24"
            },
            {
              "Z": "4.8"
            },
            {
              "G": "0"
            },
            {
              "A": "0"
            },
            {
              "X": "1024"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "X = 1024",
          "A=0",
          "G=0",
          "N=0",
          "M=0",
          "Z=0",
          "N=X/500",
          "M=int(X%500)",
          "Z=M/5",
          "N=N+Z"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, N)"
        ],
        "3": [
          "(X - 500)"
        ],
        "4": [
          "X=X-500",
          "G=G+1000"
        ],
        "5": [
          "(X - 5)"
        ],
        "6": [
          "X=X-5",
          "G=G+5"
        ],
        "7": [
          "print(G)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    X = 1024\n    A=0\n    G=0\n    N=0\n    M=0\n    Z=0\n    N=X/500\n    M=int(X%500)\n    Z=M/5\n    N=N+Z\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (X - 500)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    X=X-500\n    G=G+1000\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (X - 5)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    X=X-5\n    G=G+5\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(G)\nNext:\n    <END>\n"
    },
    "s017981363": {
      "code": "x = '1024'\nprint(((x//500)*1000)+((x%500//5)*5))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'1024'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '1024'",
          "print(((x//500)*1000)+((x%500//5)*5))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '1024'\n    print(((x//500)*1000)+((x%500//5)*5))\nNext:\n    <END>\n"
    }
  },
  "p02705": {
    "s931940208": {
      "code": "import numpy as np\nn = 1\nprint(2*np.pi*n)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "n = 1",
          "print(2*np.pi*n)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    n = 1\n    print(2*np.pi*n)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s039561397": {
      "code": "import math as ma\nn = 1\nprint(2*n*ma.pi)\nreturn 0",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math as ma",
          "n = 1",
          "print(2*n*ma.pi)",
          "return 0"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math as ma\n    n = 1\n    print(2*n*ma.pi)\n    return 0\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s783168711": {
      "code": "R = '1'\nprint(R*2*3.141)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "R": "'1'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
      },
      "cfg_block_statements": {
        "1": [
          "R = '1'",
          "print(R*2*3.141)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    print(R*2*3.141)\nNext:\n    <END>\n"
    },
    "s240055709": {
      "code": "import math\nR = '1'\nprint(2 * math.pi * R)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import math",
          "R = '1'",
          "print(2 * math.pi * R)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    R = '1'\n    print(2 * math.pi * R)\nNext:\n    <END>\n"
    },
    "s554789090": {
      "code": "a = '1'\nprint(6.28318530717958623200*a)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'1'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '1'",
          "print(6.28318530717958623200*a)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '1'\n    print(6.28318530717958623200*a)\nNext:\n    <END>\n"
    },
    "s953920800": {
      "code": "import math\nR = '1'\nprint(2*math.pi*R)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import math",
          "R = '1'",
          "print(2*math.pi*R)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    R = '1'\n    print(2*math.pi*R)\nNext:\n    <END>\n"
    }
  },
  "p02594": {
    "s511904722": {
      "code": "n = 25\nif n >= 30:\n  return \"Yes\"\nelse:\n  return \"No\"",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "25"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "25"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 25",
          "(n >= 30)"
        ],
        "2": [
          "return \"Yes\""
        ],
        "3": [
          "return \"No\""
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 25\n    (n >= 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    return \"Yes\"\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    return \"No\"\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s820142711": {
      "code": "T = '25'\nif T >= 30:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "T": "'25'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "T = '25'",
          "(T >= 30)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    T = '25'\n    (T >= 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s644368757": {
      "code": "X = '25'\nif 30 <= X  :\n\tprint(\"Yes\")\nelse :\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X": "'25'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<=' not supported between instances of 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "X = '25'",
          "(30 <= X)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    X = '25'\n    (30 <= X)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s931733229": {
      "code": "x = '25'\nif x>= 30:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'25'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '25'",
          "(x >= 30)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '25'\n    (x >= 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s937151322": {
      "code": "n = '25'\nif n >= 30:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'25'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '25'",
          "(n >= 30)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '25'\n    (n >= 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p03494": {
    "s198342618": {
      "code": "import numpy as np\nc = [3]\nprint(np.gcd.reduce(c))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "c = [3]",
          "print(np.gcd.reduce(c))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    c = [3]\n    print(np.gcd.reduce(c))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s853033215": {
      "code": "from functools import reduce\nfrom math import gcd\nn = 3\na = [8, 12, 40]\nx=reduce(gcd,a)\nans=0\nwhile x%2==0:\n    ans+=1\n    x//=2\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        7,
        8,
        9,
        7,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from functools import reduce",
          "from math import gcd",
          "n = 3",
          "a = [8, 12, 40]",
          "x=reduce(gcd,a)",
          "ans=0"
        ],
        "2": [
          "while x%2==0:"
        ],
        "3": [
          "ans+=1",
          "x//=2"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from functools import reduce\n    from math import gcd\n    n = 3\n    a = [8, 12, 40]\n    x=reduce(gcd,a)\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while x%2==0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=1\n    x//=2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s663578972": {
      "code": "from functools import reduce\nfrom math import gcd\nn = 3\na = [8, 12, 40]\nx=reduce(gcd,a)\nans=0\nwhile x%2==0:\n    ans+=1\n    x//=2\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        7,
        8,
        9,
        7,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from functools import reduce",
          "from math import gcd",
          "n = 3",
          "a = [8, 12, 40]",
          "x=reduce(gcd,a)",
          "ans=0"
        ],
        "2": [
          "while x%2==0:"
        ],
        "3": [
          "ans+=1",
          "x//=2"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from functools import reduce\n    from math import gcd\n    n = 3\n    a = [8, 12, 40]\n    x=reduce(gcd,a)\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while x%2==0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=1\n    x//=2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s422820975": {
      "code": "n = [3]\na = ['8', '12', '40']\nb = 0\nc = 0\nwhile True:\n    b = min(a) / 2\n    if b <= 1:\n        break\n    c = c + 1\nprint(c)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "['8', '12', '40']"
            },
            {
              "c": "0"
            },
            {
              "b": "0"
            },
            {
              "n": "[3]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "['8', '12', '40']"
            },
            {
              "c": "0"
            },
            {
              "b": "0"
            },
            {
              "n": "[3]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "['8', '12', '40']"
            },
            {
              "c": "0"
            },
            {
              "b": "0"
            },
            {
              "n": "[3]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = [3]",
          "a = ['8', '12', '40']",
          "b = 0",
          "c = 0"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "b = min(a) / 2",
          "(b <= 1)"
        ],
        "4": [
          "c = c + 1"
        ],
        "5": [
          "print(c)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 5,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = [3]\n    a = ['8', '12', '40']\n    b = 0\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    b = min(a) / 2\n    (b <= 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    c = c + 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(c)\nNext:\n    <END>\n"
    }
  },
  "p03281": {
    "s273613049": {
      "code": "import sympy\nN = 105\nlist(map(sympy.divisor_count,list(range(1,N + 1))[:: 2])).count(8)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sympy",
          "N = 105",
          "list(map(sympy.divisor_count,list(range(1,N + 1))[:: 2])).count(8)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import sympy\n    N = 105\n    list(map(sympy.divisor_count,list(range(1,N + 1))[:: 2])).count(8)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s743353280": {
      "code": "ans = [105,135,165,189]\nn = '105'\nif n < 105:\n  print(0)\nelif n < 135:\n  print(1)\nelif n < 165:\n  print(2)\nelif n < 189:\n  print(3)\nelse:\n  print(4)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        },
        "8": {
          "range": [
            10,
            10
          ]
        },
        "9": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "[105, 135, 165, 189]"
            },
            {
              "n": "'105'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "ans = [105,135,165,189]",
          "n = '105'",
          "(n < 105)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "(n < 135)"
        ],
        "4": [
          "print(1)"
        ],
        "5": [
          "(n < 165)"
        ],
        "6": [
          "print(2)"
        ],
        "7": [
          "(n < 189)"
        ],
        "8": [
          "print(3)"
        ],
        "9": [
          "print(4)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    ans = [105,135,165,189]\n    n = '105'\n    (n < 105)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n < 135)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (n < 165)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(2)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (n < 189)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(3)\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(4)\nNext:\n    <END>\n"
    }
  },
  "p02743": {
    "s034633216": {
      "code": "import numpy\ns = ['2', '3', '9']\na, b, c = int(s[0]), int(s[1]), int(s[2])\nif 4*a*b - (c - a - b) ** 2 < 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import numpy",
          "s = ['2', '3', '9']",
          "a, b, c = int(s[0]), int(s[1]), int(s[2])",
          "(4 * a * b - (c - a - b) ** 2 < 0)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy\n    s = ['2', '3', '9']\n    a, b, c = int(s[0]), int(s[1]), int(s[2])\n    (4 * a * b - (c - a - b) ** 2 < 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03659": {
    "s638830961": {
      "code": "import math\nn = 6\na = [1, 2, 3, 4, 5, 6]\nl = 0\nr = sum(a)\nd = math.inf\nfor i in range(n - 1):\n    l += a[i]\n    r -= a[i]\n    d = min(d, abs(l - r))\nprint(d)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        7,
        8,
        9,
        10,
        7,
        8,
        9,
        10,
        7,
        8,
        9,
        10,
        7,
        8,
        9,
        10,
        7,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import math",
          "n = 6",
          "a = [1, 2, 3, 4, 5, 6]",
          "l = 0",
          "r = sum(a)",
          "d = math.inf"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n - 1)"
        ],
        "3": [
          "l += a[i]",
          "r -= a[i]",
          "d = min(d, abs(l - r))"
        ],
        "4": [
          "print(d)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 6\n    a = [1, 2, 3, 4, 5, 6]\n    l = 0\n    r = sum(a)\n    d = math.inf\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l += a[i]\n    r -= a[i]\n    d = min(d, abs(l - r))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(d)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s062978730": {
      "code": "n = 6\nsticks = [1, 2, 3, 4, 5, 6]\ns = sum(sticks)\na = []\nsum_i = 0\nfor i, v in enumerate(sticks):\n  sum_i += v\n  if i == 0:\n    continue\n  if i == len(sticks) - 1:\n    continue\n  a.append(abs(s - 2*sum_i))\nprint(min(a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            8
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        6,
        7,
        8,
        10,
        12,
        6,
        7,
        8,
        10,
        12,
        6,
        7,
        8,
        10,
        12,
        6,
        7,
        8,
        10,
        12,
        6,
        7,
        8,
        10,
        11,
        6,
        13
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "sum_i": "0"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum_i": "0"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sum_i": "1"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum_i": "1"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sum_i": "3"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "sum_i": "3"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "sum_i": "3"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum_i": "3"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sum_i": "6"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "sum_i": "6"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "sum_i": "6"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum_i": "6"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sum_i": "10"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "sum_i": "10"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "sum_i": "10"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum_i": "10"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sum_i": "15"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "sum_i": "15"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "sum_i": "15"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1, 9]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum_i": "15"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1, 9]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sum_i": "21"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1, 9]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "sum_i": "21"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1, 9]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum_i": "21"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1, 9]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "sum_i": "21"
            },
            {
              "n": "6"
            },
            {
              "s": "21"
            },
            {
              "sticks": "[1, 2, 3, 4, 5, 6]"
            },
            {
              "a": "[15, 9, 1, 9]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "sticks = [1, 2, 3, 4, 5, 6]",
          "s = sum(sticks)",
          "a = []",
          "sum_i = 0"
        ],
        "2": [
          "i <- index\n    v <- iterator"
        ],
        "3": [
          "sum_i += v",
          "(i == 0)"
        ],
        "4": [
          "(i == len(sticks) - 1)"
        ],
        "5": [
          "a.append(abs(s - 2*sum_i))"
        ],
        "6": [
          "print(min(a))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    sticks = [1, 2, 3, 4, 5, 6]\n    s = sum(sticks)\n    a = []\n    sum_i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    v <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    sum_i += v\n    (i == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (i == len(sticks) - 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 5:\nStatement:\n    a.append(abs(s - 2*sum_i))\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(min(a))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s508322296": {
      "code": "from collections import defaultdict, Counter\nimport math\nfrom bisect import bisect_left, bisect_right\nimport numpy as np\nn = 6\na = [1, 2, 3, 4, 5, 6]\nans = 10**100\nfor i in range(1, n):\n    if ans>abs(sum(a[:i])-sum(a[i:])):\n        ans = abs(sum(a[:i])-sum(a[i:]))\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        9,
        8,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 5,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from collections import defaultdict, Counter",
          "import math",
          "from bisect import bisect_left, bisect_right",
          "import numpy as np",
          "n = 6",
          "a = [1, 2, 3, 4, 5, 6]",
          "ans = 10**100"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "(ans > abs(sum(a[:i]) - sum(a[i:])))"
        ],
        "4": [
          "ans = abs(sum(a[:i])-sum(a[i:]))"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from collections import defaultdict, Counter\n    import math\n    from bisect import bisect_left, bisect_right\n    import numpy as np\n    n = 6\n    a = [1, 2, 3, 4, 5, 6]\n    ans = 10**100\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (ans > abs(sum(a[:i]) - sum(a[i:])))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans = abs(sum(a[:i])-sum(a[i:]))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s010406313": {
      "code": "n = 6\na = [1, 2, 3, 4, 5, 6]\nmemo = sum(a)\na=a[0]\nb=memo-a[0]\nans = abs(a-b)\nfor i in range(1,n-1):\n    a += a[i]\n    b -= a[i]\n    ans = min(ans,abs(a-b))\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "memo": "21"
            },
            {
              "a": "1"
            },
            {
              "n": "6"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "a = [1, 2, 3, 4, 5, 6]",
          "memo = sum(a)",
          "a=a[0]",
          "b=memo-a[0]",
          "ans = abs(a-b)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n - 1)"
        ],
        "3": [
          "a += a[i]",
          "b -= a[i]",
          "ans = min(ans,abs(a-b))"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [1, 2, 3, 4, 5, 6]\n    memo = sum(a)\n    a=a[0]\n    b=memo-a[0]\n    ans = abs(a-b)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += a[i]\n    b -= a[i]\n    ans = min(ans,abs(a-b))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03814": {
    "s571626706": {
      "code": "string = 'QWERTYASDFZXCV'\nindex_of_A = string.index(\"A\")\nindex_of_Z = string.index(\"Z\", index_of_A, len(string)-1)\nprint(index_of_Z - index_of_A + 1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "index_of_A": "6"
            },
            {
              "string": "'QWERTYASDFZXCV'"
            },
            {
              "index_of_Z": "10"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "string = 'QWERTYASDFZXCV'",
          "index_of_A = string.index(\"A\")",
          "index_of_Z = string.index(\"Z\", index_of_A, len(string)-1)",
          "print(index_of_Z - index_of_A + 1)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    string = 'QWERTYASDFZXCV'\n    index_of_A = string.index(\"A\")\n    index_of_Z = string.index(\"Z\", index_of_A, len(string)-1)\n    print(index_of_Z - index_of_A + 1)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s957672292": {
      "code": "s = 'QWERTYASDFZXCV'\nl = len(s)\ndif = 0\nfor i in range (l):\n\tif s[i] == 'A':\n\t\ta = i\n\telif s[i] == 'Z':\n\t\tz = i\n\t\tdif = z-a\nprint(dif+1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        5,
        6,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        5,
        7,
        8,
        9,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        5,
        7,
        4,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "0"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "dif": "4"
            },
            {
              "z": "10"
            },
            {
              "l": "14"
            },
            {
              "s": "'QWERTYASDFZXCV'"
            },
            {
              "a": "6"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = 'QWERTYASDFZXCV'",
          "l = len(s)",
          "dif = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(l)"
        ],
        "3": [
          "(s[i] == 'A')"
        ],
        "4": [
          "a = i"
        ],
        "5": [
          "(s[i] == 'Z')"
        ],
        "6": [
          "z = i",
          "dif = z-a"
        ],
        "7": [
          "print(dif+1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'QWERTYASDFZXCV'\n    l = len(s)\n    dif = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(l)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (s[i] == 'A')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a = i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (s[i] == 'Z')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    z = i\n    dif = z-a\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(dif+1)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02639": {
    "s661415073": {
      "code": "n = [0, 2, 3, 4, 5]\nprint(n.index(0)+1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "[0, 2, 3, 4, 5]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = [0, 2, 3, 4, 5]",
          "print(n.index(0)+1)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = [0, 2, 3, 4, 5]\n    print(n.index(0)+1)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s939531515": {
      "code": "x = [0, 2, 3, 4, 5]\nfor i in range(len(x)):\n  if x[i] == 0:\n    print(x + 1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "[0, 2, 3, 4, 5]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "[0, 2, 3, 4, 5]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "[0, 2, 3, 4, 5]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "x": "[0, 2, 3, 4, 5]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate list (not \"int\") to list')"
      },
      "cfg_block_statements": {
        "1": [
          "x = [0, 2, 3, 4, 5]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(x))"
        ],
        "3": [
          "(x[i] == 0)"
        ],
        "4": [
          "print(x + 1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = [0, 2, 3, 4, 5]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(x))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x[i] == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(x + 1)\nNext:\n    Go to Block: 2\n"
    }
  },
  "p02729": {
    "s680108986": {
      "code": "a = [2, 1]\nif a[0] == 1:\n  a[0] = 1\n  return a[1]\nelse: \n  return a[0]*(a[0] - 1)\nif a[1] == 1:\n  a[1] = 1\n  return a[1] \nelse: \n  return a[1]*(a[1] - 1)\nprint(a[0]*a[1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[2, 1]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = [2, 1]",
          "(a[0] == 1)"
        ],
        "2": [
          "a[0] = 1",
          "return a[1]"
        ],
        "3": [
          "return a[0]*(a[0] - 1)"
        ],
        "4": [
          "(a[1] == 1)"
        ],
        "5": [
          "a[1] = 1",
          "return a[1]"
        ],
        "6": [
          "return a[1]*(a[1] - 1)"
        ],
        "7": [
          "print(a[0]*a[1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [2, 1]\n    (a[0] == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a[0] = 1\n    return a[1]\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    return a[0]*(a[0] - 1)\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    (a[1] == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    a[1] = 1\n    return a[1]\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    return a[1]*(a[1] - 1)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(a[0]*a[1])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s048856907": {
      "code": "L = '2 1'\nans = (L//3)**3\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "L": "'2 1'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "L = '2 1'",
          "ans = (L//3)**3",
          "print(ans)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    L = '2 1'\n    ans = (L//3)**3\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03626": {
    "s713890386": {
      "code": "N = 3\nS = 'aab'\nT = 'ccb'\na = float(1)\nb = 0 \ni = 0\nwhile i < N:\n\tif i == 0: \n\t\tif N == 1:\n\t\t\ta *= 3\n\t\t\tbreak\n\t\telse:\n\t\t\tif S[0] == S[1]:\n\t\t\t\ta *= 6\n\t\t\t\ti += 2\n\t\t\t\tb = 0\n\t\t\telse:\n\t\t\t\ta *= 3\n\t\t\t\ti += 1\n\t\t\t\tb = 1\n\tif i == N-1:\n\t\tif b == 0: \n\t\t\ta *= 1\n\t\t\ti += 1\n\t\t\tb = 1\n\t\t\tbreak\n\t\tif b == 1: \n\t\t\ta *= 2\n\t\t\ti += 1\n\t\t\tb = 1\n\t\t\tbreak\n\tif S[i] == S[i+1]:\n\t\tif b == 0: \n\t\t\ta *= 3\n\t\t\ti += 2\n\t\t\tb = 0\n\t\tif b == 1: \n\t\t\ta *= 2\n\t\t\ti += 2\n\t\t\tb = 0\n\telse:\n\t\tif b == 0: \n\t\t\ta *= 1\n\t\t\ti += 1\n\t\t\tb = 1\n\t\tif b == 1: \n\t\t\ta *= 2\n\t\t\ti += 1\n\t\t\tb = 1\nprint(a)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            14,
            16
          ]
        },
        "8": {
          "range": [
            18,
            20
          ]
        },
        "9": {
          "range": [
            21,
            21
          ]
        },
        "10": {
          "range": [
            22,
            22
          ]
        },
        "11": {
          "range": [
            23,
            25
          ]
        },
        "12": {
          "range": [
            27,
            27
          ]
        },
        "13": {
          "range": [
            28,
            30
          ]
        },
        "14": {
          "range": [
            32,
            32
          ]
        },
        "15": {
          "range": [
            33,
            33
          ]
        },
        "16": {
          "range": [
            34,
            36
          ]
        },
        "17": {
          "range": [
            37,
            37
          ]
        },
        "18": {
          "range": [
            38,
            40
          ]
        },
        "19": {
          "range": [
            42,
            42
          ]
        },
        "20": {
          "range": [
            43,
            45
          ]
        },
        "21": {
          "range": [
            46,
            46
          ]
        },
        "22": {
          "range": [
            47,
            49
          ]
        },
        "23": {
          "range": [
            50,
            50
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        21,
        22,
        23,
        24,
        25,
        26,
        50
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "i": "0"
            },
            {
              "N": "3"
            },
            {
              "b": "0"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "1.0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "i": "0"
            },
            {
              "N": "3"
            },
            {
              "b": "0"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "1.0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "i": "0"
            },
            {
              "N": "3"
            },
            {
              "b": "0"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "1.0"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "i": "0"
            },
            {
              "N": "3"
            },
            {
              "b": "0"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "1.0"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "i": "0"
            },
            {
              "N": "3"
            },
            {
              "b": "0"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "1.0"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "i": "2"
            },
            {
              "N": "3"
            },
            {
              "b": "0"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "6.0"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "i": "2"
            },
            {
              "N": "3"
            },
            {
              "b": "0"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "6.0"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "i": "2"
            },
            {
              "N": "3"
            },
            {
              "b": "0"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "6.0"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "i": "3"
            },
            {
              "N": "3"
            },
            {
              "b": "1"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "6.0"
            }
          ]
        },
        {
          "block": 23,
          "state": [
            {
              "i": "3"
            },
            {
              "N": "3"
            },
            {
              "b": "1"
            },
            {
              "T": "'ccb'"
            },
            {
              "S": "'aab'"
            },
            {
              "a": "6.0"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "S = 'aab'",
          "T = 'ccb'",
          "a = float(1)",
          "b = 0",
          "i = 0"
        ],
        "2": [
          "while i < N:"
        ],
        "3": [
          "(i == 0)"
        ],
        "4": [
          "(N == 1)"
        ],
        "5": [
          "a *= 3"
        ],
        "6": [
          "(S[0] == S[1])"
        ],
        "7": [
          "a *= 6",
          "i += 2",
          "b = 0"
        ],
        "8": [
          "a *= 3",
          "i += 1",
          "b = 1"
        ],
        "9": [
          "(i == N - 1)"
        ],
        "10": [
          "(b == 0)"
        ],
        "11": [
          "a *= 1",
          "i += 1",
          "b = 1"
        ],
        "12": [
          "(b == 1)"
        ],
        "13": [
          "a *= 2",
          "i += 1",
          "b = 1"
        ],
        "14": [
          "(S[i] == S[i + 1])"
        ],
        "15": [
          "(b == 0)"
        ],
        "16": [
          "a *= 3",
          "i += 2",
          "b = 0"
        ],
        "17": [
          "(b == 1)"
        ],
        "18": [
          "a *= 2",
          "i += 2",
          "b = 0"
        ],
        "19": [
          "(b == 0)"
        ],
        "20": [
          "a *= 1",
          "i += 1",
          "b = 1"
        ],
        "21": [
          "(b == 1)"
        ],
        "22": [
          "a *= 2",
          "i += 1",
          "b = 1"
        ],
        "23": [
          "print(a)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 23
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 9
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 14
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 23
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "14": {
          "with_condition": {
            "true": 15,
            "false": 19
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 23
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 23
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": 17
          },
          "no_condition": null
        },
        "17": {
          "with_condition": {
            "true": 18,
            "false": 2
          },
          "no_condition": null
        },
        "16": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        },
        "18": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "19": {
          "with_condition": {
            "true": 20,
            "false": 21
          },
          "no_condition": null
        },
        "21": {
          "with_condition": {
            "true": 22,
            "false": 2
          },
          "no_condition": null
        },
        "20": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 21
        },
        "22": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    S = 'aab'\n    T = 'ccb'\n    a = float(1)\n    b = 0\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i < N:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 23\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 9\n\nBlock 4:\nStatement:\n    (N == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    a *= 3\nNext:\n    Go to Block: 23\n\nBlock 6:\nStatement:\n    (S[0] == S[1])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    a *= 6\n    i += 2\n    b = 0\nNext:\n    Go to Block: 9\n\nBlock 8:\nStatement:\n    a *= 3\n    i += 1\n    b = 1\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (i == N - 1)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 14\n\nBlock 10:\nStatement:\n    (b == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    a *= 1\n    i += 1\n    b = 1\nNext:\n    Go to Block: 23\n\nBlock 12:\nStatement:\n    (b == 1)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    a *= 2\n    i += 1\n    b = 1\nNext:\n    Go to Block: 23\n\nBlock 14:\nStatement:\n    (S[i] == S[i + 1])\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 19\n\nBlock 15:\nStatement:\n    (b == 0)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    a *= 3\n    i += 2\n    b = 0\nNext:\n    Go to Block: 17\n\nBlock 17:\nStatement:\n    (b == 1)\nNext:\n    If True: Go to Block 18\n    If False: Go to Block 2\n\nBlock 18:\nStatement:\n    a *= 2\n    i += 2\n    b = 0\nNext:\n    Go to Block: 2\n\nBlock 19:\nStatement:\n    (b == 0)\nNext:\n    If True: Go to Block 20\n    If False: Go to Block 21\n\nBlock 20:\nStatement:\n    a *= 1\n    i += 1\n    b = 1\nNext:\n    Go to Block: 21\n\nBlock 21:\nStatement:\n    (b == 1)\nNext:\n    If True: Go to Block 22\n    If False: Go to Block 2\n\nBlock 22:\nStatement:\n    a *= 2\n    i += 1\n    b = 1\nNext:\n    Go to Block: 2\n\nBlock 23:\nStatement:\n    print(a)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s830104611": {
      "code": "N = 3\nS1 = ['a', 'a', 'b']\nS2 = ['c', 'c', 'b']\nif S1[0]==S1[1]:\n    st=2\n    ans=6\n    flag=1\nelse:\n    st=1\n    ans=3\n    flag=-1\nwhile st<N:\n    if st+1<N:\n        if S1[st]==S1[st+1]:\n            if flag<0:\n                ans*=2\n            else:\n                ans*=3\n            st+=2\n            flag=1\n        else:\n            if flag<0:\n                ans*=2\n            else:\n                ans*=1\n            st+=1\n            flag=-1\n    else:\n        if flag<0:\n            ans*=2\n        else:\n            ans*=1\n        st+=1\nans=ans%1000000007\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            7
          ]
        },
        "3": {
          "range": [
            9,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        },
        "6": {
          "range": [
            14,
            14
          ]
        },
        "7": {
          "range": [
            15,
            15
          ]
        },
        "8": {
          "range": [
            16,
            16
          ]
        },
        "9": {
          "range": [
            18,
            18
          ]
        },
        "10": {
          "range": [
            19,
            20
          ]
        },
        "11": {
          "range": [
            22,
            22
          ]
        },
        "12": {
          "range": [
            23,
            23
          ]
        },
        "13": {
          "range": [
            25,
            25
          ]
        },
        "14": {
          "range": [
            26,
            27
          ]
        },
        "15": {
          "range": [
            29,
            29
          ]
        },
        "16": {
          "range": [
            30,
            30
          ]
        },
        "17": {
          "range": [
            32,
            32
          ]
        },
        "18": {
          "range": [
            33,
            33
          ]
        },
        "19": {
          "range": [
            34,
            35
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        12,
        13,
        29,
        32,
        33,
        12,
        34,
        35
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "st": "2"
            },
            {
              "ans": "6"
            },
            {
              "flag": "1"
            },
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "st": "2"
            },
            {
              "ans": "6"
            },
            {
              "flag": "1"
            },
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "st": "2"
            },
            {
              "ans": "6"
            },
            {
              "flag": "1"
            },
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        },
        {
          "block": 15,
          "state": [
            {
              "st": "2"
            },
            {
              "ans": "6"
            },
            {
              "flag": "1"
            },
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        },
        {
          "block": 17,
          "state": [
            {
              "st": "2"
            },
            {
              "ans": "6"
            },
            {
              "flag": "1"
            },
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        },
        {
          "block": 18,
          "state": [
            {
              "st": "3"
            },
            {
              "ans": "6"
            },
            {
              "flag": "1"
            },
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "st": "3"
            },
            {
              "ans": "6"
            },
            {
              "flag": "1"
            },
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        },
        {
          "block": 19,
          "state": [
            {
              "st": "3"
            },
            {
              "ans": "6"
            },
            {
              "flag": "1"
            },
            {
              "N": "3"
            },
            {
              "S1": "['a', 'a', 'b']"
            },
            {
              "S2": "['c', 'c', 'b']"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "S1 = ['a', 'a', 'b']",
          "S2 = ['c', 'c', 'b']",
          "(S1[0] == S1[1])"
        ],
        "2": [
          "st=2",
          "ans=6",
          "flag=1"
        ],
        "3": [
          "st=1",
          "ans=3",
          "flag=-1"
        ],
        "4": [
          "while st<N:"
        ],
        "5": [
          "(st + 1 < N)"
        ],
        "6": [
          "(S1[st] == S1[st + 1])"
        ],
        "7": [
          "(flag < 0)"
        ],
        "8": [
          "ans*=2"
        ],
        "9": [
          "ans*=3"
        ],
        "10": [
          "st+=2",
          "flag=1"
        ],
        "11": [
          "(flag < 0)"
        ],
        "12": [
          "ans*=2"
        ],
        "13": [
          "ans*=1"
        ],
        "14": [
          "st+=1",
          "flag=-1"
        ],
        "15": [
          "(flag < 0)"
        ],
        "16": [
          "ans*=2"
        ],
        "17": [
          "ans*=1"
        ],
        "18": [
          "st+=1"
        ],
        "19": [
          "ans=ans%1000000007",
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 19
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 15
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 11
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 14
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 14
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": 17
          },
          "no_condition": null
        },
        "18": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "16": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 18
        },
        "17": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 18
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    S1 = ['a', 'a', 'b']\n    S2 = ['c', 'c', 'b']\n    (S1[0] == S1[1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    st=2\n    ans=6\n    flag=1\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    st=1\n    ans=3\n    flag=-1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    while st<N:\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 19\n\nBlock 5:\nStatement:\n    (st + 1 < N)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 15\n\nBlock 6:\nStatement:\n    (S1[st] == S1[st + 1])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 11\n\nBlock 7:\nStatement:\n    (flag < 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ans*=2\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    ans*=3\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    st+=2\n    flag=1\nNext:\n    Go to Block: 4\n\nBlock 11:\nStatement:\n    (flag < 0)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    ans*=2\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    ans*=1\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    st+=1\n    flag=-1\nNext:\n    Go to Block: 4\n\nBlock 15:\nStatement:\n    (flag < 0)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    ans*=2\nNext:\n    Go to Block: 18\n\nBlock 17:\nStatement:\n    ans*=1\nNext:\n    Go to Block: 18\n\nBlock 18:\nStatement:\n    st+=1\nNext:\n    Go to Block: 4\n\nBlock 19:\nStatement:\n    ans=ans%1000000007\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02756": {
    "s634435409": {
      "code": "import sys\nfrom collections import deque\ns = deque(['a'])\nq = 4\nrev = False\nfor query in sys.stdin:\n    if query.strip() == '1': \n        if rev:\n            rev = False\n        else:\n            rev = True\n    else:\n        t,f,c = query.split()\n        if f == '1':\n            if rev == True:\n                s.append(s)\n            else:\n                s.appendleft(c)\n        elif f == '2':\n            if rev == True:\n                s.appendleft(c)\n            else:\n                s.append(c)\nif rev == True:\n    s.reverse()\nprint(''.join(s))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            13,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        },
        "9": {
          "range": [
            16,
            16
          ]
        },
        "10": {
          "range": [
            18,
            18
          ]
        },
        "11": {
          "range": [
            19,
            19
          ]
        },
        "12": {
          "range": [
            20,
            20
          ]
        },
        "13": {
          "range": [
            21,
            21
          ]
        },
        "14": {
          "range": [
            23,
            23
          ]
        },
        "15": {
          "range": [
            24,
            24
          ]
        },
        "16": {
          "range": [
            25,
            25
          ]
        },
        "17": {
          "range": [
            26,
            26
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        13,
        14,
        15,
        18,
        6,
        7,
        8,
        11,
        6,
        7,
        13,
        14,
        19,
        20,
        21,
        6,
        7,
        8,
        9,
        6,
        24,
        26
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 10,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 11,
          "state": []
        },
        {
          "block": 12,
          "state": []
        },
        {
          "block": 13,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 15,
          "state": []
        },
        {
          "block": 17,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sys",
          "from collections import deque",
          "s = deque(['a'])",
          "q = 4",
          "rev = False"
        ],
        "2": [
          "iterator -> query, Iterate Over -> sys.stdin"
        ],
        "3": [
          "(query.strip() == '1')"
        ],
        "4": [
          "(rev)"
        ],
        "5": [
          "rev = False"
        ],
        "6": [
          "rev = True"
        ],
        "7": [
          "t,f,c = query.split()",
          "(f == '1')"
        ],
        "8": [
          "(rev == True)"
        ],
        "9": [
          "s.append(s)"
        ],
        "10": [
          "s.appendleft(c)"
        ],
        "11": [
          "(f == '2')"
        ],
        "12": [
          "(rev == True)"
        ],
        "13": [
          "s.appendleft(c)"
        ],
        "14": [
          "s.append(c)"
        ],
        "15": [
          "(rev == True)"
        ],
        "16": [
          "s.reverse()"
        ],
        "17": [
          "print(''.join(s))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 15
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 10
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 2
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": 13,
            "false": 14
          },
          "no_condition": null
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": 17
          },
          "no_condition": null
        },
        "16": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 17
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    from collections import deque\n    s = deque(['a'])\n    q = 4\n    rev = False\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> query, Iterate Over -> sys.stdin\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 15\n\nBlock 3:\nStatement:\n    (query.strip() == '1')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (rev)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    rev = False\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    rev = True\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    t,f,c = query.split()\n    (f == '1')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    (rev == True)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    s.append(s)\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    s.appendleft(c)\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (f == '2')\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 2\n\nBlock 12:\nStatement:\n    (rev == True)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    s.appendleft(c)\nNext:\n    Go to Block: 2\n\nBlock 14:\nStatement:\n    s.append(c)\nNext:\n    Go to Block: 2\n\nBlock 15:\nStatement:\n    (rev == True)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    s.reverse()\nNext:\n    Go to Block: 17\n\nBlock 17:\nStatement:\n    print(''.join(s))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03469": {
    "s357932406": {
      "code": "s = '2017/01/07'\nprint(\"2018\"+s[4:])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'2017/01/07'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "s = '2017/01/07'",
          "print(\"2018\"+s[4:])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '2017/01/07'\n    print(\"2018\"+s[4:])\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s528529940": {
      "code": "S = '2017/01/07'\nprint(S.replace(\"018\"), (\"017\"))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('replace expected at least 2 arguments, got 1')"
      },
      "cfg_block_statements": {
        "1": [
          "S = '2017/01/07'",
          "print(S.replace(\"018\"), (\"017\"))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '2017/01/07'\n    print(S.replace(\"018\"), (\"017\"))\nNext:\n    <END>\n"
    },
    "s530652321": {
      "code": "a = '2017/01/07'\ns = \"\"\nfor i in range(a):\n    if i == 3:s+=\"8\"\n    else:s+=a[i]\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "''"
            },
            {
              "a": "'2017/01/07'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "''"
            },
            {
              "a": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '2017/01/07'",
          "s = \"\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(a)"
        ],
        "3": [
          "(i == 3)"
        ],
        "4": [
          "else:s+=a[i]"
        ],
        "5": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '2017/01/07'\n    s = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i == 3)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    else:s+=a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(s)\nNext:\n    <END>\n"
    },
    "s219060183": {
      "code": "s = '2017/01/07'\ns[3] = \"8\"\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '2017/01/07'",
          "s[3] = \"8\"",
          "print(s)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '2017/01/07'\n    s[3] = \"8\"\n    print(s)\nNext:\n    <END>\n"
    },
    "s448387064": {
      "code": "n = '2017/01/07'\ns =n.replace(2017,2018)\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('replace() argument 1 must be str, not int')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '2017/01/07'",
          "s =n.replace(2017,2018)",
          "print(s)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '2017/01/07'\n    s =n.replace(2017,2018)\n    print(s)\nNext:\n    <END>\n"
    },
    "s711995939": {
      "code": "s = '2017/01/07'\ns[3]=8\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '2017/01/07'",
          "s[3]=8",
          "print(s)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '2017/01/07'\n    s[3]=8\n    print(s)\nNext:\n    <END>\n"
    },
    "s830387141": {
      "code": "S = '2017/01/07'\nS[3] = '8'\nprint(S)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = '2017/01/07'",
          "S[3] = '8'",
          "print(S)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '2017/01/07'\n    S[3] = '8'\n    print(S)\nNext:\n    <END>\n"
    },
    "s679298998": {
      "code": "s = '2017/01/07'\ns[3] = \"8\"\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '2017/01/07'",
          "s[3] = \"8\"",
          "print(s)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '2017/01/07'\n    s[3] = \"8\"\n    print(s)\nNext:\n    <END>\n"
    },
    "s097624825": {
      "code": "S = '2017/01/07'\nprint(S.replace(7, 8, 1))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('replace() argument 1 must be str, not int')"
      },
      "cfg_block_statements": {
        "1": [
          "S = '2017/01/07'",
          "print(S.replace(7, 8, 1))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '2017/01/07'\n    print(S.replace(7, 8, 1))\nNext:\n    <END>\n"
    },
    "s321774259": {
      "code": "ss = '2017/01/07'\nss[3]=8\nprint(ss)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ss": "'2017/01/07'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "ss = '2017/01/07'",
          "ss[3]=8",
          "print(ss)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    ss = '2017/01/07'\n    ss[3]=8\n    print(ss)\nNext:\n    <END>\n"
    }
  },
  "p03578": {
    "s070819280": {
      "code": "import collections\nn = 5\nd = [3, 1, 4, 1, 5]\nli=collections.Counter(d)\nm = 3\nt = [5, 4, 3]\nco=[0]*200001\nfor i in t:\n    if (li[i]-co[i])>0:\n        co[i]+=1\n    else:\n        print(\"NO\")\n        exit()\nprint(\"YES\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            12,
            13
          ]
        },
        "6": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 6,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import collections",
          "n = 5",
          "d = [3, 1, 4, 1, 5]",
          "li=collections.Counter(d)",
          "m = 3",
          "t = [5, 4, 3]",
          "co=[0]*200001"
        ],
        "2": [
          "iterator -> i, Iterate Over -> t"
        ],
        "3": [
          "(li[i] - co[i] > 0)"
        ],
        "4": [
          "co[i]+=1"
        ],
        "5": [
          "print(\"NO\")",
          "exit()"
        ],
        "6": [
          "print(\"YES\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import collections\n    n = 5\n    d = [3, 1, 4, 1, 5]\n    li=collections.Counter(d)\n    m = 3\n    t = [5, 4, 3]\n    co=[0]*200001\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> t\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (li[i] - co[i] > 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    co[i]+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"NO\")\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s310014565": {
      "code": "N = 5\nD = [3, 1, 4, 1, 5]\nM = 3\nT = [5, 4, 3]\nfor i in range(N):\n  if D[i] in T:\n    T.remove(D[i])\n    D.pop(i)\n  if len(T)==0:\n    break\nif len(T)==0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        },
        "7": {
          "range": [
            12,
            12
          ]
        },
        "8": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        5,
        6,
        7,
        8,
        9,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "D": "[3, 1, 4, 1, 5]"
            },
            {
              "T": "[5, 4, 3]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "D": "[3, 1, 4, 1, 5]"
            },
            {
              "T": "[5, 4, 3]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "D": "[3, 1, 4, 1, 5]"
            },
            {
              "T": "[5, 4, 3]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "D": "[1, 4, 1, 5]"
            },
            {
              "T": "[5, 4]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "D": "[1, 4, 1, 5]"
            },
            {
              "T": "[5, 4]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "D": "[1, 4, 1, 5]"
            },
            {
              "T": "[5, 4]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "D": "[1, 4, 1, 5]"
            },
            {
              "T": "[5, 4]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "D": "[1, 1, 5]"
            },
            {
              "T": "[5]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "D": "[1, 1, 5]"
            },
            {
              "T": "[5]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "D": "[1, 1, 5]"
            },
            {
              "T": "[5]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "D": "[1, 1, 5]"
            },
            {
              "T": "[5]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "D": "[1, 1]"
            },
            {
              "T": "[]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "D": "[1, 1]"
            },
            {
              "T": "[]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "D": "[1, 1]"
            },
            {
              "T": "[]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "D": "[1, 1]"
            },
            {
              "T": "[]"
            },
            {
              "N": "5"
            },
            {
              "M": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "D = [3, 1, 4, 1, 5]",
          "M = 3",
          "T = [5, 4, 3]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "(D[i] in T)"
        ],
        "4": [
          "T.remove(D[i])",
          "D.pop(i)"
        ],
        "5": [
          "(len(T) == 0)"
        ],
        "6": [
          "(len(T) == 0)"
        ],
        "7": [
          "print(\"YES\")"
        ],
        "8": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    D = [3, 1, 4, 1, 5]\n    M = 3\n    T = [5, 4, 3]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (D[i] in T)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    T.remove(D[i])\n    D.pop(i)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (len(T) == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    (len(T) == 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s429299371": {
      "code": "n = 5\nd = [3, 1, 4, 1, 5]\nm = 3\nt = [5, 4, 3]\nd.sort()\nt.sort()\nj = 0\nfor i in range(n):\n    if d[i] == t[j]:\n        j += 1\nif j == m:\n    print('YES')\nelse:\n    print('NO')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        8,
        9,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        9,
        10,
        8,
        11,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "j": "0"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "0"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "0"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "0"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "0"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "0"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "0"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "j": "1"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "1"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "1"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "j": "2"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "2"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "j": "2"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "j": "3"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "j": "3"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "j": "3"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "j": "3"
            },
            {
              "t": "[3, 4, 5]"
            },
            {
              "n": "5"
            },
            {
              "d": "[1, 1, 3, 4, 5]"
            },
            {
              "m": "3"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "d = [3, 1, 4, 1, 5]",
          "m = 3",
          "t = [5, 4, 3]",
          "d.sort()",
          "t.sort()",
          "j = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(d[i] == t[j])"
        ],
        "4": [
          "j += 1"
        ],
        "5": [
          "(j == m)"
        ],
        "6": [
          "print('YES')"
        ],
        "7": [
          "print('NO')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    d = [3, 1, 4, 1, 5]\n    m = 3\n    t = [5, 4, 3]\n    d.sort()\n    t.sort()\n    j = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (d[i] == t[j])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    j += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (j == m)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('NO')\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02642": {
    "s901148431": {
      "code": "N = 5\nA = [24, 11, 8, 3, 16]\nA.sort()\nB = [0] * (2 * 10 ** 5 + 1)\nM = max(A)\nfor a in A:\n\tB[a] += 1",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        6,
        7,
        6,
        7,
        6,
        7,
        6,
        7,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "M": "24"
            },
            {
              "A": "[3, 8, 11, 16, 24]"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [24, 11, 8, 3, 16]",
          "A.sort()",
          "B = [0] * (2 * 10 ** 5 + 1)",
          "M = max(A)"
        ],
        "2": [
          "iterator -> a, Iterate Over -> A"
        ],
        "3": [
          "B[a] += 1"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [24, 11, 8, 3, 16]\n    A.sort()\n    B = [0] * (2 * 10 ** 5 + 1)\n    M = max(A)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    B[a] += 1\nNext:\n    Go to Block: 2\n",
      "exception_info": null
    },
    "s756149436": {
      "code": "import sympy\nn = 5\na = [24, 11, 8, 3, 16]\na = sorted(a)\nif a[0]==1:\n    if a[1]==1:\n        print(0)\n    else:\n        print(1)\nelse:\n    ans = 0\n    for num in a:\n        if a.count(num) >= 2:\n            continue\n        else:\n            cands = set([i for i in a if i!=num])\n            divs = set(sympy.divisors(num))\n            if not cands&divs:\n                ans+=1\n    print(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            11,
            11
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        },
        "8": {
          "range": [
            16,
            18
          ]
        },
        "9": {
          "range": [
            19,
            19
          ]
        },
        "10": {
          "range": [
            20,
            20
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        11,
        12,
        13,
        16,
        17,
        18,
        19,
        12,
        13,
        16,
        17,
        18,
        19,
        12,
        13,
        16,
        17,
        18,
        19,
        12,
        13,
        16,
        17,
        18,
        12,
        13,
        16,
        17,
        18,
        12,
        20
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 9,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 9,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 9,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 8,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 10,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import sympy",
          "n = 5",
          "a = [24, 11, 8, 3, 16]",
          "a = sorted(a)",
          "(a[0] == 1)"
        ],
        "2": [
          "(a[1] == 1)"
        ],
        "3": [
          "print(0)"
        ],
        "4": [
          "print(1)"
        ],
        "5": [
          "ans = 0"
        ],
        "6": [
          "iterator -> num, Iterate Over -> a"
        ],
        "7": [
          "(a.count(num) >= 2)"
        ],
        "8": [
          "cands = set([i for i in a if i!=num])",
          "divs = set(sympy.divisors(num))",
          "(not cands & divs)"
        ],
        "9": [
          "ans+=1"
        ],
        "10": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 10
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 6,
            "false": 8
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": 9,
            "false": 6
          },
          "no_condition": null
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sympy\n    n = 5\n    a = [24, 11, 8, 3, 16]\n    a = sorted(a)\n    (a[0] == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (a[1] == 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    ans = 0\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> num, Iterate Over -> a\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 10\n\nBlock 7:\nStatement:\n    (a.count(num) >= 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 8\n\nBlock 8:\nStatement:\n    cands = set([i for i in a if i!=num])\n    divs = set(sympy.divisors(num))\n    (not cands & divs)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 6\n\nBlock 9:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 6\n\nBlock 10:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02659": {
    "s071044736": {
      "code": "Z = ['198', '1.10']\nA = int(Z[0])\nB = Z[1].split('.')\nB = int(B[0] + B[1])\na = str(A*B/100)[:-3]\na = int(a)\nprint(a)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "B": "110"
            },
            {
              "a": "21"
            },
            {
              "Z": "['198', '1.10']"
            },
            {
              "A": "198"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "Z = ['198', '1.10']",
          "A = int(Z[0])",
          "B = Z[1].split('.')",
          "B = int(B[0] + B[1])",
          "a = str(A*B/100)[:-3]",
          "a = int(a)",
          "print(a)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    Z = ['198', '1.10']\n    A = int(Z[0])\n    B = Z[1].split('.')\n    B = int(B[0] + B[1])\n    a = str(A*B/100)[:-3]\n    a = int(a)\n    print(a)\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s839564908": {
      "code": "import itertools\nimport copy\nfrom collections import deque\nimport heapq\nab = ['198', '1.10']\nA = int(ab[0])\nB = int(float(ab)*100)\nans = (A*B)//100\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"float() argument must be a string or a real number, not 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import itertools",
          "import copy",
          "from collections import deque",
          "import heapq",
          "ab = ['198', '1.10']",
          "A = int(ab[0])",
          "B = int(float(ab)*100)",
          "ans = (A*B)//100",
          "print(ans)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import itertools\n    import copy\n    from collections import deque\n    import heapq\n    ab = ['198', '1.10']\n    A = int(ab[0])\n    B = int(float(ab)*100)\n    ans = (A*B)//100\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03136": {
    "s410033060": {
      "code": "n = 4\na = [3, 8, 5, 1]\nall=0\nmx=0\nfor i in range(len(a)):\n\tx=int(a[i])\n\tif x>mx: \n\t\tmx=x\n\tall=all+x\nif all>2*mx : \n\tprint(\"Yes\")\nelse : \n\tprint(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            13,
            13
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        5,
        6,
        7,
        8,
        9,
        5,
        6,
        7,
        9,
        5,
        6,
        7,
        9,
        5,
        10,
        11
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "a = [3, 8, 5, 1]",
          "all=0",
          "mx=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(a))"
        ],
        "3": [
          "x=int(a[i])",
          "(x > mx)"
        ],
        "4": [
          "mx=x"
        ],
        "5": [
          "all=all+x"
        ],
        "6": [
          "(all > 2 * mx)"
        ],
        "7": [
          "print(\"Yes\")"
        ],
        "8": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [3, 8, 5, 1]\n    all=0\n    mx=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    x=int(a[i])\n    (x > mx)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    mx=x\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    all=all+x\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (all > 2 * mx)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s048770143": {
      "code": "N = 4\nL = [3, 8, 5, 1]\nif L[:-1] > L[-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "L": "[3, 8, 5, 1]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "L = [3, 8, 5, 1]",
          "(L[:-1] > L[-1])"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    L = [3, 8, 5, 1]\n    (L[:-1] > L[-1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p02886": {
    "s997850593": {
      "code": "from itertools import combinations\nimport sys\nsys.setrecursionlimit(10**6)\nn = 3\nd = [3, 1, 2]\ncomb = list(combinations(d, 2))\nans = 0\nfor i in range(len(d)):\n    ans += comb[i][0] * comb[i][1]\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        8,
        9,
        8,
        9,
        8,
        10
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 3,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "from itertools import combinations",
          "import sys",
          "sys.setrecursionlimit(10**6)",
          "n = 3",
          "d = [3, 1, 2]",
          "comb = list(combinations(d, 2))",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(d))"
        ],
        "3": [
          "ans += comb[i][0] * comb[i][1]"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    from itertools import combinations\n    import sys\n    sys.setrecursionlimit(10**6)\n    n = 3\n    d = [3, 1, 2]\n    comb = list(combinations(d, 2))\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(d))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += comb[i][0] * comb[i][1]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p03041": {
    "s177321698": {
      "code": "a = ['3', ' ', '1']\na.remove(\" \")\nn=int(a[0])\nk=int(a[1])\ns = ['A', 'B', 'C']\nstr=\"\"\ns[k]=s[k].lower()\nprint(str.join(s))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = ['3', ' ', '1']",
          "a.remove(\" \")",
          "n=int(a[0])",
          "k=int(a[1])",
          "s = ['A', 'B', 'C']",
          "str=\"\"",
          "s[k]=s[k].lower()",
          "print(str.join(s))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = ['3', ' ', '1']\n    a.remove(\" \")\n    n=int(a[0])\n    k=int(a[1])\n    s = ['A', 'B', 'C']\n    str=\"\"\n    s[k]=s[k].lower()\n    print(str.join(s))\nNext:\n    <END>\n",
      "exception_info": null
    },
    "s764182234": {
      "code": "miu = ['3', '1']\nsella = 'ABC'\nfor x in range(0, int(miu[0])):\n\tif x == int(miu[1]-1):\n\t\tprint(sella[x].lower(), end='')\n\telse:\n\t\tprint(sella[x], end='')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "sella": "'ABC'"
            },
            {
              "miu": "['3', '1']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sella": "'ABC'"
            },
            {
              "miu": "['3', '1']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sella": "'ABC'"
            },
            {
              "miu": "['3', '1']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "miu = ['3', '1']",
          "sella = 'ABC'"
        ],
        "2": [
          "iterator -> x, Iterate Over -> range(0, int(miu[0]))"
        ],
        "3": [
          "(x == int(miu[1] - 1))"
        ],
        "4": [
          "print(sella[x].lower(), end='')"
        ],
        "5": [
          "print(sella[x], end='')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    miu = ['3', '1']\n    sella = 'ABC'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> range(0, int(miu[0]))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x == int(miu[1] - 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(sella[x].lower(), end='')\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(sella[x], end='')\nNext:\n    Go to Block: 2\n"
    },
    "s546750078": {
      "code": "temp = [3, 1]\nS = 'ABC'\nK=int(temp[1]-1)\nif S[K]=='A':\n  S[K]='a'\nelif S[K]=='B':\n  S[K]='b'\nelse:\n  S[K]='c'\nprint(S)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "K": "0"
            },
            {
              "S": "'ABC'"
            },
            {
              "temp": "[3, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "K": "0"
            },
            {
              "S": "'ABC'"
            },
            {
              "temp": "[3, 1]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "temp = [3, 1]",
          "S = 'ABC'",
          "K=int(temp[1]-1)",
          "(S[K] == 'A')"
        ],
        "2": [
          "S[K]='a'"
        ],
        "3": [
          "(S[K] == 'B')"
        ],
        "4": [
          "S[K]='b'"
        ],
        "5": [
          "S[K]='c'"
        ],
        "6": [
          "print(S)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    temp = [3, 1]\n    S = 'ABC'\n    K=int(temp[1]-1)\n    (S[K] == 'A')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    S[K]='a'\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    (S[K] == 'B')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    S[K]='b'\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    S[K]='c'\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(S)\nNext:\n    <END>\n"
    }
  },
  "p02727": {
    "s145507675": {
      "code": "import heapq\nn = [1, 2, 2, 2, 1]\nA = [2, 4]\nB = [5, 1]\nC = [3]\na=0\nm=0\ns=0\nans = 0\nA = heapq.nlargest(n[0] , A)\nB = heapq.nlargest(n[1] , B)\nif len(C)==1:\n    C = C\nelse:\n    C = heapq.nlargest(n[0]+n[1] , C)\nfor i in range(0,n[0]+n[1]):\n    if a==n[0] and m<n[1]:\n        saidai = max([ B[m],C[s] ])\n        if C[s] >= B[m]:\n            s +=1\n        else:\n            m +=1\n    elif a<n[0] and m == n[1]:\n        saidai = max([ A[a],C[s] ])\n        if C[s] >= A[a]:\n            s +=1\n        else:\n            a +=1\n    else:\n        saidai=max([ A[a],B[m],C[s] ])\n        if A[a] >= B[m] and A[a] > C[s]:\n            a +=1\n        elif A[a] < B[m] and B[m] > C[s]:\n            m +=1\n        elif C[s] >= B[m] and A[a] <= C[s]:\n            s +=1\n    ans = ans + saidai\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            12
          ]
        },
        "2": {
          "range": [
            13,
            13
          ]
        },
        "3": {
          "range": [
            15,
            15
          ]
        },
        "4": {
          "range": [
            16,
            16
          ]
        },
        "5": {
          "range": [
            17,
            17
          ]
        },
        "6": {
          "range": [
            18,
            19
          ]
        },
        "7": {
          "range": [
            20,
            20
          ]
        },
        "8": {
          "range": [
            22,
            22
          ]
        },
        "9": {
          "range": [
            23,
            23
          ]
        },
        "10": {
          "range": [
            24,
            25
          ]
        },
        "11": {
          "range": [
            26,
            26
          ]
        },
        "12": {
          "range": [
            28,
            28
          ]
        },
        "13": {
          "range": [
            30,
            31
          ]
        },
        "14": {
          "range": [
            32,
            32
          ]
        },
        "15": {
          "range": [
            33,
            33
          ]
        },
        "16": {
          "range": [
            34,
            34
          ]
        },
        "17": {
          "range": [
            35,
            35
          ]
        },
        "18": {
          "range": [
            36,
            36
          ]
        },
        "19": {
          "range": [
            37,
            37
          ]
        },
        "20": {
          "range": [
            38,
            38
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        17,
        23,
        30,
        31,
        33,
        34,
        37,
        16,
        17,
        23,
        30,
        31,
        32,
        37,
        16,
        17,
        18,
        19,
        20,
        37,
        16,
        38
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 9,
          "state": []
        },
        {
          "block": 13,
          "state": []
        },
        {
          "block": 15,
          "state": []
        },
        {
          "block": 16,
          "state": []
        },
        {
          "block": 19,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 9,
          "state": []
        },
        {
          "block": 13,
          "state": []
        },
        {
          "block": 14,
          "state": []
        },
        {
          "block": 19,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 5,
          "state": []
        },
        {
          "block": 6,
          "state": []
        },
        {
          "block": 7,
          "state": []
        },
        {
          "block": 19,
          "state": []
        },
        {
          "block": 4,
          "state": []
        },
        {
          "block": 20,
          "state": []
        }
      ],
      "cfg_block_statements": {
        "1": [
          "import heapq",
          "n = [1, 2, 2, 2, 1]",
          "A = [2, 4]",
          "B = [5, 1]",
          "C = [3]",
          "a=0",
          "m=0",
          "s=0",
          "ans = 0",
          "A = heapq.nlargest(n[0] , A)",
          "B = heapq.nlargest(n[1] , B)",
          "(len(C) == 1)"
        ],
        "2": [
          "C = C"
        ],
        "3": [
          "C = heapq.nlargest(n[0]+n[1] , C)"
        ],
        "4": [
          "iterator -> i, Iterate Over -> range(0, n[0] + n[1])"
        ],
        "5": [
          "(a == n[0] and m < n[1])"
        ],
        "6": [
          "saidai = max([ B[m],C[s] ])",
          "(C[s] >= B[m])"
        ],
        "7": [
          "s +=1"
        ],
        "8": [
          "m +=1"
        ],
        "9": [
          "(a < n[0] and m == n[1])"
        ],
        "10": [
          "saidai = max([ A[a],C[s] ])",
          "(C[s] >= A[a])"
        ],
        "11": [
          "s +=1"
        ],
        "12": [
          "a +=1"
        ],
        "13": [
          "saidai=max([ A[a],B[m],C[s] ])",
          "(A[a] >= B[m] and A[a] > C[s])"
        ],
        "14": [
          "a +=1"
        ],
        "15": [
          "(A[a] < B[m] and B[m] > C[s])"
        ],
        "16": [
          "m +=1"
        ],
        "17": [
          "(C[s] >= B[m] and A[a] <= C[s])"
        ],
        "18": [
          "s +=1"
        ],
        "19": [
          "ans = ans + saidai"
        ],
        "20": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 20
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 9
          },
          "no_condition": null
        },
        "19": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 8
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": 11,
            "false": 12
          },
          "no_condition": null
        },
        "11": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": 17
          },
          "no_condition": null
        },
        "16": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        },
        "17": {
          "with_condition": {
            "true": 18,
            "false": 19
          },
          "no_condition": null
        },
        "18": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 19
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import heapq\n    n = [1, 2, 2, 2, 1]\n    A = [2, 4]\n    B = [5, 1]\n    C = [3]\n    a=0\n    m=0\n    s=0\n    ans = 0\n    A = heapq.nlargest(n[0] , A)\n    B = heapq.nlargest(n[1] , B)\n    (len(C) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    C = C\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    C = heapq.nlargest(n[0]+n[1] , C)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(0, n[0] + n[1])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 20\n\nBlock 5:\nStatement:\n    (a == n[0] and m < n[1])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 9\n\nBlock 6:\nStatement:\n    saidai = max([ B[m],C[s] ])\n    (C[s] >= B[m])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    s +=1\nNext:\n    Go to Block: 19\n\nBlock 8:\nStatement:\n    m +=1\nNext:\n    Go to Block: 19\n\nBlock 9:\nStatement:\n    (a < n[0] and m == n[1])\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 13\n\nBlock 10:\nStatement:\n    saidai = max([ A[a],C[s] ])\n    (C[s] >= A[a])\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    s +=1\nNext:\n    Go to Block: 19\n\nBlock 12:\nStatement:\n    a +=1\nNext:\n    Go to Block: 19\n\nBlock 13:\nStatement:\n    saidai=max([ A[a],B[m],C[s] ])\n    (A[a] >= B[m] and A[a] > C[s])\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    a +=1\nNext:\n    Go to Block: 19\n\nBlock 15:\nStatement:\n    (A[a] < B[m] and B[m] > C[s])\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    m +=1\nNext:\n    Go to Block: 19\n\nBlock 17:\nStatement:\n    (C[s] >= B[m] and A[a] <= C[s])\nNext:\n    If True: Go to Block 18\n    If False: Go to Block 19\n\nBlock 18:\nStatement:\n    s +=1\nNext:\n    Go to Block: 19\n\nBlock 19:\nStatement:\n    ans = ans + saidai\nNext:\n    Go to Block: 4\n\nBlock 20:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02885": {
    "s331322407": {
      "code": "x = ['12', '4']\na = x[0]\nb = x[1]\nif a > b * 2:\n  ret = a - b * 2\nelse:\n  ret = 0\nprint(ret)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'12'"
            },
            {
              "x": "['12', '4']"
            },
            {
              "b": "'4'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ret": "0"
            },
            {
              "a": "'12'"
            },
            {
              "x": "['12', '4']"
            },
            {
              "b": "'4'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "ret": "0"
            },
            {
              "a": "'12'"
            },
            {
              "x": "['12', '4']"
            },
            {
              "b": "'4'"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "x = ['12', '4']",
          "a = x[0]",
          "b = x[1]",
          "(a > b * 2)"
        ],
        "2": [
          "ret = a - b * 2"
        ],
        "3": [
          "ret = 0"
        ],
        "4": [
          "print(ret)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = ['12', '4']\n    a = x[0]\n    b = x[1]\n    (a > b * 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ret = a - b * 2\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    ret = 0\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(ret)\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02818": {
    "s331475374": {
      "code": "a = [2, 3, 3]\nb = a[0] - a[2]\nif b <= 0:\n  ans = a[1] + b\n  print('0 {}'.format(ans))\nelif ans <= 0:\n  print('0 0')\nelse:\n  print('{} {}'.format(b, a[1]))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[2, 3, 3]"
            },
            {
              "b": "-1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[2, 3, 3]"
            },
            {
              "ans": "2"
            },
            {
              "b": "-1"
            }
          ]
        }
      ],
      "cfg_block_statements": {
        "1": [
          "a = [2, 3, 3]",
          "b = a[0] - a[2]",
          "(b <= 0)"
        ],
        "2": [
          "ans = a[1] + b",
          "print('0 {}'.format(ans))"
        ],
        "3": [
          "(ans <= 0)"
        ],
        "4": [
          "print('0 0')"
        ],
        "5": [
          "print('{} {}'.format(b, a[1]))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [2, 3, 3]\n    b = a[0] - a[2]\n    (b <= 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = a[1] + b\n    print('0 {}'.format(ans))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (ans <= 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('0 0')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('{} {}'.format(b, a[1]))\nNext:\n    <END>\n",
      "exception_info": null
    }
  },
  "p02258": {
    "s217117243": {
      "code": "n = 6\na = ['5', '3', '1', '3', '4', '3']\nmargin = max(a) - min(a)\nprint(margin)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "6"
            },
            {
              "a": "['5', '3', '1', '3', '4', '3']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "a = ['5', '3', '1', '3', '4', '3']",
          "margin = max(a) - min(a)",
          "print(margin)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = ['5', '3', '1', '3', '4', '3']\n    margin = max(a) - min(a)\n    print(margin)\nNext:\n    <END>\n"
    }
  },
  "p02388": {
    "s314503322": {
      "code": "x = '2'\nprint(x**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "print(x**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
    },
    "s108961858": {
      "code": "x = '2'\nPow = x*x*x\nprint (Pow)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "Pow = x*x*x",
          "print (Pow)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    Pow = x*x*x\n    print (Pow)\nNext:\n    <END>\n"
    },
    "s810257670": {
      "code": "x = '2'\nprint(x ** 3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "print(x ** 3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x ** 3)\nNext:\n    <END>\n"
    },
    "s370521374": {
      "code": "x = '2'\ny = x**3\nprint(y)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "y = x**3",
          "print(y)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    y = x**3\n    print(y)\nNext:\n    <END>\n"
    },
    "s239141185": {
      "code": "x = '2'\nprint(x**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "print(x**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
    },
    "s611762447": {
      "code": "x = '2'\nans = x ** 3\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "ans = x ** 3",
          "print(ans)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    ans = x ** 3\n    print(ans)\nNext:\n    <END>\n"
    },
    "s469622184": {
      "code": "x = '2'\nprint(x ** 3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "print(x ** 3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x ** 3)\nNext:\n    <END>\n"
    },
    "s544248408": {
      "code": "N = '2'\nprint(N**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '2'",
          "print(N**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    print(N**3)\nNext:\n    <END>\n"
    },
    "s957393869": {
      "code": "x = '2'\nprint(x**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "print(x**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
    },
    "s405362471": {
      "code": "x = '2'\nprint(x ** 3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "print(x ** 3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x ** 3)\nNext:\n    <END>\n"
    },
    "s573206827": {
      "code": "s = '2'\na=s**3\nprint(a)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '2'",
          "a=s**3",
          "print(a)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '2'\n    a=s**3\n    print(a)\nNext:\n    <END>\n"
    },
    "s088793197": {
      "code": "x = '2'\nprint(x**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "print(x**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
    },
    "s195807802": {
      "code": "hoge = '2'\nprint(hoge ** 3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "hoge": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "hoge = '2'",
          "print(hoge ** 3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    hoge = '2'\n    print(hoge ** 3)\nNext:\n    <END>\n"
    },
    "s537567275": {
      "code": "x = '2'\nprint(x**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "print(x**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
    },
    "s189145088": {
      "code": "x = '2'\nx = pow(x, 3)\nprint(x + \"\\n\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '2'",
          "x = pow(x, 3)",
          "print(x + \"\\n\")"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    x = pow(x, 3)\n    print(x + \"\\n\")\nNext:\n    <END>\n"
    }
  },
  "p02389": {
    "s361298096": {
      "code": "str = '3 5'\na = str[0]\nb = str[2]\nprint(a*b, end='')\nprint((a+b)*2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "str": "'3 5'"
            },
            {
              "b": "'5'"
            },
            {
              "a": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "str = '3 5'",
          "a = str[0]",
          "b = str[2]",
          "print(a*b, end='')",
          "print((a+b)*2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    str = '3 5'\n    a = str[0]\n    b = str[2]\n    print(a*b, end='')\n    print((a+b)*2)\nNext:\n    <END>\n"
    },
    "s255812565": {
      "code": "nums = [3, 5]\narea = nums[0] * nums[1]\nperimeter = nums[0] * 2 + nums[1] * 2\nprint(area + \" \" + perimeter)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "perimeter": "16"
            },
            {
              "nums": "[3, 5]"
            },
            {
              "area": "15"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "nums = [3, 5]",
          "area = nums[0] * nums[1]",
          "perimeter = nums[0] * 2 + nums[1] * 2",
          "print(area + \" \" + perimeter)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    nums = [3, 5]\n    area = nums[0] * nums[1]\n    perimeter = nums[0] * 2 + nums[1] * 2\n    print(area + \" \" + perimeter)\nNext:\n    <END>\n"
    },
    "s292404723": {
      "code": "ab = '3 5'\nprint(ab.split(' ')[0]*ab.split(' ')[1]+\" \"+(ab.split(' ')[0]+ab.split(' ')[1])*2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ab": "'3 5'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "ab = '3 5'",
          "print(ab.split(' ')[0]*ab.split(' ')[1]+\" \"+(ab.split(' ')[0]+ab.split(' ')[1])*2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    ab = '3 5'\n    print(ab.split(' ')[0]*ab.split(' ')[1]+\" \"+(ab.split(' ')[0]+ab.split(' ')[1])*2)\nNext:\n    <END>\n"
    }
  },
  "p02390": {
    "s241764583": {
      "code": "s = 46979\nm = s // 60\nh = m // 60\ns = s % 60\noutput=\"\"\nif(h!=0):\n   output+=int(h)\noutput+=\":\"\nif(m!=0):\n   output+=int(m)\noutput+=\":\"\nif(s!=0):\n   output+=int(s)\nprint(output)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            11,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "output": "''"
            },
            {
              "h": "13"
            },
            {
              "s": "59"
            },
            {
              "m": "782"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "output": "''"
            },
            {
              "h": "13"
            },
            {
              "s": "59"
            },
            {
              "m": "782"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "s = 46979",
          "m = s // 60",
          "h = m // 60",
          "s = s % 60",
          "output=\"\"",
          "(h != 0)"
        ],
        "2": [
          "output+=int(h)"
        ],
        "3": [
          "output+=\":\"",
          "(m != 0)"
        ],
        "4": [
          "output+=int(m)"
        ],
        "5": [
          "output+=\":\"",
          "(s != 0)"
        ],
        "6": [
          "output+=int(s)"
        ],
        "7": [
          "print(output)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 46979\n    m = s // 60\n    h = m // 60\n    s = s % 60\n    output=\"\"\n    (h != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    output+=int(h)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    output+=\":\"\n    (m != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    output+=int(m)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    output+=\":\"\n    (s != 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    output+=int(s)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(output)\nNext:\n    <END>\n"
    },
    "s202243147": {
      "code": "s = '46979'\na, b = divmod(s, 60)\nh, m = divmod(a, 60)\nprint(\"{02d}:{02d}:{02d}\".format(h, m, b))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'46979'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for divmod(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '46979'",
          "a, b = divmod(s, 60)",
          "h, m = divmod(a, 60)",
          "print(\"{02d}:{02d}:{02d}\".format(h, m, b))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '46979'\n    a, b = divmod(s, 60)\n    h, m = divmod(a, 60)\n    print(\"{02d}:{02d}:{02d}\".format(h, m, b))\nNext:\n    <END>\n"
    },
    "s043122407": {
      "code": "sec_time = 46979\nhour = sec_time // 3600\nminutes = sec_time % 3600 // 60\nseconds = sec_time % 3600 % 60\ntime = ':'.join(hour, minutes, seconds)\nprint(time)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "sec_time": "46979"
            },
            {
              "hour": "13"
            },
            {
              "seconds": "59"
            },
            {
              "minutes": "2"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('str.join() takes exactly one argument (3 given)')"
      },
      "cfg_block_statements": {
        "1": [
          "sec_time = 46979",
          "hour = sec_time // 3600",
          "minutes = sec_time % 3600 // 60",
          "seconds = sec_time % 3600 % 60",
          "time = ':'.join(hour, minutes, seconds)",
          "print(time)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    sec_time = 46979\n    hour = sec_time // 3600\n    minutes = sec_time % 3600 // 60\n    seconds = sec_time % 3600 % 60\n    time = ':'.join(hour, minutes, seconds)\n    print(time)\nNext:\n    <END>\n"
    },
    "s883250214": {
      "code": "S = '46979'\nprint(':'.join(map(str,[S/3600,S%3600/60,S%60])))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'46979'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = '46979'",
          "print(':'.join(map(str,[S/3600,S%3600/60,S%60])))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '46979'\n    print(':'.join(map(str,[S/3600,S%3600/60,S%60])))\nNext:\n    <END>\n"
    },
    "s577104297": {
      "code": "S = 46979\nko = \":\"\nprint(\"S[0:2]\" + ko + S[2:3] + ko + S[3:5])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ko": "':'"
            },
            {
              "S": "46979"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 46979",
          "ko = \":\"",
          "print(\"S[0:2]\" + ko + S[2:3] + ko + S[3:5])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 46979\n    ko = \":\"\n    print(\"S[0:2]\" + ko + S[2:3] + ko + S[3:5])\nNext:\n    <END>\n"
    },
    "s660801065": {
      "code": "S = '46979'\ns = S % 60\nm = int(S / 60) % 60\nh = int(int(S / 60) / 60)\nprint('%d:%d:%d' % (h,m,s))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'46979'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "S = '46979'",
          "s = S % 60",
          "m = int(S / 60) % 60",
          "h = int(int(S / 60) / 60)",
          "print('%d:%d:%d' % (h,m,s))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '46979'\n    s = S % 60\n    m = int(S / 60) % 60\n    h = int(int(S / 60) / 60)\n    print('%d:%d:%d' % (h,m,s))\nNext:\n    <END>\n"
    }
  },
  "p02534": {
    "s494164215": {
      "code": "k = '3'\ntext = \"ACL\"*k\nprint(k)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "k": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "k = '3'",
          "text = \"ACL\"*k",
          "print(k)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    k = '3'\n    text = \"ACL\"*k\n    print(k)\nNext:\n    <END>\n"
    }
  },
  "p02621": {
    "s116920726": {
      "code": "a = '2'\nprint(a+a**2+a**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '2'",
          "print(a+a**2+a**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(a+a**2+a**3)\nNext:\n    <END>\n"
    },
    "s397859671": {
      "code": "a = '2'\nprint(pow(a,1)+pow(a,2)+pow(a,3))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '2'",
          "print(pow(a,1)+pow(a,2)+pow(a,3))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(pow(a,1)+pow(a,2)+pow(a,3))\nNext:\n    <END>\n"
    },
    "s104150927": {
      "code": "a = 2\nprint(a*(1+a(1+a)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "2"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = 2",
          "print(a*(1+a(1+a)))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 2\n    print(a*(1+a(1+a)))\nNext:\n    <END>\n"
    },
    "s715378999": {
      "code": "a = '2'\nprint(a+a**2+a**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '2'",
          "print(a+a**2+a**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(a+a**2+a**3)\nNext:\n    <END>\n"
    }
  },
  "p02622": {
    "s410300949": {
      "code": "S = 'cupofcoffee'\nT = 'cupofhottea'\ncount = 0\nfor i in len(S):\n    if S[i] != T[i]:\n        count+= 1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'cupofcoffee'"
            },
            {
              "T": "'cupofhottea'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'cupofcoffee'"
            },
            {
              "T": "'cupofhottea'"
            },
            {
              "count": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'cupofcoffee'",
          "T = 'cupofhottea'",
          "count = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> len(S)"
        ],
        "3": [
          "(S[i] != T[i])"
        ],
        "4": [
          "count+= 1"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'cupofcoffee'\n    T = 'cupofhottea'\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(S)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] != T[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count+= 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    },
    "s437251718": {
      "code": "S = 'cupofcoffee'\nT = 'cupofhottea'\ncount = 0\nfor (s,t) in map(S,T):\n  if s != t:\n    count += 1\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'cupofcoffee'"
            },
            {
              "T": "'cupofhottea'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'cupofcoffee'"
            },
            {
              "T": "'cupofhottea'"
            },
            {
              "count": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'cupofcoffee'",
          "T = 'cupofhottea'",
          "count = 0"
        ],
        "2": [
          "s <- index\n    t <- iterator"
        ],
        "3": [
          "(s != t)"
        ],
        "4": [
          "count += 1"
        ],
        "5": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'cupofcoffee'\n    T = 'cupofhottea'\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    s <- index\n    t <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s != t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    }
  },
  "p02681": {
    "s193528874": {
      "code": "S = 'chokudai'\nT = 'chokudaiz'\nif S+1 in T:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "T": "'chokudaiz'"
            },
            {
              "S": "'chokudai'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'chokudai'",
          "T = 'chokudaiz'",
          "(S + 1 in T)"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'chokudai'\n    T = 'chokudaiz'\n    (S + 1 in T)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p02711": {
    "s899458484": {
      "code": "N = 117\nif '7'in N:\n    print('Yes')\nelse:\n    print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "117"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"argument of type 'int' is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 117",
          "('7' in N)"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 117\n    ('7' in N)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    },
    "s519091295": {
      "code": "N = '117'\njudge = \"No\"\nfor i in 3:\n  if N[i] == 7:\n    judge = \"Yes\"\n    break\nprint(judge)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'117'"
            },
            {
              "judge": "'No'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'117'"
            },
            {
              "judge": "'No'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '117'",
          "judge = \"No\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> 3"
        ],
        "3": [
          "(N[i] == 7)"
        ],
        "4": [
          "judge = \"Yes\""
        ],
        "5": [
          "print(judge)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '117'\n    judge = \"No\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> 3\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N[i] == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    judge = \"Yes\"\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(judge)\nNext:\n    <END>\n"
    },
    "s895660656": {
      "code": "N = '117'\nif 7 in N:\n  print('Yes')\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'117'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'in <string>' requires string as left operand, not int\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '117'",
          "(7 in N)"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '117'\n    (7 in N)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    },
    "s992378972": {
      "code": "N = '117'\nif N in 7:\n  print('Yes')\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'117'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"argument of type 'int' is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '117'",
          "(N in 7)"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '117'\n    (N in 7)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    },
    "s593003245": {
      "code": "S = '117'\nif S.count(7):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'117'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('must be str, not int')"
      },
      "cfg_block_statements": {
        "1": [
          "S = '117'",
          "(S.count(7))"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '117'\n    (S.count(7))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    },
    "s690458129": {
      "code": "n = '117'\nif n.count(7) == 0:\n    print(\"No\")\nelse:\n    print(\"Yes\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'117'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('must be str, not int')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '117'",
          "(n.count(7) == 0)"
        ],
        "2": [
          "print(\"No\")"
        ],
        "3": [
          "print(\"Yes\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '117'\n    (n.count(7) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n"
    }
  },
  "p02712": {
    "s539095908": {
      "code": "N = '15'\nSum = 0\nfor k in range(N):\n    i = k+1\n    if i % 3 != 0 and i % 5 != 0:\n        Sum = Sum + i\nprint(Sum)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'15'"
            },
            {
              "Sum": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "'15'"
            },
            {
              "Sum": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '15'",
          "Sum = 0"
        ],
        "2": [
          "iterator -> k, Iterate Over -> range(N)"
        ],
        "3": [
          "i = k+1",
          "(i % 3 != 0 and i % 5 != 0)"
        ],
        "4": [
          "Sum = Sum + i"
        ],
        "5": [
          "print(Sum)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '15'\n    Sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    i = k+1\n    (i % 3 != 0 and i % 5 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    Sum = Sum + i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(Sum)\nNext:\n    <END>\n"
    },
    "s464292547": {
      "code": "N = 15\nprint (N*(N+1)//2 - 3*(N//3)((N//3)+1)//2 - 5*(N//5)((N//5)+1)//2 + 15*(N//15)((N//15)+1)//2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "15"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 15",
          "print (N*(N+1)//2 - 3*(N//3)((N//3)+1)//2 - 5*(N//5)((N//5)+1)//2 + 15*(N//15)((N//15)+1)//2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 15\n    print (N*(N+1)//2 - 3*(N//3)((N//3)+1)//2 - 5*(N//5)((N//5)+1)//2 + 15*(N//15)((N//15)+1)//2)\nNext:\n    <END>\n"
    },
    "s553526295": {
      "code": "n = '15'\nsum1=0\nfor i in range(n):\n    if not(i%3==0 or i%5==0):\n        sum1=sum1+i\n    else:\n        sum1=sum1\nprint(sum1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'15'"
            },
            {
              "sum1": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'15'"
            },
            {
              "sum1": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '15'",
          "sum1=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(not (i % 3 == 0 or i % 5 == 0))"
        ],
        "4": [
          "sum1=sum1+i"
        ],
        "5": [
          "sum1=sum1"
        ],
        "6": [
          "print(sum1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '15'\n    sum1=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (not (i % 3 == 0 or i % 5 == 0))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    sum1=sum1+i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    sum1=sum1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum1)\nNext:\n    <END>\n"
    }
  },
  "p02730": {
    "s092653973": {
      "code": "s = 'akasaka'\nn=len(s)\nif s[:(n-1)/2-1]==s[:(n-1)/2-1][::-1] and s==s[::-1]:\n  print('Yes')\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "7"
            },
            {
              "s": "'akasaka'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'akasaka'",
          "n=len(s)",
          "(s[:(n - 1) / 2 - 1] == s[:(n - 1) / 2 - 1][::-1] and s == s[::-1])"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'akasaka'\n    n=len(s)\n    (s[:(n - 1) / 2 - 1] == s[:(n - 1) / 2 - 1][::-1] and s == s[::-1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    },
    "s997166113": {
      "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\nif n==n[::-1] and n[0:int((n-1)/2)]==n[0:int((n-1)/2)][::-1] and n[int((n+3)/2-1):n]==n[int((n+3)/2-1):n][::-1]:\n  print('Yes')\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "['a', 'k', 'a', 's', 'a', 'k', 'a']"
            },
            {
              "n": "7"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']",
          "n = len(s)",
          "(n == n[::-1] and n[0:int((n - 1) / 2)] == n[0:int((n - 1) / 2)][::-1] and (n[int((n + 3) / 2 - 1):n] == n[int((n + 3) / 2 - 1):n][::-1]))"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\n    n = len(s)\n    (n == n[::-1] and n[0:int((n - 1) / 2)] == n[0:int((n - 1) / 2)][::-1] and (n[int((n + 3) / 2 - 1):n] == n[int((n + 3) / 2 - 1):n][::-1]))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    }
  },
  "p02731": {
    "s086678059": {
      "code": "L = '3'\nx = int(L/3)\nprint(x**3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "L": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "L = '3'",
          "x = int(L/3)",
          "print(x**3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    L = '3'\n    x = int(L/3)\n    print(x**3)\nNext:\n    <END>\n"
    }
  },
  "p02759": {
    "s017377951": {
      "code": "n = '5'\nprint(n // 2  + (n % 2))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'5'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '5'",
          "print(n // 2  + (n % 2))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    print(n // 2  + (n % 2))\nNext:\n    <END>\n"
    },
    "s844287143": {
      "code": "n = '5'\nif n%2==0:\n  print(n/2)\nif n%2==1:\n  print((n+1)/2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'5'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '5'",
          "(n % 2 == 0)"
        ],
        "2": [
          "print(n/2)"
        ],
        "3": [
          "(n % 2 == 1)"
        ],
        "4": [
          "print((n+1)/2)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n/2)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    print((n+1)/2)\nNext:\n    <END>\n"
    },
    "s305118421": {
      "code": "N = '5'\nx = int(N/2)\nprint(x)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'5'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '5'",
          "x = int(N/2)",
          "print(x)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    x = int(N/2)\n    print(x)\nNext:\n    <END>\n"
    },
    "s720984966": {
      "code": "N = '5'\nif N%2 ==0:\n  ans = N%2\n  print(ans)\nelse :\n  ans = N%2 + 0.5\n  print(int(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            4
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'5'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '5'",
          "(N % 2 == 0)"
        ],
        "2": [
          "ans = N%2",
          "print(ans)"
        ],
        "3": [
          "ans = N%2 + 0.5",
          "print(int(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = N%2\n    print(ans)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ans = N%2 + 0.5\n    print(int(ans))\nNext:\n    <END>\n"
    },
    "s416320099": {
      "code": "N = '5'\nif N%2==0 :\n    print(N/2)\nelse :\n    print(N//2+1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'5'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '5'",
          "(N % 2 == 0)"
        ],
        "2": [
          "print(N/2)"
        ],
        "3": [
          "print(N//2+1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N/2)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(N//2+1)\nNext:\n    <END>\n"
    }
  },
  "p02778": {
    "s055599375": {
      "code": "S = 'sardine'\nprint(S.replace(\"x\"))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'sardine'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('replace expected at least 2 arguments, got 1')"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'sardine'",
          "print(S.replace(\"x\"))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'sardine'\n    print(S.replace(\"x\"))\nNext:\n    <END>\n"
    },
    "s685614745": {
      "code": "S = 'sardine'\nfor _ in len(S):\n  print('x')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'sardine'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'sardine'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'sardine'"
        ],
        "2": [
          "iterator -> _, Iterate Over -> len(S)"
        ],
        "3": [
          "print('x')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'sardine'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> _, Iterate Over -> len(S)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print('x')\nNext:\n    Go to Block: 2\n"
    }
  },
  "p02791": {
    "s173665866": {
      "code": "n = 5\nli = [4, 2, 5, 1, 3]\ntmpMinIndex = li.index(1)\ncount = 0\nwhile True:\n    count += 1\n    tmpMinIndex = li[0:tmpMinIndex]\n    if tmpMinIndex == 0:\n        break\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            8
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "li": "[4, 2, 5, 1, 3]"
            },
            {
              "tmpMinIndex": "3"
            },
            {
              "n": "5"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "li": "[4, 2, 5, 1, 3]"
            },
            {
              "tmpMinIndex": "3"
            },
            {
              "n": "5"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "li": "[4, 2, 5, 1, 3]"
            },
            {
              "count": "1"
            },
            {
              "tmpMinIndex": "[4, 2, 5]"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "li": "[4, 2, 5, 1, 3]"
            },
            {
              "count": "1"
            },
            {
              "tmpMinIndex": "[4, 2, 5]"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "li": "[4, 2, 5, 1, 3]"
            },
            {
              "tmpMinIndex": "[4, 2, 5]"
            },
            {
              "count": "2"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "li = [4, 2, 5, 1, 3]",
          "tmpMinIndex = li.index(1)",
          "count = 0"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "count += 1",
          "tmpMinIndex = li[0:tmpMinIndex]",
          "(tmpMinIndex == 0)"
        ],
        "4": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    li = [4, 2, 5, 1, 3]\n    tmpMinIndex = li.index(1)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    count += 1\n    tmpMinIndex = li[0:tmpMinIndex]\n    (tmpMinIndex == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    }
  },
  "p02835": {
    "s793852728": {
      "code": "a = ['5', '7', '9']\nif (a[0]+a[1]+a[2]) >= 22:\n  print(\"bust\")\nelse:\n  print(\"win\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "['5', '7', '9']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = ['5', '7', '9']",
          "(a[0] + a[1] + a[2] >= 22)"
        ],
        "2": [
          "print(\"bust\")"
        ],
        "3": [
          "print(\"win\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = ['5', '7', '9']\n    (a[0] + a[1] + a[2] >= 22)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"bust\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"win\")\nNext:\n    <END>\n"
    }
  },
  "p02836": {
    "s067380241": {
      "code": "S = 'redcoder'\nnum = 0\nfor i in range(len(S)):\n  if not(S[i] == S[-(1+i)]):\n    S[i] = S[-1+i]\n    num +=1\nprint(num)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        3,
        4,
        3,
        4,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "num": "0"
            },
            {
              "S": "'redcoder'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'redcoder'",
          "num = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(S))"
        ],
        "3": [
          "(not S[i] == S[-(1 + i)])"
        ],
        "4": [
          "S[i] = S[-1+i]",
          "num +=1"
        ],
        "5": [
          "print(num)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'redcoder'\n    num = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (not S[i] == S[-(1 + i)])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    S[i] = S[-1+i]\n    num +=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(num)\nNext:\n    <END>\n"
    },
    "s123650070": {
      "code": "r=0\ns = 'redcoder'\nfor n in len(s):\n  if s[n]!=s[-n]:\n    r+=1\nprint(r/2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "0"
            },
            {
              "s": "'redcoder'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "r": "0"
            },
            {
              "s": "'redcoder'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "r=0",
          "s = 'redcoder'"
        ],
        "2": [
          "iterator -> n, Iterate Over -> len(s)"
        ],
        "3": [
          "(s[n] != s[-n])"
        ],
        "4": [
          "r+=1"
        ],
        "5": [
          "print(r/2)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    r=0\n    s = 'redcoder'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> len(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[n] != s[-n])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    r+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(r/2)\nNext:\n    <END>\n"
    }
  },
  "p02899": {
    "s963626225": {
      "code": "N = 3\nA = [2, 3, 1]\nfor i in range(1,N+1):\n    B.append(A.index(i)+1)\nprint(' '.join(map(int,B)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "3"
            },
            {
              "A": "[2, 3, 1]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('sequence item 0: expected str instance, int found')"
      },
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "A = [2, 3, 1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, N + 1)"
        ],
        "3": [
          "B.append(A.index(i)+1)"
        ],
        "4": [
          "print(' '.join(map(int,B)))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [2, 3, 1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    B.append(A.index(i)+1)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(' '.join(map(int,B)))\nNext:\n    <END>\n"
    }
  },
  "p02921": {
    "s079569065": {
      "code": "s = 'CSS'\nt = 'CSR'\nc=0\nfor i in (2):\n  if s[i]==t[i]:\n    c+=1\nprint(c)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "c": "0"
            },
            {
              "t": "'CSR'"
            },
            {
              "s": "'CSS'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "c": "0"
            },
            {
              "t": "'CSR'"
            },
            {
              "s": "'CSS'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'CSS'",
          "t = 'CSR'",
          "c=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> 2"
        ],
        "3": [
          "(s[i] == t[i])"
        ],
        "4": [
          "c+=1"
        ],
        "5": [
          "print(c)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'CSS'\n    t = 'CSR'\n    c=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> 2\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] == t[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    c+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(c)\nNext:\n    <END>\n"
    }
  },
  "p02935": {
    "s869093452": {
      "code": "n = 2\nvn = None\nsumV = vn[0]\nfor v in vn[1:]:\n    sumV = (sumV + v)/2\nprint(sumV)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "vn": "None"
            },
            {
              "n": "2"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 2",
          "vn = None",
          "sumV = vn[0]"
        ],
        "2": [
          "iterator -> v, Iterate Over -> vn[1:]"
        ],
        "3": [
          "sumV = (sumV + v)/2"
        ],
        "4": [
          "print(sumV)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    vn = None\n    sumV = vn[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> vn[1:]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sumV = (sumV + v)/2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(sumV)\nNext:\n    <END>\n"
    }
  },
  "p02988": {
    "s820937944": {
      "code": "n = 5\np = [1, 3, 5, 4, 2]\nt=0\nfor i in range(n):\n  if i!=0 or i!=n-1:\n    l=list(p[i-1], p[i], p[i+1])\n    l.sort()\n    if l[1]==p[i]:\n      t+=1\nprint(t)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "p": "[1, 3, 5, 4, 2]"
            },
            {
              "t": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "p": "[1, 3, 5, 4, 2]"
            },
            {
              "t": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "p": "[1, 3, 5, 4, 2]"
            },
            {
              "t": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "p": "[1, 3, 5, 4, 2]"
            },
            {
              "t": "0"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('list expected at most 1 argument, got 3')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "p = [1, 3, 5, 4, 2]",
          "t=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(i != 0 or i != n - 1)"
        ],
        "4": [
          "l=list(p[i-1], p[i], p[i+1])",
          "l.sort()",
          "(l[1] == p[i])"
        ],
        "5": [
          "t+=1"
        ],
        "6": [
          "print(t)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    p = [1, 3, 5, 4, 2]\n    t=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i != 0 or i != n - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    l=list(p[i-1], p[i], p[i+1])\n    l.sort()\n    (l[1] == p[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    t+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(t)\nNext:\n    <END>\n"
    }
  },
  "p03075": {
    "s815157740": {
      "code": "import numpy as np\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nA = a % 10\nB = b % 10\nC = c % 10\nD = d % 10\nE = e % 10\nS = []\nsum = 0\nif A != 0:\n  S.append(A)\nif B != 0:\n  S.append(B)\nif C != 0:\n  S.append(C)\nif D != 0:\n  S.append(D)\nif E != 0:\n  S.append(E)\nif len(S) == 0:\n  sum = a + b + c + d + e\nelse:\n  sum = (a //10 + b //10 + c //10 + d //10 + e //10)*10 + 10*(len(A) - 1) +min(S)\nprint(sum)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            14
          ]
        },
        "2": {
          "range": [
            15,
            15
          ]
        },
        "3": {
          "range": [
            16,
            16
          ]
        },
        "4": {
          "range": [
            17,
            17
          ]
        },
        "5": {
          "range": [
            18,
            18
          ]
        },
        "6": {
          "range": [
            19,
            19
          ]
        },
        "7": {
          "range": [
            20,
            20
          ]
        },
        "8": {
          "range": [
            21,
            21
          ]
        },
        "9": {
          "range": [
            22,
            22
          ]
        },
        "10": {
          "range": [
            23,
            23
          ]
        },
        "11": {
          "range": [
            24,
            24
          ]
        },
        "12": {
          "range": [
            25,
            25
          ]
        },
        "13": {
          "range": [
            27,
            27
          ]
        },
        "14": {
          "range": [
            28,
            28
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        27
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "S": "[]"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "S": "[1]"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "S": "[1]"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            },
            {
              "S": "[1, 2]"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            },
            {
              "S": "[1, 2]"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            },
            {
              "S": "[1, 2, 4]"
            }
          ]
        },
        {
          "block": 7,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            },
            {
              "S": "[1, 2, 4]"
            }
          ]
        },
        {
          "block": 8,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            },
            {
              "S": "[1, 2, 4, 8]"
            }
          ]
        },
        {
          "block": 9,
          "state": [
            {
              "D": "8"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            },
            {
              "S": "[1, 2, 4, 8]"
            }
          ]
        },
        {
          "block": 10,
          "state": [
            {
              "D": "8"
            },
            {
              "S": "[1, 2, 4, 8, 9]"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            }
          ]
        },
        {
          "block": 11,
          "state": [
            {
              "D": "8"
            },
            {
              "S": "[1, 2, 4, 8, 9]"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            }
          ]
        },
        {
          "block": 13,
          "state": [
            {
              "D": "8"
            },
            {
              "S": "[1, 2, 4, 8, 9]"
            },
            {
              "a": "1"
            },
            {
              "e": "9"
            },
            {
              "E": "9"
            },
            {
              "B": "2"
            },
            {
              "A": "1"
            },
            {
              "b": "2"
            },
            {
              "C": "4"
            },
            {
              "sum": "0"
            },
            {
              "c": "4"
            },
            {
              "d": "8"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "import numpy as np",
          "a = 1",
          "b = 2",
          "c = 4",
          "d = 8",
          "e = 9",
          "A = a % 10",
          "B = b % 10",
          "C = c % 10",
          "D = d % 10",
          "E = e % 10",
          "S = []",
          "sum = 0",
          "(A != 0)"
        ],
        "2": [
          "S.append(A)"
        ],
        "3": [
          "(B != 0)"
        ],
        "4": [
          "S.append(B)"
        ],
        "5": [
          "(C != 0)"
        ],
        "6": [
          "S.append(C)"
        ],
        "7": [
          "(D != 0)"
        ],
        "8": [
          "S.append(D)"
        ],
        "9": [
          "(E != 0)"
        ],
        "10": [
          "S.append(E)"
        ],
        "11": [
          "(len(S) == 0)"
        ],
        "12": [
          "sum = a + b + c + d + e"
        ],
        "13": [
          "sum = (a //10 + b //10 + c //10 + d //10 + e //10)*10 + 10*(len(A) - 1) +min(S)"
        ],
        "14": [
          "print(sum)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 14
        },
        "13": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 14
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 9\n    A = a % 10\n    B = b % 10\n    C = c % 10\n    D = d % 10\n    E = e % 10\n    S = []\n    sum = 0\n    (A != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    S.append(A)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (B != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    S.append(B)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (C != 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    S.append(C)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (D != 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    S.append(D)\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (E != 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    S.append(E)\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (len(S) == 0)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    sum = a + b + c + d + e\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    sum = (a //10 + b //10 + c //10 + d //10 + e //10)*10 + 10*(len(A) - 1) +min(S)\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    print(sum)\nNext:\n    <END>\n"
    },
    "s729740470": {
      "code": "a = '1'\nb = '2'\nc = '4'\nd = '8'\ne = '9'\nk = '15'\nf=[b-a,c-b,d-c,e-d]\nif((f[0]>k) or (f[1]>k) or (f[2]>k)or (f[3]>k)):\n  print(':(')\nelif(((f[0]+f[1])>k)or ((f[1]+f[2])>k)or ((f[2]+f[3])>k)):\n  print(':(')\nelif(((f[0]+f[1]+f[2])>k) or((f[1]+f[2]+f[3])>k)):\n  print(':(')\nelif((e-a)>k):\n  print(':(')\nelse:\n  print('Yay!')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            8
          ]
        },
        "2": {
          "range": [
            9,
            9
          ]
        },
        "3": {
          "range": [
            10,
            10
          ]
        },
        "4": {
          "range": [
            11,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            13
          ]
        },
        "7": {
          "range": [
            14,
            14
          ]
        },
        "8": {
          "range": [
            15,
            15
          ]
        },
        "9": {
          "range": [
            17,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "e": "'9'"
            },
            {
              "c": "'4'"
            },
            {
              "d": "'8'"
            },
            {
              "k": "'15'"
            },
            {
              "b": "'2'"
            },
            {
              "a": "'1'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '1'",
          "b = '2'",
          "c = '4'",
          "d = '8'",
          "e = '9'",
          "k = '15'",
          "f=[b-a,c-b,d-c,e-d]",
          "(f[0] > k or f[1] > k or f[2] > k or (f[3] > k))"
        ],
        "2": [
          "print(':(')"
        ],
        "3": [
          "(f[0] + f[1] > k or f[1] + f[2] > k or f[2] + f[3] > k)"
        ],
        "4": [
          "print(':(')"
        ],
        "5": [
          "(f[0] + f[1] + f[2] > k or f[1] + f[2] + f[3] > k)"
        ],
        "6": [
          "print(':(')"
        ],
        "7": [
          "(e - a > k)"
        ],
        "8": [
          "print(':(')"
        ],
        "9": [
          "print('Yay!')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '1'\n    b = '2'\n    c = '4'\n    d = '8'\n    e = '9'\n    k = '15'\n    f=[b-a,c-b,d-c,e-d]\n    (f[0] > k or f[1] > k or f[2] > k or (f[3] > k))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (f[0] + f[1] > k or f[1] + f[2] > k or f[2] + f[3] > k)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (f[0] + f[1] + f[2] > k or f[1] + f[2] + f[3] > k)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (e - a > k)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print('Yay!')\nNext:\n    <END>\n"
    }
  },
  "p03109": {
    "s878259472": {
      "code": "S = '2019/04/30'\nwk = S[:4]+S[5:7]+S[8:10]\nif wk<20190430:\n    print(\"Heisei\")\nelse:\n    print(\"TBD\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "wk": "'20190430'"
            },
            {
              "S": "'2019/04/30'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = '2019/04/30'",
          "wk = S[:4]+S[5:7]+S[8:10]",
          "(wk < 20190430)"
        ],
        "2": [
          "print(\"Heisei\")"
        ],
        "3": [
          "print(\"TBD\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '2019/04/30'\n    wk = S[:4]+S[5:7]+S[8:10]\n    (wk < 20190430)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Heisei\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"TBD\")\nNext:\n    <END>\n"
    },
    "s761068407": {
      "code": "s = '2019/04/30'\nif s[:3] < 2019 or s[:3] == 2019 and s[5] ==0 and s[6] <= 4:\n  print(\"Heisei\")\nelse:\n  print(\"TBD\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'2019/04/30'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '2019/04/30'",
          "(s[:3] < 2019 or (s[:3] == 2019 and s[5] == 0 and (s[6] <= 4)))"
        ],
        "2": [
          "print(\"Heisei\")"
        ],
        "3": [
          "print(\"TBD\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '2019/04/30'\n    (s[:3] < 2019 or (s[:3] == 2019 and s[5] == 0 and (s[6] <= 4)))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Heisei\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"TBD\")\nNext:\n    <END>\n"
    },
    "s013970525": {
      "code": "s = '2019/04/30'\nif s[5] == '1':\n  print('TBD')\nelse:\n  if s[6] > 4:\n    print('TBD')\n  else:\n    print('Heisei')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'2019/04/30'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "'2019/04/30'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '2019/04/30'",
          "(s[5] == '1')"
        ],
        "2": [
          "print('TBD')"
        ],
        "3": [
          "(s[6] > 4)"
        ],
        "4": [
          "print('TBD')"
        ],
        "5": [
          "print('Heisei')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '2019/04/30'\n    (s[5] == '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('TBD')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (s[6] > 4)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('TBD')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('Heisei')\nNext:\n    <END>\n"
    }
  },
  "p03207": {
    "s400050915": {
      "code": "N = 3\nlist = [4980, 7980, 6980]\nprint(sum(list)-(max(N)//2))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "list": "[4980, 7980, 6980]"
            },
            {
              "N": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "list = [4980, 7980, 6980]",
          "print(sum(list)-(max(N)//2))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    list = [4980, 7980, 6980]\n    print(sum(list)-(max(N)//2))\nNext:\n    <END>\n"
    }
  },
  "p03242": {
    "s992740087": {
      "code": "s = '119'\nif s[0] == '1':\n  s[0] = '9'\nelse:\n  s[0] = '1'\nif s[1] == '1':\n  s[1] = '9'\nelse:\n  s[1] = '1'\nif s[2] == '1':\n  s[2] = '9'\nelse:\n  s[2] = '1'\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        },
        "8": {
          "range": [
            11,
            11
          ]
        },
        "9": {
          "range": [
            13,
            13
          ]
        },
        "10": {
          "range": [
            14,
            14
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'119'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'119'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '119'",
          "(s[0] == '1')"
        ],
        "2": [
          "s[0] = '9'"
        ],
        "3": [
          "s[0] = '1'"
        ],
        "4": [
          "(s[1] == '1')"
        ],
        "5": [
          "s[1] = '9'"
        ],
        "6": [
          "s[1] = '1'"
        ],
        "7": [
          "(s[2] == '1')"
        ],
        "8": [
          "s[2] = '9'"
        ],
        "9": [
          "s[2] = '1'"
        ],
        "10": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        },
        "9": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 10
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '119'\n    (s[0] == '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    s[0] = '9'\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    s[0] = '1'\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (s[1] == '1')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    s[1] = '9'\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    s[1] = '1'\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (s[2] == '1')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    s[2] = '9'\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    s[2] = '1'\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    print(s)\nNext:\n    <END>\n"
    },
    "s823937841": {
      "code": "a = '119'\nb=a.replace(1,9)\nc=b.replace(9,1)\nprint(b)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'119'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('replace() argument 1 must be str, not int')"
      },
      "cfg_block_statements": {
        "1": [
          "a = '119'",
          "b=a.replace(1,9)",
          "c=b.replace(9,1)",
          "print(b)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '119'\n    b=a.replace(1,9)\n    c=b.replace(9,1)\n    print(b)\nNext:\n    <END>\n"
    },
    "s446721533": {
      "code": "n = '119'\nfor i in range(n):\n\tif n[i] == '9':\n\t\tn[i] = '1'\n\telse:\n\t\tn[i] = '9'\nprint(n)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'119'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'119'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '119'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(n[i] == '9')"
        ],
        "4": [
          "n[i] = '1'"
        ],
        "5": [
          "n[i] = '9'"
        ],
        "6": [
          "print(n)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '119'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (n[i] == '9')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    n[i] = '1'\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    n[i] = '9'\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(n)\nNext:\n    <END>\n"
    },
    "s418217784": {
      "code": "n = '119'\nans = \"\"\nfor i in range(n):\n    if n[i] == 1:\n        ans += \"9\"\n    else:\n        ans += \"1\"\nprint(int(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "''"
            },
            {
              "n": "'119'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "''"
            },
            {
              "n": "'119'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '119'",
          "ans = \"\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(n[i] == 1)"
        ],
        "4": [
          "ans += \"9\""
        ],
        "5": [
          "ans += \"1\""
        ],
        "6": [
          "print(int(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '119'\n    ans = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (n[i] == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += \"9\"\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans += \"1\"\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(int(ans))\nNext:\n    <END>\n"
    },
    "s222599440": {
      "code": "n = '119'\nfor i in range(len(n)):\n  if n[i] == '1':\n    n[i] = '9'\n  elif n[i] == '9':\n    n[i] = '1'\nprint(n)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            5,
            5
          ]
        },
        "6": {
          "range": [
            6,
            6
          ]
        },
        "7": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'119'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'119'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "'119'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n": "'119'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object does not support item assignment\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '119'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(n))"
        ],
        "3": [
          "(n[i] == '1')"
        ],
        "4": [
          "n[i] = '9'"
        ],
        "5": [
          "(n[i] == '9')"
        ],
        "6": [
          "n[i] = '1'"
        ],
        "7": [
          "print(n)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '119'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(n))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (n[i] == '1')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    n[i] = '9'\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (n[i] == '9')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    n[i] = '1'\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(n)\nNext:\n    <END>\n"
    }
  },
  "p03243": {
    "s424809724": {
      "code": "n = '111'\nl = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nfor i in l:\n    if n<=i:\n        print(i)\n        break",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'111'"
            },
            {
              "l": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'111'"
            },
            {
              "l": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "'111'"
            },
            {
              "l": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '111'",
          "l = [111, 222, 333, 444, 555, 666, 777, 888, 999]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> l"
        ],
        "3": [
          "(n <= i)"
        ],
        "4": [
          "print(i)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '111'\n    l = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> l\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n <= i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\nNext:\n    <END>\n"
    }
  },
  "p03250": {
    "s603202552": {
      "code": "n = [1, 5, 2]\nn.reverse()\nprint('n[0]n[1]' +[2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "[2, 5, 1]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"list\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "n = [1, 5, 2]",
          "n.reverse()",
          "print('n[0]n[1]' +[2])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = [1, 5, 2]\n    n.reverse()\n    print('n[0]n[1]' +[2])\nNext:\n    <END>\n"
    }
  },
  "p03288": {
    "s775334930": {
      "code": "r = '1199'\nif r < 1200:\n  print(ABC)\nif 1200 <= r < 2800:\n  print(ARC)\nelse:\n  print(AGC)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "'1199'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "r = '1199'",
          "(r < 1200)"
        ],
        "2": [
          "print(ABC)"
        ],
        "3": [
          "(1200 <= r < 2800)"
        ],
        "4": [
          "print(ARC)"
        ],
        "5": [
          "print(AGC)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    r = '1199'\n    (r < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(ABC)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (1200 <= r < 2800)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(ARC)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(AGC)\nNext:\n    <END>\n"
    },
    "s283403627": {
      "code": "r = '1199'\nif r<1200:\n    print(\"ABC\")\nelif 1200<r<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "r": "'1199'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "r = '1199'",
          "(r < 1200)"
        ],
        "2": [
          "print(\"ABC\")"
        ],
        "3": [
          "(1200 < r < 2800)"
        ],
        "4": [
          "print(\"ARC\")"
        ],
        "5": [
          "print(\"AGC\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    r = '1199'\n    (r < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"ABC\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (1200 < r < 2800)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"ARC\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"AGC\")\nNext:\n    <END>\n"
    }
  },
  "p03292": {
    "s123371855": {
      "code": "a = [1, 6, 3]\nA = a.sort()\nprint(A[2]-A[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "A": "None"
            },
            {
              "a": "[1, 3, 6]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = [1, 6, 3]",
          "A = a.sort()",
          "print(A[2]-A[0])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [1, 6, 3]\n    A = a.sort()\n    print(A[2]-A[0])\nNext:\n    <END>\n"
    }
  },
  "p03327": {
    "s396712348": {
      "code": "n = '999'\nif n >= 1000:\n    ans = \"ABD\"\nelse:\n    ans = \"ABC\"\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'999'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '999'",
          "(n >= 1000)"
        ],
        "2": [
          "ans = \"ABD\""
        ],
        "3": [
          "ans = \"ABC\""
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '999'\n    (n >= 1000)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = \"ABD\"\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    ans = \"ABC\"\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s428336524": {
      "code": "number = '999'\nif(number < 1000):\n    print('ABC');\nelse:\n    print('ABD');",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "number": "'999'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "number = '999'",
          "(number < 1000)"
        ],
        "2": [
          "print('ABC');"
        ],
        "3": [
          "print('ABD');"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    number = '999'\n    (number < 1000)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('ABC');\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('ABD');\nNext:\n    <END>\n"
    }
  },
  "p03338": {
    "s547405473": {
      "code": "n = 6\ns = 'aabbca'\nprint(max(len(s[:i]&s[i:]) for i in range(n)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "6"
            },
            {
              "s": "'aabbca'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for &: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 6",
          "s = 'aabbca'",
          "print(max(len(s[:i]&s[i:]) for i in range(n)))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    s = 'aabbca'\n    print(max(len(s[:i]&s[i:]) for i in range(n)))\nNext:\n    <END>\n"
    }
  },
  "p03369": {
    "s271860796": {
      "code": "S = 'oxo'\no=100\nx=0\nT = 700 + S\nprint(T)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "o": "100"
            },
            {
              "x": "0"
            },
            {
              "S": "'oxo'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'oxo'",
          "o=100",
          "x=0",
          "T = 700 + S",
          "print(T)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'oxo'\n    o=100\n    x=0\n    T = 700 + S\n    print(T)\nNext:\n    <END>\n"
    }
  },
  "p03399": {
    "s188006521": {
      "code": "train1 = 600\ntrain2 = 300\nbus1 = 220\nbus2 = 420\nprint(min(train1,train2)+min(bus1+bus2))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "train2": "300"
            },
            {
              "train1": "600"
            },
            {
              "bus2": "420"
            },
            {
              "bus1": "220"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "train1 = 600",
          "train2 = 300",
          "bus1 = 220",
          "bus2 = 420",
          "print(min(train1,train2)+min(bus1+bus2))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    train1 = 600\n    train2 = 300\n    bus1 = 220\n    bus2 = 420\n    print(min(train1,train2)+min(bus1+bus2))\nNext:\n    <END>\n"
    }
  },
  "p03408": {
    "s211300193": {
      "code": "n = 3\ns = ['apple', 'orange', 'apple']\nm = 1\nt = ['grape']\nS=set(s[i] for i in range(n))\nL=len(S)\na=[0]*(L+1)\nfor i in range(L):\n    a[i]=s.count(S[i])-t.count(S[i])\nprint(max(a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "t": "['grape']"
            },
            {
              "L": "2"
            },
            {
              "a": "[0, 0, 0]"
            },
            {
              "n": "3"
            },
            {
              "s": "['apple', 'orange', 'apple']"
            },
            {
              "S": "{'apple', 'orange'}"
            },
            {
              "m": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "t": "['grape']"
            },
            {
              "L": "2"
            },
            {
              "a": "[0, 0, 0]"
            },
            {
              "n": "3"
            },
            {
              "s": "['apple', 'orange', 'apple']"
            },
            {
              "S": "{'apple', 'orange'}"
            },
            {
              "m": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "t": "['grape']"
            },
            {
              "L": "2"
            },
            {
              "a": "[0, 0, 0]"
            },
            {
              "n": "3"
            },
            {
              "s": "['apple', 'orange', 'apple']"
            },
            {
              "S": "{'apple', 'orange'}"
            },
            {
              "m": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'set' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "s = ['apple', 'orange', 'apple']",
          "m = 1",
          "t = ['grape']",
          "S=set(s[i] for i in range(n))",
          "L=len(S)",
          "a=[0]*(L+1)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(L)"
        ],
        "3": [
          "a[i]=s.count(S[i])-t.count(S[i])"
        ],
        "4": [
          "print(max(a))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    s = ['apple', 'orange', 'apple']\n    m = 1\n    t = ['grape']\n    S=set(s[i] for i in range(n))\n    L=len(S)\n    a=[0]*(L+1)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(L)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a[i]=s.count(S[i])-t.count(S[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(a))\nNext:\n    <END>\n"
    }
  },
  "p03455": {
    "s669469791": {
      "code": "input_list = '3 4'\nresult = input_list[0]*input_list[1]\nif result % 2 == 0:\n  print('Even')\nelse:\n  print('Odd')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "input_list": "'3 4'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "input_list = '3 4'",
          "result = input_list[0]*input_list[1]",
          "(result % 2 == 0)"
        ],
        "2": [
          "print('Even')"
        ],
        "3": [
          "print('Odd')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    input_list = '3 4'\n    result = input_list[0]*input_list[1]\n    (result % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Even')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Odd')\nNext:\n    <END>\n"
    }
  },
  "p03473": {
    "s357254648": {
      "code": "i = '21'\ni = 24+i\nprint(\"{}\".format(i))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "i": "'21'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "i = '21'",
          "i = 24+i",
          "print(\"{}\".format(i))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    i = '21'\n    i = 24+i\n    print(\"{}\".format(i))\nNext:\n    <END>\n"
    }
  },
  "p03543": {
    "s017411668": {
      "code": "N = 1118\na = list(N)\nif N[0]==N[1]==N[2]==N[3] or N[0]==N[1]==N[2] or N[1]==N[2]==N[3]:\n    print('Yes')\nelse:\n    print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "1118"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 1118",
          "a = list(N)",
          "(N[0] == N[1] == N[2] == N[3] or N[0] == N[1] == N[2] or N[1] == N[2] == N[3])"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 1118\n    a = list(N)\n    (N[0] == N[1] == N[2] == N[3] or N[0] == N[1] == N[2] or N[1] == N[2] == N[3])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    }
  },
  "p03563": {
    "s210590417": {
      "code": "R = '2002'\nG = '2017'\nprint ( 2*G - R)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "G": "'2017'"
            },
            {
              "R": "'2002'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "R = '2002'",
          "G = '2017'",
          "print ( 2*G - R)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    R = '2002'\n    G = '2017'\n    print ( 2*G - R)\nNext:\n    <END>\n"
    }
  },
  "p03597": {
    "s718552222": {
      "code": "N = '3'\nA = '4'\nprint((N**2)-A)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "A": "'4'"
            },
            {
              "N": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '3'",
          "A = '4'",
          "print((N**2)-A)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '3'\n    A = '4'\n    print((N**2)-A)\nNext:\n    <END>\n"
    }
  },
  "p03610": {
    "s718524429": {
      "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nprint(t = s[0::2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "['a', 't', 'c', 'o', 'd', 'e', 'r']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'t' is an invalid keyword argument for print()\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']",
          "print(t = s[0::2])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\n    print(t = s[0::2])\nNext:\n    <END>\n"
    }
  },
  "p03631": {
    "s849080186": {
      "code": "a = 575\nif a == a[::-1]:\n  print('Yes')\nelse:\n  print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "575"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = 575",
          "(a == a[::-1])"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 575\n    (a == a[::-1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    }
  },
  "p03636": {
    "s073649804": {
      "code": "S = 'internationalization'\nprint(S[0]+str(len(S-2))+S[-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'internationalization'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'internationalization'",
          "print(S[0]+str(len(S-2))+S[-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'internationalization'\n    print(S[0]+str(len(S-2))+S[-1])\nNext:\n    <END>\n"
    },
    "s691491905": {
      "code": "s = 'internationalization'\nprint(s[0]+str(len(s-2))+s[-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'internationalization'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'internationalization'",
          "print(s[0]+str(len(s-2))+s[-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'internationalization'\n    print(s[0]+str(len(s-2))+s[-1])\nNext:\n    <END>\n"
    },
    "s164416332": {
      "code": "a = 'internationalization'\nb = len(a)\nprint(a[0]+(b-2)+a[b-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "20"
            },
            {
              "a": "'internationalization'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "a = 'internationalization'",
          "b = len(a)",
          "print(a[0]+(b-2)+a[b-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 'internationalization'\n    b = len(a)\n    print(a[0]+(b-2)+a[b-1])\nNext:\n    <END>\n"
    },
    "s363160762": {
      "code": "s = 'internationalization'\na=len(s)\nb=len(s[1:len[s]])\nprint(s[0]+'a'+s[-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "20"
            },
            {
              "s": "'internationalization'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'builtin_function_or_method' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'internationalization'",
          "a=len(s)",
          "b=len(s[1:len[s]])",
          "print(s[0]+'a'+s[-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'internationalization'\n    a=len(s)\n    b=len(s[1:len[s]])\n    print(s[0]+'a'+s[-1])\nNext:\n    <END>\n"
    },
    "s820302644": {
      "code": "s = 'internationalization'\nprint(s(0) + ( len(s)-2) + s(-1))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'internationalization'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'internationalization'",
          "print(s(0) + ( len(s)-2) + s(-1))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'internationalization'\n    print(s(0) + ( len(s)-2) + s(-1))\nNext:\n    <END>\n"
    },
    "s598448468": {
      "code": "s = 'internationalization'\nprint(s[0]+int(len(s-2))+s[-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'internationalization'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'internationalization'",
          "print(s[0]+int(len(s-2))+s[-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'internationalization'\n    print(s[0]+int(len(s-2))+s[-1])\nNext:\n    <END>\n"
    }
  },
  "p03775": {
    "s579170792": {
      "code": "n = 10000\nimport math\nfor i in range (math.sqrt(n),0,-1):\n  if n%i==0:\n    print(max(len(str(i)),len(str(n//i))))\n    quit()",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "10000"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "10000"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 10000",
          "import math"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(math.sqrt(n), 0, -1)"
        ],
        "3": [
          "(n % i == 0)"
        ],
        "4": [
          "print(max(len(str(i)),len(str(n//i))))",
          "quit()"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10000\n    import math\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(math.sqrt(n), 0, -1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(max(len(str(i)),len(str(n//i))))\n    quit()\nNext:\n    Go to Block: 2\n"
    }
  },
  "p03827": {
    "s094629606": {
      "code": "n = 5\ns = 'IIDID'\nx = 0\nans = 0\nfor c in x:\n  if c == \"I\":\n    x += 1\n  else:\n    x -= 1\n  if x > ans:\n    ans = x\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        },
        "7": {
          "range": [
            11,
            11
          ]
        },
        "8": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "0"
            },
            {
              "x": "0"
            },
            {
              "n": "5"
            },
            {
              "s": "'IIDID'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "x": "0"
            },
            {
              "n": "5"
            },
            {
              "s": "'IIDID'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "s = 'IIDID'",
          "x = 0",
          "ans = 0"
        ],
        "2": [
          "iterator -> c, Iterate Over -> x"
        ],
        "3": [
          "(c == 'I')"
        ],
        "4": [
          "x += 1"
        ],
        "5": [
          "x -= 1"
        ],
        "6": [
          "(x > ans)"
        ],
        "7": [
          "ans = x"
        ],
        "8": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 8
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": 7,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    s = 'IIDID'\n    x = 0\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> c, Iterate Over -> x\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (c == 'I')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    x += 1\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    x -= 1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    (x > ans)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 2\n\nBlock 7:\nStatement:\n    ans = x\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03997": {
    "s077978144": {
      "code": "a = '3'\nb = '4'\nh = '2'\nret = ((a + b ) * h) / 2\nprint(ret)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "'4'"
            },
            {
              "a": "'3'"
            },
            {
              "h": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = '3'",
          "b = '4'",
          "h = '2'",
          "ret = ((a + b ) * h) / 2",
          "print(ret)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = '3'\n    b = '4'\n    h = '2'\n    ret = ((a + b ) * h) / 2\n    print(ret)\nNext:\n    <END>\n"
    }
  },
  "p04029": {
    "s958882367": {
      "code": "n = '3'\nprint(n*(n+1)//2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '3'",
          "print(n*(n+1)//2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '3'\n    print(n*(n+1)//2)\nNext:\n    <END>\n"
    },
    "s999105828": {
      "code": "number = '3'\nfor i in range(number):\n  number = number+1\nprint(number)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "number": "'3'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "number": "'3'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "number = '3'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(number)"
        ],
        "3": [
          "number = number+1"
        ],
        "4": [
          "print(number)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    number = '3'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(number)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    number = number+1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(number)\nNext:\n    <END>\n"
    }
  },
  "p03293": {
    "s450057929": {
      "code": "A = ['k', 'y', 'o', 't', 'o']\nT = 'tokyo'\ncheck = 'No'\nfor i in range(len(A)):\n  if ''.join(A) == T:\n    check = 'Yes'\n  A.insert(A.pop(-1))\nprint(check)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "check": "'No'"
            },
            {
              "T": "'tokyo'"
            },
            {
              "A": "['k', 'y', 'o', 't', 'o']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "check": "'No'"
            },
            {
              "T": "'tokyo'"
            },
            {
              "A": "['k', 'y', 'o', 't', 'o']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "check": "'No'"
            },
            {
              "T": "'tokyo'"
            },
            {
              "A": "['k', 'y', 'o', 't', 'o']"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "check": "'No'"
            },
            {
              "T": "'tokyo'"
            },
            {
              "A": "['k', 'y', 'o', 't']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('insert expected 2 arguments, got 1')"
      },
      "cfg_block_statements": {
        "1": [
          "A = ['k', 'y', 'o', 't', 'o']",
          "T = 'tokyo'",
          "check = 'No'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(len(A))"
        ],
        "3": [
          "(''.join(A) == T)"
        ],
        "4": [
          "check = 'Yes'"
        ],
        "5": [
          "A.insert(A.pop(-1))"
        ],
        "6": [
          "print(check)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    A = ['k', 'y', 'o', 't', 'o']\n    T = 'tokyo'\n    check = 'No'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(A))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (''.join(A) == T)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    check = 'Yes'\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    A.insert(A.pop(-1))\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(check)\nNext:\n    <END>\n"
    },
    "s545035157": {
      "code": "s = 'kyoto'\nt = 'tokyo'\nfor i in range(s):\n    s.insert(0, s.pop(-1))\n    if s == t:\n        print(\"Yes\")\nprint(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'kyoto'"
            },
            {
              "t": "'tokyo'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'kyoto'"
            },
            {
              "t": "'tokyo'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'kyoto'",
          "t = 'tokyo'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(s)"
        ],
        "3": [
          "s.insert(0, s.pop(-1))",
          "(s == t)"
        ],
        "4": [
          "print(\"Yes\")"
        ],
        "5": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'kyoto'\n    t = 'tokyo'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    s.insert(0, s.pop(-1))\n    (s == t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p02402": {
    "s859283764": {
      "code": "n = 5\nl = [10, 1, 5, 4, 17]\nsum = 0\nfor i in range(n):\n    sum += l[i]\nprint(min(l), max(l), sum(l))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "0"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "n": "5"
            },
            {
              "sum": "10"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "n": "5"
            },
            {
              "sum": "10"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "11"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "11"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "16"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "16"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "20"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "20"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "37"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "37"
            },
            {
              "n": "5"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "l": "[10, 1, 5, 4, 17]"
            },
            {
              "sum": "37"
            },
            {
              "n": "5"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 5",
          "l = [10, 1, 5, 4, 17]",
          "sum = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "sum += l[i]"
        ],
        "4": [
          "print(min(l), max(l), sum(l))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    l = [10, 1, 5, 4, 17]\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum += l[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(l), max(l), sum(l))\nNext:\n    <END>\n"
    },
    "s595502364": {
      "code": "num = 5\nlis = [10, 1, 5, 4, 17]\nsum = 0\nmin = list[0]\nmax = list[0]\nfor i in range(num):\n    if(min > list[i]):min = list[i]\n    if(max < list[i]):max = list[i]\n    sum = sum+list[i]\nprint(\"%d %d %d\" %(min,max,sum))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "max": "<types.GenericAlias object at 0x7f0a959c2e80>"
            },
            {
              "num": "5"
            },
            {
              "lis": "[10, 1, 5, 4, 17]"
            },
            {
              "min": "<types.GenericAlias object at 0x7f0a959c2ed0>"
            },
            {
              "sum": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "max": "<types.GenericAlias object at 0x7f0a959c2e80>"
            },
            {
              "num": "5"
            },
            {
              "lis": "[10, 1, 5, 4, 17]"
            },
            {
              "min": "<types.GenericAlias object at 0x7f0a959c2ed0>"
            },
            {
              "sum": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "max": "<types.GenericAlias object at 0x7f0a959c2e80>"
            },
            {
              "num": "5"
            },
            {
              "lis": "[10, 1, 5, 4, 17]"
            },
            {
              "min": "<types.GenericAlias object at 0x7f0a959c2ed0>"
            },
            {
              "sum": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'types.GenericAlias' and 'types.GenericAlias'\")"
      },
      "cfg_block_statements": {
        "1": [
          "num = 5",
          "lis = [10, 1, 5, 4, 17]",
          "sum = 0",
          "min = list[0]",
          "max = list[0]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(num)"
        ],
        "3": [
          "(min > list[i])"
        ],
        "4": [
          "(max < list[i])"
        ],
        "5": [
          "sum = sum+list[i]"
        ],
        "6": [
          "print(\"%d %d %d\" %(min,max,sum))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    num = 5\n    lis = [10, 1, 5, 4, 17]\n    sum = 0\n    min = list[0]\n    max = list[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(num)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (min > list[i])\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (max < list[i])\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    sum = sum+list[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(\"%d %d %d\" %(min,max,sum))\nNext:\n    <END>\n"
    }
  },
  "p02407": {
    "s243217910": {
      "code": "count = 5\narray = [1, 2, 3, 4, 5]\na = array.reverse()\nprint(\" \".join(a))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "array": "[5, 4, 3, 2, 1]"
            },
            {
              "count": "5"
            },
            {
              "a": "None"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only join an iterable')"
      },
      "cfg_block_statements": {
        "1": [
          "count = 5",
          "array = [1, 2, 3, 4, 5]",
          "a = array.reverse()",
          "print(\" \".join(a))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    count = 5\n    array = [1, 2, 3, 4, 5]\n    a = array.reverse()\n    print(\" \".join(a))\nNext:\n    <END>\n"
    }
  },
  "p04011": {
    "s685713841": {
      "code": "N = '5'\nK = '3'\nX = '10000'\nY = '9000'\nif N<=K:\n  print(N*X)\nelse:\n  print(K*X + (N-K)*Y)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'5'"
            },
            {
              "Y": "'9000'"
            },
            {
              "K": "'3'"
            },
            {
              "X": "'10000'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "'5'"
            },
            {
              "Y": "'9000'"
            },
            {
              "K": "'3'"
            },
            {
              "X": "'10000'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '5'",
          "K = '3'",
          "X = '10000'",
          "Y = '9000'",
          "(N <= K)"
        ],
        "2": [
          "print(N*X)"
        ],
        "3": [
          "print(K*X + (N-K)*Y)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    K = '3'\n    X = '10000'\n    Y = '9000'\n    (N <= K)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N*X)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(K*X + (N-K)*Y)\nNext:\n    <END>\n"
    }
  },
  "p03795": {
    "s676858451": {
      "code": "N = '20'\nx = N * 800\ny = N / 15 * 200\nprint(x - y)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'20'"
            },
            {
              "x
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '20'",
          "x = N * 800",
          "y = N / 15 * 200",
          "print(x - y)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '20'\n    x = N * 800\n    y = N / 15 * 200\n    print(x - y)\nNext:\n    <END>\n"
    }
  },
  "p03029": {
    "s213703542": {
      "code": "d = [1, 3]\nprint(int(answer=(d[0]*3+d[1])/2))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "d": "[1, 3]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'answer' is an invalid keyword argument for int()\")"
      },
      "cfg_block_statements": {
        "1": [
          "d = [1, 3]",
          "print(int(answer=(d[0]*3+d[1])/2))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    d = [1, 3]\n    print(int(answer=(d[0]*3+d[1])/2))\nNext:\n    <END>\n"
    }
  },
  "p02887": {
    "s331115237": {
      "code": "from itertools import groupby\nN = 10\nS = 'aabbbbaaca'\nprint(len(groupby(S)))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'itertools.groupby' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "from itertools import groupby",
          "N = 10",
          "S = 'aabbbbaaca'",
          "print(len(groupby(S)))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    from itertools import groupby\n    N = 10\n    S = 'aabbbbaaca'\n    print(len(groupby(S)))\nNext:\n    <END>\n"
    },
    "s648912704": {
      "code": "n = 10\nt = 'aabbbbaaca'\nans=t[0]\nfor i in range(1,n):\n    if ans[-1]==i:\n        pass\n    else:\n        ans=ans+i\nprint(len(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "10"
            },
            {
              "ans": "'a'"
            },
            {
              "t": "'aabbbbaaca'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "10"
            },
            {
              "ans": "'a'"
            },
            {
              "t": "'aabbbbaaca'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "10"
            },
            {
              "ans": "'a'"
            },
            {
              "t": "'aabbbbaaca'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n": "10"
            },
            {
              "ans": "'a'"
            },
            {
              "t": "'aabbbbaaca'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 10",
          "t = 'aabbbbaaca'",
          "ans=t[0]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, n)"
        ],
        "3": [
          "(ans[-1] == i)"
        ],
        "4": [
          "ans=ans+i"
        ],
        "5": [
          "print(len(ans))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    t = 'aabbbbaaca'\n    ans=t[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (ans[-1] == i)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    ans=ans+i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(len(ans))\nNext:\n    <END>\n"
    }
  },
  "p02765": {
    "s938228948": {
      "code": "_input = '2 2919'\nnumber = _input.split()\nN = number[0]\nR = number[1]\nif N<10:\n  R += 100 * (10-N)\nprint(R)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "_input": "'2 2919'"
            },
            {
              "number": "['2', '2919']"
            },
            {
              "R": "'2919'"
            },
            {
              "N": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "_input = '2 2919'",
          "number = _input.split()",
          "N = number[0]",
          "R = number[1]",
          "(N < 10)"
        ],
        "2": [
          "R += 100 * (10-N)"
        ],
        "3": [
          "print(R)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    _input = '2 2919'\n    number = _input.split()\n    N = number[0]\n    R = number[1]\n    (N < 10)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    R += 100 * (10-N)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    print(R)\nNext:\n    <END>\n"
    }
  },
  "p02973": {
    "s627240509": {
      "code": "N = 5\nnums = [2, 1, 4, 5, 3]\nans = 0\nnums_sorted = nums[:]\nnums_sorted = list(set(nums_sorted))\nnums_sorted.sort(reverse=True)\ndi = {}\nfor i in range(N-1):\n    if nums[i] > nums[i+1]:\n        ans += 1\nnums_l = len(nums)\nnums_s = len(list(set(nums)) )\nans += nums_l - nums_s\nif len(nums_s) == 1:\n    ans += 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            10
          ]
        },
        "5": {
          "range": [
            11,
            14
          ]
        },
        "6": {
          "range": [
            15,
            15
          ]
        },
        "7": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        8,
        9,
        8,
        9,
        8,
        9,
        10,
        8,
        11,
        12,
        13,
        14
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "1"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "2"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "nums_l": "5"
            },
            {
              "N": "5"
            },
            {
              "nums_s": "5"
            },
            {
              "nums": "[2, 1, 4, 5, 3]"
            },
            {
              "di": "{}"
            },
            {
              "nums_sorted": "[5, 4, 3, 2, 1]"
            },
            {
              "ans": "2"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "nums = [2, 1, 4, 5, 3]",
          "ans = 0",
          "nums_sorted = nums[:]",
          "nums_sorted = list(set(nums_sorted))",
          "nums_sorted.sort(reverse=True)",
          "di = {}"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N - 1)"
        ],
        "3": [
          "(nums[i] > nums[i + 1])"
        ],
        "4": [
          "ans += 1"
        ],
        "5": [
          "nums_l = len(nums)",
          "nums_s = len(list(set(nums)) )",
          "ans += nums_l - nums_s",
          "(len(nums_s) == 1)"
        ],
        "6": [
          "ans += 1"
        ],
        "7": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    nums = [2, 1, 4, 5, 3]\n    ans = 0\n    nums_sorted = nums[:]\n    nums_sorted = list(set(nums_sorted))\n    nums_sorted.sort(reverse=True)\n    di = {}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (nums[i] > nums[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    nums_l = len(nums)\n    nums_s = len(list(set(nums)) )\n    ans += nums_l - nums_s\n    (len(nums_s) == 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p02615": {
    "s040693337": {
      "code": "N = 4\nA = [2, 2, 1, 3]\nA.sort(Reverse = True)\nprint(A.sum-A[-1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "A": "[2, 2, 1, 3]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'Reverse' is an invalid keyword argument for sort()\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "A = [2, 2, 1, 3]",
          "A.sort(Reverse = True)",
          "print(A.sum-A[-1])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2, 2, 1, 3]\n    A.sort(Reverse = True)\n    print(A.sum-A[-1])\nNext:\n    <END>\n"
    }
  },
  "p03080": {
    "s856233748": {
      "code": "n = '4'\ns = 'RRBR'\nt=s.count('R')\nif 2*t>n:\n    print('Yes')\nelse:\n    print('No')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'4'"
            },
            {
              "t": "3"
            },
            {
              "s": "'RRBR'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '4'",
          "s = 'RRBR'",
          "t=s.count('R')",
          "(2 * t > n)"
        ],
        "2": [
          "print('Yes')"
        ],
        "3": [
          "print('No')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '4'\n    s = 'RRBR'\n    t=s.count('R')\n    (2 * t > n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
    }
  },
  "p03555": {
    "s200655124": {
      "code": "a = 'pot'\nb = 'top'\nif a[0]==b[2] and a[1]==b[a] and a[2]==b[0]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "'top'"
            },
            {
              "a": "'pot'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"string indices must be integers, not 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = 'pot'",
          "b = 'top'",
          "(a[0] == b[2] and a[1] == b[a] and (a[2] == b[0]))"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = 'pot'\n    b = 'top'\n    (a[0] == b[2] and a[1] == b[a] and (a[2] == b[0]))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p03609": {
    "s762285374": {
      "code": "s = '100 17'\nx=list(s)\nout=\"\"\nfor i in range(x):\n\tif (i+1) % 2 ==0:\n\t\tout+=x[i]\nprint(out)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "['1', '0', '0', ' ', '1', '7']"
            },
            {
              "s": "'100 17'"
            },
            {
              "out": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "['1', '0', '0', ' ', '1', '7']"
            },
            {
              "s": "'100 17'"
            },
            {
              "out": "''"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = '100 17'",
          "x=list(s)",
          "out=\"\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(x)"
        ],
        "3": [
          "((i + 1) % 2 == 0)"
        ],
        "4": [
          "out+=x[i]"
        ],
        "5": [
          "print(out)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '100 17'\n    x=list(s)\n    out=\"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(x)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ((i + 1) % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    out+=x[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(out)\nNext:\n    <END>\n"
    }
  },
  "p03145": {
    "s126104248": {
      "code": "A = ['3', '4', '5']\nprint(A[0]*A[1]/2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "A": "['3', '4', '5']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "A = ['3', '4', '5']",
          "print(A[0]*A[1]/2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    A = ['3', '4', '5']\n    print(A[0]*A[1]/2)\nNext:\n    <END>\n"
    }
  },
  "p03449": {
    "s856149194": {
      "code": "N = 5\nA = [3, 2, 2, 4, 1]\nB = [1, 2, 2, 2, 1]\nans=0\nfor i in range(N):\n  A = sum(A[:i+1]+B[i:])\n  ans=max(ans,B)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "A": "[3, 2, 2, 4, 1]"
            },
            {
              "B": "[1, 2, 2, 2, 1]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "A": "[3, 2, 2, 4, 1]"
            },
            {
              "B": "[1, 2, 2, 2, 1]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "N": "5"
            },
            {
              "ans": "0"
            },
            {
              "A": "11"
            },
            {
              "B": "[1, 2, 2, 2, 1]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 5",
          "A = [3, 2, 2, 4, 1]",
          "B = [1, 2, 2, 2, 1]",
          "ans=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "A = sum(A[:i+1]+B[i:])",
          "ans=max(ans,B)"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [3, 2, 2, 4, 1]\n    B = [1, 2, 2, 2, 1]\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    A = sum(A[:i+1]+B[i:])\n    ans=max(ans,B)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03852": {
    "s790423947": {
      "code": "c = 'a'\nif c== 'a'|'i'|'u'|'e'|'o':\n  print('vowel')\nelse:\n  print('consonant')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "c": "'a'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for |: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "c = 'a'",
          "(c == 'a' | 'i' | 'u' | 'e' | 'o')"
        ],
        "2": [
          "print('vowel')"
        ],
        "3": [
          "print('consonant')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    c = 'a'\n    (c == 'a' | 'i' | 'u' | 'e' | 'o')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('vowel')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('consonant')\nNext:\n    <END>\n"
    }
  },
  "p02694": {
    "s832414472": {
      "code": "x = 103\na=100\nk=0\nwhile(1):\n  k+=1\n  a=a+a(1//100)\n  if(a>=x):break\nprint(k)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "100"
            },
            {
              "k": "0"
            },
            {
              "x": "103"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "100"
            },
            {
              "k": "0"
            },
            {
              "x": "103"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "100"
            },
            {
              "x": "103"
            },
            {
              "k": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = 103",
          "a=100",
          "k=0"
        ],
        "2": [
          "while(1):"
        ],
        "3": [
          "k+=1",
          "a=a+a(1//100)",
          "(a >= x)"
        ],
        "4": [
          "print(k)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = 103\n    a=100\n    k=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while(1):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    k+=1\n    a=a+a(1//100)\n    (a >= x)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(k)\nNext:\n    <END>\n"
    },
    "s316427943": {
      "code": "num = '103'\na = 100\ncount = 0\nwhile count>=0:\n  a = a * 1.1\n  count = count + 1\n  if a>=num:\n    break\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            7
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "100"
            },
            {
              "num": "'103'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "100"
            },
            {
              "num": "'103'"
            },
            {
              "count": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "110.00000000000001"
            },
            {
              "count": "1"
            },
            {
              "num": "'103'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'float' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "num = '103'",
          "a = 100",
          "count = 0"
        ],
        "2": [
          "while count>=0:"
        ],
        "3": [
          "a = a * 1.1",
          "count = count + 1",
          "(a >= num)"
        ],
        "4": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    num = '103'\n    a = 100\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while count>=0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a = a * 1.1\n    count = count + 1\n    (a >= num)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    }
  },
  "p03834": {
    "s840455491": {
      "code": "s = 'happy,newyear,enjoy'\ns1=str[:5]\ns2=str[6:13]\ns3=str[14:]\nprint('{} {} {}'.format(s1,s2,s3))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'happy,newyear,enjoy'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"type 'str' is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'happy,newyear,enjoy'",
          "s1=str[:5]",
          "s2=str[6:13]",
          "s3=str[14:]",
          "print('{} {} {}'.format(s1,s2,s3))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'happy,newyear,enjoy'\n    s1=str[:5]\n    s2=str[6:13]\n    s3=str[14:]\n    print('{} {} {}'.format(s1,s2,s3))\nNext:\n    <END>\n"
    }
  },
  "p03767": {
    "s002880500": {
      "code": "N = 2\na = [5, 2, 8, 5, 1, 5]\na = a.sort(reverse=True)\nans = sum(a[2*i] for i in range(1,N+1))\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "2"
            },
            {
              "a": "None"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 2",
          "a = [5, 2, 8, 5, 1, 5]",
          "a = a.sort(reverse=True)",
          "ans = sum(a[2*i] for i in range(1,N+1))",
          "print(ans)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    a = [5, 2, 8, 5, 1, 5]\n    a = a.sort(reverse=True)\n    ans = sum(a[2*i] for i in range(1,N+1))\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03970": {
    "s419893273": {
      "code": "n = 'C0DEFESTIVAL2O16'\na = 0\na = \"CODEFESTIVAL2016\"\nfor i, j in zip(n, a):\n  if i != j:\n    a += 1\nprint(a)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "'CODEFESTIVAL2016'"
            },
            {
              "n": "'C0DEFESTIVAL2O16'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "'CODEFESTIVAL2016'"
            },
            {
              "n": "'C0DEFESTIVAL2O16'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "'CODEFESTIVAL2016'"
            },
            {
              "n": "'C0DEFESTIVAL2O16'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "'CODEFESTIVAL2016'"
            },
            {
              "n": "'C0DEFESTIVAL2O16'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "'CODEFESTIVAL2016'"
            },
            {
              "n": "'C0DEFESTIVAL2O16'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "'CODEFESTIVAL2016'"
            },
            {
              "n": "'C0DEFESTIVAL2O16'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 'C0DEFESTIVAL2O16'",
          "a = 0",
          "a = \"CODEFESTIVAL2016\""
        ],
        "2": [
          "i <- index\n    j <- iterator"
        ],
        "3": [
          "(i != j)"
        ],
        "4": [
          "a += 1"
        ],
        "5": [
          "print(a)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 'C0DEFESTIVAL2O16'\n    a = 0\n    a = \"CODEFESTIVAL2016\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    j <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i != j)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(a)\nNext:\n    <END>\n"
    }
  },
  "p02865": {
    "s199776982": {
      "code": "N = '4'\nN = N-1\nprint(N/2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'4'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '4'",
          "N = N-1",
          "print(N/2)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    N = N-1\n    print(N/2)\nNext:\n    <END>\n"
    }
  },
  "p03573": {
    "s897552926": {
      "code": "L = [5, 7, 5]\nM =L.sort()\nif M[0]==M[1]:\n  print(M[2])\nelse:\n  print(M[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "L": "[5, 5, 7]"
            },
            {
              "M": "None"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'NoneType' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "L = [5, 7, 5]",
          "M =L.sort()",
          "(M[0] == M[1])"
        ],
        "2": [
          "print(M[2])"
        ],
        "3": [
          "print(M[0])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    L = [5, 7, 5]\n    M =L.sort()\n    (M[0] == M[1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(M[2])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(M[0])\nNext:\n    <END>\n"
    },
    "s210554371": {
      "code": "nums = '5 7 5'\nset_nums = list(set(nums))\nother = sum(nums) - sum(set_nums)\nset_nums.remove(other)\nprint(set_nums[0])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "set_nums": "['7', '5', ' ']"
            },
            {
              "nums": "'5 7 5'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "nums = '5 7 5'",
          "set_nums = list(set(nums))",
          "other = sum(nums) - sum(set_nums)",
          "set_nums.remove(other)",
          "print(set_nums[0])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    nums = '5 7 5'\n    set_nums = list(set(nums))\n    other = sum(nums) - sum(set_nums)\n    set_nums.remove(other)\n    print(set_nums[0])\nNext:\n    <END>\n"
    }
  },
  "p02682": {
    "s798571673": {
      "code": "abck = ['2', '1', '1', '3']\na=abck[0]\nb=abck[1]\nc=abck[2]\nk=abck[3]\nif a>=k:\n    print(a)\nelif a<k:\n    if a+b>k:\n        print(a)\n    else:\n        print(a-(k-a-b))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        9,
        12
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "'1'"
            },
            {
              "c": "'1'"
            },
            {
              "k": "'3'"
            },
            {
              "abck": "['2', '1', '1', '3']"
            },
            {
              "a": "'2'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "b": "'1'"
            },
            {
              "c": "'1'"
            },
            {
              "k": "'3'"
            },
            {
              "abck": "['2', '1', '1', '3']"
            },
            {
              "a": "'2'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "b": "'1'"
            },
            {
              "c": "'1'"
            },
            {
              "k": "'3'"
            },
            {
              "abck": "['2', '1', '1', '3']"
            },
            {
              "a": "'2'"
            }
          ]
        },
        {
          "block": 6,
          "state": [
            {
              "b": "'1'"
            },
            {
              "c": "'1'"
            },
            {
              "k": "'3'"
            },
            {
              "abck": "['2', '1', '1', '3']"
            },
            {
              "a": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "abck = ['2', '1', '1', '3']",
          "a=abck[0]",
          "b=abck[1]",
          "c=abck[2]",
          "k=abck[3]",
          "(a >= k)"
        ],
        "2": [
          "print(a)"
        ],
        "3": [
          "(a < k)"
        ],
        "4": [
          "(a + b > k)"
        ],
        "5": [
          "print(a)"
        ],
        "6": [
          "print(a-(k-a-b))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": "<END>"
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    abck = ['2', '1', '1', '3']\n    a=abck[0]\n    b=abck[1]\n    c=abck[2]\n    k=abck[3]\n    (a >= k)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(a)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (a < k)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    (a + b > k)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(a)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(a-(k-a-b))\nNext:\n    <END>\n"
    }
  },
  "p02842": {
    "s486384936": {
      "code": "n = '432'\na = n / 1.08\nif a-int(a) == 0.00:\n      x = int(a)\nelse:\n      x = int(a) + 1\nv = int(x * 1.08)\nif v == n:\n  print(x)\nelse:\n  print(\":(\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        },
        "5": {
          "range": [
            9,
            9
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'432'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'float'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '432'",
          "a = n / 1.08",
          "(a - int(a) == 0.0)"
        ],
        "2": [
          "x = int(a)"
        ],
        "3": [
          "x = int(a) + 1"
        ],
        "4": [
          "v = int(x * 1.08)",
          "(v == n)"
        ],
        "5": [
          "print(x)"
        ],
        "6": [
          "print(\":(\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '432'\n    a = n / 1.08\n    (a - int(a) == 0.0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    x = int(a)\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    x = int(a) + 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    v = int(x * 1.08)\n    (v == n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(x)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\":(\")\nNext:\n    <END>\n"
    }
  },
  "p02572": {
    "s162517109": {
      "code": "n = '3'\nmax = 10**9 + 7\na_list = [1, 2, 3]\nsum = 0\nfor i in range(0, len(a_list)-1):\n    sum += a_list[i] * sum(a_list[i+1:])\nsum = sum % max\nprint(sum)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "sum": "0"
            },
            {
              "a_list": "[1, 2, 3]"
            },
            {
              "n": "'3'"
            },
            {
              "max": "1000000007"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum": "0"
            },
            {
              "a_list": "[1, 2, 3]"
            },
            {
              "n": "'3'"
            },
            {
              "max": "1000000007"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sum": "0"
            },
            {
              "a_list": "[1, 2, 3]"
            },
            {
              "n": "'3'"
            },
            {
              "max": "1000000007"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '3'",
          "max = 10**9 + 7",
          "a_list = [1, 2, 3]",
          "sum = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(0, len(a_list) - 1)"
        ],
        "3": [
          "sum += a_list[i] * sum(a_list[i+1:])"
        ],
        "4": [
          "sum = sum % max",
          "print(sum)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '3'\n    max = 10**9 + 7\n    a_list = [1, 2, 3]\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, len(a_list) - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum += a_list[i] * sum(a_list[i+1:])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    sum = sum % max\n    print(sum)\nNext:\n    <END>\n"
    },
    "s735555054": {
      "code": "n = 3\na = [1, 2, 3]\nsum1 = 0\nsum2 = 0\nfor _ in a:\n  sum1 += _\n  sum2 += (a*a)\nsum1 = (sum1 * sum1)\nprint(sum1 - sum2)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "sum2": "0"
            },
            {
              "sum1": "0"
            },
            {
              "a": "[1, 2, 3]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "sum2": "0"
            },
            {
              "sum1": "0"
            },
            {
              "a": "[1, 2, 3]"
            },
            {
              "n": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "sum2": "0"
            },
            {
              "n": "3"
            },
            {
              "a": "[1, 2, 3]"
            },
            {
              "sum1": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "a = [1, 2, 3]",
          "sum1 = 0",
          "sum2 = 0"
        ],
        "2": [
          "iterator -> _, Iterate Over -> a"
        ],
        "3": [
          "sum1 += _",
          "sum2 += (a*a)"
        ],
        "4": [
          "sum1 = (sum1 * sum1)",
          "print(sum1 - sum2)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, 2, 3]\n    sum1 = 0\n    sum2 = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> _, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum1 += _\n    sum2 += (a*a)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    sum1 = (sum1 * sum1)\n    print(sum1 - sum2)\nNext:\n    <END>\n"
    }
  },
  "p03219": {
    "s632370718": {
      "code": "inp = '81 58'\nx, y = inp.split()\nprint(int(x + y/2))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "inp": "'81 58'"
            },
            {
              "y": "'58'"
            },
            {
              "x": "'81'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "inp = '81 58'",
          "x, y = inp.split()",
          "print(int(x + y/2))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    inp = '81 58'\n    x, y = inp.split()\n    print(int(x + y/2))\nNext:\n    <END>\n"
    },
    "s589939011": {
      "code": "number = '81 58'\nnum_sp=number.split(\" \")\nnum=num_sp[0]+(num_sp[1]/2)\nprint(\"%s\"%(num))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "number": "'81 58'"
            },
            {
              "num_sp": "['81', '58']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "number = '81 58'",
          "num_sp=number.split(\" \")",
          "num=num_sp[0]+(num_sp[1]/2)",
          "print(\"%s\"%(num))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    number = '81 58'\n    num_sp=number.split(\" \")\n    num=num_sp[0]+(num_sp[1]/2)\n    print(\"%s\"%(num))\nNext:\n    <END>\n"
    }
  },
  "p02570": {
    "s277679872": {
      "code": "answer = '1000 15 80'\nanswer = answer.split(' ')\nif answer[2]*answer[1]>=answer[0]:\n  print(Yes)\nelse :\n  print(No)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "answer": "['1000', '15', '80']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "answer = '1000 15 80'",
          "answer = answer.split(' ')",
          "(answer[2] * answer[1] >= answer[0])"
        ],
        "2": [
          "print(Yes)"
        ],
        "3": [
          "print(No)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    answer = '1000 15 80'\n    answer = answer.split(' ')\n    (answer[2] * answer[1] >= answer[0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(Yes)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(No)\nNext:\n    <END>\n"
    }
  },
  "p02951": {
    "s721426634": {
      "code": "N = '6 4 3'\nans = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 is 1:\n      ans += 1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        0,
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "N = '6 4 3'",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(1, N + 1)"
        ],
        "3": [
          "(len(str(i)) % 2 is 1)"
        ],
        "4": [
          "ans += 1"
        ],
        "5": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '6 4 3'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(str(i)) % 2 is 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03844": {
    "s661709853": {
      "code": "AopB = ['1', '+', '2']\nif AopB[1]=='+':\n  print(int(AopB[0]+int(AopB[2])))\nelse:\n  print(int(AopB[0]-int(AopB[2])))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "AopB": "['1', '+', '2']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "AopB": "['1', '+', '2']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "AopB = ['1', '+', '2']",
          "(AopB[1] == '+')"
        ],
        "2": [
          "print(int(AopB[0]+int(AopB[2])))"
        ],
        "3": [
          "print(int(AopB[0]-int(AopB[2])))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    AopB = ['1', '+', '2']\n    (AopB[1] == '+')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(int(AopB[0]+int(AopB[2])))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(int(AopB[0]-int(AopB[2])))\nNext:\n    <END>\n"
    }
  },
  "p02830": {
    "s803391293": {
      "code": "N = '2'\nST = 'ip cc'\nS=ST.split(' ')[0]\nT=ST.split(' ')[1]\nfor i in range(N):\n  result.append(S[i])\n  result.append(T[i])\nprint(result)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "'ip'"
            },
            {
              "T": "'cc'"
            },
            {
              "ST": "'ip cc'"
            },
            {
              "N": "'2'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "S": "'ip'"
            },
            {
              "T": "'cc'"
            },
            {
              "ST": "'ip cc'"
            },
            {
              "N": "'2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '2'",
          "ST = 'ip cc'",
          "S=ST.split(' ')[0]",
          "T=ST.split(' ')[1]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "result.append(S[i])",
          "result.append(T[i])"
        ],
        "4": [
          "print(result)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    ST = 'ip cc'\n    S=ST.split(' ')[0]\n    T=ST.split(' ')[1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    result.append(S[i])\n    result.append(T[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(result)\nNext:\n    <END>\n"
    }
  },
  "p03323": {
    "s820549191": {
      "code": "a = ['5', '4']\nif(a[0]<=8 and a[1]<=8):\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "['5', '4']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = ['5', '4']",
          "(a[0] <= 8 and a[1] <= 8)"
        ],
        "2": [
          "print(\"Yay!\")"
        ],
        "3": [
          "print(\":(\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = ['5', '4']\n    (a[0] <= 8 and a[1] <= 8)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yay!\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\":(\")\nNext:\n    <END>\n"
    }
  },
  "p02702": {
    "s158698224": {
      "code": "S = '1817181712114'\ncnt = [0]*2019\ncnt[0] = 1\nn = 0\nt = 1\nfor i in reversed(S):\n    n += i*t\n    n %= 2019\n    cnt[n] += 1\n    t *= 10\n    t %= 2019\nprint(sum(i*(i-1)//2 for i in cnt))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            11
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "0"
            },
            {
              "S": "'1817181712114'"
            },
            {
              "t": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "0"
            },
            {
              "S": "'1817181712114'"
            },
            {
              "t": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "0"
            },
            {
              "S": "'1817181712114'"
            },
            {
              "t": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = '1817181712114'",
          "cnt = [0]*2019",
          "cnt[0] = 1",
          "n = 0",
          "t = 1"
        ],
        "2": [
          "iterator -> i, Iterate Over -> reversed(S)"
        ],
        "3": [
          "n += i*t",
          "n %= 2019",
          "cnt[n] += 1",
          "t *= 10",
          "t %= 2019"
        ],
        "4": [
          "print(sum(i*(i-1)//2 for i in cnt))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '1817181712114'\n    cnt = [0]*2019\n    cnt[0] = 1\n    n = 0\n    t = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> reversed(S)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n += i*t\n    n %= 2019\n    cnt[n] += 1\n    t *= 10\n    t %= 2019\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(sum(i*(i-1)//2 for i in cnt))\nNext:\n    <END>\n"
    }
  },
  "p02701": {
    "s861193029": {
      "code": "N = 3\ns = ['apple', 'orange', 'apple']\nmemo = []\nfor i in range(s):\n    r = s.random.choice()\n    if r not in memo:    \n        memo.append(r)    \nprint(len(memo))    ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "['apple', 'orange', 'apple']"
            },
            {
              "memo": "[]"
            },
            {
              "N": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['apple', 'orange', 'apple']"
            },
            {
              "memo": "[]"
            },
            {
              "N": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "s = ['apple', 'orange', 'apple']",
          "memo = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(s)"
        ],
        "3": [
          "r = s.random.choice()",
          "(r not in memo)"
        ],
        "4": [
          "memo.append(r)"
        ],
        "5": [
          "print(len(memo))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    s = ['apple', 'orange', 'apple']\n    memo = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    r = s.random.choice()\n    (r not in memo)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    memo.append(r)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(len(memo))\nNext:\n    <END>\n"
    }
  },
  "p02396": {
    "s723936151": {
      "code": "x = '3'\nx = int(x)\nfor i in len(x):\n    if x == 0:\n        break\n    else:\n        print(\"Case\", i+1, \":\", x)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"object of type 'int' has no len()\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '3'",
          "x = int(x)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> len(x)"
        ],
        "3": [
          "(x == 0)"
        ],
        "4": [
          "print(\"Case\", i+1, \":\", x)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": "<END>",
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '3'\n    x = int(x)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(x)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x == 0)\nNext:\n    <END>    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    print(\"Case\", i+1, \":\", x)\nNext:\n    Go to Block: 2\n"
    },
    "s962029972": {
      "code": "x = '3'\nx = int(x)\nfor i in 100000:\n    if x == 0:\n        break\n    else:\n        print(\"Case\", i+1, \":\", x)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '3'",
          "x = int(x)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> 100000"
        ],
        "3": [
          "(x == 0)"
        ],
        "4": [
          "print(\"Case\", i+1, \":\", x)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": "<END>",
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '3'\n    x = int(x)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> 100000\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x == 0)\nNext:\n    <END>    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    print(\"Case\", i+1, \":\", x)\nNext:\n    Go to Block: 2\n"
    }
  },
  "p02717": {
    "s230859334": {
      "code": "a = [1, 2, 3]\na[0], a[1] = a[1], a[0]\na[0], a[2] = a[2], a[0]\nprint(a[0]+\" \"+a[1]+\" \"+a[2])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[3, 1, 2]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "a = [1, 2, 3]",
          "a[0], a[1] = a[1], a[0]",
          "a[0], a[2] = a[2], a[0]",
          "print(a[0]+\" \"+a[1]+\" \"+a[2])"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    a = [1, 2, 3]\n    a[0], a[1] = a[1], a[0]\n    a[0], a[2] = a[2], a[0]\n    print(a[0]+\" \"+a[1]+\" \"+a[2])\nNext:\n    <END>\n"
    }
  },
  "p02946": {
    "s585344124": {
      "code": "num = ['3', '7']\na, b = int(num[0]), int(num[1])\ntmp = []\nfor i in range(b-a+1,b+a):\n  tmp.append(i)\nprint(' '.join(tmp))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        5,
        4,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5, 6]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5, 6]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "tmp": "[5, 6, 7]"
            },
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "tmp": "[5, 6, 7]"
            },
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5, 6, 7, 8]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5, 6, 7, 8]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5, 6, 7, 8, 9]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5, 6, 7, 8, 9]"
            },
            {
              "b": "7"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "a": "3"
            },
            {
              "num": "['3', '7']"
            },
            {
              "tmp": "[5, 6, 7, 8, 9]"
            },
            {
              "b": "7"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('sequence item 0: expected str instance, int found')"
      },
      "cfg_block_statements": {
        "1": [
          "num = ['3', '7']",
          "a, b = int(num[0]), int(num[1])",
          "tmp = []"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(b - a + 1, b + a)"
        ],
        "3": [
          "tmp.append(i)"
        ],
        "4": [
          "print(' '.join(tmp))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    num = ['3', '7']\n    a, b = int(num[0]), int(num[1])\n    tmp = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(b - a + 1, b + a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    tmp.append(i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(' '.join(tmp))\nNext:\n    <END>\n"
    }
  },
  "p03607": {
    "s152731111": {
      "code": "n = 3\na = [6, 2, 6]\ndict = {}\nfor i in range(n):\n  if not(a[i] in dict):\n    dict(a[i]) ==1\n  if s[i] in dict:\n    dict.pop(a[i])\nprint(len(dict))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "3"
            },
            {
              "dict": "{}"
            },
            {
              "a": "[6, 2, 6]"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "3"
            },
            {
              "dict": "{}"
            },
            {
              "a": "[6, 2, 6]"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "3"
            },
            {
              "dict": "{}"
            },
            {
              "a": "[6, 2, 6]"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "n": "3"
            },
            {
              "dict": "{}"
            },
            {
              "a": "[6, 2, 6]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'dict' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = 3",
          "a = [6, 2, 6]",
          "dict = {}"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "(not a[i] in dict)"
        ],
        "4": [
          "dict(a[i]) ==1"
        ],
        "5": [
          "(s[i] in dict)"
        ],
        "6": [
          "dict.pop(a[i])"
        ],
        "7": [
          "print(len(dict))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 7
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [6, 2, 6]\n    dict = {}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (not a[i] in dict)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    dict(a[i]) ==1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (s[i] in dict)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    dict.pop(a[i])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(len(dict))\nNext:\n    <END>\n"
    }
  },
  "p02706": {
    "s448158756": {
      "code": "input_line = ['41', '2']\ndays = input_line[0]\nassignments = input_line[1]\ninput_assign = ['5', '6']\nhow_many_days = sum(input_assign)\nlen = days - how_many_days\nif len < 0:\n  print(-1)\nelse:\n  print(len)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "assignments": "'2'"
            },
            {
              "len": "<built-in function len>"
            },
            {
              "days": "'41'"
            },
            {
              "input_assign": "['5', '6']"
            },
            {
              "input_line": "['41', '2']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "input_line = ['41', '2']",
          "days = input_line[0]",
          "assignments = input_line[1]",
          "input_assign = ['5', '6']",
          "how_many_days = sum(input_assign)",
          "len = days - how_many_days",
          "(len < 0)"
        ],
        "2": [
          "print(-1)"
        ],
        "3": [
          "print(len)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    input_line = ['41', '2']\n    days = input_line[0]\n    assignments = input_line[1]\n    input_assign = ['5', '6']\n    how_many_days = sum(input_assign)\n    len = days - how_many_days\n    (len < 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(len)\nNext:\n    <END>\n"
    }
  },
  "p03286": {
    "s103716867": {
      "code": "n = '-9'\nnegBase = -2\nif (n == 0): \n    converted = \"0\"\nelse:\n    converted = \"01\"\n    while (n != 0):           \n        remainder = n % (negBase) \n        n = int(n/negBase) \n        if (remainder < 0): \n            remainder += ((-1) * negBase) \n            n += 1\n        converted = str(remainder) + converted \n    converted = converted[0:len(converted)-2]\nprint(converted)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        },
        "5": {
          "range": [
            8,
            10
          ]
        },
        "6": {
          "range": [
            11,
            12
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        },
        "8": {
          "range": [
            14,
            14
          ]
        },
        "9": {
          "range": [
            15,
            15
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        6,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "negBase": "-2"
            },
            {
              "n": "'-9'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "negBase": "-2"
            },
            {
              "n": "'-9'"
            },
            {
              "converted": "'01'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "negBase": "-2"
            },
            {
              "n": "'-9'"
            },
            {
              "converted": "'01'"
            }
          ]
        },
        {
          "block": 5,
          "state": [
            {
              "negBase": "-2"
            },
            {
              "n": "'-9'"
            },
            {
              "converted": "'01'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '-9'",
          "negBase = -2",
          "(n == 0)"
        ],
        "2": [
          "converted = \"0\""
        ],
        "3": [
          "converted = \"01\""
        ],
        "4": [
          "while (n != 0):"
        ],
        "5": [
          "remainder = n % (negBase)",
          "n = int(n/negBase)",
          "(remainder < 0)"
        ],
        "6": [
          "remainder += ((-1) * negBase)",
          "n += 1"
        ],
        "7": [
          "converted = str(remainder) + converted"
        ],
        "8": [
          "converted = converted[0:len(converted)-2]"
        ],
        "9": [
          "print(converted)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 8
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "7": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '-9'\n    negBase = -2\n    (n == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    converted = \"0\"\nNext:\n    Go to Block: 9\n\nBlock 3:\nStatement:\n    converted = \"01\"\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    while (n != 0):\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    remainder = n % (negBase)\n    n = int(n/negBase)\n    (remainder < 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    remainder += ((-1) * negBase)\n    n += 1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    converted = str(remainder) + converted\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    converted = converted[0:len(converted)-2]\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    print(converted)\nNext:\n    <END>\n"
    }
  },
  "p03059": {
    "s162263665": {
      "code": "x = '3 5 7'\nx = x.split(\" \")\na = x[0]\nb = x[1]\nc = x[2]\nn = c // a \nreturn(n * b)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "c": "'7'"
            },
            {
              "b": "'5'"
            },
            {
              "a": "'3'"
            },
            {
              "x": "['3', '5', '7']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '3 5 7'",
          "x = x.split(\" \")",
          "a = x[0]",
          "b = x[1]",
          "c = x[2]",
          "n = c // a",
          "return(n * b)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '3 5 7'\n    x = x.split(\" \")\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    n = c // a\n    return(n * b)\nNext:\n    <END>\n"
    }
  },
  "p03470": {
    "s093646747": {
      "code": "N = 4\nList = [6, 8, 10]\nprint(len(List()))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "4"
            },
            {
              "List": "[6, 8, 10]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "List = [6, 8, 10]",
          "print(len(List()))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    List = [6, 8, 10]\n    print(len(List()))\nNext:\n    <END>\n"
    }
  },
  "p04019": {
    "s018821110": {
      "code": "s = 'SENW'\nif ~(\"N\" in s ^ \"S\" in s) and ~(\"E\" in s ^ \"W\" in s):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'SENW'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for ^: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'SENW'",
          "(~('N' in s ^ 'S' in s) and ~('E' in s ^ 'W' in s))"
        ],
        "2": [
          "print(\"Yes\")"
        ],
        "3": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'SENW'\n    (~('N' in s ^ 'S' in s) and ~('E' in s ^ 'W' in s))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p03285": {
    "s837295220": {
      "code": "n = '11'\nwhile True:\n  if n%4==0:\n    print(\"YES\")\n    break\n  n-=7\n  if n<0:\n    print(\"NO\")\n    break",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            6,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'11'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'11'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "'11'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '11'"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "(n % 4 == 0)"
        ],
        "4": [
          "print(\"YES\")"
        ],
        "5": [
          "n-=7",
          "(n < 0)"
        ],
        "6": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '11'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % 4 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    n-=7\n    (n < 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
    },
    "s440860488": {
      "code": "n = '11'\nwhile True:\n  if n%4==0:\n    print(\"YES\")\n    exit()\n  n-=7\n  if n<0:\n    print(\"NO\")\n    exit()",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            5
          ]
        },
        "5": {
          "range": [
            6,
            7
          ]
        },
        "6": {
          "range": [
            8,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'11'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "n": "'11'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "n": "'11'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('not all arguments converted during string formatting')"
      },
      "cfg_block_statements": {
        "1": [
          "n = '11'"
        ],
        "2": [
          "while True:"
        ],
        "3": [
          "(n % 4 == 0)"
        ],
        "4": [
          "print(\"YES\")",
          "exit()"
        ],
        "5": [
          "n-=7",
          "(n < 0)"
        ],
        "6": [
          "print(\"NO\")",
          "exit()"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '11'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % 4 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"YES\")\n    exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    n-=7\n    (n < 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"NO\")\n    exit()\nNext:\n    Go to Block: 2\n"
    }
  },
  "p03105": {
    "s305264944": {
      "code": "S = '2 11 4'\nS = S.split()\nhowMuch = S[0]\nIhave = S[1]\nsutis = S[2]\nif (Ihave // howMuch) < sutis:\n    print(Ihave // howMuch)\nelse:\n    print(sutis)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "S": "['2', '11', '4']"
            },
            {
              "howMuch": "'2'"
            },
            {
              "Ihave": "'11'"
            },
            {
              "sutis": "'4'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = '2 11 4'",
          "S = S.split()",
          "howMuch = S[0]",
          "Ihave = S[1]",
          "sutis = S[2]",
          "(Ihave // howMuch < sutis)"
        ],
        "2": [
          "print(Ihave // howMuch)"
        ],
        "3": [
          "print(sutis)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = '2 11 4'\n    S = S.split()\n    howMuch = S[0]\n    Ihave = S[1]\n    sutis = S[2]\n    (Ihave // howMuch < sutis)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(Ihave // howMuch)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(sutis)\nNext:\n    <END>\n"
    }
  },
  "p03294": {
    "s828103062": {
      "code": "N = 3\na = [3, 4, 6]\nans = 0\nfor aa in a:\n    ans+=a-1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "[3, 4, 6]"
            },
            {
              "ans": "0"
            },
            {
              "N": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "[3, 4, 6]"
            },
            {
              "ans": "0"
            },
            {
              "N": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "a": "[3, 4, 6]"
            },
            {
              "ans": "0"
            },
            {
              "N": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "a = [3, 4, 6]",
          "ans = 0"
        ],
        "2": [
          "iterator -> aa, Iterate Over -> a"
        ],
        "3": [
          "ans+=a-1"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    a = [3, 4, 6]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> aa, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=a-1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03963": {
    "s186113090": {
      "code": "i = '2 2'\nj = i.split()\nnum_balls = j[0]\nnum_colors = j[1]\nproduct = num_colors\nif(num_balls > 1 and num_colors == 1):\n  print(0)\nfor i in range(1, num_balls):\n  product *= (num_balls - 1)\nprint(product)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            7
          ]
        },
        "3": {
          "range": [
            8,
            8
          ]
        },
        "4": {
          "range": [
            9,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "j": "['2', '2']"
            },
            {
              "num_balls": "'2'"
            },
            {
              "product": "'2'"
            },
            {
              "num_colors": "'2'"
            },
            {
              "i": "'2 2'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "i = '2 2'",
          "j = i.split()",
          "num_balls = j[0]",
          "num_colors = j[1]",
          "product = num_colors",
          "(num_balls > 1 and num_colors == 1)"
        ],
        "2": [
          "print(0)"
        ],
        "3": [
          "iterator -> i, Iterate Over -> range(1, num_balls)"
        ],
        "4": [
          "product *= (num_balls - 1)"
        ],
        "5": [
          "print(product)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    i = '2 2'\n    j = i.split()\n    num_balls = j[0]\n    num_colors = j[1]\n    product = num_colors\n    (num_balls > 1 and num_colors == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, num_balls)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    product *= (num_balls - 1)\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    print(product)\nNext:\n    <END>\n"
    }
  },
  "p03360": {
    "s160279377": {
      "code": "s = [5, 3, 11]\nK = 1\ns = sorted()\nfor i in range(K):\n    s[2] *= 2\nprint(sum(s))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "[5, 3, 11]"
            },
            {
              "K": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('sorted expected 1 argument, got 0')"
      },
      "cfg_block_statements": {
        "1": [
          "s = [5, 3, 11]",
          "K = 1",
          "s = sorted()"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(K)"
        ],
        "3": [
          "s[2] *= 2"
        ],
        "4": [
          "print(sum(s))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = [5, 3, 11]\n    K = 1\n    s = sorted()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(K)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s[2] *= 2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(sum(s))\nNext:\n    <END>\n"
    }
  },
  "p03635": {
    "s170991387": {
      "code": "s = '3 4'\na = s[0]\nb =len(s)-2\nc = s[-1]\nprint(a+b+c)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'3 4'"
            },
            {
              "c": "'4'"
            },
            {
              "a": "'3'"
            },
            {
              "b": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "s = '3 4'",
          "a = s[0]",
          "b =len(s)-2",
          "c = s[-1]",
          "print(a+b+c)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    s = '3 4'\n    a = s[0]\n    b =len(s)-2\n    c = s[-1]\n    print(a+b+c)\nNext:\n    <END>\n"
    }
  },
  "p03693": {
    "s011332190": {
      "code": "num = [4, 3, 2]\nnum = \"\".join(num)\nif num % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "num": "[4, 3, 2]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('sequence item 0: expected str instance, int found')"
      },
      "cfg_block_statements": {
        "1": [
          "num = [4, 3, 2]",
          "num = \"\".join(num)",
          "(num % 4 == 0)"
        ],
        "2": [
          "print(\"YES\")"
        ],
        "3": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    num = [4, 3, 2]\n    num = \"\".join(num)\n    (num % 4 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
    },
    "s940075289": {
      "code": "a = \"\"\nb = [4, 3, 2]\nfor i in range(3):\n  a += b[i]\nif int(a)%4:\n  print(\"NO\")\nelse:\n  print(\"YES\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "b": "[4, 3, 2]"
            },
            {
              "a": "''"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "b": "[4, 3, 2]"
            },
            {
              "a": "''"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "b": "[4, 3, 2]"
            },
            {
              "a": "''"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('can only concatenate str (not \"int\") to str')"
      },
      "cfg_block_statements": {
        "1": [
          "a = \"\"",
          "b = [4, 3, 2]"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(3)"
        ],
        "3": [
          "a += b[i]"
        ],
        "4": [
          "(int(a) % 4)"
        ],
        "5": [
          "print(\"NO\")"
        ],
        "6": [
          "print(\"YES\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    a = \"\"\n    b = [4, 3, 2]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += b[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (int(a) % 4)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n"
    }
  },
  "p02600": {
    "s173165191": {
      "code": "X = '725'\nif 400 <= X <= 599:\n    print(8)\nif 600 <= X <= 799:\n    print(7)\nif 800 <= X <= 999:\n    print(6)\nif 1000 <= X <= 1199:\n    print(5)\nif 1200 <= X <= 1399:\n    print(4)\nif 1400 <= X <= 1599:\n    print(3)\nif 1600 <= X <= 1799:\n    print(2)\nif 1800 <= X <= 1999:\n    print(1)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            8,
            8
          ]
        },
        "8": {
          "range": [
            9,
            9
          ]
        },
        "9": {
          "range": [
            10,
            10
          ]
        },
        "10": {
          "range": [
            11,
            11
          ]
        },
        "11": {
          "range": [
            12,
            12
          ]
        },
        "12": {
          "range": [
            13,
            13
          ]
        },
        "13": {
          "range": [
            14,
            14
          ]
        },
        "14": {
          "range": [
            15,
            15
          ]
        },
        "15": {
          "range": [
            16,
            16
          ]
        },
        "16": {
          "range": [
            17,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X": "'725'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<=' not supported between instances of 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "X = '725'",
          "(400 <= X <= 599)"
        ],
        "2": [
          "print(8)"
        ],
        "3": [
          "(600 <= X <= 799)"
        ],
        "4": [
          "print(7)"
        ],
        "5": [
          "(800 <= X <= 999)"
        ],
        "6": [
          "print(6)"
        ],
        "7": [
          "(1000 <= X <= 1199)"
        ],
        "8": [
          "print(5)"
        ],
        "9": [
          "(1200 <= X <= 1399)"
        ],
        "10": [
          "print(4)"
        ],
        "11": [
          "(1400 <= X <= 1599)"
        ],
        "12": [
          "print(3)"
        ],
        "13": [
          "(1600 <= X <= 1799)"
        ],
        "14": [
          "print(2)"
        ],
        "15": [
          "(1800 <= X <= 1999)"
        ],
        "16": [
          "print(1)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": "<END>"
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    X = '725'\n    (400 <= X <= 599)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(8)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (600 <= X <= 799)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(7)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (800 <= X <= 999)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(6)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (1000 <= X <= 1199)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(5)\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (1200 <= X <= 1399)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(4)\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (1400 <= X <= 1599)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print(3)\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (1600 <= X <= 1799)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print(2)\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (1800 <= X <= 1999)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print(1)\nNext:\n    <END>\n"
    },
    "s929821782": {
      "code": "x = '725'\nfor i in range(2, 10):\n  if 200*i <= x < 200*(i+1)-1:\n    pprint(10-i)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'725'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "x": "'725'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "x": "'725'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<=' not supported between instances of 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '725'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(2, 10)"
        ],
        "3": [
          "(200 * i <= x < 200 * (i + 1) - 1)"
        ],
        "4": [
          "pprint(10-i)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": "<END>"
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '725'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, 10)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (200 * i <= x < 200 * (i + 1) - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    pprint(10-i)\nNext:\n    Go to Block: 2\n"
    },
    "s697365524": {
      "code": "X = '725'\nif X>=400 and X<=599:\n    print('8')\nif X>=600 and X<=799:\n    print('7')\nif X>=800 and X<=999:\n    print('6')\nif X>=1000 and X<=1199:\n    print('5')\nif X>=1200 and X<=1399:\n    print('4')\nif X>=1400 and X<=1599:\n    print('3')\nif X>=1600 and X<=1799:\n    print('2')\nif X>=1800 and X<=1999:\n    print('1')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        },
        "7": {
          "range": [
            8,
            8
          ]
        },
        "8": {
          "range": [
            9,
            9
          ]
        },
        "9": {
          "range": [
            10,
            10
          ]
        },
        "10": {
          "range": [
            11,
            11
          ]
        },
        "11": {
          "range": [
            12,
            12
          ]
        },
        "12": {
          "range": [
            13,
            13
          ]
        },
        "13": {
          "range": [
            14,
            14
          ]
        },
        "14": {
          "range": [
            15,
            15
          ]
        },
        "15": {
          "range": [
            16,
            16
          ]
        },
        "16": {
          "range": [
            17,
            17
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "X": "'725'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "X = '725'",
          "(X >= 400 and X <= 599)"
        ],
        "2": [
          "print('8')"
        ],
        "3": [
          "(X >= 600 and X <= 799)"
        ],
        "4": [
          "print('7')"
        ],
        "5": [
          "(X >= 800 and X <= 999)"
        ],
        "6": [
          "print('6')"
        ],
        "7": [
          "(X >= 1000 and X <= 1199)"
        ],
        "8": [
          "print('5')"
        ],
        "9": [
          "(X >= 1200 and X <= 1399)"
        ],
        "10": [
          "print('4')"
        ],
        "11": [
          "(X >= 1400 and X <= 1599)"
        ],
        "12": [
          "print('3')"
        ],
        "13": [
          "(X >= 1600 and X <= 1799)"
        ],
        "14": [
          "print('2')"
        ],
        "15": [
          "(X >= 1800 and X <= 1999)"
        ],
        "16": [
          "print('1')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": "<END>"
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    X = '725'\n    (X >= 400 and X <= 599)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('8')\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (X >= 600 and X <= 799)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('7')\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (X >= 800 and X <= 999)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('6')\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (X >= 1000 and X <= 1199)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('5')\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (X >= 1200 and X <= 1399)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('4')\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (X >= 1400 and X <= 1599)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print('3')\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (X >= 1600 and X <= 1799)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print('2')\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (X >= 1800 and X <= 1999)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print('1')\nNext:\n    <END>\n"
    }
  },
  "p02583": {
    "s649329879": {
      "code": "import itertools\nimport math\nn = 5\nl = [4, 4, 9, 7, 5]\nc = list(itertools.combinations(l, 3))\ncount=0\nr=math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)\nfor i in range(r):\n    if c[i][0]==c[i][1] or c[i][1]==c[i][2] or c[i][2]==c[i][0]:\n        pass\n    else:\n        if c[i][0]+c[i][1]>c[i][2] and c[i][1]+c[i][2]>c[i][0] and c[i][2]+c[i][0]>c[i][1]:\n            count+=1\n        else:\n            pass\nprint(count)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            7
          ]
        },
        "2": {
          "range": [
            8,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            12,
            12
          ]
        },
        "5": {
          "range": [
            13,
            13
          ]
        },
        "6": {
          "range": [
            16,
            16
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 2,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
      },
      "cfg_block_statements": {
        "1": [
          "import itertools",
          "import math",
          "n = 5",
          "l = [4, 4, 9, 7, 5]",
          "c = list(itertools.combinations(l, 3))",
          "count=0",
          "r=math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(r)"
        ],
        "3": [
          "(c[i][0] == c[i][1] or c[i][1] == c[i][2] or c[i][2] == c[i][0])"
        ],
        "4": [
          "(c[i][0] + c[i][1] > c[i][2] and c[i][1] + c[i][2] > c[i][0] and (c[i][2] + c[i][0] > c[i][1]))"
        ],
        "5": [
          "count+=1"
        ],
        "6": [
          "print(count)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 2,
            "false": 4
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 2
          },
          "no_condition": null
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import itertools\n    import math\n    n = 5\n    l = [4, 4, 9, 7, 5]\n    c = list(itertools.combinations(l, 3))\n    count=0\n    r=math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(r)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (c[i][0] == c[i][1] or c[i][1] == c[i][2] or c[i][2] == c[i][0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (c[i][0] + c[i][1] > c[i][2] and c[i][1] + c[i][2] > c[i][0] and (c[i][2] + c[i][0] > c[i][1]))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    count+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n"
    }
  },
  "p03698": {
    "s765653173": {
      "code": "s = 'uncopyrightable'\nw=set()\nfor i in (len(s)):\n    w.add(s[i])\nif len(s)==len(w):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            5
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "'uncopyrightable'"
            },
            {
              "w": "{}"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "'uncopyrightable'"
            },
            {
              "w": "{}"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "s = 'uncopyrightable'",
          "w=set()"
        ],
        "2": [
          "iterator -> i, Iterate Over -> len(s)"
        ],
        "3": [
          "w.add(s[i])"
        ],
        "4": [
          "(len(s) == len(w))"
        ],
        "5": [
          "print(\"Yes\")"
        ],
        "6": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = 'uncopyrightable'\n    w=set()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    w.add(s[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (len(s) == len(w))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p02777": {
    "s848996008": {
      "code": "N = 'red blue'\nA = ['3', '4']\nif(A in N):\n  print(\"YES\")\nelse:\n  print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "A": "['3', '4']"
            },
            {
              "N": "'red blue'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'in <string>' requires string as left operand, not list\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 'red blue'",
          "A = ['3', '4']",
          "(A in N)"
        ],
        "2": [
          "print(\"YES\")"
        ],
        "3": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 'red blue'\n    A = ['3', '4']\n    (A in N)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
    },
    "s059194549": {
      "code": "color = ['red', 'blue']\nnumber = ['3', '4']\nchoice = 'red'\nfor i in [0,1]:\n  if choice == color[i]:\n    number[i] -= 1\nprint(number[0],number[1])",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "number": "['3', '4']"
            },
            {
              "choice": "'red'"
            },
            {
              "color": "['red', 'blue']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "number": "['3', '4']"
            },
            {
              "choice": "'red'"
            },
            {
              "color": "['red', 'blue']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "number": "['3', '4']"
            },
            {
              "choice": "'red'"
            },
            {
              "color": "['red', 'blue']"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "number": "['3', '4']"
            },
            {
              "choice": "'red'"
            },
            {
              "color": "['red', 'blue']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -=: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "color = ['red', 'blue']",
          "number = ['3', '4']",
          "choice = 'red'"
        ],
        "2": [
          "iterator -> i, Iterate Over -> [0, 1]"
        ],
        "3": [
          "(choice == color[i])"
        ],
        "4": [
          "number[i] -= 1"
        ],
        "5": [
          "print(number[0],number[1])"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    color = ['red', 'blue']\n    number = ['3', '4']\n    choice = 'red'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> [0, 1]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (choice == color[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    number[i] -= 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(number[0],number[1])\nNext:\n    <END>\n"
    }
  },
  "p03149": {
    "s633580784": {
      "code": "li = [1, 7, 9, 4]\nif (li in 1) and (li in 9) and (li in 7) and (li in 4):\n  print('YES')\nelse:\n  print('NO')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "li": "[1, 7, 9, 4]"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"argument of type 'int' is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "li = [1, 7, 9, 4]",
          "(li in 1 and li in 9 and (li in 7) and (li in 4))"
        ],
        "2": [
          "print('YES')"
        ],
        "3": [
          "print('NO')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    li = [1, 7, 9, 4]\n    (li in 1 and li in 9 and (li in 7) and (li in 4))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('NO')\nNext:\n    <END>\n"
    }
  },
  "p03315": {
    "s404515718": {
      "code": "s = ['+', '-', '+', '+']\nfor i in s:\n  if s[i] == \"+\":\n    s[i] = 1\n  else:\n    s[i] = -1\nprint(sum(s))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            1
          ]
        },
        "2": {
          "range": [
            2,
            2
          ]
        },
        "3": {
          "range": [
            3,
            3
          ]
        },
        "4": {
          "range": [
            4,
            4
          ]
        },
        "5": {
          "range": [
            6,
            6
          ]
        },
        "6": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "s": "['+', '-', '+', '+']"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "s": "['+', '-', '+', '+']"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "s": "['+', '-', '+', '+']"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('list indices must be integers or slices, not str')"
      },
      "cfg_block_statements": {
        "1": [
          "s = ['+', '-', '+', '+']"
        ],
        "2": [
          "iterator -> i, Iterate Over -> s"
        ],
        "3": [
          "(s[i] == '+')"
        ],
        "4": [
          "s[i] = 1"
        ],
        "5": [
          "s[i] = -1"
        ],
        "6": [
          "print(sum(s))"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    s = ['+', '-', '+', '+']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] == '+')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s[i] = 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    s[i] = -1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum(s))\nNext:\n    <END>\n"
    }
  },
  "p02783": {
    "s312090090": {
      "code": "import math\ninput_line = ['10', '4']\nH, A = map(int, input_line())\nprint(math.ceil(H/A))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'list' object is not callable\")"
      },
      "cfg_block_statements": {
        "1": [
          "import math",
          "input_line = ['10', '4']",
          "H, A = map(int, input_line())",
          "print(math.ceil(H/A))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    input_line = ['10', '4']\n    H, A = map(int, input_line())\n    print(math.ceil(H/A))\nNext:\n    <END>\n"
    }
  },
  "p03598": {
    "s894620495": {
      "code": "N = 1\nK = 10\nans = 0\nfor i in range(N):\n    x = int(input)\n    ans += 2*min(x,K-x)\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "0"
            },
            {
              "K": "10"
            },
            {
              "N": "1"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "K": "10"
            },
            {
              "N": "1"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "K": "10"
            },
            {
              "N": "1"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'builtin_function_or_method'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 1",
          "K = 10",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "x = int(input)",
          "ans += 2*min(x,K-x)"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 1\n    K = 10\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x = int(input)\n    ans += 2*min(x,K-x)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s989583763": {
      "code": "N = 1\nK = 10\nl = [2]\nans = 0\nfor i in l:\n  ans += min([K-l, l])*2\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            6,
            6
          ]
        },
        "4": {
          "range": [
            7,
            7
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "l": "[2]"
            },
            {
              "K": "10"
            },
            {
              "N": "1"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "l": "[2]"
            },
            {
              "K": "10"
            },
            {
              "N": "1"
            },
            {
              "ans": "0"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "l": "[2]"
            },
            {
              "K": "10"
            },
            {
              "N": "1"
            },
            {
              "ans": "0"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'list'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 1",
          "K = 10",
          "l = [2]",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> l"
        ],
        "3": [
          "ans += min([K-l, l])*2"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 1\n    K = 10\n    l = [2]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> l\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += min([K-l, l])*2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p04012": {
    "s191747022": {
      "code": "S = 'abaccaba'\nA = set([i for i in S])\nfor j in range(len(A)):\n  if S.count(A[j]) % 2 == 1:\n    print(\"Yes\")\n    sys.exit()\n  else:\n    None\nprint(\"No\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            4,
            4
          ]
        },
        "4": {
          "range": [
            5,
            6
          ]
        },
        "5": {
          "range": [
            8,
            8
          ]
        },
        "6": {
          "range": [
            9,
            9
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "A": "{'b', 'c', 'a'}"
            },
            {
              "S": "'abaccaba'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "A": "{'b', 'c', 'a'}"
            },
            {
              "S": "'abaccaba'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "A": "{'b', 'c', 'a'}"
            },
            {
              "S": "'abaccaba'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'set' object is not subscriptable\")"
      },
      "cfg_block_statements": {
        "1": [
          "S = 'abaccaba'",
          "A = set([i for i in S])"
        ],
        "2": [
          "iterator -> j, Iterate Over -> range(len(A))"
        ],
        "3": [
          "(S.count(A[j]) % 2 == 1)"
        ],
        "4": [
          "print(\"Yes\")",
          "sys.exit()"
        ],
        "5": [
          "None"
        ],
        "6": [
          "print(\"No\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 6
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    S = 'abaccaba'\n    A = set([i for i in S])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> j, Iterate Over -> range(len(A))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (S.count(A[j]) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    None\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
    }
  },
  "p03807": {
    "s831629169": {
      "code": "N = 3\nA = [1, 2, 3]\ncnt = 0 \nfor x in A:\n  if A%2 == 1:\n    cnt += 1\nif cnt % 2 == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        },
        "5": {
          "range": [
            7,
            7
          ]
        },
        "6": {
          "range": [
            8,
            8
          ]
        },
        "7": {
          "range": [
            10,
            10
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "cnt": "0"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "N": "3"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "cnt": "0"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "N": "3"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "cnt": "0"
            },
            {
              "A": "[1, 2, 3]"
            },
            {
              "N": "3"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = 3",
          "A = [1, 2, 3]",
          "cnt = 0"
        ],
        "2": [
          "iterator -> x, Iterate Over -> A"
        ],
        "3": [
          "(A % 2 == 1)"
        ],
        "4": [
          "cnt += 1"
        ],
        "5": [
          "(cnt % 2 == 0)"
        ],
        "6": [
          "print(\"YES\")"
        ],
        "7": [
          "print(\"NO\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 5
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 2
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 2, 3]\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (A % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (cnt % 2 == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
    }
  },
  "p03813": {
    "s641726002": {
      "code": "x = '1000'\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'1000'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '1000'",
          "(x < 1200)"
        ],
        "2": [
          "print(\"ABC\")"
        ],
        "3": [
          "print(\"ARC\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '1000'\n    (x < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"ABC\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"ARC\")\nNext:\n    <END>\n"
    },
    "s639554615": {
      "code": "x = '1000'\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "x": "'1000'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "x = '1000'",
          "(x < 1200)"
        ],
        "2": [
          "print('ABC')"
        ],
        "3": [
          "print('ARC')"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    x = '1000'\n    (x < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('ABC')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('ARC')\nNext:\n    <END>\n"
    },
    "s884937159": {
      "code": "n = '1000'\nif n<1200:\n print(\"ABC\")\nelse:\n print(\"SRC\")",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        },
        "2": {
          "range": [
            3,
            3
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "n": "'1000'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "n = '1000'",
          "(n < 1200)"
        ],
        "2": [
          "print(\"ABC\")"
        ],
        "3": [
          "print(\"SRC\")"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = '1000'\n    (n < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"ABC\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"SRC\")\nNext:\n    <END>\n"
    }
  },
  "p03423": {
    "s687750549": {
      "code": "N = '8'\nprint (N/3)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            2
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "N": "'8'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '8'",
          "print (N/3)"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '8'\n    print (N/3)\nNext:\n    <END>\n"
    },
    "s917859068": {
      "code": "ip = '8'\nans = ip / 3\nprint(int(ans))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ip": "'8'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
      },
      "cfg_block_statements": {
        "1": [
          "ip = '8'",
          "ans = ip / 3",
          "print(int(ans))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    ip = '8'\n    ans = ip / 3\n    print(int(ans))\nNext:\n    <END>\n"
    }
  },
  "p02795": {
    "s418740204": {
      "code": "import math\nH = '3'\nW = '7'\nN = '10'\nm=max(H,W)\nprint(math.ceil(N/m))",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import math",
          "H = '3'",
          "W = '7'",
          "N = '10'",
          "m=max(H,W)",
          "print(math.ceil(N/m))"
        ]
      },
      "cfg_next_block": {},
      "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    H = '3'\n    W = '7'\n    N = '10'\n    m=max(H,W)\n    print(math.ceil(N/m))\nNext:\n    <END>\n"
    },
    "s545176057": {
      "code": "h = '3'\nw = '7'\nn = '10'\nif h < w:\n    a =w\nelse:\n    a=h\nans=n/a\nif n%a > 0:\n    ans+=1\nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            5
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            11
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        8
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "h": "'3'"
            },
            {
              "n": "'10'"
            },
            {
              "w": "'7'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "h": "'3'"
            },
            {
              "n": "'10'"
            },
            {
              "w": "'7'"
            },
            {
              "a": "'7'"
            }
          ]
        },
        {
          "block": 4,
          "state": [
            {
              "h": "'3'"
            },
            {
              "n": "'10'"
            },
            {
              "w": "'7'"
            },
            {
              "a": "'7'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "h = '3'",
          "w = '7'",
          "n = '10'",
          "(h < w)"
        ],
        "2": [
          "a =w"
        ],
        "3": [
          "a=h"
        ],
        "4": [
          "ans=n/a",
          "(n % a > 0)"
        ],
        "5": [
          "ans+=1"
        ],
        "6": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": 5,
            "false": 6
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 4
        },
        "5": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 6
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    h = '3'\n    w = '7'\n    n = '10'\n    (h < w)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a =w\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    a=h\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    ans=n/a\n    (n % a > 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  },
  "p03206": {
    "s448908014": {
      "code": "D = 25\nnum = 25 - D\ns = \"Christmas\"\nfor i in num:\n    s += \" Eve\"\nprint(s)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            3
          ]
        },
        "2": {
          "range": [
            4,
            4
          ]
        },
        "3": {
          "range": [
            5,
            5
          ]
        },
        "4": {
          "range": [
            6,
            6
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "num": "0"
            },
            {
              "D": "25"
            },
            {
              "s": "'Christmas'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "num": "0"
            },
            {
              "D": "25"
            },
            {
              "s": "'Christmas'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"'int' object is not iterable\")"
      },
      "cfg_block_statements": {
        "1": [
          "D = 25",
          "num = 25 - D",
          "s = \"Christmas\""
        ],
        "2": [
          "iterator -> i, Iterate Over -> num"
        ],
        "3": [
          "s += \" Eve\""
        ],
        "4": [
          "print(s)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    D = 25\n    num = 25 - D\n    s = \"Christmas\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> num\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s += \" Eve\"\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(s)\nNext:\n    <END>\n"
    }
  },
  "p03545": {
    "s685584537": {
      "code": "import sys\ns = '1222'\na,b,c,d=s[0],s[1],s[2],s[3]\nif a+b+c+d==7:\n  print('a+b+c+d=7')\n  sys.exit()\nif a+b+c-d==7:\n  print('a+b+c-d=7')\n  sys.exit()\nif a+b-c+d==7:\n  print('a+b-c+d=7')\n  sys.exit()      \nif a-b+c+d==7:\n  print('a-b+c+d=7')\n  sys.exit()\nif a+b-c-d==7:\n  print('a+b-c-d=7')\n  sys.exit()\nif a-b-c+d==7:\n  print('a-b-c+d=7')\n  sys.exit()\nif a-b+c-d==7:\n  print('a-b+c-d=7')\n  sys.exit()\nif a-b-c-d==7:\n  print('a-b-c-d=7')\n  sys.exit()",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            4
          ]
        },
        "2": {
          "range": [
            5,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            9
          ]
        },
        "5": {
          "range": [
            10,
            10
          ]
        },
        "6": {
          "range": [
            11,
            12
          ]
        },
        "7": {
          "range": [
            13,
            13
          ]
        },
        "8": {
          "range": [
            14,
            15
          ]
        },
        "9": {
          "range": [
            16,
            16
          ]
        },
        "10": {
          "range": [
            17,
            18
          ]
        },
        "11": {
          "range": [
            19,
            19
          ]
        },
        "12": {
          "range": [
            20,
            21
          ]
        },
        "13": {
          "range": [
            22,
            22
          ]
        },
        "14": {
          "range": [
            23,
            24
          ]
        },
        "15": {
          "range": [
            25,
            25
          ]
        },
        "16": {
          "range": [
            26,
            27
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": []
        },
        {
          "block": 3,
          "state": []
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "import sys",
          "s = '1222'",
          "a,b,c,d=s[0],s[1],s[2],s[3]",
          "(a + b + c + d == 7)"
        ],
        "2": [
          "print('a+b+c+d=7')",
          "sys.exit()"
        ],
        "3": [
          "(a + b + c - d == 7)"
        ],
        "4": [
          "print('a+b+c-d=7')",
          "sys.exit()"
        ],
        "5": [
          "(a + b - c + d == 7)"
        ],
        "6": [
          "print('a+b-c+d=7')",
          "sys.exit()"
        ],
        "7": [
          "(a - b + c + d == 7)"
        ],
        "8": [
          "print('a-b+c+d=7')",
          "sys.exit()"
        ],
        "9": [
          "(a + b - c - d == 7)"
        ],
        "10": [
          "print('a+b-c-d=7')",
          "sys.exit()"
        ],
        "11": [
          "(a - b - c + d == 7)"
        ],
        "12": [
          "print('a-b-c+d=7')",
          "sys.exit()"
        ],
        "13": [
          "(a - b + c - d == 7)"
        ],
        "14": [
          "print('a-b+c-d=7')",
          "sys.exit()"
        ],
        "15": [
          "(a - b - c - d == 7)"
        ],
        "16": [
          "print('a-b-c-d=7')",
          "sys.exit()"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": "<END>"
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    s = '1222'\n    a,b,c,d=s[0],s[1],s[2],s[3]\n    (a + b + c + d == 7)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('a+b+c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (a + b + c - d == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('a+b+c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a + b - c + d == 7)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('a+b-c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (a - b + c + d == 7)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('a-b+c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (a + b - c - d == 7)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('a+b-c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (a - b - c + d == 7)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print('a-b-c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (a - b + c - d == 7)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print('a-b+c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (a - b - c - d == 7)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print('a-b-c-d=7')\n    sys.exit()\nNext:\n    <END>\n"
    },
    "s076530192": {
      "code": "N = '1222'\na=int(N[0])\nb=int(N[1])\nc=int(N[2])\nd=int(N[3])\nif a+b+c+d==7:\n  print(a+\"+\"+b+\"+\"+c+\"+\"+d+\"=\"+7)\n  exit()\nif a-b+c+d==7:\n  print(a+\"-\"+b+\"+\"+c+\"+\"+d+\"=\"+7)\n  exit()\nif a+b-c+d==7:\n  print(a+\"+\"+b+\"-\"+c+\"+\"+d+\"=\"+7)\n  exit()\nif a+b+c-d==7:\n  print(a+\"+\"+b+\"+\"+c+\"-\"+d+\"=\"+7)\n  exit()\nif a-b-c+d==7:\n  print(a+\"-\"+b+\"-\"+c+\"+\"+d+\"=\"+7)\n  exit()\nif a-b+c-d==7:\n  print(a+\"-\"+b+\"+\"+c+\"-\"+d+\"=\"+7)\n  exit()\nif a+b-c-d==7:\n  print(a+\"+\"+b+\"-\"+c+\"-\"+d+\"=\"+7)\n  exit()\nif a-b-c-d==7:\n  print(a+\"-\"+b+\"-\"+c+\"-\"+d+\"=\"+7)\n  exit()",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            6
          ]
        },
        "2": {
          "range": [
            7,
            8
          ]
        },
        "3": {
          "range": [
            9,
            9
          ]
        },
        "4": {
          "range": [
            10,
            11
          ]
        },
        "5": {
          "range": [
            12,
            12
          ]
        },
        "6": {
          "range": [
            13,
            14
          ]
        },
        "7": {
          "range": [
            15,
            15
          ]
        },
        "8": {
          "range": [
            16,
            17
          ]
        },
        "9": {
          "range": [
            18,
            18
          ]
        },
        "10": {
          "range": [
            19,
            20
          ]
        },
        "11": {
          "range": [
            21,
            21
          ]
        },
        "12": {
          "range": [
            22,
            23
          ]
        },
        "13": {
          "range": [
            24,
            24
          ]
        },
        "14": {
          "range": [
            25,
            26
          ]
        },
        "15": {
          "range": [
            27,
            27
          ]
        },
        "16": {
          "range": [
            28,
            29
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "a": "1"
            },
            {
              "N": "'1222'"
            },
            {
              "d": "2"
            },
            {
              "b": "2"
            },
            {
              "c": "2"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "a": "1"
            },
            {
              "N": "'1222'"
            },
            {
              "d": "2"
            },
            {
              "b": "2"
            },
            {
              "c": "2"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
      },
      "cfg_block_statements": {
        "1": [
          "N = '1222'",
          "a=int(N[0])",
          "b=int(N[1])",
          "c=int(N[2])",
          "d=int(N[3])",
          "(a + b + c + d == 7)"
        ],
        "2": [
          "print(a+\"+\"+b+\"+\"+c+\"+\"+d+\"=\"+7)",
          "exit()"
        ],
        "3": [
          "(a - b + c + d == 7)"
        ],
        "4": [
          "print(a+\"-\"+b+\"+\"+c+\"+\"+d+\"=\"+7)",
          "exit()"
        ],
        "5": [
          "(a + b - c + d == 7)"
        ],
        "6": [
          "print(a+\"+\"+b+\"-\"+c+\"+\"+d+\"=\"+7)",
          "exit()"
        ],
        "7": [
          "(a + b + c - d == 7)"
        ],
        "8": [
          "print(a+\"+\"+b+\"+\"+c+\"-\"+d+\"=\"+7)",
          "exit()"
        ],
        "9": [
          "(a - b - c + d == 7)"
        ],
        "10": [
          "print(a+\"-\"+b+\"-\"+c+\"+\"+d+\"=\"+7)",
          "exit()"
        ],
        "11": [
          "(a - b + c - d == 7)"
        ],
        "12": [
          "print(a+\"-\"+b+\"+\"+c+\"-\"+d+\"=\"+7)",
          "exit()"
        ],
        "13": [
          "(a + b - c - d == 7)"
        ],
        "14": [
          "print(a+\"+\"+b+\"-\"+c+\"-\"+d+\"=\"+7)",
          "exit()"
        ],
        "15": [
          "(a - b - c - d == 7)"
        ],
        "16": [
          "print(a+\"-\"+b+\"-\"+c+\"-\"+d+\"=\"+7)",
          "exit()"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": 2,
            "false": 3
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": 4,
            "false": 5
          },
          "no_condition": null
        },
        "2": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 3
        },
        "5": {
          "with_condition": {
            "true": 6,
            "false": 7
          },
          "no_condition": null
        },
        "4": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 5
        },
        "7": {
          "with_condition": {
            "true": 8,
            "false": 9
          },
          "no_condition": null
        },
        "6": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 7
        },
        "9": {
          "with_condition": {
            "true": 10,
            "false": 11
          },
          "no_condition": null
        },
        "8": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 9
        },
        "11": {
          "with_condition": {
            "true": 12,
            "false": 13
          },
          "no_condition": null
        },
        "10": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 11
        },
        "13": {
          "with_condition": {
            "true": 14,
            "false": 15
          },
          "no_condition": null
        },
        "12": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 13
        },
        "15": {
          "with_condition": {
            "true": 16,
            "false": "<END>"
          },
          "no_condition": null
        },
        "14": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 15
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = '1222'\n    a=int(N[0])\n    b=int(N[1])\n    c=int(N[2])\n    d=int(N[3])\n    (a + b + c + d == 7)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(a+\"+\"+b+\"+\"+c+\"+\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (a - b + c + d == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(a+\"-\"+b+\"+\"+c+\"+\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a + b - c + d == 7)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(a+\"+\"+b+\"-\"+c+\"+\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (a + b + c - d == 7)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(a+\"+\"+b+\"+\"+c+\"-\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (a - b - c + d == 7)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(a+\"-\"+b+\"-\"+c+\"+\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (a - b + c - d == 7)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print(a+\"-\"+b+\"+\"+c+\"-\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (a + b - c - d == 7)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print(a+\"+\"+b+\"-\"+c+\"-\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (a - b - c - d == 7)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print(a+\"-\"+b+\"-\"+c+\"-\"+d+\"=\"+7)\n    exit()\nNext:\n    <END>\n"
    }
  },
  "p03140": {
    "s433934886": {
      "code": "N = 4\nA = 'west'\nB = 'east'\nC = 'wait'\nans=0\nfor i in range(N):\n  ans+=len(set(A[i],B[i],C[i]))-1\nprint(ans) ",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "0"
            },
            {
              "A": "'west'"
            },
            {
              "N": "4"
            },
            {
              "B": "'east'"
            },
            {
              "C": "'wait'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "A": "'west'"
            },
            {
              "N": "4"
            },
            {
              "B": "'east'"
            },
            {
              "C": "'wait'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "A": "'west'"
            },
            {
              "N": "4"
            },
            {
              "B": "'east'"
            },
            {
              "C": "'wait'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('set expected at most 1 argument, got 3')"
      },
      "cfg_block_statements": {
        "1": [
          "N = 4",
          "A = 'west'",
          "B = 'east'",
          "C = 'wait'",
          "ans=0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(N)"
        ],
        "3": [
          "ans+=len(set(A[i],B[i],C[i]))-1"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = 'west'\n    B = 'east'\n    C = 'wait'\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=len(set(A[i],B[i],C[i]))-1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    },
    "s889174849": {
      "code": "n = 4\na = 'west'\nb = 'east'\nc = 'wait'\nans = 0\nfor i in range(n):\n  ans += len(set(a[i], b[i], c[i])) - 1 \nprint(ans)",
      "cfg_block_range": {
        "1": {
          "range": [
            1,
            5
          ]
        },
        "2": {
          "range": [
            6,
            6
          ]
        },
        "3": {
          "range": [
            7,
            7
          ]
        },
        "4": {
          "range": [
            8,
            8
          ]
        }
      },
      "ground_truth_execution_order": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "ground_truth_blocks": [
        {
          "block": 1,
          "state": [
            {
              "ans": "0"
            },
            {
              "a": "'west'"
            },
            {
              "n": "4"
            },
            {
              "b": "'east'"
            },
            {
              "c": "'wait'"
            }
          ]
        },
        {
          "block": 2,
          "state": [
            {
              "ans": "0"
            },
            {
              "a": "'west'"
            },
            {
              "n": "4"
            },
            {
              "b": "'east'"
            },
            {
              "c": "'wait'"
            }
          ]
        },
        {
          "block": 3,
          "state": [
            {
              "ans": "0"
            },
            {
              "a": "'west'"
            },
            {
              "n": "4"
            },
            {
              "b": "'east'"
            },
            {
              "c": "'wait'"
            }
          ]
        }
      ],
      "exception_info": {
        "class": "<class 'TypeError'>",
        "message": "TypeError('set expected at most 1 argument, got 3')"
      },
      "cfg_block_statements": {
        "1": [
          "n = 4",
          "a = 'west'",
          "b = 'east'",
          "c = 'wait'",
          "ans = 0"
        ],
        "2": [
          "iterator -> i, Iterate Over -> range(n)"
        ],
        "3": [
          "ans += len(set(a[i], b[i], c[i])) - 1"
        ],
        "4": [
          "print(ans)"
        ]
      },
      "cfg_next_block": {
        "1": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        },
        "2": {
          "with_condition": {
            "true": 3,
            "false": 4
          },
          "no_condition": null
        },
        "3": {
          "with_condition": {
            "true": null,
            "false": null
          },
          "no_condition": 2
        }
      },
      "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = 'west'\n    b = 'east'\n    c = 'wait'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += len(set(a[i], b[i], c[i])) - 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
    }
  }
}