{
    "p00002": {
        "s198858647": {
            "code": "nums = ['5', '7']\nprint(math.ceil(math.log10(int(nums[0]) * int(nums[1]))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "nums = ['5', '7']",
                    "print(math.ceil(math.log10(int(nums[0])*int(nums[1]))))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    nums = ['5', '7']\n    print(math.ceil(math.log10(int(nums[0])*int(nums[1]))))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02256": {
        "s079730161": {
            "code": "XY = [54, 20]\nx = max(XY)\ny = min(XY)\nx_dy = x % y\nans = math.gcd(x, x_dy)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "XY = [54, 20]",
                    "x=max(XY)",
                    "y=min(XY)",
                    "x_dy=x%y",
                    "ans=math.gcd(x,x_dy)",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    XY = [54, 20]\n    x=max(XY)\n    y=min(XY)\n    x_dy=x%y\n    ans=math.gcd(x,x_dy)\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02258": {
        "s879689916": {
            "code": "n = 6\nnums = [5, 3, 1, 3, 4, 3]\nminNum = nums[0]\nmaxDiff = -math.inf\nfor i in nums[1:]:\n    diff = i - minNum\n    if diff > maxDiff:\n        maxDiff = diff\n    if minNum > i:\n        minNum = i\nprint(maxDiff)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                9,
                10,
                5,
                6,
                7,
                8,
                9,
                5,
                6,
                7,
                8,
                9,
                5,
                6,
                7,
                9,
                5,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "nums = [5, 3, 1, 3, 4, 3]",
                    "minNum = nums[0]",
                    "maxDiff = -math.inf"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> nums[1:]"
                ],
                "3": [
                    "diff = i - minNum",
                    "(diff > maxDiff)"
                ],
                "4": [
                    "maxDiff = diff"
                ],
                "5": [
                    "(minNum > i)"
                ],
                "6": [
                    "minNum = i"
                ],
                "7": [
                    "print(maxDiff)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    nums = [5, 3, 1, 3, 4, 3]\n    minNum = nums[0]\n    maxDiff = -math.inf\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> nums[1:]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    diff = i - minNum\n    (diff > maxDiff)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    maxDiff = diff\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (minNum > i)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    minNum = i\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(maxDiff)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s916361210": {
            "code": "values = [5, 3, 1, 3, 4, 3]\nmaxv = -sys.maxsize - 1\nminv = values[0]\nfor value in enumerate(values):\n    maxv = max(maxv, value - minv)\n    minv = min(minv, value)\nprint(maxv)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'tuple' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "values = [5, 3, 1, 3, 4, 3]",
                    "maxv = - sys.maxsize - 1",
                    "minv = values[0]"
                ],
                "2": [
                    "iterator -> value, Iterate Over -> enumerate(values)"
                ],
                "3": [
                    "maxv = max(maxv, value - minv)",
                    "minv = min(minv, value)"
                ],
                "4": [
                    "print(maxv)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    values = [5, 3, 1, 3, 4, 3]\n    maxv = - sys.maxsize - 1\n    minv = values[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> value, Iterate Over -> enumerate(values)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    maxv = max(maxv, value - minv)\n    minv = min(minv, value)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(maxv)\nNext:\n    <END>\n"
        },
        "s772300965": {
            "code": "values = [5, 3, 1, 3, 4, 3]\nmaxv = -sys.maxsize - 1\nminv = values[0]\nfor value in enumerate(values):\n    maxv = max(maxv, value - minv)\n    minv = min(minv, value)\nprint(maxv)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'tuple' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "values = [5, 3, 1, 3, 4, 3]",
                    "maxv = - sys.maxsize - 1",
                    "minv = values[0]"
                ],
                "2": [
                    "iterator -> value, Iterate Over -> enumerate(values)"
                ],
                "3": [
                    "maxv = max(maxv, value - minv)",
                    "minv = min(minv, value)"
                ],
                "4": [
                    "print(maxv)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    values = [5, 3, 1, 3, 4, 3]\n    maxv = - sys.maxsize - 1\n    minv = values[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> value, Iterate Over -> enumerate(values)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    maxv = max(maxv, value - minv)\n    minv = min(minv, value)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(maxv)\nNext:\n    <END>\n"
        },
        "s029353863": {
            "code": "values = [5, 3, 1, 3, 4, 3]\nmaxv = -sys.maxsize - 1\nminv = values[0]\nfor val in enumerate(values):\n    maxv = max(maxv, val - minv)\n    minv = min(minv, val)\nprint(maxv)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'tuple' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "values = [5, 3, 1, 3, 4, 3]",
                    "maxv = - sys.maxsize - 1",
                    "minv = values[0]"
                ],
                "2": [
                    "iterator -> val, Iterate Over -> enumerate(values)"
                ],
                "3": [
                    "maxv = max(maxv, (val - minv))",
                    "minv = min(minv, val)"
                ],
                "4": [
                    "print(maxv)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    values = [5, 3, 1, 3, 4, 3]\n    maxv = - sys.maxsize - 1\n    minv = values[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> val, Iterate Over -> enumerate(values)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    maxv = max(maxv, (val - minv))\n    minv = min(minv, val)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(maxv)\nNext:\n    <END>\n"
        }
    },
    "p02265": {
        "s843936838": {
            "code": "d = deque()\nn = 7\nlines = sys.stdin.readlines()\nfor i in range(n):\n    ins = lines[i].split()\n    command = ins[0]\n    if command == 'insert':\n        d.appendleft(ins[1])\n    elif command == 'delete':\n        d.remove(ins[1])\n    elif command == 'deleteFirst':\n        d.popleft()\n    elif command == 'deleteLast':\n        d.pop()\nprint(' '.join(d))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                },
                "10": {
                    "range": [
                        14,
                        14
                    ]
                },
                "11": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                9,
                10,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                9,
                10,
                4,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "d = deque()",
                    "n = 7",
                    "lines = sys.stdin.readlines()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "ins = lines[i].split()",
                    "command = ins[0]",
                    "(command == 'insert')"
                ],
                "4": [
                    "d.appendleft(ins[1])"
                ],
                "5": [
                    "(command == 'delete')"
                ],
                "6": [
                    "d.remove(ins[1])"
                ],
                "7": [
                    "(command == 'deleteFirst')"
                ],
                "8": [
                    "d.popleft()"
                ],
                "9": [
                    "(command == 'deleteLast')"
                ],
                "10": [
                    "d.pop()"
                ],
                "11": [
                    "print(\" \".join(d))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 11
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 2
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    d = deque()\n    n = 7\n    lines = sys.stdin.readlines()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    ins = lines[i].split()\n    command = ins[0]\n    (command == 'insert')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    d.appendleft(ins[1])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (command == 'delete')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    d.remove(ins[1])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (command == 'deleteFirst')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    d.popleft()\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (command == 'deleteLast')\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 2\n\nBlock 10:\nStatement:\n    d.pop()\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    print(\" \".join(d))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02271": {
        "s062854307": {
            "code": "n = int(sys.stdin.readline())\nA = [1, 5, 7, 10, 21]\nq = int(sys.stdin.readline())\nM = [2, 4, 17, 8, 22, 21, 100, 35]\nfor i in range(0, q):\n    print('yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = int( sys.stdin.readline( ) )",
                    "A = [1, 5, 7, 10, 21]",
                    "q = int( sys.stdin.readline( ) )",
                    "M = [2, 4, 17, 8, 22, 21, 100, 35]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, q)"
                ],
                "3": [
                    "print( \"yes\" )"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = int( sys.stdin.readline( ) )\n    A = [1, 5, 7, 10, 21]\n    q = int( sys.stdin.readline( ) )\n    M = [2, 4, 17, 8, 22, 21, 100, 35]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, q)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print( \"yes\" )\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        },
        "s552551361": {
            "code": "n = '5'\nn = int(n)\na = '1 5 7 10 21'\na = a.split()\na = [int(x) for x in a]\nq = '8'\nq = int(q)\nms = '2 4 17 8 22 21 100 35'\nms = ms.split()\nms = [int(x) for x in ms]\nnp.sort(a)\na = np.array(a)\nfor m in ms:\n    if m > a[-1]:\n        print('no')\n    elif a.any() == m:\n        print('yes')\n    else:\n        a_new = a[a < m]\n        print(a_new)\n        select = []\n        length = len(a_new)\n        selects = np.zeros(2 ** length, length)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        12
                    ]
                },
                "2": {
                    "range": [
                        13,
                        13
                    ]
                },
                "3": {
                    "range": [
                        14,
                        14
                    ]
                },
                "4": {
                    "range": [
                        15,
                        15
                    ]
                },
                "5": {
                    "range": [
                        16,
                        16
                    ]
                },
                "6": {
                    "range": [
                        17,
                        17
                    ]
                },
                "7": {
                    "range": [
                        18,
                        22
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                16,
                19,
                20,
                21,
                22,
                23
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"Cannot interpret '1' as a data type\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "n = int(n)",
                    "a = '1 5 7 10 21'",
                    "a = a.split()",
                    "a = [int(x) for x in a]",
                    "q = '8'",
                    "q = int(q)",
                    "ms = '2 4 17 8 22 21 100 35'",
                    "ms = ms.split()",
                    "ms = [int(x) for x in ms]",
                    "np.sort(a)",
                    "a = np.array(a)"
                ],
                "2": [
                    "iterator -> m, Iterate Over -> ms"
                ],
                "3": [
                    "(m > a[-1])"
                ],
                "4": [
                    "print(\"no\")"
                ],
                "5": [
                    "(a.any() == m)"
                ],
                "6": [
                    "print(\"yes\")"
                ],
                "7": [
                    "a_new = a[a < m]",
                    "print(a_new)",
                    "select = []",
                    "length = len(a_new)",
                    "selects = np.zeros(2**length, length)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    n = int(n)\n    a = '1 5 7 10 21'\n    a = a.split()\n    a = [int(x) for x in a]\n    q = '8'\n    q = int(q)\n    ms = '2 4 17 8 22 21 100 35'\n    ms = ms.split()\n    ms = [int(x) for x in ms]\n    np.sort(a)\n    a = np.array(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> m, Iterate Over -> ms\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (m > a[-1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"no\")\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (a.any() == m)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"yes\")\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    a_new = a[a < m]\n    print(a_new)\n    select = []\n    length = len(a_new)\n    selects = np.zeros(2**length, length)\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02379": {
        "s779839037": {
            "code": "l = ['0', '0', '1', '1']\nx1 = int(l[0])\ny1 = int(l[1])\nx2 = int(l[2])\ny2 = int(l[3])\nA = math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\nprint(A)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "l = ['0', '0', '1', '1']",
                    "x1=int(l[0])",
                    "y1=int(l[1])",
                    "x2=int(l[2])",
                    "y2=int(l[3])",
                    "A=math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))",
                    "print(A)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    l = ['0', '0', '1', '1']\n    x1=int(l[0])\n    y1=int(l[1])\n    x2=int(l[2])\n    y2=int(l[3])\n    A=math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))\n    print(A)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02382": {
        "s174215143": {
            "code": "n = 3\na1 = [1, 2, 3]\na2 = [2, 0, 4]\np1, p2, p3, p4 = (0, 0, 0, 0)\nhyp = 0\nfor i in range(n):\n    p1 += math.fabs(a1[i] - a2[i])\n    p2 += (a1[i] - a2[i]) ** 2\n    p3 += math.fabs((a1[i] - a2[i]) ** 3)\n    hyp = math.fabs(a1[i] - a2[i])\n    if hyp > p4:\n        p4 = hyp\np2 = math.sqrt(p2)\np3 = math.exp(math.log(p3) / 3)\nprint(p1)\nprint(p2)\nprint(p3)\nprint(p4)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        11
                    ]
                },
                "4": {
                    "range": [
                        12,
                        12
                    ]
                },
                "5": {
                    "range": [
                        13,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                6,
                7,
                8,
                9,
                10,
                11,
                6,
                13,
                14,
                15,
                16,
                17,
                18
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a1 = [1, 2, 3]",
                    "a2 = [2, 0, 4]",
                    "p1, p2, p3, p4 = 0, 0, 0, 0",
                    "hyp = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "p1 += math.fabs(a1[i] -a2[i])",
                    "p2 += (a1[i]-a2[i])**2",
                    "p3 += math.fabs((a1[i]-a2[i])**3)",
                    "hyp = math.fabs(a1[i] -a2[i])",
                    "(hyp > p4)"
                ],
                "4": [
                    "p4 = hyp"
                ],
                "5": [
                    "p2 = math.sqrt(p2)",
                    "p3 = math.exp(math.log(p3)/3)",
                    "print(p1)",
                    "print(p2)",
                    "print(p3)",
                    "print(p4)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a1 = [1, 2, 3]\n    a2 = [2, 0, 4]\n    p1, p2, p3, p4 = 0, 0, 0, 0\n    hyp = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    p1 += math.fabs(a1[i] -a2[i])\n    p2 += (a1[i]-a2[i])**2\n    p3 += math.fabs((a1[i]-a2[i])**3)\n    hyp = math.fabs(a1[i] -a2[i])\n    (hyp > p4)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    p4 = hyp\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    p2 = math.sqrt(p2)\n    p3 = math.exp(math.log(p3)/3)\n    print(p1)\n    print(p2)\n    print(p3)\n    print(p4)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s120043071": {
            "code": "n = 3\nxli = [1, 2, 3]\nyli = [2, 0, 4]\na = 0\nb = 0\nc = 0\nd = 0\nfor x, y in zip(xli, yli):\n    base = math.fabs(x, y)\n    a += base\n    b += base ** 2\n    c += base ** 3\n    if d < base:\n        d = base\nprint(a)\nprint(b ** (1 / 2))\nprint(c ** (1 / 3))\nprint(d)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        13
                    ]
                },
                "4": {
                    "range": [
                        14,
                        14
                    ]
                },
                "5": {
                    "range": [
                        15,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('math.fabs() takes exactly one argument (2 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "xli = [1, 2, 3]",
                    "yli = [2, 0, 4]",
                    "a=0",
                    "b=0",
                    "c=0",
                    "d=0"
                ],
                "2": [
                    "x <- index\n    y <- iterator"
                ],
                "3": [
                    "base = math.fabs(x,y)",
                    "a += base",
                    "b += base**2",
                    "c += base**3",
                    "(d < base)"
                ],
                "4": [
                    "(d < base)"
                ],
                "5": [
                    "print(a)",
                    "print(b**(1/2))",
                    "print(c**(1/3))",
                    "print(d)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    xli = [1, 2, 3]\n    yli = [2, 0, 4]\n    a=0\n    b=0\n    c=0\n    d=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    x <- index\n    y <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    base = math.fabs(x,y)\n    a += base\n    b += base**2\n    c += base**3\n    (d < base)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (d < base)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(a)\n    print(b**(1/2))\n    print(c**(1/3))\n    print(d)\nNext:\n    <END>\n"
        }
    },
    "p02400": {
        "s692249437": {
            "code": "r = 2\nPI = math.pi\nmen = r ** 2 * PI\nsen = r * 2 * PI\nprint('%.6f %.6f' % (men, sen))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "PI = math.pi",
                    "men = (r**2) * PI",
                    "sen = (r * 2) * PI",
                    "print('%.6f %.6f' % (men,sen))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    PI = math.pi\n    men = (r**2) * PI\n    sen = (r * 2) * PI\n    print('%.6f %.6f' % (men,sen))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s085462120": {
            "code": "r = 2\npi = math.pi\ns = r * r * pi\nl = 2 * r * pi\nprint('{:.6f}'.format(s), '{:.6f}'.format(l))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "pi": "3.141592653589793"
                        },
                        {
                            "s": "12.566370614359172"
                        },
                        {
                            "l": "12.566370614359172"
                        },
                        {
                            "r": "2"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "pi = math.pi",
                    "s = r*r*pi",
                    "l = 2*r*pi",
                    "print(\"{:.6f}\".format(s),\"{:.6f}\".format(l))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    pi = math.pi\n    s = r*r*pi\n    l = 2*r*pi\n    print(\"{:.6f}\".format(s),\"{:.6f}\".format(l))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s726319320": {
            "code": "r = 2\nret = r * r * math.pi\nprint('{0:.5f} {1:.5f}'.format(ret, ret))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "ret = r * r * math.pi",
                    "print('{0:.5f} {1:.5f}'.format(ret, ret))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    ret = r * r * math.pi\n    print('{0:.5f} {1:.5f}'.format(ret, ret))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s477730437": {
            "code": "r = 2\nprint('{0:.8f}'.format(r ** 2 * math.pi))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "print(\"{0:.8f}\".format(r ** 2 * math.pi))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    print(\"{0:.8f}\".format(r ** 2 * math.pi))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s548344402": {
            "code": "r = 2\narea = math.pi * r ** 2\nlength = 2 * math.pi * r\nprint(f'{area:.6f} {length:.6f}')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "area = math.pi * r**2",
                    "length = 2 * math.pi * r",
                    "print(f\"{area:.6f} {length:.6f}\")"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    area = math.pi * r**2\n    length = 2 * math.pi * r\n    print(f\"{area:.6f} {length:.6f}\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s947514448": {
            "code": "r = 2\npi = numpy.pi\nprint(float(r * 2 * pi), r ** 2 * pi)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "pi=numpy.pi",
                    "print(float(r*2*pi),r**2*pi)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    pi=numpy.pi\n    print(float(r*2*pi),r**2*pi)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s105619101": {
            "code": "r = 2\ns = r * r * math.pi\nl = 2 * r * math.pi\nprint(s, l)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "s = r * r * math.pi",
                    "l = 2 * r * math.pi",
                    "print(s,l)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    s = r * r * math.pi\n    l = 2 * r * math.pi\n    print(s,l)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s671312831": {
            "code": "r = 2\nprint('{0} {1}'.format(r ** 2 * math.pi, 2 * r * math.pi))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "print(\"{0} {1}\".format(r**2*math.pi,2*r*math.pi))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    print(\"{0} {1}\".format(r**2*math.pi,2*r*math.pi))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s435174028": {
            "code": "r = [2]\nprint('{0:f} {1:f}'.format(r[0] * r[0] * math.pi, r[0] * 2 * math.pi))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = [2]",
                    "print(\"{0:f} {1:f}\".format(r[0] * r[0] * math.pi, r[0] * 2 * math.pi))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = [2]\n    print(\"{0:f} {1:f}\".format(r[0] * r[0] * math.pi, r[0] * 2 * math.pi))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s484498059": {
            "code": "r = 2\nprint(r * r * math.pi, 2 * r * math.pi)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "print(r*r*math.pi, 2*r*math.pi)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    print(r*r*math.pi, 2*r*math.pi)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s998653608": {
            "code": "r = 2\npi = math.pi\ns = r * r * pi\nl = 2 * r * pi\nprint('{:.6f}'.format(s), '{:.6f}'.format(l))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "pi": "3.141592653589793"
                        },
                        {
                            "s": "12.566370614359172"
                        },
                        {
                            "l": "12.566370614359172"
                        },
                        {
                            "r": "2"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "pi = math.pi",
                    "s = r*r*pi",
                    "l = 2*r*pi",
                    "print(\"{:.6f}\".format(s),\"{:.6f}\".format(l))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    pi = math.pi\n    s = r*r*pi\n    l = 2*r*pi\n    print(\"{:.6f}\".format(s),\"{:.6f}\".format(l))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s831492433": {
            "code": "r = 2\nm = float(math.pi)\ns = r ** 2 * m\nl = 2 * r * m\nprint(s, l)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "m=float(math.pi)",
                    "s=r**2*m",
                    "l=2*r*m",
                    "print(s,l)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    m=float(math.pi)\n    s=r**2*m\n    l=2*r*m\n    print(s,l)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s046545002": {
            "code": "a = 2\nprint(str('{0:.6f}'.format(a * a * math.pi)) + ' ' + str('{0:.5f}'.format((a + a) * math.pi)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = 2",
                    "print(str(\"{0:.6f}\".format((a * a) * math.pi)) + \" \" + str(\"{0:.5f}\".format((a + a) * math.pi)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 2\n    print(str(\"{0:.6f}\".format((a * a) * math.pi)) + \" \" + str(\"{0:.5f}\".format((a + a) * math.pi)))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s206881997": {
            "code": "pi = math.pi\nr = 2\narea = pi * pi * r\nlength = pi * r * 2\nprint('{:.5f}'.format(area), '{:5f}'.format(length))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "pi = math.pi",
                    "r = 2",
                    "area = pi*pi*r",
                    "length = pi*r*2",
                    "print('{:.5f}'.format(area),'{:5f}'.format(length))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    pi = math.pi\n    r = 2\n    area = pi*pi*r\n    length = pi*r*2\n    print('{:.5f}'.format(area),'{:5f}'.format(length))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s515912126": {
            "code": "pi = math.pi\nr = 2\nprint(pi * r * r, 2 * pi * r)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "pi = math.pi",
                    "r = 2",
                    "print(pi*r*r, 2*pi*r)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    pi = math.pi\n    r = 2\n    print(pi*r*r, 2*pi*r)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s916163777": {
            "code": "r = 2\nl = math.pi * r * 2\ns = r ** 2 * math.pi\nprint('{0:6f} {1:6f}'.format(l, s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "l=math.pi*r*2",
                    "s=(r**2)*math.pi",
                    "print(\"{0:6f} {1:6f}\".format(l, s))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    l=math.pi*r*2\n    s=(r**2)*math.pi\n    print(\"{0:6f} {1:6f}\".format(l, s))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s324823172": {
            "code": "r = 2\nprint('%d %d' % (math.pi * r * r, 2 * math.pi * r))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "print(\"%d %d\"%(math.pi*r*r,2*math.pi*r))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    print(\"%d %d\"%(math.pi*r*r,2*math.pi*r))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s666986611": {
            "code": "r = '2'\ns = math.pi * r ** 2\np = 2 * math.pi * r\nprint(s, p)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "s = math.pi * (r ** 2)",
                    "p = 2 * math.pi * r",
                    "print(s,p)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    s = math.pi * (r ** 2)\n    p = 2 * math.pi * r\n    print(s,p)\nNext:\n    <END>\n"
        },
        "s923862769": {
            "code": "a = '2'\nprint('{:.7f} {:.7f}'.format(a ** 2 * math.pi, 2 * a * math.pi))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '2'",
                    "print(\"{:.7f} {:.7f}\".format(a ** 2 * math.pi, 2 * a * math.pi))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(\"{:.7f} {:.7f}\".format(a ** 2 * math.pi, 2 * a * math.pi))\nNext:\n    <END>\n"
        },
        "s418818727": {
            "code": "r = '2'\nm = r ** 2 * 3.14\nl = r * 2 * 3.14\nprint('{:.5f} {:.5f}'.format(m, l))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "m = r ** 2 * 3.14",
                    "l = r * 2 * 3.14",
                    "print('{:.5f} {:.5f}'.format(m, l))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    m = r ** 2 * 3.14\n    l = r * 2 * 3.14\n    print('{:.5f} {:.5f}'.format(m, l))\nNext:\n    <END>\n"
        },
        "s560698789": {
            "code": "pi = round(math.pi, 7)\nr = '2'\nprint('{} {}'.format(2 * r * pi, r * r * pi))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "pi=round(math.pi,7)",
                    "r = '2'",
                    "print(\"{} {}\".format(2*r*pi,r*r*pi))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    pi=round(math.pi,7)\n    r = '2'\n    print(\"{} {}\".format(2*r*pi,r*r*pi))\nNext:\n    <END>\n"
        },
        "s075858822": {
            "code": "r = '2'\nprint(r ** 2 * math.pi, r * 2 * math.pi)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "print(r ** 2 * math.pi, r * 2 * math.pi)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    print(r ** 2 * math.pi, r * 2 * math.pi)\nNext:\n    <END>\n"
        },
        "s137040140": {
            "code": "r = 2\nx = math.pi\nprint(x * r * r + ' ' + 2 * x ** r)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'float' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = 2",
                    "x = math.pi",
                    "print(x*r*r + \" \"+  2*x**r)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 2\n    x = math.pi\n    print(x*r*r + \" \"+  2*x**r)\nNext:\n    <END>\n"
        },
        "s117713265": {
            "code": "r = '2'\nprint('{:.10f} {:.10f}'.format(pi * r ** 2, 2 * pi * r))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "print(\"{:.10f} {:.10f}\".format(pi*(r**2), 2*pi*r))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    print(\"{:.10f} {:.10f}\".format(pi*(r**2), 2*pi*r))\nNext:\n    <END>\n"
        },
        "s894875851": {
            "code": "r = '2'\na = r ** 2 * math.pi\nc = r * 2 * math.pi\nprint('%5f' % a, '%5f' % c)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "a = r ** 2 * math.pi",
                    "c = r * 2 * math.pi",
                    "print(\"%5f\" % (a),\"%5f\" % (c))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    a = r ** 2 * math.pi\n    c = r * 2 * math.pi\n    print(\"%5f\" % (a),\"%5f\" % (c))\nNext:\n    <END>\n"
        }
    },
    "p02402": {
        "s361757529": {
            "code": "x = [5]\nx.sort()\nsum = np.sum(x)\nprint('%s %s %s' % (max(x), min(x), sum))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = [5]",
                    "x.sort()",
                    "sum = np.sum(x)",
                    "print('%s %s %s'%(max(x),min(x),sum))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = [5]\n    x.sort()\n    sum = np.sum(x)\n    print('%s %s %s'%(max(x),min(x),sum))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s653257894": {
            "code": "n = 5\nx = sys.stdin.readline().split()\nprint('{0} {1} {2}'.format(min(x), max(x), sum(x)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "x = sys.stdin.readline().split()",
                    "print(\"{0} {1} {2}\".format(min(x),max(x),sum(x)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    x = sys.stdin.readline().split()\n    print(\"{0} {1} {2}\".format(min(x),max(x),sum(x)))\nNext:\n    <END>\n"
        }
    },
    "p02407": {
        "s335937777": {
            "code": "n = 5\nx = [1, 2, 3, 4, 5]\nfor i in x[::-1]:\n    print(str(i) + ' ', end='')\nprint('')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                4,
                3,
                4,
                3,
                4,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "x = [1, 2, 3, 4, 5]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> x[::-1]"
                ],
                "3": [
                    "print(str(i)+\" \",end=\"\")"
                ],
                "4": [
                    "print(\"\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    x = [1, 2, 3, 4, 5]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> x[::-1]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(str(i)+\" \",end=\"\")\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(\"\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02419": {
        "s866008389": {
            "code": "w = 'computer'\nlines = sys.stdin.read()\nline = lines[0:lines.find('END_OF_TEXT')].lower().split()\nprint(line.count(w))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "w = 'computer'",
                    "lines = sys.stdin.read()",
                    "line=lines[0:lines.find('END_OF_TEXT')].lower().split()",
                    "print(line.count(w))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    w = 'computer'\n    lines = sys.stdin.read()\n    line=lines[0:lines.find('END_OF_TEXT')].lower().split()\n    print(line.count(w))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s742379042": {
            "code": "W = 'computer'\nprint(sys.stdin.read().rstrip('END_OF_TEXT').lower().split(' ').count())",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list.count() takes exactly one argument (0 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "W = 'computer'",
                    "print(sys.stdin.read().rstrip('END_OF_TEXT').lower().split(\" \").count())"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    W = 'computer'\n    print(sys.stdin.read().rstrip('END_OF_TEXT').lower().split(\" \").count())\nNext:\n    <END>\n"
        }
    },
    "p02548": {
        "s948384821": {
            "code": "N = 3\ncount = 0\nfor i in range(1, N):\n    count = count + sympy.divisor_count(i)\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "count=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, N)"
                ],
                "3": [
                    "count=count+sympy.divisor_count(i)"
                ],
                "4": [
                    "print (count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    count=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    count=count+sympy.divisor_count(i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print (count)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s723384044": {
            "code": "n = 3\ncount = 0\nfor a in range(1, n - 1):\n    if n % a != 0:\n        b = n // a\n    else:\n        b = n // a - 1\n    if a <= b:\n        count = count + b\n    else:\n        count = count + b\nprint(count + 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        9
                    ]
                },
                "9": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9,
                3,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "count = 0"
                ],
                "2": [
                    "iterator -> a, Iterate Over -> range(1, n - 1)"
                ],
                "3": [
                    "(n % a != 0)"
                ],
                "4": [
                    "b = n // a"
                ],
                "5": [
                    "b = n // a - 1"
                ],
                "6": [
                    "(a <= b)"
                ],
                "7": [
                    "count = (count + b)"
                ],
                "8": [
                    "count = (count + b)"
                ],
                "9": [
                    "print(count + 1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> range(1, n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (n % a != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b = n // a\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    b = n // a - 1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    (a <= b)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    count = (count + b)\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    count = (count + b)\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(count + 1)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02552": {
        "s477919051": {
            "code": "x = 1\nif x == 0:\n    print(1)\nelse:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 1",
                    "(x == 0)"
                ],
                "2": [
                    "print(1)"
                ],
                "3": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 1\n    (x == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(0)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02554": {
        "s023481420": {
            "code": "n = 2\nans = math.factorial(10) / math.factorial(10 - (n - 2))\nprint(ans % (10 ** 9 + 7))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "ans = math.factorial(10) / math.factorial(10 - (n-2))",
                    "print(ans % (10**9 + 7))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    ans = math.factorial(10) / math.factorial(10 - (n-2))\n    print(ans % (10**9 + 7))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02555": {
        "s192075200": {
            "code": "n = 7\nprint(n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 7",
                    "print(n)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 7\n    print(n)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02571": {
        "s261682807": {
            "code": "s = 'cabacc'\nt = 'abc'\nA = itertools.combinations(list(range(len(t) + 1)), 2)\nfor i in A:\n    part = t[i[0]:i[1]]\n    if part in s:\n        ans = len(part)\nprint(len(t) - ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                4,
                5,
                6,
                7,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'cabacc'",
                    "t = 'abc'",
                    "A = itertools.combinations(list(range(len(t)+1)),2)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> A"
                ],
                "3": [
                    "part = t[i[0]:i[1]]",
                    "(part in s)"
                ],
                "4": [
                    "ans = len(part)"
                ],
                "5": [
                    "print(len(t) - ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'cabacc'\n    t = 'abc'\n    A = itertools.combinations(list(range(len(t)+1)),2)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    part = t[i[0]:i[1]]\n    (part in s)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans = len(part)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(len(t) - ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02572": {
        "s707589920": {
            "code": "n = 3\nli = [1, 2, 3]\narray = list(itertools.combinations(li, 2))\nsum = 0\nfor i in range(n):\n    sum += array[i][0] * array[i][1]\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "0"
                        },
                        {
                            "array": "[(1, 2), (1, 3), (2, 3)]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "li": "[1, 2, 3]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "2"
                        },
                        {
                            "array": "[(1, 2), (1, 3), (2, 3)]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "li": "[1, 2, 3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "2"
                        },
                        {
                            "array": "[(1, 2), (1, 3), (2, 3)]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "li": "[1, 2, 3]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "5"
                        },
                        {
                            "array": "[(1, 2), (1, 3), (2, 3)]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "li": "[1, 2, 3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "5"
                        },
                        {
                            "array": "[(1, 2), (1, 3), (2, 3)]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "li": "[1, 2, 3]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "li = [1, 2, 3]",
                    "array = list(itertools.combinations(li, 2))",
                    "sum = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "sum += array[i][0] * array[i][1]"
                ],
                "4": [
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    li = [1, 2, 3]\n    array = list(itertools.combinations(li, 2))\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum += array[i][0] * array[i][1]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(sum)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s321317467": {
            "code": "MOD = 10 ** 9 + 7\nn = 3\nalst = [1, 2, 3]\ns = np.cumsum(alst, dtype='list')\nsum = 0\nfor i in range(len(alst) - 1):\n    sum += alst[i] * (s[len(s) - 1] - s[i])\nprint(sum % MOD)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "alst": "[1, 2, 3]"
                        },
                        {
                            "sum": "<built-in function sum>"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "MOD": "1000000007"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"data type 'list' not understood\")"
            },
            "cfg_block_statements": {
                "1": [
                    "MOD = 10 ** 9 + 7",
                    "n = 3",
                    "alst = [1, 2, 3]",
                    "s=np.cumsum(alst,dtype='list')",
                    "sum=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(alst) - 1)"
                ],
                "3": [
                    "sum+=alst[i]*(s[len(s)-1]-s[i])"
                ],
                "4": [
                    "print(sum%MOD)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    MOD = 10 ** 9 + 7\n    n = 3\n    alst = [1, 2, 3]\n    s=np.cumsum(alst,dtype='list')\n    sum=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(alst) - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum+=alst[i]*(s[len(s)-1]-s[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(sum%MOD)\nNext:\n    <END>\n"
        }
    },
    "p02574": {
        "s580084859": {
            "code": "N = 3\nA = [3, 4, 5]\nls = []\nnow = A[0]\nfor i in range(1, N):\n    ls.append(math.gcd(now, A[i]))\n    now = math.gcd(now, A[i])\nif ls.count(1) == N - 1:\n    print('pairwise coprime')\nelif ls[N - 1] == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [3, 4, 5]",
                    "ls = []",
                    "now = A[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, N)"
                ],
                "3": [
                    "ls.append(math.gcd(now,A[i]))",
                    "now = math.gcd(now,A[i])"
                ],
                "4": [
                    "(ls.count(1) == N - 1)"
                ],
                "5": [
                    "print(\"pairwise coprime\")"
                ],
                "6": [
                    "(ls[N - 1] == 1)"
                ],
                "7": [
                    "print(\"setwise coprime\")"
                ],
                "8": [
                    "print(\"not coprime\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [3, 4, 5]\n    ls = []\n    now = A[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ls.append(math.gcd(now,A[i]))\n    now = math.gcd(now,A[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (ls.count(1) == N - 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"pairwise coprime\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    (ls[N - 1] == 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(\"setwise coprime\")\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(\"not coprime\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02577": {
        "s469729607": {
            "code": "N = '123456789'\nsum = 0\ndata_size = int(math.log10(int(N)) + 1)\nfor data_size in range(data_size):\n    sum += int(N[data_size])\nif sum % 9 == 0:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "0"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "1"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "1"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "3"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "3"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "2"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "6"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "6"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "10"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "10"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "4"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "15"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "4"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "15"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "21"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "21"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "28"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "28"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "7"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "36"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "36"
                        },
                        {
                            "N": "'123456789'"
                        },
                        {
                            "data_size": "8"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = '123456789'",
                    "sum = 0",
                    "data_size = int(math.log10(int(N)) + 1)"
                ],
                "2": [
                    "iterator -> data_size, Iterate Over -> range(data_size)"
                ],
                "3": [
                    "sum += int(N[data_size])"
                ],
                "4": [
                    "(sum % 9 == 0)"
                ],
                "5": [
                    "print('Yes')"
                ],
                "6": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '123456789'\n    sum = 0\n    data_size = int(math.log10(int(N)) + 1)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> data_size, Iterate Over -> range(data_size)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum += int(N[data_size])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (sum % 9 == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s123029024": {
            "code": "input = sys.stdin.readline\nsys.setrecursionlimit(10 ** 8)\nnum_str = '123456789'\nnum_sum = 0\nfor i in range(len(num_str)):\n    num_sum += int(num_str[i])\nif num_sum % 9 == 0:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "10"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "10"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "15"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "15"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "21"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "21"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "28"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "28"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "36"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f0f65f1f510>"
                        },
                        {
                            "num_str": "'123456789'"
                        },
                        {
                            "num_sum": "36"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "sys.setrecursionlimit(10**8)",
                    "num_str = '123456789'",
                    "num_sum = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(num_str))"
                ],
                "3": [
                    "num_sum+=int(num_str[i])"
                ],
                "4": [
                    "(num_sum % 9 == 0)"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**8)\n    num_str = '123456789'\n    num_sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(num_str))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    num_sum+=int(num_str[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (num_sum % 9 == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s529943447": {
            "code": "N = 123456789\nNstr = list(str(N))\nsum = 0\nfor i in np.arange(len(Nstr)):\n    sum += Nstr[i]\nif sum % 9 == 0:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "Nstr": "['1', '2', '3', '4', '5', '6', '7', '8', '9']"
                        },
                        {
                            "N": "123456789"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "Nstr": "['1', '2', '3', '4', '5', '6', '7', '8', '9']"
                        },
                        {
                            "N": "123456789"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "Nstr": "['1', '2', '3', '4', '5', '6', '7', '8', '9']"
                        },
                        {
                            "N": "123456789"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 123456789",
                    "Nstr=list(str(N))",
                    "sum=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> np.arange(len(Nstr))"
                ],
                "3": [
                    "sum+=Nstr[i]"
                ],
                "4": [
                    "(sum % 9 == 0)"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 123456789\n    Nstr=list(str(N))\n    sum=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> np.arange(len(Nstr))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum+=Nstr[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (sum % 9 == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02578": {
        "s773103382": {
            "code": "num = 5\ntotal = 0\ntall = [2, 1, 5, 4, 3]\nfor i in range(num):\n    if i != num - 1:\n        num1 = tall[i]\n        num2 = tall[i + 1]\n    if num1 > num2:\n        total += num2 - num1\nprint(abs(total))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                8,
                9,
                4,
                5,
                6,
                7,
                8,
                9,
                4,
                5,
                8,
                9,
                4,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "num = 5",
                    "total = 0",
                    "tall = [2, 1, 5, 4, 3]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(num)"
                ],
                "3": [
                    "(i != num - 1)"
                ],
                "4": [
                    "num1 = tall[i]",
                    "num2 = tall[i+1]"
                ],
                "5": [
                    "(num1 > num2)"
                ],
                "6": [
                    "total += num2 - num1"
                ],
                "7": [
                    "print(abs(total))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = 5\n    total = 0\n    tall = [2, 1, 5, 4, 3]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(num)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (i != num - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    num1 = tall[i]\n    num2 = tall[i+1]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (num1 > num2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    total += num2 - num1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(abs(total))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02582": {
        "s731690530": {
            "code": "x = 'RRS'\npattern = 'R+'\npat = re.match(pattern, x)\nprint(len(pat.group()))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 'RRS'",
                    "pattern = \"R+\"",
                    "pat = re.match(pattern, x)",
                    "print(len(pat.group()))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 'RRS'\n    pattern = \"R+\"\n    pat = re.match(pattern, x)\n    print(len(pat.group()))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02583": {
        "s556195546": {
            "code": "N = 5\nL = [4, 4, 9, 7, 5]\nL = np.array(sorted(L))\nset_L = set(L)\nif len(set_L) <= 2:\n    print(0)\nelse:\n    K = {i: len(L[L == i]) for i in set_L}\ni = 0\nfor team in itertools.combinations(K.keys(), 3):\n    if (team[0] < team[1] + team[2]) & (team[1] < team[0] + team[2]) & (team[2] < team[0] + team[1]):\n        i += K[team[0]] * K[team[1]] * K[team[2]]\nprint(i)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10,
                11,
                10,
                11,
                12,
                10,
                11,
                12,
                10,
                11,
                12,
                10,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "i": "0"
                        },
                        {
                            "L": "<numpy.ndarray object at 0x7feb2c2145d0>"
                        },
                        {
                            "N": "5"
                        },
                        {
                            "K": "{<numpy.int64 object at 0x7feb2a58a070>: 1, <numpy.int64 object at 0x7feb2a58a0d0>: 2, <numpy.int64 object at 0x7feb2a589530>: 1, <numpy.int64 object at 0x7feb2a58a010>: 1}"
                        },
                        {
                            "set_L": "{<numpy.int64 object at 0x7feb2a58a070>, <numpy.int64 object at 0x7feb2a58a0d0>, <numpy.int64 object at 0x7feb2a589530>, <numpy.int64 object at 0x7feb2a58a010>}"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "i": "0"
                        },
                        {
                            "L": "<numpy.ndarray object at 0x7feb2c2145d0>"
                        },
                        {
                            "N": "5"
                        },
                        {
                            "K": "{<numpy.int64 object at 0x7feb2a58a070>: 1, <numpy.int64 object at 0x7feb2a58a0d0>: 2, <numpy.int64 object at 0x7feb2a589530>: 1, <numpy.int64 object at 0x7feb2a58a010>: 1}"
                        },
                        {
                            "set_L": "{<numpy.int64 object at 0x7feb2a58a070>, <numpy.int64 object at 0x7feb2a58a0d0>, <numpy.int64 object at 0x7feb2a589530>, <numpy.int64 object at 0x7feb2a58a010>}"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "L = [4, 4, 9, 7, 5]",
                    "L = np.array(sorted(L))",
                    "set_L = set(L)",
                    "(len(set_L) <= 2)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "K = {i:len(L[L==i]) for i in set_L}"
                ],
                "4": [
                    "i = 0"
                ],
                "5": [
                    "iterator -> team, Iterate Over -> itertools.combinations(K.keys(), 3)"
                ],
                "6": [
                    "((team[0] < team[1] + team[2]) & (team[1] < team[0] + team[2]) & (team[2] < team[0] + team[1]))"
                ],
                "7": [
                    "i += K[team[0]]*K[team[1]]*K[team[2]]"
                ],
                "8": [
                    "print(i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 8
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 5
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    L = [4, 4, 9, 7, 5]\n    L = np.array(sorted(L))\n    set_L = set(L)\n    (len(set_L) <= 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    K = {i:len(L[L==i]) for i in set_L}\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    i = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    iterator -> team, Iterate Over -> itertools.combinations(K.keys(), 3)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 8\n\nBlock 6:\nStatement:\n    ((team[0] < team[1] + team[2]) & (team[1] < team[0] + team[2]) & (team[2] < team[0] + team[1]))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 5\n\nBlock 7:\nStatement:\n    i += K[team[0]]*K[team[1]]*K[team[2]]\nNext:\n    Go to Block: 5\n\nBlock 8:\nStatement:\n    print(i)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s612236426": {
            "code": "N = 5\narray = [4, 4, 9, 7, 5]\narray.sort()\nlist1 = list(itertools.combinations(array, 3))\nans = 0\nfor n in range(len(list1)):\n    if list[n][0] != list[n][1] and list[n][1] != list[n][2]:\n        if list[n][0] + list[n][1] > list[n][2]:\n            ans = ans + 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "list1": "[(4, 4, 5), (4, 4, 7), (4, 4, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (5, 7, 9)]"
                        },
                        {
                            "array": "[4, 4, 5, 7, 9]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "list1": "[(4, 4, 5), (4, 4, 7), (4, 4, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (5, 7, 9)]"
                        },
                        {
                            "array": "[4, 4, 5, 7, 9]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "list1": "[(4, 4, 5), (4, 4, 7), (4, 4, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (5, 7, 9)]"
                        },
                        {
                            "array": "[4, 4, 5, 7, 9]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list[0] is not a generic class')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "array = [4, 4, 9, 7, 5]",
                    "array.sort()",
                    "list1=list(itertools.combinations(array,3))",
                    "ans=0"
                ],
                "2": [
                    "iterator -> n, Iterate Over -> range(len(list1))"
                ],
                "3": [
                    "(list[n][0] != list[n][1] and list[n][1] != list[n][2])"
                ],
                "4": [
                    "(list[n][0] + list[n][1] > list[n][2])"
                ],
                "5": [
                    "ans=ans+1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    array = [4, 4, 9, 7, 5]\n    array.sort()\n    list1=list(itertools.combinations(array,3))\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> range(len(list1))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (list[n][0] != list[n][1] and list[n][1] != list[n][2])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (list[n][0] + list[n][1] > list[n][2])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    ans=ans+1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s649329879": {
            "code": "n = 5\nl = [4, 4, 9, 7, 5]\nc = list(itertools.combinations(l, 3))\ncount = 0\nr = math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)\nfor i in range(r):\n    if c[i][0] == c[i][1] or c[i][1] == c[i][2] or c[i][2] == c[i][0]:\n        pass\n    elif c[i][0] + c[i][1] > c[i][2] and c[i][1] + c[i][2] > c[i][0] and (c[i][2] + c[i][0] > c[i][1]):\n        count += 1\n    else:\n        pass\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "l = [4, 4, 9, 7, 5]",
                    "c = list(itertools.combinations(l, 3))",
                    "count=0",
                    "r=math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(r)"
                ],
                "3": [
                    "(c[i][0] == c[i][1] or c[i][1] == c[i][2] or c[i][2] == c[i][0])"
                ],
                "4": [
                    "(c[i][0] + c[i][1] > c[i][2] and c[i][1] + c[i][2] > c[i][0] and (c[i][2] + c[i][0] > c[i][1]))"
                ],
                "5": [
                    "count+=1"
                ],
                "6": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    l = [4, 4, 9, 7, 5]\n    c = list(itertools.combinations(l, 3))\n    count=0\n    r=math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(r)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (c[i][0] == c[i][1] or c[i][1] == c[i][2] or c[i][2] == c[i][0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (c[i][0] + c[i][1] > c[i][2] and c[i][1] + c[i][2] > c[i][0] and (c[i][2] + c[i][0] > c[i][1]))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    count+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        },
        "s683394208": {
            "code": "N = 5\narray = [4, 4, 9, 7, 5]\narray1 = sorted(array)\nlist1 = list(itertools.combinations(array1, 3))\nans = 0\nfor n in range(len(list1)):\n    if list[n][0] != list[n][1] and list[n][1] != list[n][2]:\n        if list[n][0] + list[n][1] > list[n][2]:\n            ans = ans + 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "list1": "[(4, 4, 5), (4, 4, 7), (4, 4, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (5, 7, 9)]"
                        },
                        {
                            "array1": "[4, 4, 5, 7, 9]"
                        },
                        {
                            "array": "[4, 4, 9, 7, 5]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "list1": "[(4, 4, 5), (4, 4, 7), (4, 4, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (5, 7, 9)]"
                        },
                        {
                            "array1": "[4, 4, 5, 7, 9]"
                        },
                        {
                            "array": "[4, 4, 9, 7, 5]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "list1": "[(4, 4, 5), (4, 4, 7), (4, 4, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (4, 5, 7), (4, 5, 9), (4, 7, 9), (5, 7, 9)]"
                        },
                        {
                            "array1": "[4, 4, 5, 7, 9]"
                        },
                        {
                            "array": "[4, 4, 9, 7, 5]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list[0] is not a generic class')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "array = [4, 4, 9, 7, 5]",
                    "array1=sorted(array)",
                    "list1=list(itertools.combinations(array1,3))",
                    "ans=0"
                ],
                "2": [
                    "iterator -> n, Iterate Over -> range(len(list1))"
                ],
                "3": [
                    "(list[n][0] != list[n][1] and list[n][1] != list[n][2])"
                ],
                "4": [
                    "(list[n][0] + list[n][1] > list[n][2])"
                ],
                "5": [
                    "ans=ans+1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    array = [4, 4, 9, 7, 5]\n    array1=sorted(array)\n    list1=list(itertools.combinations(array1,3))\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> range(len(list1))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (list[n][0] != list[n][1] and list[n][1] != list[n][2])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (list[n][0] + list[n][1] > list[n][2])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    ans=ans+1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02584": {
        "s271762419": {
            "code": "inpt = '6 2 4'\ninpt_list = inpt.split(' ')\nX, K, D = [int(x) for x in inpt_list]\nX_abs = np.abs(X)\nnum = X_abs // D\nrem = K - num\nif rem < 0:\n    out = X_abs - D * K\nelif rem % 2 == 0:\n    out = X_abs - num * D\nelse:\n    out = np.abs(X_abs - num * D - D)\nprint(out)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "inpt = '6 2 4'",
                    "inpt_list = inpt.split(\" \")",
                    "X, K, D = [int(x) for x in inpt_list]",
                    "X_abs = np.abs(X)",
                    "num = X_abs // D",
                    "rem = K - num",
                    "(rem < 0)"
                ],
                "2": [
                    "out = X_abs - D*K"
                ],
                "3": [
                    "(rem % 2 == 0)"
                ],
                "4": [
                    "out = X_abs - num*D"
                ],
                "5": [
                    "out = np.abs(X_abs - num*D - D)"
                ],
                "6": [
                    "print(out)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    inpt = '6 2 4'\n    inpt_list = inpt.split(\" \")\n    X, K, D = [int(x) for x in inpt_list]\n    X_abs = np.abs(X)\n    num = X_abs // D\n    rem = K - num\n    (rem < 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    out = X_abs - D*K\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    (rem % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    out = X_abs - num*D\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    out = np.abs(X_abs - num*D - D)\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(out)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02596": {
        "s096521229": {
            "code": "K = 101\nif K % 7 == 0:\n    K = K // 7\nif gcd(10, K) != 1:\n    print(-1)\n    return\nx = 1 % K\ncnt = 1\nwhile x != 0:\n    x = (10 * x + 1) % K\n    cnt += 1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                4,
                7,
                8,
                9,
                10,
                11,
                9,
                10,
                11,
                9,
                10,
                11,
                9,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "K = 101",
                    "(K % 7 == 0)"
                ],
                "2": [
                    "K=K//7"
                ],
                "3": [
                    "(gcd(10, K) != 1)"
                ],
                "4": [
                    "print(-1)",
                    "return"
                ],
                "5": [
                    "x=1%K",
                    "cnt=1"
                ],
                "6": [
                    "while x!=0:"
                ],
                "7": [
                    "x=(10*x+1)%K",
                    "cnt+=1"
                ],
                "8": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = 101\n    (K % 7 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    K=K//7\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (gcd(10, K) != 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\n    return\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    x=1%K\n    cnt=1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    while x!=0:\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    x=(10*x+1)%K\n    cnt+=1\nNext:\n    Go to Block: 6\n\nBlock 8:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s229904262": {
            "code": "K = '101'\nif K % 7 == 0:\n    L = 9 * K / 7\nelse:\n    L = 9 * K\nif L % 2 == 0 or L % 5 == 0:\n    print(-1)\nelse:\n    r = 10 % L\n    for i in range(1, 10 ** 6 + 1):\n        if r == 1:\n            ans = i\n            break\n        else:\n            r = 10 * r % L\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        9
                    ]
                },
                "9": {
                    "range": [
                        10,
                        10
                    ]
                },
                "10": {
                    "range": [
                        11,
                        11
                    ]
                },
                "11": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "K = '101'",
                    "(K % 7 == 0)"
                ],
                "2": [
                    "L=9*K/7"
                ],
                "3": [
                    "L=9*K"
                ],
                "4": [
                    "(L % 2 == 0 or L % 5 == 0)"
                ],
                "5": [
                    "print(-1)"
                ],
                "6": [
                    "r=10%L"
                ],
                "7": [
                    "iterator -> i, Iterate Over -> range(1, 10 ** 6 + 1)"
                ],
                "8": [
                    "(r == 1)"
                ],
                "9": [
                    "ans=i"
                ],
                "10": [
                    "r=10*r%L"
                ],
                "11": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = '101'\n    (K % 7 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    L=9*K/7\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    L=9*K\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (L % 2 == 0 or L % 5 == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(-1)\nNext:\n    Go to Block: 11\n\nBlock 6:\nStatement:\n    r=10%L\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    iterator -> i, Iterate Over -> range(1, 10 ** 6 + 1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    (r == 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    ans=i\nNext:\n    Go to Block: 11\n\nBlock 10:\nStatement:\n    r=10*r%L\nNext:\n    Go to Block: 7\n\nBlock 11:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02597": {
        "s226447928": {
            "code": "N = 4\nC = ['W', 'W', 'R', 'R']\nqw = deque(list())\nqr = deque(list())\nans = 0\nfor i in range(N // 2):\n    if C[i] == 'W':\n        qw.append(i)\n    if C[-(i + 1)] == 'R':\n        qr.append(-(i + 1))\n    if len(qw) > 0 and len(qr) > 0:\n        ans += 1\n        l = qw.popleft()\n        r = qr.popleft()\n        C[l], C[r] = (C[r], C[l])\nif len(qw) > 0:\n    l = qw.popleft()\n    if C[l + 1] == 'R':\n        C[l + 1] = 'W'\n        ans += 1\nelif len(qr) > 0:\n    r = qr.popleft()\n    if C[r - 1] == 'W':\n        C[r - 1] = 'R'\n        ans += 1\nif C[N // 2 - 1] == C[N // 2] == C[N // 2 + 1] or (C[N // 2] == 'R' and C[N // 2 - 1] == 'R' and (C[N // 2 + 1] == 'W')) or (C[N // 2] == 'W' and C[N // 2 - 1] == 'R' and (C[N // 2 + 1] == 'R')):\n    print(ans)\nelse:\n    print(ans + 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        15
                    ]
                },
                "9": {
                    "range": [
                        16,
                        16
                    ]
                },
                "10": {
                    "range": [
                        17,
                        18
                    ]
                },
                "11": {
                    "range": [
                        19,
                        20
                    ]
                },
                "12": {
                    "range": [
                        21,
                        21
                    ]
                },
                "13": {
                    "range": [
                        22,
                        23
                    ]
                },
                "14": {
                    "range": [
                        24,
                        25
                    ]
                },
                "15": {
                    "range": [
                        26,
                        26
                    ]
                },
                "16": {
                    "range": [
                        27,
                        27
                    ]
                },
                "17": {
                    "range": [
                        28,
                        28
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                6,
                16,
                21,
                26,
                29
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "C = ['W', 'W', 'R', 'R']",
                    "qw=deque(list())",
                    "qr=deque(list())",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N // 2)"
                ],
                "3": [
                    "(C[i] == 'W')"
                ],
                "4": [
                    "qw.append(i)"
                ],
                "5": [
                    "(C[-(i + 1)] == 'R')"
                ],
                "6": [
                    "qr.append(-(i+1))"
                ],
                "7": [
                    "(len(qw) > 0 and len(qr) > 0)"
                ],
                "8": [
                    "ans+=1",
                    "l=qw.popleft()",
                    "r=qr.popleft()",
                    "C[l],C[r]=C[r],C[l]"
                ],
                "9": [
                    "(len(qw) > 0)"
                ],
                "10": [
                    "l=qw.popleft()",
                    "(C[l + 1] == 'R')"
                ],
                "11": [
                    "C[l+1]='W'",
                    "ans+=1"
                ],
                "12": [
                    "(len(qr) > 0)"
                ],
                "13": [
                    "r=qr.popleft()",
                    "(C[r - 1] == 'W')"
                ],
                "14": [
                    "C[r-1]='R'",
                    "ans+=1"
                ],
                "15": [
                    "(C[N // 2 - 1] == C[N // 2] == C[N // 2 + 1] or (C[N // 2] == 'R' and C[N // 2 - 1] == 'R' and (C[N // 2 + 1] == 'W')) or (C[N // 2] == 'W' and C[N // 2 - 1] == 'R' and (C[N // 2 + 1] == 'R')))"
                ],
                "16": [
                    "print(ans)"
                ],
                "17": [
                    "print(ans+1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 12
                    },
                    "no_condition": null
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": 17
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 15
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 15
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    C = ['W', 'W', 'R', 'R']\n    qw=deque(list())\n    qr=deque(list())\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N // 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (C[i] == 'W')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    qw.append(i)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (C[-(i + 1)] == 'R')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    qr.append(-(i+1))\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (len(qw) > 0 and len(qr) > 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    ans+=1\n    l=qw.popleft()\n    r=qr.popleft()\n    C[l],C[r]=C[r],C[l]\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (len(qw) > 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 12\n\nBlock 10:\nStatement:\n    l=qw.popleft()\n    (C[l + 1] == 'R')\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 15\n\nBlock 11:\nStatement:\n    C[l+1]='W'\n    ans+=1\nNext:\n    Go to Block: 15\n\nBlock 12:\nStatement:\n    (len(qr) > 0)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 15\n\nBlock 13:\nStatement:\n    r=qr.popleft()\n    (C[r - 1] == 'W')\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    C[r-1]='R'\n    ans+=1\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (C[N // 2 - 1] == C[N // 2] == C[N // 2 + 1] or (C[N // 2] == 'R' and C[N // 2 - 1] == 'R' and (C[N // 2 + 1] == 'W')) or (C[N // 2] == 'W' and C[N // 2 - 1] == 'R' and (C[N // 2 + 1] == 'R')))\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    print(ans)\nNext:\n    <END>\n\nBlock 17:\nStatement:\n    print(ans+1)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s784612471": {
            "code": "input = sys.stdin.readline\nn = 4\ns = 'WWRR'\nans = 0\nfor i in range(n - 1):\n    idx = n - 1 - i\n    if s[idx] == 'W' and s[idx + 1] == 'R':\n        ans += 1\n        s[idx] = 'R'\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4cf684f510>"
                        },
                        {
                            "s": "'WWRR'"
                        },
                        {
                            "n": "4"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4cf684f510>"
                        },
                        {
                            "s": "'WWRR'"
                        },
                        {
                            "n": "4"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "s": "'WWRR'"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "idx": "3"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4cf684f510>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "s": "'WWRR'"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "idx": "3"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4cf684f510>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "s": "'WWRR'"
                        },
                        {
                            "idx": "2"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4cf684f510>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "s": "'WWRR'"
                        },
                        {
                            "idx": "2"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4cf684f510>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "s": "'WWRR'"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "idx": "1"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4cf684f510>"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "s": "'WWRR'"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "idx": "1"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4cf684f510>"
                        },
                        {
                            "ans": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "n = 4",
                    "s = 'WWRR'",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n - 1)"
                ],
                "3": [
                    "idx = n - 1 - i",
                    "(s[idx] == 'W' and s[idx + 1] == 'R')"
                ],
                "4": [
                    "ans += 1",
                    "s[idx] = 'R'"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    n = 4\n    s = 'WWRR'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    idx = n - 1 - i\n    (s[idx] == 'W' and s[idx + 1] == 'R')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\n    s[idx] = 'R'\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02600": {
        "s958968263": {
            "code": "input = sys.stdin.readline\nn = 725\ncount = 0\nL = list(range(400, 2000, 200))\nval = len(L)\ncount = 0\nfor i in range(val - 1):\n    if L[i] <= n < L[i + 1]:\n        ans = 8 - count\n        break\n    else:\n        count += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                12,
                7,
                8,
                9,
                10,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "n = 725",
                    "count = 0",
                    "L=list(range(400,2000,200))",
                    "val=len(L)",
                    "count=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(val - 1)"
                ],
                "3": [
                    "(L[i] <= n < L[i + 1])"
                ],
                "4": [
                    "ans=8-count"
                ],
                "5": [
                    "count+=1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    n = 725\n    count = 0\n    L=list(range(400,2000,200))\n    val=len(L)\n    count=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(val - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (L[i] <= n < L[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans=8-count\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    count+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02607": {
        "s932335798": {
            "code": "N = 5\nai = ['1', '3', '4', '5', '7']\nnum = 0\nfor i in range(math.floor(N / 2) + 1):\n    if int(ai[i * 2]) % 2 == 1:\n        num += 1\nprint(num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                4,
                5,
                6,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "ai = ['1', '3', '4', '5', '7']",
                    "num = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(math.floor(N / 2) + 1)"
                ],
                "3": [
                    "(int(ai[i * 2]) % 2 == 1)"
                ],
                "4": [
                    "num += 1"
                ],
                "5": [
                    "print(num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    ai = ['1', '3', '4', '5', '7']\n    num = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(math.floor(N / 2) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (int(ai[i * 2]) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    num += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(num)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s221647687": {
            "code": "N = '5'\nai = ['1', '3', '4', '5', '7']\nnum = 0\nfor i in range(N / 2):\n    if ai[i + 1] % 2 == 1:\n        num += 1\nprint(num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "ai = ['1', '3', '4', '5', '7']",
                    "num = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N / 2)"
                ],
                "3": [
                    "(ai[i + 1] % 2 == 1)"
                ],
                "4": [
                    "num += 1"
                ],
                "5": [
                    "print(num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    ai = ['1', '3', '4', '5', '7']\n    num = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N / 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (ai[i + 1] % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    num += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(num)\nNext:\n    <END>\n"
        },
        "s796409155": {
            "code": "N = '5'\nai = ['1', '3', '4', '5', '7']\nnum = 0\nfor i in range(N / 2):\n    if ai[i + 1] % 2 == 1:\n        num += 1\nprint(num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "ai = ['1', '3', '4', '5', '7']",
                    "num = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N / 2)"
                ],
                "3": [
                    "(ai[i + 1] % 2 == 1)"
                ],
                "4": [
                    "num += 1"
                ],
                "5": [
                    "print(num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    ai = ['1', '3', '4', '5', '7']\n    num = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N / 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (ai[i + 1] % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    num += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(num)\nNext:\n    <END>\n"
        }
    },
    "p02612": {
        "s840032682": {
            "code": "a = '1900'\nif a[-4] != '0':\n    b = int(a[-5:])\nelif a[-3] != '0':\n    b = int(a[-4:])\nelif a[-2] != '0':\n    b = int(a[-3:])\nelse:\n    b = int(a[-0])\nc = 1000\nprint(c - b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = '1900'",
                    "(a[-4] != '0')"
                ],
                "2": [
                    "b = int(a[-5:])"
                ],
                "3": [
                    "(a[-3] != '0')"
                ],
                "4": [
                    "b = int(a[-4:])"
                ],
                "5": [
                    "(a[-2] != '0')"
                ],
                "6": [
                    "b = int(a[-3:])"
                ],
                "7": [
                    "b = int(a[-0])"
                ],
                "8": [
                    "c = 1000",
                    "print(c-b)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '1900'\n    (a[-4] != '0')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    b = int(a[-5:])\nNext:\n    Go to Block: 8\n\nBlock 3:\nStatement:\n    (a[-3] != '0')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b = int(a[-4:])\nNext:\n    Go to Block: 8\n\nBlock 5:\nStatement:\n    (a[-2] != '0')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    b = int(a[-3:])\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    b = int(a[-0])\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    c = 1000\n    print(c-b)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s650003409": {
            "code": "input = sys.stdin.readline\nN = '1900'\nprint(1000 - N % 1000)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'1900'"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fd07651f510>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "N = '1900'",
                    "print(1000 - N%1000)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    N = '1900'\n    print(1000 - N%1000)\nNext:\n    <END>\n"
        },
        "s496843516": {
            "code": "price = '1900'\npayment = math.ceil(float(price) / 1000) * 1000\nresult = payment - price\nprint(int(result))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "price = '1900'",
                    "payment = math.ceil(float(price) / 1000) * 1000",
                    "result = payment - price",
                    "print(int(result))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    price = '1900'\n    payment = math.ceil(float(price) / 1000) * 1000\n    result = payment - price\n    print(int(result))\nNext:\n    <END>\n"
        }
    },
    "p02613": {
        "s624561206": {
            "code": "n = 6\nm = ['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']\nans = [0, 0, 0, 0]\nfor i in m:\n    if i == 'AC':\n        ans[0] += 1\n    elif i == 'WA':\n        ans[1] += 1\n    elif i == 'TLE':\n        ans[2] += 1\n    elif i == 'RE':\n        nas[3] += 1\nprint('AC x ' + str(ans[0]))\nprint('WA x ' + str(ans[1]))\nprint('TLE x ' + str(ans[2]))\nprint('RE x' + str(ans[3]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        11,
                        11
                    ]
                },
                "10": {
                    "range": [
                        12,
                        12
                    ]
                },
                "11": {
                    "range": [
                        13,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                7,
                9,
                10,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                7,
                8,
                4,
                5,
                7,
                9,
                10,
                4,
                13,
                14,
                15,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "m = ['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']",
                    "ans = [0,0,0,0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> m"
                ],
                "3": [
                    "(i == 'AC')"
                ],
                "4": [
                    "ans[0] += 1"
                ],
                "5": [
                    "(i == 'WA')"
                ],
                "6": [
                    "ans[1] += 1"
                ],
                "7": [
                    "(i == 'TLE')"
                ],
                "8": [
                    "ans[2] += 1"
                ],
                "9": [
                    "(i == 'RE')"
                ],
                "10": [
                    "nas[3] += 1"
                ],
                "11": [
                    "print(\"AC x \"+str(ans[0]))",
                    "print(\"WA x \"+str(ans[1]))",
                    "print(\"TLE x \"+str(ans[2]))",
                    "print(\"RE x\"+str(ans[3]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 11
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 2
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    m = ['AC', 'TLE', 'AC', 'AC', 'WA', 'TLE']\n    ans = [0,0,0,0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> m\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    (i == 'AC')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans[0] += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i == 'WA')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans[1] += 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (i == 'TLE')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ans[2] += 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (i == 'RE')\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 2\n\nBlock 10:\nStatement:\n    nas[3] += 1\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    print(\"AC x \"+str(ans[0]))\n    print(\"WA x \"+str(ans[1]))\n    print(\"TLE x \"+str(ans[2]))\n    print(\"RE x\"+str(ans[3]))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02615": {
        "s636542649": {
            "code": "N = 4\nA = [2, 2, 1, 3]\nA.sort(reverse=True)\nif N == 2:\n    print(A[1])\nelse:\n    ans = A[0]\n    friendly_deque = deque()\n    friendly_deque.append(A[1])\n    friendly_deque.append(A[1])\n    for i in range(2, N):\n        add = friendly_deque.popleft()\n        ans += add\n        friendly_deque.append(A[i])\n        friendly_deque.append(A[i])\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        14
                    ]
                },
                "6": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                11,
                12,
                13,
                14,
                15,
                11,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [2, 2, 1, 3]",
                    "A.sort(reverse=True)",
                    "(N == 2)"
                ],
                "2": [
                    "print(A[1])"
                ],
                "3": [
                    "ans = A[0]",
                    "friendly_deque = deque()",
                    "friendly_deque.append(A[1])",
                    "friendly_deque.append(A[1])"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(2, N)"
                ],
                "5": [
                    "add = friendly_deque.popleft()",
                    "ans += add",
                    "friendly_deque.append(A[i])",
                    "friendly_deque.append(A[i])"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2, 2, 1, 3]\n    A.sort(reverse=True)\n    (N == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(A[1])\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    ans = A[0]\n    friendly_deque = deque()\n    friendly_deque.append(A[1])\n    friendly_deque.append(A[1])\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(2, N)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    add = friendly_deque.popleft()\n    ans += add\n    friendly_deque.append(A[i])\n    friendly_deque.append(A[i])\nNext:\n    Go to Block: 4\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s297719085": {
            "code": "N = 4\nA = [2, 2, 1, 3]\nA.sort(reversre=True)\nans = 0\nd = deque(A[0])\nfor x in A[1:]:\n    ans += d.popleft()\n    d.append(x)\n    d.append(x)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'reversre' is an invalid keyword argument for sort()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [2, 2, 1, 3]",
                    "A.sort(reversre=True)",
                    "ans = 0",
                    "d = deque(A[0])"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> A[1:]"
                ],
                "3": [
                    "ans += d.popleft()",
                    "d.append(x)",
                    "d.append(x)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2, 2, 1, 3]\n    A.sort(reversre=True)\n    ans = 0\n    d = deque(A[0])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> A[1:]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += d.popleft()\n    d.append(x)\n    d.append(x)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s148088994": {
            "code": "n = 4\na = [2, 2, 1, 3]\na.sort()\nincl = []\nscore = 0\nfor i in range(len(a)):\n    ain = a.pop()\n    incl.append(ain)\n    if i == 0:\n        continue\n    if len(incl) % 2 == 1:\n        score += incl[int(len(incl)) / 2]\n    else:\n        score += incl[int(len(incl) / 2) - 1]\nprint(score)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                10,
                13,
                6,
                7,
                8,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not float')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [2, 2, 1, 3]",
                    "a.sort()",
                    "incl = []",
                    "score = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(a))"
                ],
                "3": [
                    "ain = a.pop()",
                    "incl.append(ain)",
                    "(i == 0)"
                ],
                "4": [
                    "(len(incl) % 2 == 1)"
                ],
                "5": [
                    "score += incl[ int(len(incl))/2 ]"
                ],
                "6": [
                    "score += incl[ int(len(incl)/2)-1 ]"
                ],
                "7": [
                    "print(score)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2, 2, 1, 3]\n    a.sort()\n    incl = []\n    score = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    ain = a.pop()\n    incl.append(ain)\n    (i == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (len(incl) % 2 == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    score += incl[ int(len(incl))/2 ]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    score += incl[ int(len(incl)/2)-1 ]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(score)\nNext:\n    <END>\n"
        },
        "s743573254": {
            "code": "n = 4\nA = None\nif len(A) <= 2:\n    print(sum(A))\nelse:\n    ans = A[0] + 2 * sum(A[1:math.floor(n / 2)]) + N % 2 * A[math.floor[n / 2]]\n    print(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'NoneType' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "A = None",
                    "(len(A) <= 2)"
                ],
                "2": [
                    "print(sum(A))"
                ],
                "3": [
                    "ans = A[0] + 2*sum(A[1:math.floor(n/2)]) + (N%2)*A[math.floor[n/2]]",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    A = None\n    (len(A) <= 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(sum(A))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ans = A[0] + 2*sum(A[1:math.floor(n/2)]) + (N%2)*A[math.floor[n/2]]\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02621": {
        "s003065056": {
            "code": "N = 2\nans = 0\nfor k in range(1, N + 1):\n    ans += k * len(sympy.divisors(k))\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(1, N + 1)"
                ],
                "3": [
                    "ans += k*len(sympy.divisors(k))"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += k*len(sympy.divisors(k))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s745797544": {
            "code": "a = '2'\nprint(a + a ^ 2 + a ^ 3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '2'",
                    "print(a+a^2+a^3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(a+a^2+a^3)\nNext:\n    <END>\n"
        }
    },
    "p02624": {
        "s839223045": {
            "code": "N = 4\nout = 0\nfor i in range(1, N + 1):\n    out += len(sympy.divisors(i)) * i\nprint(out)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                4,
                3,
                4,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "out": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "out": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "out": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "out": "11"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "out": "11"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "out": "23"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "out": "23"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "out=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, N + 1)"
                ],
                "3": [
                    "out+=len(sympy.divisors(i))*i"
                ],
                "4": [
                    "print(out)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    out=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    out+=len(sympy.divisors(i))*i\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(out)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s323819602": {
            "code": "n = 4\nans = 0\nfor i in range(1, n + 1):\n    ans += i * sympy.divisors(i)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "n": "4"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "n": "4"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "n": "4"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n + 1)"
                ],
                "3": [
                    "ans+=i*sympy.divisors(i)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=i*sympy.divisors(i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s327646740": {
            "code": "n = 4\nans = 0\nfor i in range(1, n + 1):\n    ans += i * sympy.divisors(i)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n + 1)"
                ],
                "3": [
                    "ans += i * sympy.divisors(i)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += i * sympy.divisors(i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02627": {
        "s100732664": {
            "code": "input = sys.stdin.readline\nn = 'B'\na = ord(n)\nif a > 96:\n    print('a')\nelse:\n    print('A')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "n = 'B'",
                    "a =ord(n)",
                    "(a > 96)"
                ],
                "2": [
                    "print(\"a\")"
                ],
                "3": [
                    "print(\"A\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    n = 'B'\n    a =ord(n)\n    (a > 96)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"a\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"A\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02629": {
        "s224695772": {
            "code": "N = 2\nalphabet = [chr(i) for i in range(97, 97 + 26)]\nnum = [26 ** i for i in range(1, 12)]\nacc = list(accumulate(num))\nans = ''\nindex = bisect.bisect_left(acc, N)\nif index == 0:\n    ans += alphabet[N - 1]\nelse:\n    N -= acc[index - 1]\n    while True:\n        tmp = N // num[index - 1]\n        ans += alphabet[tmp]\n        N -= tmp * num[index - 1]\n        index = bisect.bisect_left(num, N)\n        if index == 0:\n            break\n    ans += alphabet[N - 1]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        15
                    ]
                },
                "6": {
                    "range": [
                        16,
                        16
                    ]
                },
                "7": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                19
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "alphabet=[chr(i) for i in range(97,97+26)]",
                    "num=[26**i for i in range(1,12)]",
                    "acc=list(accumulate(num))",
                    "ans=\"\"",
                    "index=bisect.bisect_left(acc,N)",
                    "(index == 0)"
                ],
                "2": [
                    "ans+=alphabet[N-1]"
                ],
                "3": [
                    "N-=acc[index-1]"
                ],
                "4": [
                    "while True:"
                ],
                "5": [
                    "tmp=N//num[index-1]",
                    "ans+=alphabet[tmp]",
                    "N-=tmp*num[index-1]",
                    "index=bisect.bisect_left(num,N)",
                    "(index == 0)"
                ],
                "6": [
                    "ans+=alphabet[N-1]"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    alphabet=[chr(i) for i in range(97,97+26)]\n    num=[26**i for i in range(1,12)]\n    acc=list(accumulate(num))\n    ans=\"\"\n    index=bisect.bisect_left(acc,N)\n    (index == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans+=alphabet[N-1]\nNext:\n    Go to Block: 7\n\nBlock 3:\nStatement:\n    N-=acc[index-1]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    tmp=N//num[index-1]\n    ans+=alphabet[tmp]\n    N-=tmp*num[index-1]\n    index=bisect.bisect_left(num,N)\n    (index == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    ans+=alphabet[N-1]\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02630": {
        "s832060287": {
            "code": "N = 4\nA = [1, 2, 3, 4]\nQ = 3\nans = sum(A)\nA = Counter(A)\nbc = [(1, 2), (3, 4), (2, 4)]\nfor b, c in bc:\n    v = A.pop(b, None)\n    if v:\n        A[c] += v\n    ans = ans + (c - b) * v\n    print(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                7,
                8,
                9,
                10,
                11,
                12,
                7,
                8,
                9,
                10,
                11,
                12,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [1, 2, 3, 4]",
                    "Q = 3",
                    "ans = sum(A)",
                    "A = Counter(A)",
                    "bc = [(1, 2), (3, 4), (2, 4)]"
                ],
                "2": [
                    "b <- index\n    c <- iterator"
                ],
                "3": [
                    "v = A.pop(b, None)",
                    "(v)"
                ],
                "4": [
                    "A[c] += v"
                ],
                "5": [
                    "ans = ans+((c-b)*v)",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [1, 2, 3, 4]\n    Q = 3\n    ans = sum(A)\n    A = Counter(A)\n    bc = [(1, 2), (3, 4), (2, 4)]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    b <- index\n    c <- iterator\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    v = A.pop(b, None)\n    (v)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    A[c] += v\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    ans = ans+((c-b)*v)\n    print(ans)\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        }
    },
    "p02631": {
        "s340807081": {
            "code": "n = 4\narr = [20, 11, 9, 24]\nma = max(arr)\nc = int(log(ma, 2))\nfor i in arr:\n    d = i ^ 2 ** c - 1\n    if i & 1 != d & 1:\n        d = d ^ 1\n    print(d, end=' ')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                5,
                6,
                7,
                8,
                9,
                5,
                6,
                7,
                8,
                9,
                5,
                6,
                7,
                8,
                9,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "arr = [20, 11, 9, 24]",
                    "ma=max(arr)",
                    "c=int(log(ma,2))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> arr"
                ],
                "3": [
                    "d=i^(2**c-1)",
                    "(i & 1 != d & 1)"
                ],
                "4": [
                    "d=d^1"
                ],
                "5": [
                    "print(d,end=\" \")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    arr = [20, 11, 9, 24]\n    ma=max(arr)\n    c=int(log(ma,2))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> arr\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    d=i^(2**c-1)\n    (i & 1 != d & 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    d=d^1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(d,end=\" \")\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        }
    },
    "p02633": {
        "s231827089": {
            "code": "x = 90\nif 360 % x == 0:\n    print(360 // x)\nelse:\n    gcd = mat.gcd(x, 360)\n    lcm = x * 360 // gcd\n    print(lcm // x)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "90"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "90"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 90",
                    "(360 % x == 0)"
                ],
                "2": [
                    "print(360 // x)"
                ],
                "3": [
                    "gcd = mat.gcd(x, 360)",
                    "lcm = (x * 360) // gcd",
                    "print(lcm // x)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 90\n    (360 % x == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(360 // x)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    gcd = mat.gcd(x, 360)\n    lcm = (x * 360) // gcd\n    print(lcm // x)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s829637076": {
            "code": "x = 90\nx = 180 - x\nans = 360 // math.gcd(360, x)\nif ans >= 90:\n    print(1 // 0)\nelse:\n    print(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 90",
                    "x=180-x",
                    "ans=360//math.gcd(360,x)",
                    "(ans >= 90)"
                ],
                "2": [
                    "print(1//0)"
                ],
                "3": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 90\n    x=180-x\n    ans=360//math.gcd(360,x)\n    (ans >= 90)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1//0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s067630099": {
            "code": "x = '90'\nprint(360 * gcd(x, 360) // x)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '90'",
                    "print(360*gcd(x,360)//x)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '90'\n    print(360*gcd(x,360)//x)\nNext:\n    <END>\n"
        }
    },
    "p02640": {
        "s169684529": {
            "code": "x = sympy.Symbol('x')\ny = sympy.Symbol('y')\ns = '3 8'\nlst = s.split()\nex1 = x + y - int(lst[0])\nex2 = 2 * x + 4 * y - int(lst[1])\nd = sympy.solve([ex1, ex2])\nif d[x] >= 0 and d[y] >= 0:\n    print('yes')\nelse:\n    print('no')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = sympy.Symbol('x')",
                    "y = sympy.Symbol('y')",
                    "s = '3 8'",
                    "lst = s.split()",
                    "ex1 = x + y - int(lst[0])",
                    "ex2 = 2 * x + 4 * y - int(lst[1])",
                    "d = sympy.solve([ex1, ex2])",
                    "(d[x] >= 0 and d[y] >= 0)"
                ],
                "2": [
                    "print(\"yes\")"
                ],
                "3": [
                    "print(\"no\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = sympy.Symbol('x')\n    y = sympy.Symbol('y')\n    s = '3 8'\n    lst = s.split()\n    ex1 = x + y - int(lst[0])\n    ex2 = 2 * x + 4 * y - int(lst[1])\n    d = sympy.solve([ex1, ex2])\n    (d[x] >= 0 and d[y] >= 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"no\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02642": {
        "s498836310": {
            "code": "n = 5\na = [24, 11, 8, 3, 16]\na = sorted(a)\nif a[0] == 1:\n    if a[1] == 1:\n        print(0)\n    else:\n        print(1)\nelse:\n    ans = 0\n    for num in a:\n        if a.count(num) >= 2:\n            continue\n        else:\n            cands = set([i for i in a if i != num])\n            divs = set(sympy.divisors(num))\n            if not cands & divs:\n                ans += 1\n    print(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                },
                "10": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                10,
                11,
                12,
                15,
                16,
                17,
                18,
                11,
                12,
                15,
                16,
                17,
                18,
                11,
                12,
                15,
                16,
                17,
                18,
                11,
                12,
                15,
                16,
                17,
                11,
                12,
                15,
                16,
                17,
                11,
                19
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [24, 11, 8, 3, 16]",
                    "a = sorted(a)",
                    "(a[0] == 1)"
                ],
                "2": [
                    "(a[1] == 1)"
                ],
                "3": [
                    "print(0)"
                ],
                "4": [
                    "print(1)"
                ],
                "5": [
                    "ans = 0"
                ],
                "6": [
                    "iterator -> num, Iterate Over -> a"
                ],
                "7": [
                    "(a.count(num) >= 2)"
                ],
                "8": [
                    "cands = set([i for i in a if i!=num])",
                    "divs = set(sympy.divisors(num))",
                    "(not cands & divs)"
                ],
                "9": [
                    "ans+=1"
                ],
                "10": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 10
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 6,
                        "false": 8
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 6
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [24, 11, 8, 3, 16]\n    a = sorted(a)\n    (a[0] == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (a[1] == 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    ans = 0\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> num, Iterate Over -> a\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 10\n\nBlock 7:\nStatement:\n    (a.count(num) >= 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 8\n\nBlock 8:\nStatement:\n    cands = set([i for i in a if i!=num])\n    divs = set(sympy.divisors(num))\n    (not cands & divs)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 6\n\nBlock 9:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 6\n\nBlock 10:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s440752143": {
            "code": "n = 5\na = [24, 11, 8, 3, 16]\na.sort()\nM = max(a)\np = []\nfor i in range(n):\n    p.append([j for j in range(a[i], M + 1, a[i])])\nprint(len(set(set(a) - set(p))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "M": "24"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "a": "[3, 8, 11, 16, 24]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unhashable type: 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [24, 11, 8, 3, 16]",
                    "a.sort()",
                    "M=max(a)",
                    "p=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "p.append([j for j in range(a[i],M+1,a[i])])"
                ],
                "4": [
                    "print(len(set(set(a)-set(p))))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [24, 11, 8, 3, 16]\n    a.sort()\n    M=max(a)\n    p=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    p.append([j for j in range(a[i],M+1,a[i])])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(len(set(set(a)-set(p))))\nNext:\n    <END>\n"
        },
        "s259803849": {
            "code": "n = 5\na = [24, 11, 8, 3, 16]\nhp.heapify(a)\nans = 0\nwhile len(a) > 0:\n    b = hp[0]\n    if b in a:\n        ans += -1\n    a = [i for i in a if i % b != 0]\n    ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'module' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [24, 11, 8, 3, 16]",
                    "hp.heapify(a)",
                    "ans = 0"
                ],
                "2": [
                    "while len(a) > 0:"
                ],
                "3": [
                    "b = hp[0]",
                    "(b in a)"
                ],
                "4": [
                    "ans += -1"
                ],
                "5": [
                    "a = [i for i in a if i % b != 0]",
                    "ans += 1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [24, 11, 8, 3, 16]\n    hp.heapify(a)\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while len(a) > 0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    b = hp[0]\n    (b in a)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += -1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    a = [i for i in a if i % b != 0]\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02645": {
        "s800389253": {
            "code": "val = 'takahashi'\nif len(val) <= 3:\n    val = input('Enter your name: ')\nelif len(val) >= 20:\n    val = input('Enter your name: ')\nelse:\n    print(len(val))\n    t = random.randint(0, len(val) - 3)\n    print(val[t:t + 3])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                4,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "val = 'takahashi'",
                    "(len(val) <= 3)"
                ],
                "2": [
                    "val = input('Enter your name: ')"
                ],
                "3": [
                    "(len(val) >= 20)"
                ],
                "4": [
                    "val = input('Enter your name: ')"
                ],
                "5": [
                    "print(len(val))",
                    "t = random.randint(0,len(val)-3)",
                    "print(val[t:t+3])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    val = 'takahashi'\n    (len(val) <= 3)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    val = input('Enter your name: ')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (len(val) >= 20)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    val = input('Enter your name: ')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(len(val))\n    t = random.randint(0,len(val)-3)\n    print(val[t:t+3])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s513665574": {
            "code": "i = 'takahashi'\nrl = [random.randint(0, len(i)) for i in range(3)]\nresult = ''\nfor j in rl:\n    result = result + i[j]\nprint(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "i = 'takahashi'",
                    "rl=[random.randint(0,len(i))for i in range(3)]",
                    "result = \"\""
                ],
                "2": [
                    "iterator -> j, Iterate Over -> rl"
                ],
                "3": [
                    "result = result + i[j]"
                ],
                "4": [
                    "print(result)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    i = 'takahashi'\n    rl=[random.randint(0,len(i))for i in range(3)]\n    result = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> j, Iterate Over -> rl\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    result = result + i[j]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(result)\nNext:\n    <END>\n"
        }
    },
    "p02658": {
        "s831745330": {
            "code": "n = 2\na_list = []\na_list = [1000000000, 1000000000]\nresult = np.prod(a_list)\nif result > 10 ** 18:\n    print('-1')\nelse:\n    print(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a_list = []",
                    "a_list = [1000000000, 1000000000]",
                    "result = np.prod(a_list)",
                    "(result > 10 ** 18)"
                ],
                "2": [
                    "print('-1')"
                ],
                "3": [
                    "print(result)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a_list = []\n    a_list = [1000000000, 1000000000]\n    result = np.prod(a_list)\n    (result > 10 ** 18)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('-1')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(result)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s109139045": {
            "code": "N = 2\nA = [1000000000, 1000000000]\nB = np.array(A, dtype='float64')\nans = np.cumprod(B)\nif ans[N - 1] > 10 ** 18:\n    print(-1)\nelse:\n    print(int(ans[N - 1]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7fc4ded523d0>"
                        },
                        {
                            "A": "[1000000000, 1000000000]"
                        },
                        {
                            "ans": "<numpy.ndarray object at 0x7fc4dea345d0>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7fc4ded523d0>"
                        },
                        {
                            "A": "[1000000000, 1000000000]"
                        },
                        {
                            "ans": "<numpy.ndarray object at 0x7fc4dea345d0>"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "A = [1000000000, 1000000000]",
                    "B = np.array(A,dtype='float64')",
                    "ans = np.cumprod(B)",
                    "(ans[N - 1] > 10 ** 18)"
                ],
                "2": [
                    "print(-1)"
                ],
                "3": [
                    "print(int(ans[N-1]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    A = [1000000000, 1000000000]\n    B = np.array(A,dtype='float64')\n    ans = np.cumprod(B)\n    (ans[N - 1] > 10 ** 18)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(int(ans[N-1]))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s999700114": {
            "code": "n = 2\na = [1000000000, 1000000000]\na.sort()\ncur = 1\nfor x in a:\n    cur *= a\n    if cur > 10 ** 18:\n        print(-1)\n        sys.exit()\nprint(cur)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a = [1000000000, 1000000000]",
                    "a.sort()",
                    "cur = 1"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> a"
                ],
                "3": [
                    "cur *= a",
                    "(cur > 10 ** 18)"
                ],
                "4": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "5": [
                    "print(cur)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [1000000000, 1000000000]\n    a.sort()\n    cur = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    cur *= a\n    (cur > 10 ** 18)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cur)\nNext:\n    <END>\n"
        },
        "s923722570": {
            "code": "n = 2\na = [1000000000, 1000000000]\nans = 1\na.sort()\nfor i in range(a):\n    ans *= a[i]\n    if ans > 1000000000000000000:\n        print(-1)\n        sys.exit()\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a = [1000000000, 1000000000]",
                    "ans = 1",
                    "a.sort()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(a)"
                ],
                "3": [
                    "ans *= a[i]",
                    "(ans > 1000000000000000000)"
                ],
                "4": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [1000000000, 1000000000]\n    ans = 1\n    a.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ans *= a[i]\n    (ans > 1000000000000000000)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s422502991": {
            "code": "n = 2\na = [1000000000, 1000000000]\nans = 1\nfor i in ans:\n    ans *= i\n    if ans > int(1e+18):\n        print(-1)\n        sys.exit()\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a = [1000000000, 1000000000]",
                    "ans = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> ans"
                ],
                "3": [
                    "ans*=i",
                    "(ans > int(1e+18))"
                ],
                "4": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [1000000000, 1000000000]\n    ans = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> ans\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ans*=i\n    (ans > int(1e+18))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s227413805": {
            "code": "N = '2'\na = [1000000000, 1000000000]\nif 0 in a:\n    print(0)\n    sys.exit()\nb = 1\nfor i in range(0, N):\n    b *= a[i]\n    if b > 1000000000000000000:\n        print(-1)\n        sys.exit\nprint(b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "a = [1000000000, 1000000000]",
                    "(0 in a)"
                ],
                "2": [
                    "print(0)",
                    "sys.exit()"
                ],
                "3": [
                    "b=1"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(0, N)"
                ],
                "5": [
                    "b *= a[i]",
                    "(b > 1000000000000000000)"
                ],
                "6": [
                    "print(-1)",
                    "sys.exit"
                ],
                "7": [
                    "print(b)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 7
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    a = [1000000000, 1000000000]\n    (0 in a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    b=1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(0, N)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    b *= a[i]\n    (b > 1000000000000000000)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    print(-1)\n    sys.exit\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    print(b)\nNext:\n    <END>\n"
        }
    },
    "p02659": {
        "s475669635": {
            "code": "N = [198.0, 1.1]\nans = str(N[0] * N[1])\nans1 = ans[0:-2]\nprint(int(ans1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = [198.0, 1.1]",
                    "ans = str(N[0]*N[1])",
                    "ans1 = ans[0:-2]",
                    "print(int(ans1))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = [198.0, 1.1]\n    ans = str(N[0]*N[1])\n    ans1 = ans[0:-2]\n    print(int(ans1))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s577858073": {
            "code": "a = '198 1.10'\nb = int(re.findall('^.', a))\nc = float(re.findall('.$', a))\nc = a * b\nprint(math.floor(c))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '198 1.10'",
                    "b = int(re.findall('^.',a))",
                    "c = float(re.findall('.$',a))",
                    "c = a * b",
                    "print(math.floor(c))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '198 1.10'\n    b = int(re.findall('^.',a))\n    c = float(re.findall('.$',a))\n    c = a * b\n    print(math.floor(c))\nNext:\n    <END>\n"
        },
        "s952258773": {
            "code": "numbers = ['198', '1.10']\na = float(numbers[0])\nb = Decimal(numbers[1])\nc = a * b\nprint(int(c))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for *: 'float' and 'decimal.Decimal'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "numbers = ['198', '1.10']",
                    "a = float(numbers[0])",
                    "b = Decimal(numbers[1])",
                    "c = a * b",
                    "print(int(c))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    numbers = ['198', '1.10']\n    a = float(numbers[0])\n    b = Decimal(numbers[1])\n    c = a * b\n    print(int(c))\nNext:\n    <END>\n"
        }
    },
    "p02660": {
        "s732572595": {
            "code": "n = 24\nk = sympy.divisors(n)\nc = 0\nfor i in range(len(k)):\n    if i == 0:\n        pass\n    elif n % k[i] == 0:\n        n //= k[i]\n        c += 1\nprint(c)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                7,
                8,
                9,
                4,
                5,
                7,
                8,
                9,
                4,
                5,
                7,
                8,
                9,
                4,
                5,
                7,
                4,
                5,
                7,
                4,
                5,
                7,
                4,
                5,
                7,
                4,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 24",
                    "k=sympy.divisors(n)",
                    "c=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(k))"
                ],
                "3": [
                    "(i == 0)"
                ],
                "4": [
                    "(n % k[i] == 0)"
                ],
                "5": [
                    "n//=k[i]",
                    "c+=1"
                ],
                "6": [
                    "print(c)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 24\n    k=sympy.divisors(n)\n    c=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(k))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (n % k[i] == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    n//=k[i]\n    c+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(c)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s801948610": {
            "code": "n = 24\ns = 0\nl = sympy.factorint(n)\nl2 = list(dict.values(l))\nfor i in range(len(l2)):\n    s += int((math.sqrt(1 + 9 * l2[i]) - 1) / 2)\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "2"
                        },
                        {
                            "l": "{2: 3, 3: 1}"
                        },
                        {
                            "n": "24"
                        },
                        {
                            "l2": "[3, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "3"
                        },
                        {
                            "l": "{2: 3, 3: 1}"
                        },
                        {
                            "n": "24"
                        },
                        {
                            "l2": "[3, 1]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "3"
                        },
                        {
                            "l": "{2: 3, 3: 1}"
                        },
                        {
                            "n": "24"
                        },
                        {
                            "l2": "[3, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 24",
                    "s = 0",
                    "l  = sympy.factorint(n)",
                    "l2 = list(dict.values(l))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(l2))"
                ],
                "3": [
                    "s += int((math.sqrt(1 + 9 * l2[i])-1)/2)"
                ],
                "4": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 24\n    s = 0\n    l  = sympy.factorint(n)\n    l2 = list(dict.values(l))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(l2))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s += int((math.sqrt(1 + 9 * l2[i])-1)/2)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(s)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02661": {
        "s792447449": {
            "code": "read = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN = 2\nA = [0] * N\nB = [0] * N\ni = 0\nfor line in readlines():\n    A[i], B[i] = map(int, line.rstrip().decode('utf-8').split())\n    i += 1\nsA = sorted(A)\nsB = sorted(B)\nif N % 2 == 0:\n    ans = sB[N // 2 - 1] + sB[N // 2] - (sA[N // 2 - 1] + sA[N // 2]) + 1\nelse:\n    ans = sB[(N - 1) // 2] - sA[(N - 1) // 2] + 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        13
                    ]
                },
                "5": {
                    "range": [
                        14,
                        14
                    ]
                },
                "6": {
                    "range": [
                        15,
                        15
                    ]
                },
                "7": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                11,
                12,
                13,
                14,
                17
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "read = sys.stdin.buffer.read",
                    "readline = sys.stdin.buffer.readline",
                    "readlines = sys.stdin.buffer.readlines",
                    "N = 2",
                    "A = [0]*N",
                    "B = [0]*N",
                    "i = 0"
                ],
                "2": [
                    "iterator -> line, Iterate Over -> readlines()"
                ],
                "3": [
                    "A[i], B[i] = map(int, line.rstrip().decode('utf-8').split())",
                    "i+=1"
                ],
                "4": [
                    "sA = sorted(A)",
                    "sB = sorted(B)",
                    "(N % 2 == 0)"
                ],
                "5": [
                    "ans = ((sB[(N//2)-1]+sB[(N//2)]) - (sA[(N//2)-1]+sA[(N//2)])) + 1"
                ],
                "6": [
                    "ans = (sB[(N-1)//2]-sA[(N-1)//2]) + 1"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    read = sys.stdin.buffer.read\n    readline = sys.stdin.buffer.readline\n    readlines = sys.stdin.buffer.readlines\n    N = 2\n    A = [0]*N\n    B = [0]*N\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> line, Iterate Over -> readlines()\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    A[i], B[i] = map(int, line.rstrip().decode('utf-8').split())\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    sA = sorted(A)\n    sB = sorted(B)\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    ans = ((sB[(N//2)-1]+sB[(N//2)]) - (sA[(N//2)-1]+sA[(N//2)])) + 1\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    ans = (sB[(N-1)//2]-sA[(N-1)//2]) + 1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02664": {
        "s186779573": {
            "code": "T = 'PD?D??P'\nt = T[0]\nans = []\nif t == '?' and T[1] == 'D':\n    ans.append('P')\nelif t == '?' and T[1] == 'P':\n    ans.append('D')\nelse:\n    ans.append(t)\nfor i in range(1, len(T)):\n    if t == 'P':\n        if T[i] == '?':\n            ans.append('D')\n            t = 'D'\n        else:\n            ans.append(T[i])\n            t = T[i]\n    elif t == 'D' and i < len(T) - 1 and (T[i + 1] == '?'):\n        if T[i] == '?':\n            ans.append('P')\n            t = 'P'\n        else:\n            ans.append(T[i])\n            t = T[i]\n    elif t == 'D' and i < len(T) - 1 and (T[i + 1] == 'D'):\n        if T[i] == '?':\n            ans.append('P')\n            t = 'P'\n        else:\n            ans.append(T[i])\n            t = T[i]\n    elif T[i] == '?':\n        ans.append('D')\n        t = 'D'\n    else:\n        ans.append(T[i])\n        t = T[i]\nprint(''.join(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        13
                    ]
                },
                "10": {
                    "range": [
                        14,
                        15
                    ]
                },
                "11": {
                    "range": [
                        16,
                        16
                    ]
                },
                "12": {
                    "range": [
                        17,
                        17
                    ]
                },
                "13": {
                    "range": [
                        18,
                        19
                    ]
                },
                "14": {
                    "range": [
                        20,
                        21
                    ]
                },
                "15": {
                    "range": [
                        22,
                        22
                    ]
                },
                "16": {
                    "range": [
                        23,
                        23
                    ]
                },
                "17": {
                    "range": [
                        24,
                        25
                    ]
                },
                "18": {
                    "range": [
                        26,
                        27
                    ]
                },
                "19": {
                    "range": [
                        28,
                        28
                    ]
                },
                "20": {
                    "range": [
                        29,
                        30
                    ]
                },
                "21": {
                    "range": [
                        31,
                        32
                    ]
                },
                "22": {
                    "range": [
                        33,
                        33
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                6,
                9,
                10,
                11,
                12,
                16,
                17,
                10,
                11,
                18,
                25,
                26,
                27,
                28,
                10,
                11,
                12,
                16,
                17,
                10,
                11,
                18,
                19,
                20,
                21,
                10,
                11,
                12,
                13,
                14,
                10,
                11,
                18,
                25,
                33,
                37,
                38,
                10,
                39
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 16,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 19,
                    "state": []
                },
                {
                    "block": 21,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 22,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "T = 'PD?D??P'",
                    "t = T[0]",
                    "ans = []",
                    "(t == '?' and T[1] == 'D')"
                ],
                "2": [
                    "ans.append('P')"
                ],
                "3": [
                    "(t == '?' and T[1] == 'P')"
                ],
                "4": [
                    "ans.append('D')"
                ],
                "5": [
                    "ans.append(t)"
                ],
                "6": [
                    "iterator -> i, Iterate Over -> range(1, len(T))"
                ],
                "7": [
                    "(t == 'P')"
                ],
                "8": [
                    "(T[i] == '?')"
                ],
                "9": [
                    "ans.append('D')",
                    "t = 'D'"
                ],
                "10": [
                    "ans.append(T[i])",
                    "t = T[i]"
                ],
                "11": [
                    "(t == 'D' and i < len(T) - 1 and (T[i + 1] == '?'))"
                ],
                "12": [
                    "(T[i] == '?')"
                ],
                "13": [
                    "ans.append('P')",
                    "t = 'P'"
                ],
                "14": [
                    "ans.append(T[i])",
                    "t = T[i]"
                ],
                "15": [
                    "(t == 'D' and i < len(T) - 1 and (T[i + 1] == 'D'))"
                ],
                "16": [
                    "(T[i] == '?')"
                ],
                "17": [
                    "ans.append('P')",
                    "t = 'P'"
                ],
                "18": [
                    "ans.append(T[i])",
                    "t = T[i]"
                ],
                "19": [
                    "(T[i] == '?')"
                ],
                "20": [
                    "ans.append('D')",
                    "t = 'D'"
                ],
                "21": [
                    "ans.append(T[i])",
                    "t = T[i]"
                ],
                "22": [
                    "print(''.join(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 22
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 15
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": 19
                    },
                    "no_condition": null
                },
                "16": {
                    "with_condition": {
                        "true": 17,
                        "false": 18
                    },
                    "no_condition": null
                },
                "17": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "18": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "19": {
                    "with_condition": {
                        "true": 20,
                        "false": 21
                    },
                    "no_condition": null
                },
                "20": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "21": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    T = 'PD?D??P'\n    t = T[0]\n    ans = []\n    (t == '?' and T[1] == 'D')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans.append('P')\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    (t == '?' and T[1] == 'P')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans.append('D')\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    ans.append(t)\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> i, Iterate Over -> range(1, len(T))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 22\n\nBlock 7:\nStatement:\n    (t == 'P')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    (T[i] == '?')\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    ans.append('D')\n    t = 'D'\nNext:\n    Go to Block: 6\n\nBlock 10:\nStatement:\n    ans.append(T[i])\n    t = T[i]\nNext:\n    Go to Block: 6\n\nBlock 11:\nStatement:\n    (t == 'D' and i < len(T) - 1 and (T[i + 1] == '?'))\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 15\n\nBlock 12:\nStatement:\n    (T[i] == '?')\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    ans.append('P')\n    t = 'P'\nNext:\n    Go to Block: 6\n\nBlock 14:\nStatement:\n    ans.append(T[i])\n    t = T[i]\nNext:\n    Go to Block: 6\n\nBlock 15:\nStatement:\n    (t == 'D' and i < len(T) - 1 and (T[i + 1] == 'D'))\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 19\n\nBlock 16:\nStatement:\n    (T[i] == '?')\nNext:\n    If True: Go to Block 17\n    If False: Go to Block 18\n\nBlock 17:\nStatement:\n    ans.append('P')\n    t = 'P'\nNext:\n    Go to Block: 6\n\nBlock 18:\nStatement:\n    ans.append(T[i])\n    t = T[i]\nNext:\n    Go to Block: 6\n\nBlock 19:\nStatement:\n    (T[i] == '?')\nNext:\n    If True: Go to Block 20\n    If False: Go to Block 21\n\nBlock 20:\nStatement:\n    ans.append('D')\n    t = 'D'\nNext:\n    Go to Block: 6\n\nBlock 21:\nStatement:\n    ans.append(T[i])\n    t = T[i]\nNext:\n    Go to Block: 6\n\nBlock 22:\nStatement:\n    print(''.join(ans))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s948748886": {
            "code": "t = 'PD?D??P'\npre = 'D'\nfor i in range(len(t)):\n    if t[i] == '?':\n        t[i] = 'D'",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "t = 'PD?D??P'",
                    "pre = 'D'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(t))"
                ],
                "3": [
                    "(t[i] == '?')"
                ],
                "4": [
                    "t[i] = 'D'"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    t = 'PD?D??P'\n    pre = 'D'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(t))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (t[i] == '?')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    t[i] = 'D'\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02665": {
        "s352500233": {
            "code": "n = 3\na = [0, 1, 1, 2]\nl = [0] * (n + 1)\nl[0] = 1\ncumsum_a = numpy.cumsum(a[::-1])[::-1]\nif n > 0 and a[0] > 0:\n    print(-1)\nelse:\n    for i in range(1, n):\n        b_max1 = 2 * (l[i - 1] - a[i - 1])\n        b_max2 = cumsum_a[i]\n        if a[i] > 2 ** i - math.ceil(l[i - 1] / 2):\n            l = -1\n            break\n        l[i] = min(b_max1, b_max2)\n    if l != -1:\n        l[-1] = a[-1]\n        print(sum(l))\n    else:\n        print(-1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                },
                "8": {
                    "range": [
                        15,
                        16
                    ]
                },
                "9": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                10,
                11,
                12,
                15,
                9,
                10,
                11,
                12,
                15,
                9,
                16,
                17,
                18
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [0, 1, 1, 2]",
                    "l = [0] * (n + 1)",
                    "l[0] = 1",
                    "cumsum_a = numpy.cumsum(a[::-1])[::-1]",
                    "(n > 0 and a[0] > 0)"
                ],
                "2": [
                    "print(-1)"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "4": [
                    "b_max1 = 2 * (l[i - 1] - a[i - 1])",
                    "b_max2 = cumsum_a[i]",
                    "(a[i] > 2 ** i - math.ceil(l[i - 1] / 2))"
                ],
                "5": [
                    "l = -1"
                ],
                "6": [
                    "l[i] = min(b_max1, b_max2)"
                ],
                "7": [
                    "(l != -1)"
                ],
                "8": [
                    "l[-1] = a[-1]",
                    "print(sum(l))"
                ],
                "9": [
                    "print(-1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [0, 1, 1, 2]\n    l = [0] * (n + 1)\n    l[0] = 1\n    cumsum_a = numpy.cumsum(a[::-1])[::-1]\n    (n > 0 and a[0] > 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    b_max1 = 2 * (l[i - 1] - a[i - 1])\n    b_max2 = cumsum_a[i]\n    (a[i] > 2 ** i - math.ceil(l[i - 1] / 2))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    l = -1\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    l[i] = min(b_max1, b_max2)\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    (l != -1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    l[-1] = a[-1]\n    print(sum(l))\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(-1)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02675": {
        "s183481018": {
            "code": "N = 16\nichinokurai = N % 10\nif ichinokurai in [2, 4, 5, 7, 9]:\n    print('hon')\nelif ichinokurai in [0, 1, 6, 8]:\n    print('pon')\nelif ichinokurai in [3]:\n    print('bon')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 16",
                    "ichinokurai = N%10",
                    "(ichinokurai in [2, 4, 5, 7, 9])"
                ],
                "2": [
                    "print('hon')"
                ],
                "3": [
                    "(ichinokurai in [0, 1, 6, 8])"
                ],
                "4": [
                    "print('pon')"
                ],
                "5": [
                    "(ichinokurai in [3])"
                ],
                "6": [
                    "print('bon')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 16\n    ichinokurai = N%10\n    (ichinokurai in [2, 4, 5, 7, 9])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('hon')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (ichinokurai in [0, 1, 6, 8])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('pon')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (ichinokurai in [3])\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print('bon')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02676": {
        "s112129692": {
            "code": "K = 7\nS = 'nikoandsolstice'\nif len(S) <= K:\n    print(S)\nelse:\n    print(S[:K] + '...')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "K = 7",
                    "S = 'nikoandsolstice'",
                    "(len(S) <= K)"
                ],
                "2": [
                    "print(S)"
                ],
                "3": [
                    "print(S[:K] + '...')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = 7\n    S = 'nikoandsolstice'\n    (len(S) <= K)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(S[:K] + '...')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s163462674": {
            "code": "K = 7\nS = 'nikoandsolstice'\nsentence = list(S)\nsentencelong = len(sentence)\nif K < sentencelong:\n    print(sentence[:K] + '...')\nelif K > sentencelong:\n    print(S)\nelse:\n    sys.exit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate list (not \"str\") to list')"
            },
            "cfg_block_statements": {
                "1": [
                    "K = 7",
                    "S = 'nikoandsolstice'",
                    "sentence = list(S)",
                    "sentencelong = len(sentence)",
                    "(K < sentencelong)"
                ],
                "2": [
                    "print(sentence[:K] + '...')"
                ],
                "3": [
                    "(K > sentencelong)"
                ],
                "4": [
                    "print(S)"
                ],
                "5": [
                    "sys.exit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = 7\n    S = 'nikoandsolstice'\n    sentence = list(S)\n    sentencelong = len(sentence)\n    (K < sentencelong)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(sentence[:K] + '...')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (K > sentencelong)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(S)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    sys.exit()\nNext:\n    <END>\n"
        },
        "s273805318": {
            "code": "n = 7\ns = 'nikoandsolstice'\nif len(s) <= n:\n    print(s)\nelse:\n    print(s[:n + 1 + '...'])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 7",
                    "s = 'nikoandsolstice'",
                    "(len(s) <= n)"
                ],
                "2": [
                    "print(s)"
                ],
                "3": [
                    "print(s[:n+1 + \"...\"])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 7\n    s = 'nikoandsolstice'\n    (len(s) <= n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(s[:n+1 + \"...\"])\nNext:\n    <END>\n"
        }
    },
    "p02677": {
        "s609388280": {
            "code": "inputs = ['3', '4', '9', '0']\nA, B, H, M = (int(inputs[0]), int(inputs[1]), int(inputs[2]), int(inputs[3]))\nnum_diff = H * 5 - M\nans1 = ans2 = ans3 = 0\nif num_diff > 30:\n    ans = math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos((30 - num_diff) * 6 / 180 * math.pi))\nelif H <= 6 and M <= 30:\n    ans = math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(num_diff * 6 / 135 * math.pi))\nelif H >= 6 and M >= 30:\n    ans = math.sqrt(A ** 2 + B ** 2 - 2 * A * B * math.cos(num_diff * 6 / 135 * math.pi))\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "inputs = ['3', '4', '9', '0']",
                    "A, B, H, M = int(inputs[0]), int(inputs[1]), int(inputs[2]), int(inputs[3])",
                    "num_diff = H*5 - M",
                    "ans1=ans2=ans3=0",
                    "(num_diff > 30)"
                ],
                "2": [
                    "ans = math.sqrt(A**2 + B**2 - 2 * A * B * math.cos(( (30 -(num_diff)) * 6 )/180 * math.pi) )"
                ],
                "3": [
                    "(H <= 6 and M <= 30)"
                ],
                "4": [
                    "ans = math.sqrt(A**2 + B**2 - 2 * A * B * math.cos(( (num_diff) * 6 )/ 135 * math.pi) )"
                ],
                "5": [
                    "(H >= 6 and M >= 30)"
                ],
                "6": [
                    "ans = math.sqrt(A**2 + B**2 - 2 * A * B * math.cos(( (num_diff) * 6 )/ 135 * math.pi) )"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    inputs = ['3', '4', '9', '0']\n    A, B, H, M = int(inputs[0]), int(inputs[1]), int(inputs[2]), int(inputs[3])\n    num_diff = H*5 - M\n    ans1=ans2=ans3=0\n    (num_diff > 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = math.sqrt(A**2 + B**2 - 2 * A * B * math.cos(( (30 -(num_diff)) * 6 )/180 * math.pi) )\nNext:\n    Go to Block: 7\n\nBlock 3:\nStatement:\n    (H <= 6 and M <= 30)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans = math.sqrt(A**2 + B**2 - 2 * A * B * math.cos(( (num_diff) * 6 )/ 135 * math.pi) )\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (H >= 6 and M >= 30)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans = math.sqrt(A**2 + B**2 - 2 * A * B * math.cos(( (num_diff) * 6 )/ 135 * math.pi) )\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s051777839": {
            "code": "t = ['3', '4', '9', '0']\nt = [int(i) for i in t]\nr = math.sqrt(t[0] * t[0] + t[1] * t[1])\nh = t[2]\nm = t[3]\nif h == 12:\n    h = 0\nif m == 60:\n    m = 0\nhour_angle = 0.5 * (h * 60 + m)\nminute_angle = 6 * m\nangle = abs(hour_angle - minute_angle)\nangle = min(360 - angle, angle)\nprint(math.sqrt(r * r - 2 * t[0] * t[1] * math.cos(angle(2 * math.pi / 360))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                8,
                10,
                11,
                12,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "t = ['3', '4', '9', '0']",
                    "t = [int(i) for i in t]",
                    "r = math.sqrt(t[0]*t[0]+ t[1]*t[1])",
                    "h = t[2]",
                    "m = t[3]",
                    "(h == 12)"
                ],
                "2": [
                    "h = 0"
                ],
                "3": [
                    "(m == 60)"
                ],
                "4": [
                    "m = 0"
                ],
                "5": [
                    "hour_angle = 0.5 * (h * 60 + m)",
                    "minute_angle = 6 * m",
                    "angle = abs(hour_angle - minute_angle)",
                    "angle = min(360 - angle, angle)",
                    "print(math.sqrt(r*r - 2*t[0]*t[1]*math.cos(angle(2*math.pi/360))))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    t = ['3', '4', '9', '0']\n    t = [int(i) for i in t]\n    r = math.sqrt(t[0]*t[0]+ t[1]*t[1])\n    h = t[2]\n    m = t[3]\n    (h == 12)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    h = 0\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (m == 60)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    m = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    hour_angle = 0.5 * (h * 60 + m)\n    minute_angle = 6 * m\n    angle = abs(hour_angle - minute_angle)\n    angle = min(360 - angle, angle)\n    print(math.sqrt(r*r - 2*t[0]*t[1]*math.cos(angle(2*math.pi/360))))\nNext:\n    <END>\n"
        }
    },
    "p02681": {
        "s267685523": {
            "code": "sys.setrecursionlimit(10 ** 8)\nS = ['c', 'h', 'o', 'k', 'u', 'd', 'a', 'i']\nT = ['c', 'h', 'o', 'k', 'u', 'd', 'a', 'i', 'z']\nT.pop()\nif ''.join(S) == ''.join(T):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "sys.setrecursionlimit(10**8)",
                    "S = ['c', 'h', 'o', 'k', 'u', 'd', 'a', 'i']",
                    "T = ['c', 'h', 'o', 'k', 'u', 'd', 'a', 'i', 'z']",
                    "T.pop()",
                    "(''.join(S) == ''.join(T))"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    sys.setrecursionlimit(10**8)\n    S = ['c', 'h', 'o', 'k', 'u', 'd', 'a', 'i']\n    T = ['c', 'h', 'o', 'k', 'u', 'd', 'a', 'i', 'z']\n    T.pop()\n    (''.join(S) == ''.join(T))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s659021349": {
            "code": "s = 'chokudai'\nt = 'chokudaiz'\nt2 = re.match(s, t)\nif len(t2) == 1 and re.sub('[a-z]', '', t2) == '':\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 're.Match' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'chokudai'",
                    "t = 'chokudaiz'",
                    "t2=re.match(s,t)",
                    "(len(t2) == 1 and re.sub('[a-z]', '', t2) == '')"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'chokudai'\n    t = 'chokudaiz'\n    t2=re.match(s,t)\n    (len(t2) == 1 and re.sub('[a-z]', '', t2) == '')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02687": {
        "s146468752": {
            "code": "s = 'ABC'\nif s == 'ABC':\n    print('ARC')\nelse:\n    print('ABC')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'ABC'",
                    "(s == 'ABC')"
                ],
                "2": [
                    "print( \"ARC\" )"
                ],
                "3": [
                    "print( \"ABC\" )"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABC'\n    (s == 'ABC')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print( \"ARC\" )\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print( \"ABC\" )\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02690": {
        "s616748697": {
            "code": "x = 33\nb = 0\nans = []\nwhile True:\n    n = x - b ** 5\n    a = int(math.pow(n, 1 / 5))\n    if a ** 5 == n:\n        ans.append(a)\n        ans.append(-b)\n        break\n    b += 1\nprint(*ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                11,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 33",
                    "b = 0",
                    "ans = []"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "n = x - b**5",
                    "a = int(math.pow(n, 1/5))",
                    "(a ** 5 == n)"
                ],
                "4": [
                    "ans.append(a)",
                    "ans.append(-b)"
                ],
                "5": [
                    "b += 1"
                ],
                "6": [
                    "print(*ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 33\n    b = 0\n    ans = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    n = x - b**5\n    a = int(math.pow(n, 1/5))\n    (a ** 5 == n)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans.append(a)\n    ans.append(-b)\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    b += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(*ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s874797017": {
            "code": "X = 33\nB = -X ** (1 / 5)\nwhile True:\n    print(B)\n    A = Decimal((X + B ** 5) ** (1 / 5))\n    if int(A) == A and A > B:\n        print(A, B)\n        break\n    else:\n        B = B + 1",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('conversion from complex to Decimal is not supported')"
            },
            "cfg_block_statements": {
                "1": [
                    "X = 33",
                    "B=-X**(1/5)"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "print(B)",
                    "A= Decimal((X+B**5)**(1/5))",
                    "(int(A) == A and A > B)"
                ],
                "4": [
                    "print(A,B)"
                ],
                "5": [
                    "B=B+1"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 33\n    B=-X**(1/5)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(B)\n    A= Decimal((X+B**5)**(1/5))\n    (int(A) == A and A > B)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(A,B)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    B=B+1\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02691": {
        "s867741707": {
            "code": "N = 6\nA = [2, 3, 3, 1, 3, 1]\nM = max([i + A[i] for i in range(N)])\nB = [0] * (2 * M)\nans = 0\nfor i in range(N):\n    if i - A[i] >= 0:\n        ans += B[i - A[i]]\n    B[i + A[i]] += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                9,
                6,
                7,
                9,
                6,
                7,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "A = [2, 3, 3, 1, 3, 1]",
                    "M = max( [ i + A[i] for i in range(N) ])",
                    "B = [0] * (2*M)",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(i - A[i] >= 0)"
                ],
                "4": [
                    "ans += B[i - A[i]]"
                ],
                "5": [
                    "B[i + A[i]]+=1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    A = [2, 3, 3, 1, 3, 1]\n    M = max( [ i + A[i] for i in range(N) ])\n    B = [0] * (2*M)\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i - A[i] >= 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += B[i - A[i]]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    B[i + A[i]]+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s997816855": {
            "code": "N = 6\nA = [2, 3, 3, 1, 3, 1]\nM = max([i + A[i] for i in range(N)])\nB = [0] * (M + 2)\nans = 0\nfor i in range(N):\n    if i - A[i] >= 0:\n        ans += B[i - A[i]]\n    B[i + A[i]] += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                9,
                6,
                7,
                9,
                6,
                7,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "A = [2, 3, 3, 1, 3, 1]",
                    "M = max( [ i + A[i] for i in range(N) ])",
                    "B = [0] * (M + 2)",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(i - A[i] >= 0)"
                ],
                "4": [
                    "ans += B[i - A[i]]"
                ],
                "5": [
                    "B[i + A[i]]+=1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    A = [2, 3, 3, 1, 3, 1]\n    M = max( [ i + A[i] for i in range(N) ])\n    B = [0] * (M + 2)\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i - A[i] >= 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += B[i - A[i]]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    B[i + A[i]]+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02694": {
        "s043171279": {
            "code": "X = 103\nc = 0\nfor i in range(10 ** 18):\n    n = 1.01 ** i\n    if X == math.floor(n * 100):\n        print(i)\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "X = 103",
                    "c = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(10 ** 18)"
                ],
                "3": [
                    "n = 1.01**i",
                    "(X == math.floor(n * 100))"
                ],
                "4": [
                    "print(i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 103\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(10 ** 18)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    n = 1.01**i\n    (X == math.floor(n * 100))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s049843583": {
            "code": "X = 103\nmoney = 100\ncnt = 0\nwhile money < X:\n    money = Decimal(money * 1.01)\n    cnt += 1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for *: 'decimal.Decimal' and 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "X = 103",
                    "money = 100",
                    "cnt = 0"
                ],
                "2": [
                    "while money < X:"
                ],
                "3": [
                    "money = Decimal(money*1.01)",
                    "cnt += 1"
                ],
                "4": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 103\n    money = 100\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while money < X:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    money = Decimal(money*1.01)\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        },
        "s415947073": {
            "code": "t = '103'\nprint(math.log(t) - math.log(100)) / math.log(1.01)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "t": "'103'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('must be real number, not str')"
            },
            "cfg_block_statements": {
                "1": [
                    "t = '103'",
                    "print (math.log(t)-math.log(100))/math.log(1.01)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    t = '103'\n    print (math.log(t)-math.log(100))/math.log(1.01)\nNext:\n    <END>\n"
        }
    },
    "p02696": {
        "s227600665": {
            "code": "b = [5, 7, 4]\nans = 0\ncheck = 0\nA = 0\nC = b[1]\nmax = math.floor(b[2] / b[1])\nif max == 0:\n    if b[1] - 1 > 0:\n        check = math.floor(b[0] * (b[1] - 1) / b[1]) - b[0] * math.floor((b[1] - 1) / b[1])\n        if check > ans:\n            ans = check\nelse:\n    for i in range(max):\n        A = b[1] - 1\n        if A > 0:\n            check = math.floor(b[0] * A / C) - b[0] * math.floor(A / C)\n            if check > ans:\n                ans = check\n        b[1] += b[1]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        16
                    ]
                },
                "8": {
                    "range": [
                        17,
                        17
                    ]
                },
                "9": {
                    "range": [
                        18,
                        18
                    ]
                },
                "10": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                20
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "b = [5, 7, 4]",
                    "ans=0",
                    "check=0",
                    "A=0",
                    "C=b[1]",
                    "max = math.floor(b[2]/b[1])",
                    "(max == 0)"
                ],
                "2": [
                    "(b[1] - 1 > 0)"
                ],
                "3": [
                    "check = math.floor((b[0]*(b[1]-1))/b[1]) - b[0]*math.floor((b[1]-1)/b[1])",
                    "(check > ans)"
                ],
                "4": [
                    "ans=check"
                ],
                "5": [
                    "iterator -> i, Iterate Over -> range(max)"
                ],
                "6": [
                    "A=b[1]-1",
                    "(A > 0)"
                ],
                "7": [
                    "check = math.floor((b[0]*A)/C) - b[0]*math.floor(A/C)",
                    "(check > ans)"
                ],
                "8": [
                    "ans=check"
                ],
                "9": [
                    "b[1]+=b[1]"
                ],
                "10": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 10
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 10
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 9
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    b = [5, 7, 4]\n    ans=0\n    check=0\n    A=0\n    C=b[1]\n    max = math.floor(b[2]/b[1])\n    (max == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (b[1] - 1 > 0)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    check = math.floor((b[0]*(b[1]-1))/b[1]) - b[0]*math.floor((b[1]-1)/b[1])\n    (check > ans)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 10\n\nBlock 4:\nStatement:\n    ans=check\nNext:\n    Go to Block: 10\n\nBlock 5:\nStatement:\n    iterator -> i, Iterate Over -> range(max)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 10\n\nBlock 6:\nStatement:\n    A=b[1]-1\n    (A > 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 9\n\nBlock 7:\nStatement:\n    check = math.floor((b[0]*A)/C) - b[0]*math.floor(A/C)\n    (check > ans)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ans=check\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    b[1]+=b[1]\nNext:\n    Go to Block: 5\n\nBlock 10:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02699": {
        "s267783546": {
            "code": "S = '4 5'\nlength = len(S)\narr = np.array([int(S[i:j]) for i in range(0, length - 3) for j in range(i + 4, length + 1)])\narr2 = arr % 2019\nprint(len(arr2) - np.count_nonzero(arr2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'4 5'"
                        },
                        {
                            "arr2": "<numpy.ndarray object at 0x7ff8d5f346f0>"
                        },
                        {
                            "length": "3"
                        },
                        {
                            "arr": "<numpy.ndarray object at 0x7ff8d64a63d0>"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = '4 5'",
                    "length = len(S)",
                    "arr = np.array([int(S[i:j]) for i in range(0,length-3) for j in range(i+4, length+1)])",
                    "arr2 = arr % 2019",
                    "print(len(arr2)- np.count_nonzero(arr2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '4 5'\n    length = len(S)\n    arr = np.array([int(S[i:j]) for i in range(0,length-3) for j in range(i+4, length+1)])\n    arr2 = arr % 2019\n    print(len(arr2)- np.count_nonzero(arr2))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02701": {
        "s647719371": {
            "code": "data = ['3']\ndf = pd.DataFrame(data)\nprint(len(pd.unique(df[0])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "data = ['3']",
                    "df = pd.DataFrame(data)",
                    "print(len(pd.unique(df[0])))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    data = ['3']\n    df = pd.DataFrame(data)\n    print(len(pd.unique(df[0])))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02705": {
        "s739003184": {
            "code": "R = '1'\nreturn 2 * math.pi",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "R = '1'",
                    "return 2*math.pi"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    return 2*math.pi\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s188565726": {
            "code": "r = 1\nreturn 2 * r * np.pi",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "r = 1",
                    "return  2 * r * np.pi"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 1\n    return  2 * r * np.pi\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s386075565": {
            "code": "R = '1'\ncircum = R * 2 * math.pi\nprint(circum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = '1'",
                    "circum = R * 2 * math.pi",
                    "print(circum)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    circum = R * 2 * math.pi\n    print(circum)\nNext:\n    <END>\n"
        },
        "s969775792": {
            "code": "r = 1\nprint(math.pi() * r ** 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "r": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = 1",
                    "print(math.pi()*r**2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 1\n    print(math.pi()*r**2)\nNext:\n    <END>\n"
        },
        "s072228525": {
            "code": "r = '1'\nl = 2 * math.pi * r\nprint(l)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '1'",
                    "l=2*math.pi*r",
                    "print(l)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '1'\n    l=2*math.pi*r\n    print(l)\nNext:\n    <END>\n"
        },
        "s385335979": {
            "code": "n = 1\nprint(2 * math.pi() * n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 1",
                    "print(2*math.pi()*n)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 1\n    print(2*math.pi()*n)\nNext:\n    <END>\n"
        },
        "s918884568": {
            "code": "n = 1\nprint(2 * math.pi() * n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 1",
                    "print(2*math.pi()*n)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 1\n    print(2*math.pi()*n)\nNext:\n    <END>\n"
        },
        "s728686780": {
            "code": "r = '1'\nprint(2 * r * math.pi)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '1'",
                    "print(2*r*math.pi)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '1'\n    print(2*r*math.pi)\nNext:\n    <END>\n"
        },
        "s119135968": {
            "code": "R = '1'\nl = 2 * R * math.pi\nprint(l)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = '1'",
                    "l = 2*R*math.pi",
                    "print(l)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    l = 2*R*math.pi\n    print(l)\nNext:\n    <END>\n"
        },
        "s068529722": {
            "code": "R = '1'\nprint(f'{2 * R * math.pi}')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = '1'",
                    "print(f'{2*R*math.pi}')"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    print(f'{2*R*math.pi}')\nNext:\n    <END>\n"
        },
        "s520624555": {
            "code": "R = '1'\na = 2 * R * math.pi\nprint(round(a, 3))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = '1'",
                    "a = 2*R*math.pi",
                    "print(round(a,3))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    a = 2*R*math.pi\n    print(round(a,3))\nNext:\n    <END>\n"
        },
        "s713063280": {
            "code": "R = '1'\ns = 2.0 * math.pi * R\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = '1'",
                    "s = 2.0*math.pi*R",
                    "print(s)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    s = 2.0*math.pi*R\n    print(s)\nNext:\n    <END>\n"
        },
        "s162276318": {
            "code": "i = '1'\nprint(i * pi)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "i = '1'",
                    "print(i * pi)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    i = '1'\n    print(i * pi)\nNext:\n    <END>\n"
        },
        "s143786585": {
            "code": "R = 1\ncircumference = 2 * math.pi * R\nprint('%.20f' % circumference())",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = 1",
                    "circumference = 2 * math.pi * R",
                    "print(\"%.20f\" % circumference())"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = 1\n    circumference = 2 * math.pi * R\n    print(\"%.20f\" % circumference())\nNext:\n    <END>\n"
        },
        "s786869708": {
            "code": "R = '1'\nr = 2 * math.pi * R\nprint(R)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "R": "'1'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = '1'",
                    "r=2*math.pi*R",
                    "print(R)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    r=2*math.pi*R\n    print(R)\nNext:\n    <END>\n"
        }
    },
    "p02707": {
        "s090738342": {
            "code": "n = 5\na = [1, 1, 2, 2]\na_cnt = Counter(a).most_common()\nfor i in range(1, n + 1):\n    if i in a:\n        if a_cnt[i - 1]:\n            print(a_cnt[i - 1][1])\n        else:\n            print(0)\n    else:\n        print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                11,
                4,
                5,
                11,
                4,
                5,
                11,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [1, 1, 2, 2]",
                    "a_cnt = Counter(a).most_common()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n + 1)"
                ],
                "3": [
                    "(i in a)"
                ],
                "4": [
                    "(a_cnt[i - 1])"
                ],
                "5": [
                    "print(a_cnt[i-1][1])"
                ],
                "6": [
                    "print(0)"
                ],
                "7": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [1, 1, 2, 2]\n    a_cnt = Counter(a).most_common()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n + 1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (i in a)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (a_cnt[i - 1])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(a_cnt[i-1][1])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        },
        "s009790258": {
            "code": "input = sys.stdin.readline\nn = 5\na = ['1', ' ', '1', ' ', '2', ' ', '2']\nfor i in a:\n    print(a.count(str(i + 1)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "['1', ' ', '1', ' ', '2', ' ', '2']"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f301411f510>"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "['1', ' ', '1', ' ', '2', ' ', '2']"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f301411f510>"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "['1', ' ', '1', ' ', '2', ' ', '2']"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f301411f510>"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "n = 5",
                    "a = ['1', ' ', '1', ' ', '2', ' ', '2']"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> a"
                ],
                "3": [
                    "print(a.count(str(i+1)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    n = 5\n    a = ['1', ' ', '1', ' ', '2', ' ', '2']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(a.count(str(i+1)))\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02709": {
        "s849911953": {
            "code": "N = 4\na = [1, 3, 4, 2]\nscore = np.array(a)\nb = np.sort(score)\nc = b[-1::-1]\nx = np.argsort(a)\ny = x[-1::-1]\ncand = list(range(N))\ncount = 0\nfor i in range(N):\n    if y[i] - cand[0] > cand[-1] - y[i]:\n        count += c[i] * abs(y[i] - cand[0])\n        cand.pop(0)\n    elif y[i] - cand[0] < cand[-1] - y[i]:\n        count += c[i] * abs(cand[-1] - y[i])\n        cand.pop(-1)\n    elif y[i + 1] > y[i]:\n        count += c[i] * abs(y[i] - cand[0])\n        cand.pop(0)\n    else:\n        count += c[i] * abs(cand[-1] - y[i])\n        cand.pop(-1)\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        9
                    ]
                },
                "2": {
                    "range": [
                        10,
                        10
                    ]
                },
                "3": {
                    "range": [
                        11,
                        11
                    ]
                },
                "4": {
                    "range": [
                        12,
                        13
                    ]
                },
                "5": {
                    "range": [
                        14,
                        14
                    ]
                },
                "6": {
                    "range": [
                        15,
                        16
                    ]
                },
                "7": {
                    "range": [
                        17,
                        17
                    ]
                },
                "8": {
                    "range": [
                        18,
                        19
                    ]
                },
                "9": {
                    "range": [
                        20,
                        21
                    ]
                },
                "10": {
                    "range": [
                        22,
                        22
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                10,
                11,
                14,
                15,
                16,
                10,
                11,
                12,
                13,
                10,
                11,
                14,
                15,
                16,
                10,
                24
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "a = [1, 3, 4, 2]",
                    "score=np.array(a)",
                    "b=np.sort(score)",
                    "c=b[-1::-1]",
                    "x=np.argsort(a)",
                    "y=x[-1::-1]",
                    "cand=list(range(N))",
                    "count=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(y[i] - cand[0] > cand[-1] - y[i])"
                ],
                "4": [
                    "count+=c[i]*abs(y[i]-cand[0])",
                    "cand.pop(0)"
                ],
                "5": [
                    "(y[i] - cand[0] < cand[-1] - y[i])"
                ],
                "6": [
                    "count+=c[i]*abs(cand[-1]-y[i])",
                    "cand.pop(-1)"
                ],
                "7": [
                    "(y[i + 1] > y[i])"
                ],
                "8": [
                    "count+=c[i]*abs(y[i]-cand[0])",
                    "cand.pop(0)"
                ],
                "9": [
                    "count+=c[i]*abs(cand[-1]-y[i])",
                    "cand.pop(-1)"
                ],
                "10": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    a = [1, 3, 4, 2]\n    score=np.array(a)\n    b=np.sort(score)\n    c=b[-1::-1]\n    x=np.argsort(a)\n    y=x[-1::-1]\n    cand=list(range(N))\n    count=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (y[i] - cand[0] > cand[-1] - y[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count+=c[i]*abs(y[i]-cand[0])\n    cand.pop(0)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (y[i] - cand[0] < cand[-1] - y[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    count+=c[i]*abs(cand[-1]-y[i])\n    cand.pop(-1)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (y[i + 1] > y[i])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    count+=c[i]*abs(y[i]-cand[0])\n    cand.pop(0)\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    count+=c[i]*abs(cand[-1]-y[i])\n    cand.pop(-1)\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(count)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02711": {
        "s267851528": {
            "code": "N = ['117']\nN = N[0]\nif N[0] == '7' or N[1] == '7' or N[2] == '7':\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = ['117']",
                    "N = N[0]",
                    "(N[0] == '7' or N[1] == '7' or N[2] == '7')"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = ['117']\n    N = N[0]\n    (N[0] == '7' or N[1] == '7' or N[2] == '7')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02712": {
        "s603262567": {
            "code": "N = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\ndf = pd.DataFrame(N, columns=['moto'])\ndf['3'] = df['moto'] % 3\ndf['5'] = df['moto'] % 5\nprint(df[(df['3'] != 0) & (df['5'] != 0)]['moto'].sum())",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
                    "df=pd.DataFrame(N,columns=[\"moto\"])",
                    "df[\"3\"]=df[\"moto\"]%3",
                    "df[\"5\"]=df[\"moto\"]%5",
                    "print(df[(df['3']!=0) & (df['5']!=0)][\"moto\"].sum())"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    df=pd.DataFrame(N,columns=[\"moto\"])\n    df[\"3\"]=df[\"moto\"]%3\n    df[\"5\"]=df[\"moto\"]%5\n    print(df[(df['3']!=0) & (df['5']!=0)][\"moto\"].sum())\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s522929281": {
            "code": "X = '15'\ncount = 0\nfor num in range(X):\n    if not num % 3 == 0 or num % 5 == 0:\n        count = count + num\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "X = '15'",
                    "count = 0"
                ],
                "2": [
                    "iterator -> num, Iterate Over -> range(X)"
                ],
                "3": [
                    "(not num % 3 == 0 or num % 5 == 0)"
                ],
                "4": [
                    "count = count + num"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = '15'\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> num, Iterate Over -> range(X)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (not num % 3 == 0 or num % 5 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count = count + num\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        },
        "s582926719": {
            "code": "sys.setrecursionlimit(10 ** 7)\nN = '15'\nn = list()\nm = list()\nfor i in range(N - 1):\n    if i % 3 == 0 or i % 5 == 0:\n        n.append(i)\n    else:\n        m.append(i)\nprint(sum(m))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "sys.setrecursionlimit(10**7)",
                    "N = '15'",
                    "n=list()",
                    "m=list()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "(i % 3 == 0 or i % 5 == 0)"
                ],
                "4": [
                    "n.append(i)"
                ],
                "5": [
                    "m.append(i)"
                ],
                "6": [
                    "print(sum(m))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    sys.setrecursionlimit(10**7)\n    N = '15'\n    n=list()\n    m=list()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 3 == 0 or i % 5 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    n.append(i)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    m.append(i)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum(m))\nNext:\n    <END>\n"
        }
    },
    "p02713": {
        "s727798903": {
            "code": "m = 2\ng = range(1, m + 1)\nres = 0\nfor c in itertools.combinations(g, 3):\n    set_c = set(c)\n    if len(set_c) == 3:\n        n = 6\n    elif len(set_c) == 2:\n        n = 3\n    else:\n        n = 1\n    tmp_res = math.gcd(c[0], c[1], c[2])\n    res += tmp_res * n\nprint(res)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "m = 2",
                    "g = range(1, m+1)",
                    "res = 0"
                ],
                "2": [
                    "iterator -> c, Iterate Over -> itertools.combinations(g, 3)"
                ],
                "3": [
                    "set_c = set(c)",
                    "(len(set_c) == 3)"
                ],
                "4": [
                    "n = 6"
                ],
                "5": [
                    "(len(set_c) == 2)"
                ],
                "6": [
                    "n = 3"
                ],
                "7": [
                    "n = 1"
                ],
                "8": [
                    "tmp_res = math.gcd(c[0], c[1], c[2])",
                    "res += tmp_res * n"
                ],
                "9": [
                    "print(res)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    m = 2\n    g = range(1, m+1)\n    res = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> c, Iterate Over -> itertools.combinations(g, 3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    set_c = set(c)\n    (len(set_c) == 3)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    n = 6\nNext:\n    Go to Block: 8\n\nBlock 5:\nStatement:\n    (len(set_c) == 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    n = 3\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    n = 1\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    tmp_res = math.gcd(c[0], c[1], c[2])\n    res += tmp_res * n\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(res)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s460830454": {
            "code": "k = 2\ns = 0\nn = range(k + 1)\nfor x, y, z in n:\n    s += np.gcd.reduce([x, y, z])\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('cannot unpack non-iterable int object')"
            },
            "cfg_block_statements": {
                "1": [
                    "k = 2",
                    "s=0",
                    "n=range(k+1)"
                ],
                "2": [
                    "x <- index\n    y <- iterator"
                ],
                "3": [
                    "s+=np.gcd.reduce([x,y,z])"
                ],
                "4": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = 2\n    s=0\n    n=range(k+1)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    x <- index\n    y <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s+=np.gcd.reduce([x,y,z])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(s)\nNext:\n    <END>\n"
        },
        "s447442261": {
            "code": "N = '2'\nd = 0\nres = [ele for ele in product(range(1, N + 1), repeat=3)]\na = res\nfor i in a:\n    if i[0] == i[1] == i[2]:\n        d = d + i[0]\n    else:\n        d = d + 1\nprint(d)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "d = 0",
                    "res = [ele for ele in product(range(1,N+1),repeat=3)]",
                    "a =(res)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> a"
                ],
                "3": [
                    "(i[0] == i[1] == i[2])"
                ],
                "4": [
                    "d = d+i[0]"
                ],
                "5": [
                    "d = d+1"
                ],
                "6": [
                    "print(d)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    d = 0\n    res = [ele for ele in product(range(1,N+1),repeat=3)]\n    a =(res)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i[0] == i[1] == i[2])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    d = d+i[0]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    d = d+1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(d)\nNext:\n    <END>\n"
        },
        "s865943260": {
            "code": "x = 2\nprint(sum([reduce(math.gcd, *i) for i in product(range(1, x + 1), repeat=3)]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('reduce expected at most 3 arguments, got 4')"
            },
            "cfg_block_statements": {
                "1": [
                    "x = 2",
                    "print(sum([reduce(math.gcd, *i) for i in product(range(1, x+1), repeat=3)]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 2\n    print(sum([reduce(math.gcd, *i) for i in product(range(1, x+1), repeat=3)]))\nNext:\n    <END>\n"
        }
    },
    "p02714": {
        "s248220461": {
            "code": "N = 4\nS = 'RRGB'\nappearances = {'R': 0, 'G': 0, 'B': 0}\nfor c in S:\n    appearances[c] += 1\nprint(prod(list(appearances.values())) - sum((sum((len(set(S[start] + S[start + step] + S[start + step * 2])) == 3 for start in range(N - step * 2))) for step in range(1, N // 2 + 1))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "S = 'RRGB'",
                    "appearances = {\"R\": 0, \"G\": 0, \"B\": 0}"
                ],
                "2": [
                    "iterator -> c, Iterate Over -> S"
                ],
                "3": [
                    "appearances[c] += 1"
                ],
                "4": [
                    "print(prod(list(appearances.values())) - sum(sum(len(set(S[start] + S[start + step] + S[start + step * 2])) == 3 for start in range(N - step * 2)) for step in range(1, N // 2 + 1)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    S = 'RRGB'\n    appearances = {\"R\": 0, \"G\": 0, \"B\": 0}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> c, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    appearances[c] += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(prod(list(appearances.values())) - sum(sum(len(set(S[start] + S[start + step] + S[start + step * 2])) == 3 for start in range(N - step * 2)) for step in range(1, N // 2 + 1)))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s653004100": {
            "code": "x1 = '4'\nx2 = 'RRGB'\nRGB = {'R', 'G', 'B'}\n_sum = 0\nfor i, rgb in zip(itertools.combinations(range(x1), 3), itertools.combinations(x2, 3)):\n    if set(rgb) == RGB and i[1] - i[0] != i[2] - i[1]:\n        _sum += 1\nprint(_sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x1 = '4'",
                    "x2 = 'RRGB'",
                    "RGB = {\"R\", \"G\", \"B\"}",
                    "_sum = 0"
                ],
                "2": [
                    "i <- index\n    rgb <- iterator"
                ],
                "3": [
                    "(set(rgb) == RGB and i[1] - i[0] != i[2] - i[1])"
                ],
                "4": [
                    "_sum += 1"
                ],
                "5": [
                    "print(_sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x1 = '4'\n    x2 = 'RRGB'\n    RGB = {\"R\", \"G\", \"B\"}\n    _sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    rgb <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (set(rgb) == RGB and i[1] - i[0] != i[2] - i[1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    _sum += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(_sum)\nNext:\n    <END>\n"
        }
    },
    "p02716": {
        "s404274338": {
            "code": "n = 6\na = [1, 2, 3, 4, 5, 6]\ndp = np.full((n + 1, n + 1), -pow(10, 15))\ndp[:, 0] = 0\ndp[1, 1] = a[0]\nfor i in range(2, n + 1):\n    dp[i, 1:] = np.maximum(dp[i - 1, 1:], dp[i - 2, :-1] + a[i - 1])\nprint(dp[n, n // 2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f2966480570>"
                        },
                        {
                            "a": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "n": "6"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "a = [1, 2, 3, 4, 5, 6]",
                    "dp=np.full((n+1,n+1),-pow(10,15))",
                    "dp[:,0]=0",
                    "dp[1,1]=a[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(2, n + 1)"
                ],
                "3": [
                    "dp[i,1:]=np.maximum(dp[i-1,1:],dp[i-2,:-1]+a[i-1])"
                ],
                "4": [
                    "print(dp[n,n//2])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [1, 2, 3, 4, 5, 6]\n    dp=np.full((n+1,n+1),-pow(10,15))\n    dp[:,0]=0\n    dp[1,1]=a[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, n + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    dp[i,1:]=np.maximum(dp[i-1,1:],dp[i-2,:-1]+a[i-1])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(dp[n,n//2])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02717": {
        "s082389887": {
            "code": "abc = [1, 2, 3]\nABC = copy.copy(abc)\nABC[0] = abc[2]\nABC[1] = abc[0]\nABC[2] = abc[1]\nprint(f'{ABC[0]} {ABC[1]} {ABC[2]}')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "abc = [1, 2, 3]",
                    "ABC = copy.copy(abc)",
                    "ABC[0] = abc[2]",
                    "ABC[1] = abc[0]",
                    "ABC[2] = abc[1]",
                    "print(f'{ABC[0]} {ABC[1]} {ABC[2]}')"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    abc = [1, 2, 3]\n    ABC = copy.copy(abc)\n    ABC[0] = abc[2]\n    ABC[1] = abc[0]\n    ABC[2] = abc[1]\n    print(f'{ABC[0]} {ABC[1]} {ABC[2]}')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02718": {
        "s575981445": {
            "code": "tmp = [4, 1]\nN = tmp[0]\nM = tmp[1]\ni = [5, 4, 2, 1]\ni = np.array(i)\ni = np.sort(i)[::-1]\nsouwa = np.sum(i)\nif i[M] < souwa * (1 / (4 * M)):\n    print('No')\nelse:\n    print('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "tmp = [4, 1]",
                    "N = tmp[0]",
                    "M = tmp[1]",
                    "i = [5, 4, 2, 1]",
                    "i = np.array(i)",
                    "i = np.sort(i)[::-1]",
                    "souwa = np.sum(i)",
                    "(i[M] < souwa * (1 / (4 * M)))"
                ],
                "2": [
                    "print(\"No\")"
                ],
                "3": [
                    "print(\"Yes\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    tmp = [4, 1]\n    N = tmp[0]\n    M = tmp[1]\n    i = [5, 4, 2, 1]\n    i = np.array(i)\n    i = np.sort(i)[::-1]\n    souwa = np.sum(i)\n    (i[M] < souwa * (1 / (4 * M)))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02719": {
        "s332271941": {
            "code": "X = [7, 4]\nN = X[0]\nK = X[1]\nA = math.inf\nif K == 1:\n    print(0)\nelse:\n    while True:\n        A = abs(N - K)\n        if N > A:\n            N = A\n        else:\n            break\n    print(N)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10,
                11,
                8,
                9,
                10,
                11,
                8,
                9,
                10,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "X = [7, 4]",
                    "N = X[0]",
                    "K = X[1]",
                    "A = math.inf",
                    "(K == 1)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "while True:"
                ],
                "4": [
                    "A = abs(N - K)",
                    "(N > A)"
                ],
                "5": [
                    "N = A"
                ],
                "6": [
                    "print(N)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = [7, 4]\n    N = X[0]\n    K = X[1]\n    A = math.inf\n    (K == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    A = abs(N - K)\n    (N > A)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    N = A\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    print(N)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s783668375": {
            "code": "tmp = [7, 4]\nN = tmp[0]\nK = tmp[1]\nsolve = [0] * K\nfor i in range(0, K - 1):\n    solve[i] = N % (K + i)\nsolve.reverse()\nif K == 1:\n    print(solve[0])\nelse:\n    print(solve[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                7,
                8,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "tmp = [7, 4]",
                    "N = tmp[0]",
                    "K = tmp[1]",
                    "solve = [0] * K"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, K - 1)"
                ],
                "3": [
                    "solve[i] = N % (K + i)"
                ],
                "4": [
                    "solve.reverse()",
                    "(K == 1)"
                ],
                "5": [
                    "print(solve[0])"
                ],
                "6": [
                    "print(solve[1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    tmp = [7, 4]\n    N = tmp[0]\n    K = tmp[1]\n    solve = [0] * K\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, K - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    solve[i] = N % (K + i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    solve.reverse()\n    (K == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(solve[0])\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(solve[1])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02720": {
        "s056441447": {
            "code": "input = sys.stdin.readline\nn = 15\nL = deque(list(range(1, 10)))\nif n <= 9:\n    ans = L[n - 1]\nelse:\n    cnt = 9\n    for i in range(1, n):\n        c = L.popleft()\n        if c % 10 != 0:\n            L.append(c * 10 + c % 10 - 1)\n            cnt += 1\n            if cnt >= n:\n                break\n        L.append(c * 10 + c % 10)\n        cnt += 1\n        if cnt >= n:\n            break\n        if c % 10 != 9:\n            L.append(c * 10 + c % 10 + 1)\n            cnt += 1\n            if cnt >= n:\n                break\n        print(L)\n    ans = L[-1]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        15
                    ]
                },
                "8": {
                    "range": [
                        16,
                        16
                    ]
                },
                "9": {
                    "range": [
                        17,
                        19
                    ]
                },
                "10": {
                    "range": [
                        20,
                        20
                    ]
                },
                "11": {
                    "range": [
                        21,
                        21
                    ]
                },
                "12": {
                    "range": [
                        22,
                        22
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                15,
                16,
                17,
                19,
                20,
                21,
                22,
                24,
                8,
                9,
                10,
                11,
                12,
                13,
                15,
                16,
                17,
                19,
                20,
                21,
                22,
                23,
                25,
                26
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "n = 15",
                    "L=deque(list(range(1,10)))",
                    "(n <= 9)"
                ],
                "2": [
                    "ans = L[n-1]"
                ],
                "3": [
                    "cnt = 9"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "5": [
                    "c=L.popleft()",
                    "(c % 10 != 0)"
                ],
                "6": [
                    "L.append(c*10+(c%10)-1)",
                    "cnt+=1",
                    "(cnt >= n)"
                ],
                "7": [
                    "L.append(c*10+(c%10))",
                    "cnt+=1",
                    "(cnt >= n)"
                ],
                "8": [
                    "(c % 10 != 9)"
                ],
                "9": [
                    "L.append(c*10+(c%10)+1)",
                    "cnt+=1",
                    "(cnt >= n)"
                ],
                "10": [
                    "print(L)"
                ],
                "11": [
                    "ans = L[-1]"
                ],
                "12": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 11
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 11,
                        "false": 8
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 11,
                        "false": 7
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "9": {
                    "with_condition": {
                        "true": 11,
                        "false": 10
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    n = 15\n    L=deque(list(range(1,10)))\n    (n <= 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = L[n-1]\nNext:\n    Go to Block: 12\n\nBlock 3:\nStatement:\n    cnt = 9\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 11\n\nBlock 5:\nStatement:\n    c=L.popleft()\n    (c % 10 != 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    L.append(c*10+(c%10)-1)\n    cnt+=1\n    (cnt >= n)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 7\n\nBlock 7:\nStatement:\n    L.append(c*10+(c%10))\n    cnt+=1\n    (cnt >= n)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 8\n\nBlock 8:\nStatement:\n    (c % 10 != 9)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    L.append(c*10+(c%10)+1)\n    cnt+=1\n    (cnt >= n)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 10\n\nBlock 10:\nStatement:\n    print(L)\nNext:\n    Go to Block: 4\n\nBlock 11:\nStatement:\n    ans = L[-1]\nNext:\n    Go to Block: 12\n\nBlock 12:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s851684037": {
            "code": "k = '15'\nque = deque([i for i in range(1, 10)])\nfor i in range(k):\n    x = que.popleft()\n    if x % 10 != 0:\n        que.append(10 * x + x % 10 - 1)\n    que.append(10 * x + x % 10)\n    if que % 10 != 9:\n        que.append(10 * x + q % 10 + 1)\nprint(x)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "k = '15'",
                    "que=deque([i for i in range(1,10)])"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(k)"
                ],
                "3": [
                    "x=que.popleft()",
                    "(x % 10 != 0)"
                ],
                "4": [
                    "que.append(10*x+x%10-1)"
                ],
                "5": [
                    "que.append(10*x+x%10)",
                    "(que % 10 != 9)"
                ],
                "6": [
                    "que.append(10*x+q%10+1)"
                ],
                "7": [
                    "print(x)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = '15'\n    que=deque([i for i in range(1,10)])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(k)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    x=que.popleft()\n    (x % 10 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    que.append(10*x+x%10-1)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    que.append(10*x+x%10)\n    (que % 10 != 9)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    que.append(10*x+q%10+1)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(x)\nNext:\n    <END>\n"
        },
        "s463182007": {
            "code": "k = 15\nqueue = deque(range(1, 10))\ncount = 0\nwhile count < k:\n    count += 1\n    tmp = deque.popleft()\n    tail = tmp % 10\n    if tail != 0:\n        deque.append(tmp * 10 + tail - 1)\n    deque.append(tmp * 10 + tail)\n    if tail != 9:\n        deque.append(tmp * 10 + tail + 1)\nprint(tmp)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "15"
                        },
                        {
                            "count": "0"
                        },
                        {
                            "queue": "deque([1, 2, 3, 4, 5, 6, 7, 8, 9])"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "k": "15"
                        },
                        {
                            "count": "0"
                        },
                        {
                            "queue": "deque([1, 2, 3, 4, 5, 6, 7, 8, 9])"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "count": "1"
                        },
                        {
                            "k": "15"
                        },
                        {
                            "queue": "deque([1, 2, 3, 4, 5, 6, 7, 8, 9])"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('unbound method deque.popleft() needs an argument')"
            },
            "cfg_block_statements": {
                "1": [
                    "k = 15",
                    "queue = deque(range(1,10))",
                    "count = 0"
                ],
                "2": [
                    "while count < k:"
                ],
                "3": [
                    "count += 1",
                    "tmp = deque.popleft()",
                    "tail = tmp % 10",
                    "(tail != 0)"
                ],
                "4": [
                    "deque.append(tmp*10+tail-1)"
                ],
                "5": [
                    "deque.append(tmp*10+tail)",
                    "(tail != 9)"
                ],
                "6": [
                    "deque.append(tmp*10+tail+1)"
                ],
                "7": [
                    "print(tmp)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = 15\n    queue = deque(range(1,10))\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while count < k:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    count += 1\n    tmp = deque.popleft()\n    tail = tmp % 10\n    (tail != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    deque.append(tmp*10+tail-1)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    deque.append(tmp*10+tail)\n    (tail != 9)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    deque.append(tmp*10+tail+1)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(tmp)\nNext:\n    <END>\n"
        },
        "s189451830": {
            "code": "k = 15\nq = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])\nfor i in range(k):\n    a = q.popleft()\n    if a % 10 == 1:\n        q.append([10 * a, 10 * a + 1])\n    elif a % 10 == 9:\n        q.append([10 * a + 8, 10 * a + 9])\n    else:\n        q.append([10 * a + a - 1, 10 * a + a, 10 * a + a + 1])\nelse:\n    print(a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                3,
                4,
                5,
                7,
                10,
                3,
                4,
                5,
                7,
                10,
                3,
                4,
                5,
                7,
                10,
                3,
                4,
                5,
                7,
                10,
                3,
                4,
                5,
                7,
                10,
                3,
                4,
                5,
                7,
                10,
                3,
                4,
                5,
                7,
                10,
                3,
                4,
                5,
                7,
                8,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "k = 15",
                    "q = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(k)"
                ],
                "3": [
                    "a = q.popleft()",
                    "(a % 10 == 1)"
                ],
                "4": [
                    "q.append([10*a, 10*a+1])"
                ],
                "5": [
                    "(a % 10 == 9)"
                ],
                "6": [
                    "q.append([10*a + 8, 10*a + 9])"
                ],
                "7": [
                    "q.append([10*a + a - 1, 10*a + a, 10*a + a + 1])"
                ],
                "8": [
                    "print(a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = 15\n    q = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(k)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    a = q.popleft()\n    (a % 10 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    q.append([10*a, 10*a+1])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (a % 10 == 9)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    q.append([10*a + 8, 10*a + 9])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    q.append([10*a + a - 1, 10*a + a, 10*a + a + 1])\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(a)\nNext:\n    <END>\n"
        },
        "s854621769": {
            "code": "que = deque([range(1, 10)])\nk = 15\ncount = 0\nwhile count != k:\n    a = que.popleft\n    count += 1\n    if a % 10 == 1:\n        que.append([10 * a + 1, 10 * a + 2])\n    elif a % 10 == 9:\n        que.append([10 * a + 8, 10 * a + 9])\n    else:\n        b = a * 10 + a % 10 - 1\n        que.append([b, b + 1, b + 2])\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'builtin_function_or_method' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "que=deque([range(1,10)])",
                    "k = 15",
                    "count=0"
                ],
                "2": [
                    "while count!=k:"
                ],
                "3": [
                    "a=que.popleft",
                    "count+=1",
                    "(a % 10 == 1)"
                ],
                "4": [
                    "que.append([10*a+1,10*a+2])"
                ],
                "5": [
                    "(a % 10 == 9)"
                ],
                "6": [
                    "que.append([10*a+8,10*a+9])"
                ],
                "7": [
                    "b=a*10+(a%10)-1",
                    "que.append([b,b+1,b+2])"
                ],
                "8": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    que=deque([range(1,10)])\n    k = 15\n    count=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while count!=k:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    a=que.popleft\n    count+=1\n    (a % 10 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    que.append([10*a+1,10*a+2])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (a % 10 == 9)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    que.append([10*a+8,10*a+9])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    b=a*10+(a%10)-1\n    que.append([b,b+1,b+2])\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p02723": {
        "s535773445": {
            "code": "S = 'sippuu'\nif S[2] == S[3] and S[4] == S[5]:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'sippuu'",
                    "(S[2] == S[3] and S[4] == S[5])"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'sippuu'\n    (S[2] == S[3] and S[4] == S[5])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02727": {
        "s298506733": {
            "code": "n = [1, 2, 2, 2, 1]\nA = [2, 4]\nB = [5, 1]\nC = [3]\na = 0\nm = 0\ns = 0\nans = 0\nA = heapq.nlargest(n[0] + 1, A)\nB = heapq.nlargest(n[1] + 1, B)\nC = heapq.nlargest(n[0] + n[1] + 1, C)\nfor i in range(0, n[0] + n[1]):\n    if a == n[0] and m < n[1]:\n        saidai = max([B[m], C[s]])\n        if C[s] >= B[m]:\n            s += 1\n        else:\n            m += 1\n    elif a < n[0] and m == n[1]:\n        saidai = max([A[a], C[s]])\n        if C[s] >= A[a]:\n            s += 1\n        else:\n            a += 1\n    else:\n        saidai = max([A[a], B[m], C[s]])\n        if A[a] >= B[m] and A[a] > C[s]:\n            a += 1\n        elif A[a] < B[m] and B[m] > C[s]:\n            m += 1\n        elif C[s] >= B[m] and A[a] <= C[s]:\n            s += 1\n    ans = ans + saidai\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        11
                    ]
                },
                "2": {
                    "range": [
                        12,
                        12
                    ]
                },
                "3": {
                    "range": [
                        13,
                        13
                    ]
                },
                "4": {
                    "range": [
                        14,
                        15
                    ]
                },
                "5": {
                    "range": [
                        16,
                        16
                    ]
                },
                "6": {
                    "range": [
                        17,
                        17
                    ]
                },
                "7": {
                    "range": [
                        18,
                        18
                    ]
                },
                "8": {
                    "range": [
                        19,
                        20
                    ]
                },
                "9": {
                    "range": [
                        21,
                        21
                    ]
                },
                "10": {
                    "range": [
                        22,
                        22
                    ]
                },
                "11": {
                    "range": [
                        23,
                        24
                    ]
                },
                "12": {
                    "range": [
                        25,
                        25
                    ]
                },
                "13": {
                    "range": [
                        26,
                        26
                    ]
                },
                "14": {
                    "range": [
                        27,
                        27
                    ]
                },
                "15": {
                    "range": [
                        28,
                        28
                    ]
                },
                "16": {
                    "range": [
                        29,
                        29
                    ]
                },
                "17": {
                    "range": [
                        30,
                        30
                    ]
                },
                "18": {
                    "range": [
                        31,
                        31
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                19,
                26,
                27,
                29,
                30,
                33,
                12,
                13,
                19,
                26,
                27,
                28,
                33,
                12,
                13,
                14,
                15,
                16,
                33,
                12,
                34
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 18,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = [1, 2, 2, 2, 1]",
                    "A = [2, 4]",
                    "B = [5, 1]",
                    "C = [3]",
                    "a=0",
                    "m=0",
                    "s=0",
                    "ans = 0",
                    "A = heapq.nlargest(n[0]+1 , A)",
                    "B = heapq.nlargest(n[1]+1 , B)",
                    "C = heapq.nlargest(n[0]+n[1]+1 , C)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, n[0] + n[1])"
                ],
                "3": [
                    "(a == n[0] and m < n[1])"
                ],
                "4": [
                    "saidai = max([ B[m],C[s] ])",
                    "(C[s] >= B[m])"
                ],
                "5": [
                    "s +=1"
                ],
                "6": [
                    "m +=1"
                ],
                "7": [
                    "(a < n[0] and m == n[1])"
                ],
                "8": [
                    "saidai = max([ A[a],C[s] ])",
                    "(C[s] >= A[a])"
                ],
                "9": [
                    "s +=1"
                ],
                "10": [
                    "a +=1"
                ],
                "11": [
                    "saidai=max([ A[a],B[m],C[s] ])",
                    "(A[a] >= B[m] and A[a] > C[s])"
                ],
                "12": [
                    "a +=1"
                ],
                "13": [
                    "(A[a] < B[m] and B[m] > C[s])"
                ],
                "14": [
                    "m +=1"
                ],
                "15": [
                    "(C[s] >= B[m] and A[a] <= C[s])"
                ],
                "16": [
                    "s +=1"
                ],
                "17": [
                    "ans = ans + saidai"
                ],
                "18": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 18
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "17": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": 17
                    },
                    "no_condition": null
                },
                "16": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = [1, 2, 2, 2, 1]\n    A = [2, 4]\n    B = [5, 1]\n    C = [3]\n    a=0\n    m=0\n    s=0\n    ans = 0\n    A = heapq.nlargest(n[0]+1 , A)\n    B = heapq.nlargest(n[1]+1 , B)\n    C = heapq.nlargest(n[0]+n[1]+1 , C)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, n[0] + n[1])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 18\n\nBlock 3:\nStatement:\n    (a == n[0] and m < n[1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    saidai = max([ B[m],C[s] ])\n    (C[s] >= B[m])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    s +=1\nNext:\n    Go to Block: 17\n\nBlock 6:\nStatement:\n    m +=1\nNext:\n    Go to Block: 17\n\nBlock 7:\nStatement:\n    (a < n[0] and m == n[1])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    saidai = max([ A[a],C[s] ])\n    (C[s] >= A[a])\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    s +=1\nNext:\n    Go to Block: 17\n\nBlock 10:\nStatement:\n    a +=1\nNext:\n    Go to Block: 17\n\nBlock 11:\nStatement:\n    saidai=max([ A[a],B[m],C[s] ])\n    (A[a] >= B[m] and A[a] > C[s])\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    a +=1\nNext:\n    Go to Block: 17\n\nBlock 13:\nStatement:\n    (A[a] < B[m] and B[m] > C[s])\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    m +=1\nNext:\n    Go to Block: 17\n\nBlock 15:\nStatement:\n    (C[s] >= B[m] and A[a] <= C[s])\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    s +=1\nNext:\n    Go to Block: 17\n\nBlock 17:\nStatement:\n    ans = ans + saidai\nNext:\n    Go to Block: 2\n\nBlock 18:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02729": {
        "s031125169": {
            "code": "N = [2, 1]\nif N[1] == 1:\n    sum1 = 0\nelse:\n    sum1 = comb(N[1], 2, exact=True)\nif N[0] == 1:\n    sum2 = 0\nelse:\n    sum2 = comb(N[0], 2, exact=True)\nprint(sum1 + sum2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = [2, 1]",
                    "(N[1] == 1)"
                ],
                "2": [
                    "sum1=0"
                ],
                "3": [
                    "sum1 = comb(N[1], 2, exact=True)"
                ],
                "4": [
                    "(N[0] == 1)"
                ],
                "5": [
                    "sum2=0"
                ],
                "6": [
                    "sum2 = comb(N[0], 2, exact=True)"
                ],
                "7": [
                    "print(sum1+sum2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = [2, 1]\n    (N[1] == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    sum1=0\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    sum1 = comb(N[1], 2, exact=True)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (N[0] == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    sum2=0\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    sum2 = comb(N[0], 2, exact=True)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(sum1+sum2)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s971569452": {
            "code": "n = [2, 1]\na = comb(n[0], 2, exact=True)\nb = comb(n[1], 2, exact=True)\nprint(a + b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = [2, 1]",
                    "a=comb(n[0],2,exact=True)",
                    "b=comb(n[1],2,exact=True)",
                    "print(a+b)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = [2, 1]\n    a=comb(n[0],2,exact=True)\n    b=comb(n[1],2,exact=True)\n    print(a+b)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s535546237": {
            "code": "s = ['2', '1']\nC1 = comb(s[0], 2, exact=True)\nC2 = comb(s[1], 2, exact=True)\nprint(C1 + C2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "['2', '1']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'numpy.ndarray' and 'numpy.ndarray'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['2', '1']",
                    "C1 = comb(s[0], 2, exact=True)",
                    "C2 = comb(s[1], 2, exact=True)",
                    "print(C1 + C2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['2', '1']\n    C1 = comb(s[0], 2, exact=True)\n    C2 = comb(s[1], 2, exact=True)\n    print(C1 + C2)\nNext:\n    <END>\n"
        },
        "s130543024": {
            "code": "i = ['2', '1']\nn = i[0]\nm = i[1]\nnc = it.combinations(range(n), 2)\nmc = it.combinations(range(m), 2)\nprint(len(list(nc) + list(mc)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "i = ['2', '1']",
                    "n = i[0]",
                    "m = i[1]",
                    "nc = it.combinations(range(n),2)",
                    "mc = it.combinations(range(m),2)",
                    "print(len(list(nc) + list(mc)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    i = ['2', '1']\n    n = i[0]\n    m = i[1]\n    nc = it.combinations(range(n),2)\n    mc = it.combinations(range(m),2)\n    print(len(list(nc) + list(mc)))\nNext:\n    <END>\n"
        }
    },
    "p02730": {
        "s865980421": {
            "code": "S = 'akasaka'\nN = len(S)\nN_sub = int((N - 1) / 2)\nS_rev = S[::-1]\nif S != S_rev:\n    print('No')\n    sys.exit(1)\nsub_S = S[:N_sub]\nsub_S_rev = sub_S[::-1]\nif sub_S != sub_S_rev:\n    print('No')\n    sys.exit(1)\nprint('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        12
                    ]
                },
                "5": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'akasaka'",
                    "N = len(S)",
                    "N_sub = int((N - 1)/2)",
                    "S_rev = S[::-1]",
                    "(S != S_rev)"
                ],
                "2": [
                    "print('No')",
                    "sys.exit(1)"
                ],
                "3": [
                    "sub_S = S[:N_sub]",
                    "sub_S_rev = sub_S[::-1]",
                    "(sub_S != sub_S_rev)"
                ],
                "4": [
                    "print('No')",
                    "sys.exit(1)"
                ],
                "5": [
                    "print('Yes')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'akasaka'\n    N = len(S)\n    N_sub = int((N - 1)/2)\n    S_rev = S[::-1]\n    (S != S_rev)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\n    sys.exit(1)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    sub_S = S[:N_sub]\n    sub_S_rev = sub_S[::-1]\n    (sub_S != sub_S_rev)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('No')\n    sys.exit(1)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s760375173": {
            "code": "S = 'akasaka'\nN = len(S)\nif S == S[::-1]:\n    if S[0:(N - 1) / 2] == S[0:(N - 1) / 2][::-1]:\n        if S[(N + 3) / 2 - 1:N] == S[(N + 3) / 2 - 1:N][::-1]:\n            print('Yes')\n            sys.exit()\nprint('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'akasaka'",
                    "N = len(S)",
                    "(S == S[::-1])"
                ],
                "2": [
                    "(S[0:(N - 1) / 2] == S[0:(N - 1) / 2][::-1])"
                ],
                "3": [
                    "(S[(N + 3) / 2 - 1:N] == S[(N + 3) / 2 - 1:N][::-1])"
                ],
                "4": [
                    "print(\"Yes\")",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'akasaka'\n    N = len(S)\n    (S == S[::-1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (S[0:(N - 1) / 2] == S[0:(N - 1) / 2][::-1])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[(N + 3) / 2 - 1:N] == S[(N + 3) / 2 - 1:N][::-1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s021239932": {
            "code": "input = sys.stdin.readline\nS = 'akasaka'\nN = len(S) - 1\nN1 = (N - 1) / 2\nN2 = (N + 3) / 2\ns1 = S[:N]\ns2 = S[:N1]\ns3 = S[N2 - 1:N]",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fa463f1f510>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "N1": "2.5"
                        },
                        {
                            "N2": "4.5"
                        },
                        {
                            "S": "'akasaka'"
                        },
                        {
                            "s1": "'akasak'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "S = 'akasaka'",
                    "N = len(S)-1",
                    "N1 = (N-1)/2",
                    "N2 = (N+3)/2",
                    "s1 = S[:N]",
                    "s2 = S[:N1]",
                    "s3 = S[N2-1:N]"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    S = 'akasaka'\n    N = len(S)-1\n    N1 = (N-1)/2\n    N2 = (N+3)/2\n    s1 = S[:N]\n    s2 = S[:N1]\n    s3 = S[N2-1:N]\nNext:\n    <END>\n"
        }
    },
    "p02731": {
        "s809956141": {
            "code": "L = 3\na0 = math.floor(L / 2)\ncand = []\nif a0 == 1:\n    b0 = -2 * a0 + L\n    cand.append(a0 * b0 * a0)\nelse:\n    for i in range(1, a0):\n        b0 = -2 * i + L\n        cand.append(i * b0 * i)\ncand_np = np.array(cand)\nprint(cand_np.max())",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "L = 3",
                    "a0 = math.floor(L/2)",
                    "cand = []",
                    "(a0 == 1)"
                ],
                "2": [
                    "b0 = -2*a0 + L",
                    "cand.append(a0*b0*a0)"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(1, a0)"
                ],
                "4": [
                    "b0 = -2*i + L",
                    "cand.append(i*b0*i)"
                ],
                "5": [
                    "cand_np = np.array(cand)",
                    "print(cand_np.max())"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    L = 3\n    a0 = math.floor(L/2)\n    cand = []\n    (a0 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    b0 = -2*a0 + L\n    cand.append(a0*b0*a0)\nNext:\n    Go to Block: 5\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, a0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b0 = -2*i + L\n    cand.append(i*b0*i)\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    cand_np = np.array(cand)\n    print(cand_np.max())\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s452063915": {
            "code": "a = ['3']\nb = Decimal(a / 3)\nprint(b * b * b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['3']",
                    "b=Decimal(a/3)",
                    "print(b*b*b)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['3']\n    b=Decimal(a/3)\n    print(b*b*b)\nNext:\n    <END>\n"
        }
    },
    "p02732": {
        "s445740821": {
            "code": "n = 5\na_list = [1, 1, 2, 1, 2]\na_col = collections.Counter(a_list)\nc_dic = {}\nsm = sum([c * (c - 1) for c in a_col.values()]) // 2\nfor a in a_list:\n    if a in c_dic:\n        print(c_dic[a])\n    else:\n        ans = sm - comb(a_col[a], 2) + comb(a_col[a] - 1, 2)\n        print(ans)\n        c_dic[a] = ans",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                11,
                12,
                6,
                7,
                8,
                6,
                7,
                10,
                11,
                12,
                6,
                7,
                8,
                6,
                7,
                8,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a_list = [1, 1, 2, 1, 2]",
                    "a_col = collections.Counter(a_list)",
                    "c_dic = {}",
                    "sm = sum([c * (c - 1) for c in a_col.values()]) // 2"
                ],
                "2": [
                    "iterator -> a, Iterate Over -> a_list"
                ],
                "3": [
                    "(a in c_dic)"
                ],
                "4": [
                    "print(c_dic[a])"
                ],
                "5": [
                    "ans = sm - comb(a_col[a], 2) + comb(a_col[a] - 1, 2)",
                    "print(ans)",
                    "c_dic[a] = ans"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a_list = [1, 1, 2, 1, 2]\n    a_col = collections.Counter(a_list)\n    c_dic = {}\n    sm = sum([c * (c - 1) for c in a_col.values()]) // 2\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> a_list\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (a in c_dic)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(c_dic[a])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans = sm - comb(a_col[a], 2) + comb(a_col[a] - 1, 2)\n    print(ans)\n    c_dic[a] = ans\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        }
    },
    "p02741": {
        "s236285100": {
            "code": "LIST = '1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51'\nK = 6\nreturn sub('[,\\\\s]', '', LIST)[K - 1]",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "LIST = \"1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51\"",
                    "K = 6",
                    "return sub(r\"[,\\s]\", \"\", LIST)[K-1]"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    LIST = \"1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51\"\n    K = 6\n    return sub(r\"[,\\s]\", \"\", LIST)[K-1]\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s739078266": {
            "code": "A = [6.0]\nif round(math.sqrt(A[0], 100)) + round(math.sqrt(A[1], 100)) < round(math.sqrt(A[2], 100)):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('math.sqrt() takes exactly one argument (2 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "A = [6.0]",
                    "(round(math.sqrt(A[0], 100)) + round(math.sqrt(A[1], 100)) < round(math.sqrt(A[2], 100)))"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    A = [6.0]\n    (round(math.sqrt(A[0], 100)) + round(math.sqrt(A[1], 100)) < round(math.sqrt(A[2], 100)))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p02743": {
        "s556730461": {
            "code": "ABC = ['2', '3', '9']\na = int(ABC[0])\nb = int(ABC[1])\nc = int(ABC[2])\nl = 2 * math.sqrt(a * b)\nr = c - a - b\nlint = int(l)\nrl = r - l\nif 0 < rl or math.isclose(0, rl):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        9
                    ]
                },
                "2": {
                    "range": [
                        10,
                        10
                    ]
                },
                "3": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "ABC = ['2', '3', '9']",
                    "a = int(ABC[0])",
                    "b = int(ABC[1])",
                    "c = int(ABC[2])",
                    "l = 2*math.sqrt(a*b)",
                    "r = c - a - b",
                    "lint = int(l)",
                    "rl = r-l",
                    "(0 < rl or math.isclose(0, rl))"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    ABC = ['2', '3', '9']\n    a = int(ABC[0])\n    b = int(ABC[1])\n    c = int(ABC[2])\n    l = 2*math.sqrt(a*b)\n    r = c - a - b\n    lint = int(l)\n    rl = r-l\n    (0 < rl or math.isclose(0, rl))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s410750758": {
            "code": "li = [2, 3, 9]\na = cmath.sqrt(li[0])\nb = cmath.sqrt(li[1])\nc = cmath.sqrt(li[2])\nif a + b < c:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'complex' and 'complex'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "li = [2, 3, 9]",
                    "a = cmath.sqrt(li[0])",
                    "b = cmath.sqrt(li[1])",
                    "c = cmath.sqrt(li[2])",
                    "(a + b < c)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    li = [2, 3, 9]\n    a = cmath.sqrt(li[0])\n    b = cmath.sqrt(li[1])\n    c = cmath.sqrt(li[2])\n    (a + b < c)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s555610205": {
            "code": "abc = '2 3 9'\nabc = abc.split(' ')\na = int(abc[0])\nb = int(abc[1])\nc = int(abc[2])\nif 4 * a * b < (c - a - b)(c - a - b):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "abc = '2 3 9'",
                    "abc = abc.split(' ')",
                    "a = int(abc[0])",
                    "b = int(abc[1])",
                    "c = int(abc[2])",
                    "(4 * a * b < (c - a - b)(c - a - b))"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    abc = '2 3 9'\n    abc = abc.split(' ')\n    a = int(abc[0])\n    b = int(abc[1])\n    c = int(abc[2])\n    (4 * a * b < (c - a - b)(c - a - b))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p02747": {
        "s595134330": {
            "code": "s = 'hihi'\nl = len(s)\nif l % 2 == 1:\n    print('No')\n    return\n    sys.exit(0)\nelse:\n    for i in range(0, l, 2):\n        if s[i:i + 2] == 'hi':\n            continue\n        else:\n            print('No')\n            sys.exit(0)\n    print('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                8,
                9,
                10,
                8,
                9,
                10,
                8,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'hihi'",
                    "l = len(s)",
                    "(l % 2 == 1)"
                ],
                "2": [
                    "print(\"No\")",
                    "return"
                ],
                "3": [
                    "sys.exit(0)"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(0, l, 2)"
                ],
                "5": [
                    "(s[i:i + 2] == 'hi')"
                ],
                "6": [
                    "print(\"No\")",
                    "sys.exit(0)"
                ],
                "7": [
                    "print(\"Yes\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 7
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'hihi'\n    l = len(s)\n    (l % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 2:\nStatement:\n    print(\"No\")\n    return\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    sys.exit(0)\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(0, l, 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    (s[i:i + 2] == 'hi')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 6:\nStatement:\n    print(\"No\")\n    sys.exit(0)\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s052447249": {
            "code": "s = 'hihi'\nisHitachi = re.search('^(hi)+$')\nif isHitachi:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"search() missing 1 required positional argument: 'string'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'hihi'",
                    "isHitachi = re.search(\"^(hi)+$\")",
                    "(isHitachi)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'hihi'\n    isHitachi = re.search(\"^(hi)+$\")\n    (isHitachi)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02754": {
        "s649876390": {
            "code": "strInput = '8 3 4'\nN, A, B = np.array(strInput.split(' ')).astype(int)\nlsStrBall = []\nwhile True:\n    lsStrBall += ['b'] * A\n    lsStrBall += ['r'] * B\n    if len(lsStrBall) >= N:\n        break\narrStrBall = np.array(lsStrBall)\nprint((arrStrBall[:N] == 'b').sum())",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "strInput = '8 3 4'",
                    "N, A, B = np.array(strInput.split(' ')).astype(int)",
                    "lsStrBall = []"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "lsStrBall += ['b'] * A",
                    "lsStrBall += ['r'] * B",
                    "(len(lsStrBall) >= N)"
                ],
                "4": [
                    "arrStrBall = np.array(lsStrBall)",
                    "print((arrStrBall[:N] == 'b').sum())"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    strInput = '8 3 4'\n    N, A, B = np.array(strInput.split(' ')).astype(int)\n    lsStrBall = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    lsStrBall += ['b'] * A\n    lsStrBall += ['r'] * B\n    (len(lsStrBall) >= N)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    arrStrBall = np.array(lsStrBall)\n    print((arrStrBall[:N] == 'b').sum())\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02756": {
        "s634435409": {
            "code": "s = deque(['a'])\nq = 4\nrev = False\nfor query in sys.stdin:\n    if query.strip() == '1':\n        if rev:\n            rev = False\n        else:\n            rev = True\n    else:\n        t, f, c = query.split()\n        if f == '1':\n            if rev == True:\n                s.append(s)\n            else:\n                s.appendleft(c)\n        elif f == '2':\n            if rev == True:\n                s.appendleft(c)\n            else:\n                s.append(c)\nif rev == True:\n    s.reverse()\nprint(''.join(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        13
                    ]
                },
                "11": {
                    "range": [
                        14,
                        14
                    ]
                },
                "12": {
                    "range": [
                        15,
                        15
                    ]
                },
                "13": {
                    "range": [
                        16,
                        16
                    ]
                },
                "14": {
                    "range": [
                        17,
                        17
                    ]
                },
                "15": {
                    "range": [
                        18,
                        18
                    ]
                },
                "16": {
                    "range": [
                        19,
                        19
                    ]
                },
                "17": {
                    "range": [
                        20,
                        20
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                11,
                12,
                13,
                16,
                4,
                5,
                6,
                9,
                4,
                5,
                11,
                12,
                17,
                18,
                19,
                4,
                5,
                6,
                7,
                4,
                22,
                24
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = deque(['a'])",
                    "q = 4",
                    "rev = False"
                ],
                "2": [
                    "iterator -> query, Iterate Over -> sys.stdin"
                ],
                "3": [
                    "(query.strip() == '1')"
                ],
                "4": [
                    "(rev)"
                ],
                "5": [
                    "rev = False"
                ],
                "6": [
                    "rev = True"
                ],
                "7": [
                    "t,f,c = query.split()",
                    "(f == '1')"
                ],
                "8": [
                    "(rev == True)"
                ],
                "9": [
                    "s.append(s)"
                ],
                "10": [
                    "s.appendleft(c)"
                ],
                "11": [
                    "(f == '2')"
                ],
                "12": [
                    "(rev == True)"
                ],
                "13": [
                    "s.appendleft(c)"
                ],
                "14": [
                    "s.append(c)"
                ],
                "15": [
                    "(rev == True)"
                ],
                "16": [
                    "s.reverse()"
                ],
                "17": [
                    "print(''.join(s))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 15
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 2
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": 17
                    },
                    "no_condition": null
                },
                "16": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = deque(['a'])\n    q = 4\n    rev = False\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> query, Iterate Over -> sys.stdin\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 15\n\nBlock 3:\nStatement:\n    (query.strip() == '1')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (rev)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    rev = False\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    rev = True\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    t,f,c = query.split()\n    (f == '1')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    (rev == True)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    s.append(s)\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    s.appendleft(c)\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (f == '2')\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 2\n\nBlock 12:\nStatement:\n    (rev == True)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    s.appendleft(c)\nNext:\n    Go to Block: 2\n\nBlock 14:\nStatement:\n    s.append(c)\nNext:\n    Go to Block: 2\n\nBlock 15:\nStatement:\n    (rev == True)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    s.reverse()\nNext:\n    Go to Block: 17\n\nBlock 17:\nStatement:\n    print(''.join(s))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s161855379": {
            "code": "s = deque([sys.stdin.readline().rstrip()])\nq = 4\ncnt = 0\nfor i in range(q):\n    query = sys.stdin.readline().split()\n    if query[0] == '1':\n        cnt = (cnt + 1) % 2\n    elif (int(query[1]) + cnt) % 2 == 1:\n        s.appendleft(query[2])\n    else:\n        s.append(query[2])\nif cnt:\n    s = ''.join(s)\nprint(s[::-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                10,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                9,
                10,
                4,
                5,
                6,
                7,
                4,
                13,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"sequence index must be integer, not 'slice'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = deque([sys.stdin.readline().rstrip()])",
                    "q = 4",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(q)"
                ],
                "3": [
                    "query = sys.stdin.readline().split()",
                    "(query[0] == '1')"
                ],
                "4": [
                    "cnt = (cnt + 1)%2"
                ],
                "5": [
                    "((int(query[1]) + cnt) % 2 == 1)"
                ],
                "6": [
                    "s.appendleft(query[2])"
                ],
                "7": [
                    "s.append(query[2])"
                ],
                "8": [
                    "(cnt)"
                ],
                "9": [
                    "s = \"\".join(s)"
                ],
                "10": [
                    "print(s[::-1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = deque([sys.stdin.readline().rstrip()])\n    q = 4\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(q)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    query = sys.stdin.readline().split()\n    (query[0] == '1')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    cnt = (cnt + 1)%2\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ((int(query[1]) + cnt) % 2 == 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    s.appendleft(query[2])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    s.append(query[2])\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    (cnt)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    s = \"\".join(s)\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    print(s[::-1])\nNext:\n    <END>\n"
        }
    },
    "p02759": {
        "s771709653": {
            "code": "N = 5\nif N % 2 == 1:\n    print(N // 2 + 1)\nelse:\n    print(N // 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "(N % 2 == 1)"
                ],
                "2": [
                    "print((N//2)+1)"
                ],
                "3": [
                    "print(N//2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    (N % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print((N//2)+1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(N//2)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s564826929": {
            "code": "n = '5'\nprint(math.ceil(n / 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "print(math.ceil(n/2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    print(math.ceil(n/2))\nNext:\n    <END>\n"
        },
        "s705537524": {
            "code": "N = '5'\nprint(math.ceil(N / 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "print(math.ceil(N/2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    print(math.ceil(N/2))\nNext:\n    <END>\n"
        },
        "s067453959": {
            "code": "N = '5'\nnum_paper = N / 2\nif N % 2 > 0:\n    num_paper += 1\nelse:\n    pass\nprint(num_paper)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "num_paper = N / 2",
                    "(N % 2 > 0)"
                ],
                "2": [
                    "num_paper += 1"
                ],
                "3": [
                    "print(num_paper)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    num_paper = N / 2\n    (N % 2 > 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    num_paper += 1\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    print(num_paper)\nNext:\n    <END>\n"
        },
        "s519027238": {
            "code": "n = '5'\nn = math.ceil(n / 2)\nprint(n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "n = math.ceil(n / 2)",
                    "print(n)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    n = math.ceil(n / 2)\n    print(n)\nNext:\n    <END>\n"
        },
        "s891152525": {
            "code": "N = '5'\nmin_page = math.ceil(N / 2)\nprint(min_page)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "min_page = math.ceil(N/2)",
                    "print(min_page)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    min_page = math.ceil(N/2)\n    print(min_page)\nNext:\n    <END>\n"
        },
        "s064608606": {
            "code": "N = '5'\nprint(math.ceil(N / 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "print(math.ceil(N/2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    print(math.ceil(N/2))\nNext:\n    <END>\n"
        }
    },
    "p02760": {
        "s495680602": {
            "code": "A1 = [84, 97, 66]\nA2 = [79, 89, 11]\nA3 = [61, 59, 7]\nN = 7\nbs = [89, 7, 87, 79, 24, 84, 30]\nA = np.array([A1, A2, A3])\nmask = np.zeros_like(A)\nfor b in bs:\n    mask += (A == b).astype(int)\nmask = mask > 0\nif np.any(np.all(mask, axis=0)):\n    print('Yes')\nelif np.any(np.all(mask, axis=1)):\n    print('Yes')\nelif np.all(np.diag(mask)):\n    print('Yes')\nelif np.logical_and(mask[0][2], mask[1][1], mask[2][0]):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                },
                "8": {
                    "range": [
                        15,
                        15
                    ]
                },
                "9": {
                    "range": [
                        16,
                        16
                    ]
                },
                "10": {
                    "range": [
                        17,
                        17
                    ]
                },
                "11": {
                    "range": [
                        18,
                        18
                    ]
                },
                "12": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                10,
                11,
                13,
                15,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "A1 = [84, 97, 66]",
                    "A2 = [79, 89, 11]",
                    "A3 = [61, 59, 7]",
                    "N = 7",
                    "bs = [89, 7, 87, 79, 24, 84, 30]",
                    "A = np.array([A1, A2, A3])",
                    "mask = np.zeros_like(A)"
                ],
                "2": [
                    "iterator -> b, Iterate Over -> bs"
                ],
                "3": [
                    "mask += (A==b).astype(int)"
                ],
                "4": [
                    "mask = mask>0",
                    "(np.any(np.all(mask, axis=0)))"
                ],
                "5": [
                    "print('Yes')"
                ],
                "6": [
                    "(np.any(np.all(mask, axis=1)))"
                ],
                "7": [
                    "print('Yes')"
                ],
                "8": [
                    "(np.all(np.diag(mask)))"
                ],
                "9": [
                    "print('Yes')"
                ],
                "10": [
                    "(np.logical_and(mask[0][2], mask[1][1], mask[2][0]))"
                ],
                "11": [
                    "print('Yes')"
                ],
                "12": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    A1 = [84, 97, 66]\n    A2 = [79, 89, 11]\n    A3 = [61, 59, 7]\n    N = 7\n    bs = [89, 7, 87, 79, 24, 84, 30]\n    A = np.array([A1, A2, A3])\n    mask = np.zeros_like(A)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> b, Iterate Over -> bs\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    mask += (A==b).astype(int)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    mask = mask>0\n    (np.any(np.all(mask, axis=0)))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    (np.any(np.all(mask, axis=1)))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    (np.all(np.diag(mask)))\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    (np.logical_and(mask[0][2], mask[1][1], mask[2][0]))\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02765": {
        "s115008155": {
            "code": "i = ['2', '2919']\nN = int(i[0])\nK = int(i[1])\nresult = 0\nresult = math.log(N, K)\nresult = 1 + int(result)\nprint(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "i = ['2', '2919']",
                    "N = int(i[0])",
                    "K = int(i[1])",
                    "result = 0",
                    "result = math.log(N, K)",
                    "result = 1 + int(result)",
                    "print(result)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    i = ['2', '2919']\n    N = int(i[0])\n    K = int(i[1])\n    result = 0\n    result = math.log(N, K)\n    result = 1 + int(result)\n    print(result)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02767": {
        "s328794883": {
            "code": "n = 2\nx = [1, 4]\np = round(sum(x) / len(x))\nx_arr = np.array(x)\nprint(sum((x_arr - p) ** 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "x = [1, 4]",
                    "p = round(sum(x) / len(x))",
                    "x_arr = np.array(x)",
                    "print(sum((x_arr - p) ** 2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    x = [1, 4]\n    p = round(sum(x) / len(x))\n    x_arr = np.array(x)\n    print(sum((x_arr - p) ** 2))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s946211753": {
            "code": "ans = 0\nN = 2\nX = [1, 4]\nP = int(round(np.average(X)))\nfor i in range(N):\n    ans += (X[i] - P) ** 2\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "ans = 0",
                    "N = 2",
                    "X = [1, 4]",
                    "P = int(round(np.average(X)))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "ans += ((X[i] - P)**2)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    ans = 0\n    N = 2\n    X = [1, 4]\n    P = int(round(np.average(X)))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += ((X[i] - P)**2)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s090022213": {
            "code": "n = '2'\nx = ['1', '4']\nn = int(n)\nx = list(map(int, x))\nx = np.array(x)\nmaxed = np.max(x)\ncand = []\nfor p in range(1, maxed):\n    xp = (x - p) ** 2\n    cand.append(np.sum(xp))\ny = np.min(cand)\nprint(y)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                8,
                9,
                10,
                8,
                9,
                10,
                8,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = '2'",
                    "x = ['1', '4']",
                    "n = int(n)",
                    "x = list(map(int,x))",
                    "x = np.array(x)",
                    "maxed = np.max(x)",
                    "cand = []"
                ],
                "2": [
                    "iterator -> p, Iterate Over -> range(1, maxed)"
                ],
                "3": [
                    "xp = (x - p) ** 2",
                    "cand.append(np.sum(xp))"
                ],
                "4": [
                    "y = np.min(cand)",
                    "print(y)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '2'\n    x = ['1', '4']\n    n = int(n)\n    x = list(map(int,x))\n    x = np.array(x)\n    maxed = np.max(x)\n    cand = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> p, Iterate Over -> range(1, maxed)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    xp = (x - p) ** 2\n    cand.append(np.sum(xp))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    y = np.min(cand)\n    print(y)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s710433756": {
            "code": "N = '2'\nxs = [1, 4]\np = round(sum(xs) / len(xs))\nprint(sum((math.pow(x - p) for x in xs)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('pow expected 2 arguments, got 1')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "xs = [1, 4]",
                    "p = round(sum(xs)/len(xs))",
                    "print(sum(math.pow(x-p) for x in xs))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    xs = [1, 4]\n    p = round(sum(xs)/len(xs))\n    print(sum(math.pow(x-p) for x in xs))\nNext:\n    <END>\n"
        },
        "s675231316": {
            "code": "n = 2\nx = [1, 4]\np = int(average(x))\nans = 0\nfor i in range(x):\n    ans += (i - p) ** 2\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "x = [1, 4]",
                    "p=int(average(x))",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(x)"
                ],
                "3": [
                    "ans+=((i-p)**2)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    x = [1, 4]\n    p=int(average(x))\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(x)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=((i-p)**2)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02771": {
        "s854784229": {
            "code": "li = [5, 7, 5]\nli.sort()\nfor i in range(3):\n    if str(li[i]) == str(li[i + 1]) == str(li[i + 2]):\n        print('No')\n        sys.exit()\n    if str(li[i]) == str(li[i + 1]):\n        print('Yes')\n        break\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "li = [5, 7, 5]",
                    "li.sort()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(3)"
                ],
                "3": [
                    "(str(li[i]) == str(li[i + 1]) == str(li[i + 2]))"
                ],
                "4": [
                    "print(\"No\")",
                    "sys.exit()"
                ],
                "5": [
                    "(str(li[i]) == str(li[i + 1]))"
                ],
                "6": [
                    "print(\"Yes\")"
                ],
                "7": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    li = [5, 7, 5]\n    li.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (str(li[i]) == str(li[i + 1]) == str(li[i + 2]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"No\")\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (str(li[i]) == str(li[i + 1]))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02772": {
        "s959234083": {
            "code": "n = '5'\narr = [6, 7, 9, 10, 31]\nfor i in arr:\n    if i % 2 == 0:\n        if i % 3 != 0 and i % 5 != 0:\n            print('DENIED')\n            sys.exit(1)\nprint('APPROVED')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                3,
                4,
                3,
                4,
                3,
                4,
                5,
                3,
                4,
                3,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "arr = [6, 7, 9, 10, 31]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> arr"
                ],
                "3": [
                    "(i % 2 == 0)"
                ],
                "4": [
                    "(i % 3 != 0 and i % 5 != 0)"
                ],
                "5": [
                    "print(\"DENIED\")",
                    "sys.exit(1)"
                ],
                "6": [
                    "print(\"APPROVED\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    arr = [6, 7, 9, 10, 31]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> arr\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (i % 3 != 0 and i % 5 != 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    print(\"DENIED\")\n    sys.exit(1)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(\"APPROVED\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s093434533": {
            "code": "n = 5\na = [6, 7, 9, 10, 31]\nfor i in a:\n    if a % 2 == 0 and (a % 3 != 0 and a % 5 != 0):\n        print('DENIED')\n        sys.exit()\nprint('APPROVED')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [6, 7, 9, 10, 31]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> a"
                ],
                "3": [
                    "(a % 2 == 0 and (a % 3 != 0 and a % 5 != 0))"
                ],
                "4": [
                    "print(\"DENIED\")",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"APPROVED\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [6, 7, 9, 10, 31]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a % 2 == 0 and (a % 3 != 0 and a % 5 != 0))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"DENIED\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"APPROVED\")\nNext:\n    <END>\n"
        }
    },
    "p02773": {
        "s749573033": {
            "code": "N = 7\nL = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']\nLc = Counter(L).most_common()\nLlist = []\nL_max = Lc[0][1]\ni = 0\nwhile True:\n    Llist.append(Lc[i][0])\n    if Lc[i + 1][1] == L_max:\n        i += 1\n    else:\n        break\nprint('\\n'.join(sorted(Llist)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                7,
                8,
                9,
                12,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 7",
                    "L = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']",
                    "Lc = Counter(L).most_common()",
                    "Llist = []",
                    "L_max = Lc[0][1]",
                    "i = 0"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "Llist.append(Lc[i][0])",
                    "(Lc[i + 1][1] == L_max)"
                ],
                "4": [
                    "i+=1"
                ],
                "5": [
                    "print(\"\\n\".join(sorted(Llist)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    L = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']\n    Lc = Counter(L).most_common()\n    Llist = []\n    L_max = Lc[0][1]\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    Llist.append(Lc[i][0])\n    (Lc[i + 1][1] == L_max)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"\\n\".join(sorted(Llist)))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s836920927": {
            "code": "N = 7\na = ['beat']\na = np.array(a)\nunique_elements, counts_elements = np.unique(a, return_counts=True)\nelements = unique_elements[counts_elements == np.max(counts_elements)]\nfor i in elements:\n    print(i)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 7",
                    "a = ['beat']",
                    "a = np.array(a)",
                    "unique_elements, counts_elements = np.unique(a, return_counts=True)",
                    "elements = unique_elements[counts_elements == np.max(counts_elements)]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> elements"
                ],
                "3": [
                    "print(i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    a = ['beat']\n    a = np.array(a)\n    unique_elements, counts_elements = np.unique(a, return_counts=True)\n    elements = unique_elements[counts_elements == np.max(counts_elements)]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> elements\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(i)\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        },
        "s260916936": {
            "code": "n = 7\ns = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']\nans = list()\nc = collections.Counter(s)\nk = c.most_common()\nif n == 1:\n    print(s[0])\nelif n >= 2 and len(c.keys()) == 1:\n    print(c.most_common()[0][0])\nfor i in range(k):\n    if k[0][0] == k[i][1]:\n        ans.append(k[i][0])\n    else:\n        break\nans = sorted(ans)\n[print(i) for i in ans]",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                8,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 7",
                    "s = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']",
                    "ans = list()",
                    "c = collections.Counter(s)",
                    "k = c.most_common()",
                    "(n == 1)"
                ],
                "2": [
                    "print(s[0])"
                ],
                "3": [
                    "(n >= 2 and len(c.keys()) == 1)"
                ],
                "4": [
                    "print(c.most_common()[0][0])"
                ],
                "5": [
                    "iterator -> i, Iterate Over -> range(k)"
                ],
                "6": [
                    "(k[0][0] == k[i][1])"
                ],
                "7": [
                    "ans.append(k[i][0])"
                ],
                "8": [
                    "ans = sorted(ans)",
                    "[print(i) for i in ans]"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 8
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 7\n    s = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']\n    ans = list()\n    c = collections.Counter(s)\n    k = c.most_common()\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s[0])\nNext:\n    Go to Block: 5\n\nBlock 3:\nStatement:\n    (n >= 2 and len(c.keys()) == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(c.most_common()[0][0])\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    iterator -> i, Iterate Over -> range(k)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 8\n\nBlock 6:\nStatement:\n    (k[0][0] == k[i][1])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans.append(k[i][0])\nNext:\n    Go to Block: 5\n\nBlock 8:\nStatement:\n    ans = sorted(ans)\n    [print(i) for i in ans]\nNext:\n    <END>\n"
        },
        "s383319366": {
            "code": "N = 7\nL = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']\nDic = Counter(L)\nmax_k_list = [kv[0] for kv in Dic.items() if kv[1] == max(Dic.values())]\nmax_k_list = max_k_list.sort()\nfor t in max_k_list:\n    print(t)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 7",
                    "L = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']",
                    "Dic = Counter(L)",
                    "max_k_list = [kv[0] for kv in Dic.items() if kv[1] == max(Dic.values())]",
                    "max_k_list = max_k_list.sort()"
                ],
                "2": [
                    "iterator -> t, Iterate Over -> max_k_list"
                ],
                "3": [
                    "print(t)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    L = ['beat', 'vet', 'beet', 'bed', 'vet', 'bet', 'beet']\n    Dic = Counter(L)\n    max_k_list = [kv[0] for kv in Dic.items() if kv[1] == max(Dic.values())]\n    max_k_list = max_k_list.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> t, Iterate Over -> max_k_list\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(t)\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02775": {
        "s155614331": {
            "code": "n = 36\nk = math.floor(math.log10(n)) + 1\nn = str(n)\ndp = [[-1, -1] for _ in range(k)]\nfor i in range(k):\n    if i == 0:\n        dp[i][0] = min(1 + (10 - int(n[i])), int(n[i]))\n        dp[i][1] = min(1 + (10 - int(n[i]) - 1), int(n[i]) + 1)\n    else:\n        dp[i][0] = min(dp[i - 1][1] + (10 - int(n[i])), dp[i - 1][0] + int(n[i]))\n        dp[i][1] = min(dp[i - 1][1] + (10 - int(n[i]) - 1), dp[i - 1][0] + int(n[i]) + 1)\nprint(dp[k - 1][0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                5,
                6,
                10,
                11,
                5,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 36",
                    "k=math.floor(math.log10(n))+1",
                    "n=str(n)",
                    "dp=[[-1,-1] for _ in range(k)]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(k)"
                ],
                "3": [
                    "(i == 0)"
                ],
                "4": [
                    "dp[i][0]=min(1+(10-int(n[i])),int(n[i]))",
                    "dp[i][1]=min(1+(10-int(n[i])-1),int(n[i])+1)"
                ],
                "5": [
                    "dp[i][0]=min(dp[i-1][1]+(10-int(n[i])),dp[i-1][0]+int(n[i]))",
                    "dp[i][1]=min(dp[i-1][1]+(10-int(n[i])-1),dp[i-1][0]+int(n[i])+1)"
                ],
                "6": [
                    "print(dp[k-1][0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 36\n    k=math.floor(math.log10(n))+1\n    n=str(n)\n    dp=[[-1,-1] for _ in range(k)]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(k)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    dp[i][0]=min(1+(10-int(n[i])),int(n[i]))\n    dp[i][1]=min(1+(10-int(n[i])-1),int(n[i])+1)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    dp[i][0]=min(dp[i-1][1]+(10-int(n[i])),dp[i-1][0]+int(n[i]))\n    dp[i][1]=min(dp[i-1][1]+(10-int(n[i])-1),dp[i-1][0]+int(n[i])+1)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(dp[k-1][0])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s300681228": {
            "code": "input = sys.stdin.buffer.readline\nS = '36'\nans = 0\nfor s in S:\n    i = int(s)\n    ans += min(i, 10 - i)\nif S[0] == '9' or int(S[1]) >= 6:\n    ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.buffer.readline",
                    "S = '36'",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> s, Iterate Over -> S"
                ],
                "3": [
                    "i = int(s)",
                    "ans += min(i, 10-i)"
                ],
                "4": [
                    "(S[0] == '9' or int(S[1]) >= 6)"
                ],
                "5": [
                    "ans += 1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.buffer.readline\n    S = '36'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    i = int(s)\n    ans += min(i, 10-i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (S[0] == '9' or int(S[1]) >= 6)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02779": {
        "s731846805": {
            "code": "n = 5\na = [2, 6, 1, 4, 5]\nc = [0] * (max(a) + 1)\nfor i in range(len(a)):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        print('NO')\n        sys.exit()\nprint('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [2, 6, 1, 4, 5]",
                    "c=[0]*(max(a)+1)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(a))"
                ],
                "3": [
                    "c[a[i]]+=1",
                    "(c[a[i]] > 1)"
                ],
                "4": [
                    "print(\"NO\")",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"YES\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [2, 6, 1, 4, 5]\n    c=[0]*(max(a)+1)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    c[a[i]]+=1\n    (c[a[i]] > 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"NO\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s630870766": {
            "code": "N = '5'\nnumlist = [2, 6, 1, 4, 5]\nfor i in range(N):\n    if numlist[0] == numlist[i]:\n        print('No')\n        sys.exit()\nprint('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "numlist = [2, 6, 1, 4, 5]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(numlist[0] == numlist[i])"
                ],
                "4": [
                    "print('No')",
                    "sys.exit()"
                ],
                "5": [
                    "print('Yes')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    numlist = [2, 6, 1, 4, 5]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (numlist[0] == numlist[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print('No')\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n"
        }
    },
    "p02781": {
        "s833331226": {
            "code": "N = 100\nK = 1\nketa1 = len(str(N))\nmaxN = int(str(N)[0])\nketa2 = len(str(int(str(N)[1:])))\nsecN = int(str(int(str(N)[1:]))[0])\nif keta2 > 1:\n    keta3 = len(str(int(str(int(str(N)[1:]))[1:])))\n    thiN = int(str(int(str(int(str(N)[1:]))[1:]))[0])\nonly1 = 0\nonly2 = 0\nif secN == 0:\n    only1 = 1\nif str(int(str(int(str(N)[1:]))[0]))[0] == 0:\n    only2 = 1\nif keta1 < K:\n    print(0)\nelse:\n    if K == 1:\n        print(maxN + 9 * (keta1 - 1))\n    if K == 2:\n        if keta1 - 2 != 0:\n            if only1:\n                print((maxN - 1) * (keta1 - 1) * 9 + 9 ** 2 * (keta1 - 2) * (keta1 - 1) // 2)\n            elif keta2 - 1 != 0:\n                print((maxN - 1) * (keta1 - 1) * 9 + 9 ** 2 * (keta1 - 2) * (keta1 - 1) // 2 + secN + (keta2 - 1) * 9)\n            else:\n                print((maxN - 1) * (keta1 - 1) * 9 + 9 ** 2 * (keta1 - 2) * (keta1 - 1) // 2 + secN)\n        else:\n            print((maxN - 1) * (keta1 - 1) * 9 + secN)\n    if K == 3:\n        if keta1 - 3 != 0:\n            if only1:\n                print((maxN - 1) * (keta1 - 1) * (keta1 - 2) // 2 * 9 ** 2 + 9 ** 3 * (keta1 - 3) * (keta1 - 2) * (keta1 - 1) // 6)\n            elif keta2 - 2 != 0:\n                print((maxN - 1) * (keta1 - 1) * (keta1 - 2) // 2 * 9 ** 2 + 9 ** 3 * (keta1 - 3) * (keta1 - 2) * (keta1 - 1) // 6 + (secN - 1) * 9 * (keta2 - 1) + 9 ** 2 * (keta2 - 2) * (keta2 - 1) // 2 + thiN + (keta3 - 1) * 9)\n            else:\n                print((maxN - 1) * (keta1 - 1) * (keta1 - 2) // 2 * 9 ** 2 + 9 ** 3 * (keta1 - 3) * (keta1 - 2) * (keta1 - 1) // 6 + (secN - 1) * 9 * (keta2 - 1) + 9 ** 2 * (keta2 - 2) * (keta2 - 1) // 2 + thiN)\n        elif only1:\n            print((maxN - 1) * (keta1 - 1) * 9)\n        else:\n            print((maxN - 1) * (keta1 - 1) * 9 + (secN - 1) * 9 + thiN)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        12
                    ]
                },
                "4": {
                    "range": [
                        13,
                        13
                    ]
                },
                "5": {
                    "range": [
                        14,
                        14
                    ]
                },
                "6": {
                    "range": [
                        15,
                        15
                    ]
                },
                "7": {
                    "range": [
                        16,
                        16
                    ]
                },
                "8": {
                    "range": [
                        17,
                        17
                    ]
                },
                "9": {
                    "range": [
                        18,
                        18
                    ]
                },
                "10": {
                    "range": [
                        19,
                        19
                    ]
                },
                "11": {
                    "range": [
                        20,
                        20
                    ]
                },
                "12": {
                    "range": [
                        21,
                        21
                    ]
                },
                "13": {
                    "range": [
                        22,
                        22
                    ]
                },
                "14": {
                    "range": [
                        23,
                        23
                    ]
                },
                "15": {
                    "range": [
                        24,
                        24
                    ]
                },
                "16": {
                    "range": [
                        25,
                        25
                    ]
                },
                "17": {
                    "range": [
                        26,
                        26
                    ]
                },
                "18": {
                    "range": [
                        27,
                        27
                    ]
                },
                "19": {
                    "range": [
                        28,
                        28
                    ]
                },
                "20": {
                    "range": [
                        29,
                        29
                    ]
                },
                "21": {
                    "range": [
                        30,
                        30
                    ]
                },
                "22": {
                    "range": [
                        31,
                        31
                    ]
                },
                "23": {
                    "range": [
                        32,
                        32
                    ]
                },
                "24": {
                    "range": [
                        33,
                        33
                    ]
                },
                "25": {
                    "range": [
                        34,
                        34
                    ]
                },
                "26": {
                    "range": [
                        35,
                        35
                    ]
                },
                "27": {
                    "range": [
                        36,
                        36
                    ]
                },
                "28": {
                    "range": [
                        37,
                        37
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                11,
                12,
                13,
                14,
                16,
                19,
                20,
                21,
                32
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "only2": "0"
                        },
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        },
                        {
                            "only1": "0"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "only2": "0"
                        },
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        },
                        {
                            "only1": "1"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "only2": "0"
                        },
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        },
                        {
                            "only1": "1"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "only2": "0"
                        },
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        },
                        {
                            "only1": "1"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "only2": "0"
                        },
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        },
                        {
                            "only1": "1"
                        }
                    ]
                },
                {
                    "block": 10,
                    "state": [
                        {
                            "only2": "0"
                        },
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        },
                        {
                            "only1": "1"
                        }
                    ]
                },
                {
                    "block": 11,
                    "state": [
                        {
                            "only2": "0"
                        },
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        },
                        {
                            "only1": "1"
                        }
                    ]
                },
                {
                    "block": 19,
                    "state": [
                        {
                            "only2": "0"
                        },
                        {
                            "keta1": "3"
                        },
                        {
                            "secN": "0"
                        },
                        {
                            "N": "100"
                        },
                        {
                            "maxN": "1"
                        },
                        {
                            "K": "1"
                        },
                        {
                            "keta2": "1"
                        },
                        {
                            "only1": "1"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 100",
                    "K = 1",
                    "keta1=len(str(N))",
                    "maxN=int(str(N)[0])",
                    "keta2=len(str(int(str(N)[1:])))",
                    "secN=int(str(int(str(N)[1:]))[0])",
                    "(keta2 > 1)"
                ],
                "2": [
                    "keta3=len(str(int(str(int(str(N)[1:]))[1:])))",
                    "thiN=int(str(int(str(int(str(N)[1:]))[1:]))[0])"
                ],
                "3": [
                    "only1=0",
                    "only2=0",
                    "(secN == 0)"
                ],
                "4": [
                    "only1=1"
                ],
                "5": [
                    "(str(int(str(int(str(N)[1:]))[0]))[0] == 0)"
                ],
                "6": [
                    "only2=1"
                ],
                "7": [
                    "(keta1 < K)"
                ],
                "8": [
                    "print(0)"
                ],
                "9": [
                    "(K == 1)"
                ],
                "10": [
                    "print(maxN+9*(keta1-1))"
                ],
                "11": [
                    "(K == 2)"
                ],
                "12": [
                    "(keta1 - 2 != 0)"
                ],
                "13": [
                    "(only1)"
                ],
                "14": [
                    "print((maxN-1)*(keta1-1)*9+9**2*(keta1-2)*(keta1-1)//2)"
                ],
                "15": [
                    "(keta2 - 1 != 0)"
                ],
                "16": [
                    "print((maxN-1)*(keta1-1)*9+9**2*(keta1-2)*(keta1-1)//2+secN+(keta2-1)*9)"
                ],
                "17": [
                    "print((maxN-1)*(keta1-1)*9+9**2*(keta1-2)*(keta1-1)//2+secN)"
                ],
                "18": [
                    "print((maxN-1)*(keta1-1)*9+secN)"
                ],
                "19": [
                    "(K == 3)"
                ],
                "20": [
                    "(keta1 - 3 != 0)"
                ],
                "21": [
                    "(only1)"
                ],
                "22": [
                    "print((maxN-1)*(keta1-1)*(keta1-2)//2*9**2+9**3*(keta1-3)*(keta1-2)*(keta1-1)//6)"
                ],
                "23": [
                    "(keta2 - 2 != 0)"
                ],
                "24": [
                    "print((maxN-1)*(keta1-1)*(keta1-2)//2*9**2+9**3*(keta1-3)*(keta1-2)*(keta1-1)//6+(secN-1)*9*(keta2-1)+9**2*(keta2-2)*(keta2-1)//2+thiN+(keta3-1)*9)"
                ],
                "25": [
                    "print((maxN-1)*(keta1-1)*(keta1-2)//2*9**2+9**3*(keta1-3)*(keta1-2)*(keta1-1)//6+(secN-1)*9*(keta2-1)+9**2*(keta2-2)*(keta2-1)//2+thiN)"
                ],
                "26": [
                    "(only1)"
                ],
                "27": [
                    "print((maxN-1)*(keta1-1)*9)"
                ],
                "28": [
                    "print((maxN-1)*(keta1-1)*9+(secN-1)*9+thiN)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 19
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "19": {
                    "with_condition": {
                        "true": 20,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 18
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 19
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": 17
                    },
                    "no_condition": null
                },
                "16": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 19
                },
                "17": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 19
                },
                "18": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 19
                },
                "20": {
                    "with_condition": {
                        "true": 21,
                        "false": 26
                    },
                    "no_condition": null
                },
                "21": {
                    "with_condition": {
                        "true": 22,
                        "false": 23
                    },
                    "no_condition": null
                },
                "23": {
                    "with_condition": {
                        "true": 24,
                        "false": 25
                    },
                    "no_condition": null
                },
                "26": {
                    "with_condition": {
                        "true": 27,
                        "false": 28
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 100\n    K = 1\n    keta1=len(str(N))\n    maxN=int(str(N)[0])\n    keta2=len(str(int(str(N)[1:])))\n    secN=int(str(int(str(N)[1:]))[0])\n    (keta2 > 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    keta3=len(str(int(str(int(str(N)[1:]))[1:])))\n    thiN=int(str(int(str(int(str(N)[1:]))[1:]))[0])\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    only1=0\n    only2=0\n    (secN == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    only1=1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (str(int(str(int(str(N)[1:]))[0]))[0] == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    only2=1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (keta1 < K)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    (K == 1)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(maxN+9*(keta1-1))\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (K == 2)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 19\n\nBlock 12:\nStatement:\n    (keta1 - 2 != 0)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 18\n\nBlock 13:\nStatement:\n    (only1)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print((maxN-1)*(keta1-1)*9+9**2*(keta1-2)*(keta1-1)//2)\nNext:\n    Go to Block: 19\n\nBlock 15:\nStatement:\n    (keta2 - 1 != 0)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    print((maxN-1)*(keta1-1)*9+9**2*(keta1-2)*(keta1-1)//2+secN+(keta2-1)*9)\nNext:\n    Go to Block: 19\n\nBlock 17:\nStatement:\n    print((maxN-1)*(keta1-1)*9+9**2*(keta1-2)*(keta1-1)//2+secN)\nNext:\n    Go to Block: 19\n\nBlock 18:\nStatement:\n    print((maxN-1)*(keta1-1)*9+secN)\nNext:\n    Go to Block: 19\n\nBlock 19:\nStatement:\n    (K == 3)\nNext:\n    If True: Go to Block 20\n    <END>\nBlock 20:\nStatement:\n    (keta1 - 3 != 0)\nNext:\n    If True: Go to Block 21\n    If False: Go to Block 26\n\nBlock 21:\nStatement:\n    (only1)\nNext:\n    If True: Go to Block 22\n    If False: Go to Block 23\n\nBlock 22:\nStatement:\n    print((maxN-1)*(keta1-1)*(keta1-2)//2*9**2+9**3*(keta1-3)*(keta1-2)*(keta1-1)//6)\nNext:\n    <END>\n\nBlock 23:\nStatement:\n    (keta2 - 2 != 0)\nNext:\n    If True: Go to Block 24\n    If False: Go to Block 25\n\nBlock 24:\nStatement:\n    print((maxN-1)*(keta1-1)*(keta1-2)//2*9**2+9**3*(keta1-3)*(keta1-2)*(keta1-1)//6+(secN-1)*9*(keta2-1)+9**2*(keta2-2)*(keta2-1)//2+thiN+(keta3-1)*9)\nNext:\n    <END>\n\nBlock 25:\nStatement:\n    print((maxN-1)*(keta1-1)*(keta1-2)//2*9**2+9**3*(keta1-3)*(keta1-2)*(keta1-1)//6+(secN-1)*9*(keta2-1)+9**2*(keta2-2)*(keta2-1)//2+thiN)\nNext:\n    <END>\n\nBlock 26:\nStatement:\n    (only1)\nNext:\n    If True: Go to Block 27\n    If False: Go to Block 28\n\nBlock 27:\nStatement:\n    print((maxN-1)*(keta1-1)*9)\nNext:\n    <END>\n\nBlock 28:\nStatement:\n    print((maxN-1)*(keta1-1)*9+(secN-1)*9+thiN)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02784": {
        "s150140096": {
            "code": "nums = ['10', '3']\nAs = ['4', '5', '6']\nH = nums[0]\nN = nums[1]\nA = []\nsum = 0\nfor B in As:\n    sum = sum + int(B)\nif sum >= int(H):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                7,
                8,
                7,
                8,
                7,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "nums": "['10', '3']"
                        },
                        {
                            "N": "'3'"
                        },
                        {
                            "A": "[]"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "As": "['4', '5', '6']"
                        },
                        {
                            "H": "'10'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "nums": "['10', '3']"
                        },
                        {
                            "N": "'3'"
                        },
                        {
                            "A": "[]"
                        },
                        {
                            "sum": "4"
                        },
                        {
                            "As": "['4', '5', '6']"
                        },
                        {
                            "H": "'10'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "nums": "['10', '3']"
                        },
                        {
                            "N": "'3'"
                        },
                        {
                            "A": "[]"
                        },
                        {
                            "sum": "4"
                        },
                        {
                            "As": "['4', '5', '6']"
                        },
                        {
                            "H": "'10'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "nums": "['10', '3']"
                        },
                        {
                            "N": "'3'"
                        },
                        {
                            "A": "[]"
                        },
                        {
                            "sum": "9"
                        },
                        {
                            "As": "['4', '5', '6']"
                        },
                        {
                            "H": "'10'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "nums": "['10', '3']"
                        },
                        {
                            "N": "'3'"
                        },
                        {
                            "A": "[]"
                        },
                        {
                            "sum": "9"
                        },
                        {
                            "As": "['4', '5', '6']"
                        },
                        {
                            "H": "'10'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "nums = ['10', '3']",
                    "As = ['4', '5', '6']",
                    "H = nums[0]",
                    "N = nums[1]",
                    "A = []",
                    "sum = 0"
                ],
                "2": [
                    "iterator -> B, Iterate Over -> As"
                ],
                "3": [
                    "sum = sum + int(B)"
                ],
                "4": [
                    "(sum >= int(H))"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    nums = ['10', '3']\n    As = ['4', '5', '6']\n    H = nums[0]\n    N = nums[1]\n    A = []\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> B, Iterate Over -> As\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum = sum + int(B)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (sum >= int(H))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02786": {
        "s914169906": {
            "code": "H = 2\nprint(sum((2 ** i for i in range(int(log2(H)) + 1))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                4,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "H = 2",
                    "print(sum("
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    H = 2\n    print(sum(\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s136231643": {
            "code": "n = 2\nkaisu = math.log2(n)\nans = 0\nfor i in range(kaisu):\n    ans += 2 ** i\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "kaisu = math.log2(n)",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(kaisu)"
                ],
                "3": [
                    "ans += 2 ** i"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    kaisu = math.log2(n)\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(kaisu)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += 2 ** i\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s548718383": {
            "code": "H = 2\nH = int(math.log2())\nprint(2 ** (H + 1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "H": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('math.log2() takes exactly one argument (0 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "H = 2",
                    "H=int(math.log2())",
                    "print(2**(H+1))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    H = 2\n    H=int(math.log2())\n    print(2**(H+1))\nNext:\n    <END>\n"
        }
    },
    "p02791": {
        "s178049178": {
            "code": "N = 5\nP = [4, 2, 5, 1, 3]\nm = math.inf\nans = 0\nfor p in P:\n    if p <= m:\n        ans += 1\n        m = p\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                5,
                6,
                7,
                8,
                5,
                6,
                5,
                6,
                7,
                8,
                5,
                6,
                5,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "P = [4, 2, 5, 1, 3]",
                    "m = math.inf",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> p, Iterate Over -> P"
                ],
                "3": [
                    "(p <= m)"
                ],
                "4": [
                    "ans += 1",
                    "m = p"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    P = [4, 2, 5, 1, 3]\n    m = math.inf\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> p, Iterate Over -> P\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (p <= m)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\n    m = p\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s694778435": {
            "code": "N = 5\nP_lis = [4, 2, 5, 1, 3]\ncount = 0\nfor i in range(N):\n    lis = P_lis[0:i + 1]\n    lis = lis - lis[i]\n    if -1 in np.sign(lis):\n        count += 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "P_lis = [4, 2, 5, 1, 3]",
                    "count = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "lis = P_lis[0:i+1]",
                    "lis = lis - lis[i]",
                    "(-1 in np.sign(lis))"
                ],
                "4": [
                    "count += 1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    P_lis = [4, 2, 5, 1, 3]\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    lis = P_lis[0:i+1]\n    lis = lis - lis[i]\n    (-1 in np.sign(lis))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p02793": {
        "s967083011": {
            "code": "MOD = 1000000007\nN = 3\nA = [2, 3, 4]\nLCM = A[0]\nfor i in range(0, N - 1, 1):\n    LCM = LCM * A[i + 1] // math.gcd(A[i + 1], LCM)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "MOD = 1000000007",
                    "N = 3",
                    "A = [2, 3, 4]",
                    "LCM = A[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, N - 1, 1)"
                ],
                "3": [
                    "LCM = LCM*A[i+1]//math.gcd(A[i+1],LCM)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    MOD = 1000000007\n    N = 3\n    A = [2, 3, 4]\n    LCM = A[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, N - 1, 1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    LCM = LCM*A[i+1]//math.gcd(A[i+1],LCM)\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        }
    },
    "p02801": {
        "s044599131": {
            "code": "input = sys.stdin.readline\nc = 'a'\nprint(chr(ord(c) + 1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "c = 'a'",
                    "print(chr(ord(c)+1))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    c = 'a'\n    print(chr(ord(c)+1))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s239202637": {
            "code": "C = 'a'\nprint(chr(ord(C + 1)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "C = 'a'",
                    "print(chr(ord(C + 1)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    C = 'a'\n    print(chr(ord(C + 1)))\nNext:\n    <END>\n"
        }
    },
    "p02812": {
        "s839546083": {
            "code": "ans = 0\ninput = sys.stdin.readline\nN = 10\nS = 'ZABCDBABCQ'\nlist_S = list(S)\nfor i in range(N):\n    if list_S[i] == 'A':\n        if list_S[i + 1] == 'B':\n            if list_S[i + 2] == 'C':\n                ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "2"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "2"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "2"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "2"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7e1a11f510>"
                        },
                        {
                            "ans": "2"
                        },
                        {
                            "list_S": "['Z', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'Q']"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "ans = 0",
                    "input = sys.stdin.readline",
                    "N = 10",
                    "S = 'ZABCDBABCQ'",
                    "list_S = list(S)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(list_S[i] == 'A')"
                ],
                "4": [
                    "(list_S[i + 1] == 'B')"
                ],
                "5": [
                    "(list_S[i + 2] == 'C')"
                ],
                "6": [
                    "ans += 1"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    ans = 0\n    input = sys.stdin.readline\n    N = 10\n    S = 'ZABCDBABCQ'\n    list_S = list(S)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (list_S[i] == 'A')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (list_S[i + 1] == 'B')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    (list_S[i + 2] == 'C')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s124434720": {
            "code": "N = '10'\nS = 'ZABCDBABCQ'\nc = 0\nfor i in range(N - 2):\n    if S[i] == 'A' and S[i + 1] == 'B' and (S[i + 2] == 'C'):\n        c += 1\nprint(c)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '10'",
                    "S = 'ZABCDBABCQ'",
                    "c = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 2)"
                ],
                "3": [
                    "(S[i] == 'A' and S[i + 1] == 'B' and (S[i + 2] == 'C'))"
                ],
                "4": [
                    "c += 1"
                ],
                "5": [
                    "print(c)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '10'\n    S = 'ZABCDBABCQ'\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] == 'A' and S[i + 1] == 'B' and (S[i + 2] == 'C'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    c += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(c)\nNext:\n    <END>\n"
        }
    },
    "p02813": {
        "s671224678": {
            "code": "n = 3\np = [1, 3, 2]\nq = [3, 1, 2]\na = 0\nb = 0\ncnt = 0\np1 = p.copy()\np1.sort()\nn_list = list(itertools.permutations(p1))\nfor i in n_list:\n    if list(i) == p:\n        a = cnt + 1\n    elif list(i) == q:\n        b = cnt + 1\n    cnt += 1\nprint(abs(a - b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        9
                    ]
                },
                "2": {
                    "range": [
                        10,
                        10
                    ]
                },
                "3": {
                    "range": [
                        11,
                        11
                    ]
                },
                "4": {
                    "range": [
                        12,
                        12
                    ]
                },
                "5": {
                    "range": [
                        13,
                        13
                    ]
                },
                "6": {
                    "range": [
                        14,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        15
                    ]
                },
                "8": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                13,
                15,
                10,
                11,
                12,
                15,
                10,
                11,
                13,
                15,
                10,
                11,
                13,
                15,
                10,
                11,
                13,
                14,
                15,
                10,
                11,
                13,
                15,
                10,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "p = [1, 3, 2]",
                    "q = [3, 1, 2]",
                    "a = 0",
                    "b = 0",
                    "cnt = 0",
                    "p1= p.copy()",
                    "p1.sort()",
                    "n_list = list(itertools.permutations(p1))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> n_list"
                ],
                "3": [
                    "(list(i) == p)"
                ],
                "4": [
                    "a = cnt +1"
                ],
                "5": [
                    "(list(i) == q)"
                ],
                "6": [
                    "b = cnt +1"
                ],
                "7": [
                    "cnt += 1"
                ],
                "8": [
                    "print(abs(a-b))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    p = [1, 3, 2]\n    q = [3, 1, 2]\n    a = 0\n    b = 0\n    cnt = 0\n    p1= p.copy()\n    p1.sort()\n    n_list = list(itertools.permutations(p1))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> n_list\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (list(i) == p)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a = cnt +1\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (list(i) == q)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    b = cnt +1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(abs(a-b))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s369478549": {
            "code": "N = 3\nP = [1, 3, 2]\nQ = [3, 1, 2]\nper_list = [list(i) for i in itertools.permutations(range(1, N + 1))]\nprint(abs(per_list.index(P) - per_list(Q)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "P = [1, 3, 2]",
                    "Q = [3, 1, 2]",
                    "per_list = [list(i) for i in itertools.permutations(range(1,N + 1))]",
                    "print(abs(per_list.index(P) - per_list(Q)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    P = [1, 3, 2]\n    Q = [3, 1, 2]\n    per_list = [list(i) for i in itertools.permutations(range(1,N + 1))]\n    print(abs(per_list.index(P) - per_list(Q)))\nNext:\n    <END>\n"
        },
        "s723447568": {
            "code": "n = 3\nP = [1, 3, 2]\nQ = [3, 1, 2]\nN = [i + 1 for i in range(n)]\nper = list(itertools.permutations(N))\nlis = []\nfor oc in range(per):\n    lis.append(int(''.join(map(str, list(per)))))\na = lis.index(P)\nb = lis.index(Q)\nprint(abs(a - b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "P = [1, 3, 2]",
                    "Q = [3, 1, 2]",
                    "N = [i + 1 for i in range(n)]",
                    "per = list(itertools.permutations(N))",
                    "lis = []"
                ],
                "2": [
                    "iterator -> oc, Iterate Over -> range(per)"
                ],
                "3": [
                    "lis.append(int(''.join(map(str, list(per)))))"
                ],
                "4": [
                    "a = lis.index(P)",
                    "b = lis.index(Q)",
                    "print(abs(a - b))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    P = [1, 3, 2]\n    Q = [3, 1, 2]\n    N = [i + 1 for i in range(n)]\n    per = list(itertools.permutations(N))\n    lis = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> oc, Iterate Over -> range(per)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    lis.append(int(''.join(map(str, list(per)))))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    a = lis.index(P)\n    b = lis.index(Q)\n    print(abs(a - b))\nNext:\n    <END>\n"
        },
        "s148817349": {
            "code": "N = '3'\nP = [1, 3, 2]\nQ = [3, 1, 2]\npermutation = list(itertools(N))\nfor i in range(len(permutation)):\n    if P == permutation[i]:\n        a = i\n    elif Q == permutation[i]:\n        b = i\nprint(math.fabs(a - b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'module' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '3'",
                    "P = [1, 3, 2]",
                    "Q = [3, 1, 2]",
                    "permutation = list(itertools(N))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(permutation))"
                ],
                "3": [
                    "(P == permutation[i])"
                ],
                "4": [
                    "a = i"
                ],
                "5": [
                    "(Q == permutation[i])"
                ],
                "6": [
                    "b = i"
                ],
                "7": [
                    "print(math.fabs(a-b))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '3'\n    P = [1, 3, 2]\n    Q = [3, 1, 2]\n    permutation = list(itertools(N))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(permutation))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (P == permutation[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a = i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (Q == permutation[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    b = i\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(math.fabs(a-b))\nNext:\n    <END>\n"
        },
        "s541256053": {
            "code": "n = 3\np = (1, 3, 2)\nq = (3, 1, 2)\nlists = list(itertools.permutations(list(range(1, n + 1)), n))\nprint(abs(lists.index(p) - lists.index()))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('index expected at least 1 argument, got 0')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "p = (1, 3, 2)",
                    "q = (3, 1, 2)",
                    "lists = list(itertools.permutations(list(range(1, n+1)), n))",
                    "print(abs(lists.index(p) - lists.index()))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    p = (1, 3, 2)\n    q = (3, 1, 2)\n    lists = list(itertools.permutations(list(range(1, n+1)), n))\n    print(abs(lists.index(p) - lists.index()))\nNext:\n    <END>\n"
        }
    },
    "p02819": {
        "s570740393": {
            "code": "x = 20\nprint(nextprime(x - 1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "20"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 20",
                    "print(nextprime(x - 1))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 20\n    print(nextprime(x - 1))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s249067835": {
            "code": "x = 20\nprint(min([i for i in sieve.primerange(x, 10 ** 6)]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 20",
                    "print(min([i for i in sieve.primerange(x,10**6)]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 20\n    print(min([i for i in sieve.primerange(x,10**6)]))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s705771503": {
            "code": "x = 20\nif isprime(x) == 1:\n    print(x)\nelse:\n    print(nextprime(x))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 20",
                    "(isprime(x) == 1)"
                ],
                "2": [
                    "print(x)"
                ],
                "3": [
                    "print(nextprime(x))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 20\n    (isprime(x) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(x)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(nextprime(x))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s057717235": {
            "code": "X = 20\nn = math.sqrt(X)\nif X == 2:\n    print(X)\nelse:\n    for i in range(2, n):\n        if X % i == 0:\n            X += 1\n    print(X)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "X = 20",
                    "n=math.sqrt(X)",
                    "(X == 2)"
                ],
                "2": [
                    "print(X)"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(2, n)"
                ],
                "4": [
                    "(X % i == 0)"
                ],
                "5": [
                    "X+=1"
                ],
                "6": [
                    "print(X)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 20\n    n=math.sqrt(X)\n    (X == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(X)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(2, n)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (X % i == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    X+=1\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    print(X)\nNext:\n    <END>\n"
        }
    },
    "p02820": {
        "s573165363": {
            "code": "nm = ['5', '2']\nN = int(nm[0])\nM = int(nm[1])\nA = ['8', '7', '6']\nA.sort()\nA.reverse()\nans = 0\nstart, counter = (0, 0)\nflag1 = 0\nflag2 = 0\nflag3 = 0\nfor i in range(0, M):\n    if flag1 == 0:\n        ans += int(A[start]) + int(A[counter])\n        counter += 1\n        flag1 = 1\n    elif flag2 == 0:\n        ans += int(A[start]) + int(A[counter])\n        flag2 = 1\n    else:\n        ans += int(A[start]) + int(A[counter])\n        flag2 = 0\n        if flag3 == 0:\n            counter += 1\n            if counter == N - 1:\n                flag3 = 1\n        else:\n            flag1 = 0\n            flag3 = 0\n            start += 1\n            counter = start\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        11
                    ]
                },
                "2": {
                    "range": [
                        12,
                        12
                    ]
                },
                "3": {
                    "range": [
                        13,
                        13
                    ]
                },
                "4": {
                    "range": [
                        14,
                        16
                    ]
                },
                "5": {
                    "range": [
                        17,
                        17
                    ]
                },
                "6": {
                    "range": [
                        18,
                        19
                    ]
                },
                "7": {
                    "range": [
                        20,
                        22
                    ]
                },
                "8": {
                    "range": [
                        23,
                        24
                    ]
                },
                "9": {
                    "range": [
                        25,
                        25
                    ]
                },
                "10": {
                    "range": [
                        26,
                        29
                    ]
                },
                "11": {
                    "range": [
                        30,
                        30
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                12,
                13,
                17,
                18,
                19,
                12,
                32
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "nm = ['5', '2']",
                    "N = int(nm[0])",
                    "M = int(nm[1])",
                    "A = ['8', '7', '6']",
                    "A.sort()",
                    "A.reverse()",
                    "ans = 0",
                    "start ,counter  = 0 , 0",
                    "flag1 = 0",
                    "flag2 = 0",
                    "flag3 = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, M)"
                ],
                "3": [
                    "(flag1 == 0)"
                ],
                "4": [
                    "ans += int(A[start]) + int(A[counter])",
                    "counter += 1",
                    "flag1 = 1"
                ],
                "5": [
                    "(flag2 == 0)"
                ],
                "6": [
                    "ans += int(A[start]) + int(A[counter])",
                    "flag2 = 1"
                ],
                "7": [
                    "ans += int(A[start]) + int(A[counter])",
                    "flag2 = 0",
                    "(flag3 == 0)"
                ],
                "8": [
                    "counter += 1",
                    "(counter == N - 1)"
                ],
                "9": [
                    "flag3 = 1"
                ],
                "10": [
                    "flag1 = 0",
                    "flag3 = 0",
                    "start += 1",
                    "counter = start"
                ],
                "11": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 11
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 10
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 2
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    nm = ['5', '2']\n    N = int(nm[0])\n    M = int(nm[1])\n    A = ['8', '7', '6']\n    A.sort()\n    A.reverse()\n    ans = 0\n    start ,counter  = 0 , 0\n    flag1 = 0\n    flag2 = 0\n    flag3 = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, M)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    (flag1 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += int(A[start]) + int(A[counter])\n    counter += 1\n    flag1 = 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (flag2 == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans += int(A[start]) + int(A[counter])\n    flag2 = 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    ans += int(A[start]) + int(A[counter])\n    flag2 = 0\n    (flag3 == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 10\n\nBlock 8:\nStatement:\n    counter += 1\n    (counter == N - 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 2\n\nBlock 9:\nStatement:\n    flag3 = 1\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    flag1 = 0\n    flag3 = 0\n    start += 1\n    counter = start\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02829": {
        "s523717237": {
            "code": "a = 3\nb = 1\nprint(6 - a - b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = 3",
                    "b = 1",
                    "print(6-a-b)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 3\n    b = 1\n    print(6-a-b)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s358850233": {
            "code": "s = ['3']\na = int(s[0])\ns = ['1']\nb = int(s[0])\nprint(6 - a - b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = ['3']",
                    "a=int(s[0])",
                    "s = ['1']",
                    "b = int(s[0])",
                    "print(6-a-b)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['3']\n    a=int(s[0])\n    s = ['1']\n    b = int(s[0])\n    print(6-a-b)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02831": {
        "s179596884": {
            "code": "num = [2, 3]\nA = num[0]\nB = num[1]\nprint(A * B // math.gcd(A, B))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "num = [2, 3]",
                    "A=num[0]",
                    "B=num[1]",
                    "print(A*B//math.gcd(A,B))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    num = [2, 3]\n    A=num[0]\n    B=num[1]\n    print(A*B//math.gcd(A,B))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s521964024": {
            "code": "X = ['2', '3']\nA = int(X[0])\nB = int(X[1])\nC = A * B\nD = math.gcd(A, B)\nprint(C // D)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "X = ['2', '3']",
                    "A = int(X[0])",
                    "B = int(X[1])",
                    "C = A * B",
                    "D = math.gcd(A,B)",
                    "print(C // D)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    X = ['2', '3']\n    A = int(X[0])\n    B = int(X[1])\n    C = A * B\n    D = math.gcd(A,B)\n    print(C // D)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s169978930": {
            "code": "X = ['2', '3']\nA = int(X[0])\nB = int(X[1])\nprint(str(A * B // math.gcd(A, B)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "X = ['2', '3']",
                    "A = int(X[0])",
                    "B = int(X[1])",
                    "print(str(A * B // math.gcd(A,B)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    X = ['2', '3']\n    A = int(X[0])\n    B = int(X[1])\n    print(str(A * B // math.gcd(A,B)))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s870942179": {
            "code": "a = ['2', '3']\nprint(a[0] * a[1] / math.gcd(a[0], a[1]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['2', '3']",
                    "print(a[0] * a[1] / math.gcd(a[0], a[1]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['2', '3']\n    print(a[0] * a[1] / math.gcd(a[0], a[1]))\nNext:\n    <END>\n"
        },
        "s989415984": {
            "code": "a = ['2', '3']\nprint(math.lcm(a[0], a[1]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['2', '3']",
                    "print(math.lcm(a[0], a[1]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['2', '3']\n    print(math.lcm(a[0], a[1]))\nNext:\n    <END>\n"
        }
    },
    "p02832": {
        "s792039830": {
            "code": "n = 3\nnums = [2, 1, 2]\nnumber = 1\ncount = 0\nif 1 not in nums:\n    print(-1)\n    sys.exit()\nwhile len(nums) > 0:\n    try:\n        idx = nums.index(number)\n    except ValueError:\n        break\n    count += idx\n    nums = nums[idx + 1:]\n    print(nums)\n    number += 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10,
                13,
                14,
                15,
                16,
                8,
                9,
                10,
                13,
                14,
                15,
                16,
                8,
                17
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "nums = [2, 1, 2]",
                    "number = 1",
                    "count = 0",
                    "(1 not in nums)"
                ],
                "2": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "3": [
                    "while len(nums) > 0:"
                ],
                "4": [
                    "idx = nums.index(number)"
                ],
                "5": [
                    "except ValueError:"
                ],
                "6": [
                    "count += idx",
                    "nums = nums[idx+1:]",
                    "print(nums)",
                    "number += 1"
                ],
                "7": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    nums = [2, 1, 2]\n    number = 1\n    count = 0\n    (1 not in nums)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    while len(nums) > 0:\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    idx = nums.index(number)\nNext:\n    Go to Block: None\n\nBlock 5:\nStatement:\n    except ValueError:\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    count += idx\n    nums = nums[idx+1:]\n    print(nums)\n    number += 1\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    print(count)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s907007990": {
            "code": "n = 3\na = deque([2, 1, 2])\ncount = 1\nwhile a:\n    try:\n        index = a.index(count)\n        count += 1\n        a = a[index:]\n    except ValueError:\n        if count == 1:\n            ans = -1\n        else:\n            ans = n - (count - 1)\n        a = []\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"sequence index must be integer, not 'slice'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = deque([2, 1, 2])",
                    "count = 1"
                ],
                "2": [
                    "while a:"
                ],
                "3": [
                    "index = a.index(count)",
                    "count += 1",
                    "a = a[index:]"
                ],
                "4": [
                    "except ValueError:"
                ],
                "5": [
                    "(count == 1)"
                ],
                "6": [
                    "ans = -1"
                ],
                "7": [
                    "ans = n - (count - 1)"
                ],
                "8": [
                    "a = []"
                ],
                "9": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = deque([2, 1, 2])\n    count = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while a:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    index = a.index(count)\n    count += 1\n    a = a[index:]\nNext:\n    Go to Block: None\n\nBlock 4:\nStatement:\n    except ValueError:\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (count == 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans = -1\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    ans = n - (count - 1)\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    a = []\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02833": {
        "s716178688": {
            "code": "N = 12\nrep = int(math.floor(math.log(N, 5)))\nr = 0\nfor i in range(rep):\n    q = 5 ** (i + 1)\n    if N // q % 2 == 0:\n        w = N // q // 2\n    else:\n        w = (N - 1) // q // 2\n    r += w\nif N % 2 == 1:\n    r = 0\nprint(r)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                4,
                11,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 12",
                    "rep = int(math.floor(math.log(N,5)))",
                    "r=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(rep)"
                ],
                "3": [
                    "q = 5**(i+1)",
                    "(N // q % 2 == 0)"
                ],
                "4": [
                    "w = (N//q)//2"
                ],
                "5": [
                    "w = ((N-1)//q)//2"
                ],
                "6": [
                    "r+=w"
                ],
                "7": [
                    "(N % 2 == 1)"
                ],
                "8": [
                    "r=0"
                ],
                "9": [
                    "print(r)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 12\n    rep = int(math.floor(math.log(N,5)))\n    r=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(rep)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    q = 5**(i+1)\n    (N // q % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    w = (N//q)//2\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    w = ((N-1)//q)//2\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    r+=w\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (N % 2 == 1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    r=0\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    print(r)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s544430615": {
            "code": "n = 12\nif n % 2 == 1:\n    print(0)\nelse:\n    print(sum([n // (2 * pow(5, i)) for i in range(1, math.ceil(math.log(n, 5)))]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 12",
                    "(n % 2 == 1)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "print(sum([n//(2*pow(5,i)) for i in range(1,math.ceil(math.log(n,5)))]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 12\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(sum([n//(2*pow(5,i)) for i in range(1,math.ceil(math.log(n,5)))]))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s171366717": {
            "code": "N = 12\nif N % 2 == 1:\n    print(0)\n    exit()\nfive = N // 10\nfor i in range(int(math.log(N // 10, 5))):\n    five += N // (10 * 5 ** (i + 1))\nprint(five)\n124999999999999995",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 12",
                    "(N % 2 == 1)"
                ],
                "2": [
                    "print(0)",
                    "exit()"
                ],
                "3": [
                    "five = N//10"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(int(math.log(N // 10, 5)))"
                ],
                "5": [
                    "five += N//(10*5**(i+1))"
                ],
                "6": [
                    "print(five)",
                    "124999999999999995"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 12\n    (N % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    five = N//10\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(int(math.log(N // 10, 5)))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    five += N//(10*5**(i+1))\nNext:\n    Go to Block: 4\n\nBlock 6:\nStatement:\n    print(five)\n    124999999999999995\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02836": {
        "s379144371": {
            "code": "s = deque(['r', 'e', 'd', 'c', 'o', 'd', 'e', 'r'])\ncnt = 0\nwhile 1 <= len(s):\n    r = s.pop()\n    l = s.popleft()\n    if r != l:\n        cnt += 1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                3,
                4,
                5,
                6,
                3,
                4,
                5,
                6,
                3,
                4,
                5,
                6,
                7,
                3,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = deque(['r', 'e', 'd', 'c', 'o', 'd', 'e', 'r'])",
                    "cnt = 0"
                ],
                "2": [
                    "while 1 <= len(s):"
                ],
                "3": [
                    "r = s.pop()",
                    "l = s.popleft()",
                    "(r != l)"
                ],
                "4": [
                    "cnt += 1"
                ],
                "5": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = deque(['r', 'e', 'd', 'c', 'o', 'd', 'e', 'r'])\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while 1 <= len(s):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    r = s.pop()\n    l = s.popleft()\n    (r != l)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s161823099": {
            "code": "S = 'redcoder'\nprint(sum(np.array(list(S[int(len(S) / 2) + 1:])) != np.array(list(S[:int(len(S) / 2)][::-1]))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'bool' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'redcoder'",
                    "print(sum(np.array(list(S[int(len(S)/2)+1:]))!=np.array(list(S[:int(len(S)/2)][::-1]))))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'redcoder'\n    print(sum(np.array(list(S[int(len(S)/2)+1:]))!=np.array(list(S[:int(len(S)/2)][::-1]))))\nNext:\n    <END>\n"
        },
        "s525709838": {
            "code": "S = 'redcoder'\ns = list(S)\ncount = 0\nN = math.ceil(len(s) / 2)\nfor i in N:\n    if not s[i] == s[N - i - 1]:\n        count += 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'redcoder'",
                    "s = list(S)",
                    "count=0",
                    "N=math.ceil(len(s)/2)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> N"
                ],
                "3": [
                    "(not s[i] == s[N - i - 1])"
                ],
                "4": [
                    "count+=1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'redcoder'\n    s = list(S)\n    count=0\n    N=math.ceil(len(s)/2)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> N\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (not s[i] == s[N - i - 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p02838": {
        "s923792390": {
            "code": "N = 3\nA = [1, 2, 3]\nans = 0\nfor i in range(N - 1):\n    B = np.full(len(A) - i - 1, A[i])\n    C = np.bitwise_xor(A[i + 1:], B)\n    ans += np.sum(C)\nprint(ans % (10 ** 9 + 7))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [1, 2, 3]",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "B=np.full(len(A)-i-1,A[i])",
                    "C=np.bitwise_xor(A[i+1:],B)",
                    "ans+=np.sum(C)"
                ],
                "4": [
                    "print(ans%(10**9+7))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 2, 3]\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    B=np.full(len(A)-i-1,A[i])\n    C=np.bitwise_xor(A[i+1:],B)\n    ans+=np.sum(C)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans%(10**9+7))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s682697181": {
            "code": "a = 3\nn = [1, 2, 3]\nmod = 10 ** 9 + 7\na = np.array(a)\nmd = len(bin(max(a)))\nans = 0\nfor d in range(md):\n    cnt1 = np.count_nonzero(a >> d & 1)\n    ans += cnt1 * (n - cnt1) * (1 << d)\n    ans %= mod\nprint(ans % mod)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "[1, 2, 3]"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7fd234bec5d0>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('iteration over a 0-d array')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 3",
                    "n = [1, 2, 3]",
                    "mod=10**9+7",
                    "a=np.array(a)",
                    "md = len(bin(max(a)))",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> d, Iterate Over -> range(md)"
                ],
                "3": [
                    "cnt1 = np.count_nonzero((a>>d)&1)",
                    "ans += cnt1 * (n-cnt1) * (1<<d)",
                    "ans %= mod"
                ],
                "4": [
                    "print(ans%mod)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 3\n    n = [1, 2, 3]\n    mod=10**9+7\n    a=np.array(a)\n    md = len(bin(max(a)))\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> d, Iterate Over -> range(md)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cnt1 = np.count_nonzero((a>>d)&1)\n    ans += cnt1 * (n-cnt1) * (1<<d)\n    ans %= mod\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans%mod)\nNext:\n    <END>\n"
        },
        "s435025898": {
            "code": "mod = 10 ** 9 + 7\nN = 3\nA = [1, 2, 3]\nA = np.array(A, dtype=np.int64)\ntmp = 0\nfor i in range(61):\n    tmp_1 = np.count_nonzero\n    tmp += tmp_1 * (N - tmp_1) * 2 ** i % mod\n    A = A >> 1\nprint(tmp % mod)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'function'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "mod = 10**9+7",
                    "N = 3",
                    "A = [1, 2, 3]",
                    "A = np.array(A, dtype = np.int64)",
                    "tmp = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(61)"
                ],
                "3": [
                    "tmp_1 = np.count_nonzero",
                    "tmp += ((tmp_1)*(N - tmp_1)*(2**i)) % mod",
                    "A = A >> 1"
                ],
                "4": [
                    "print(tmp % mod)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    mod = 10**9+7\n    N = 3\n    A = [1, 2, 3]\n    A = np.array(A, dtype = np.int64)\n    tmp = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(61)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    tmp_1 = np.count_nonzero\n    tmp += ((tmp_1)*(N - tmp_1)*(2**i)) % mod\n    A = A >> 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(tmp % mod)\nNext:\n    <END>\n"
        }
    },
    "p02842": {
        "s969832167": {
            "code": "n = 432\nx = math.ceil(n / 1.08)\nif n == math.floor(x * 1.08):\n    print(x)\nelse:\n    prtnt(':(')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 432",
                    "x = math.ceil(n / 1.08)",
                    "(n == math.floor(x * 1.08))"
                ],
                "2": [
                    "print(x)"
                ],
                "3": [
                    "prtnt(\":(\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 432\n    x = math.ceil(n / 1.08)\n    (n == math.floor(x * 1.08))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(x)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    prtnt(\":(\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s608069404": {
            "code": "N = 432.0\na = math.ceil(N / 1.08)\nfor i in range(a, N):\n    if math.floot(i * 1.08) == N:\n        print(a)\n        break\n    else:\n        print(':(')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 432.0",
                    "a=math.ceil(N/(1.08))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(a, N)"
                ],
                "3": [
                    "(math.floot(i * 1.08) == N)"
                ],
                "4": [
                    "print(a)"
                ],
                "5": [
                    "print(':(')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 432.0\n    a=math.ceil(N/(1.08))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a, N)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (math.floot(i * 1.08) == N)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(a)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(':(')\nNext:\n    Go to Block: 2\n"
        },
        "s536303317": {
            "code": "N = '432'\nn = math.floor(N / 1.08)\nN1 = math.floor(1.08 * n)\nN2 = math.floor(1.08 * (n + 1))\nif N == N1 or N == N2:\n    print(n)\nelse:\n    print(':(')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '432'",
                    "n=math.floor(N/1.08)",
                    "N1=math.floor(1.08*n)",
                    "N2=math.floor(1.08*(n+1))",
                    "(N == N1 or N == N2)"
                ],
                "2": [
                    "print(n)"
                ],
                "3": [
                    "print(':(')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '432'\n    n=math.floor(N/1.08)\n    N1=math.floor(1.08*n)\n    N2=math.floor(1.08*(n+1))\n    (N == N1 or N == N2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(':(')\nNext:\n    <END>\n"
        },
        "s756585237": {
            "code": "n = 432\nif n == 0:\n    print(':(')\nelse:\n    for i in range(1, n):\n        if math.floor(Decimal(str(i)) * Decimal('1.08') + 1e-06) == n:\n            print(i)\n            break\n    else:\n        print(':(')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'decimal.Decimal' and 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 432",
                    "(n == 0)"
                ],
                "2": [
                    "print(':(')"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "4": [
                    "(math.floor(Decimal(str(i)) * Decimal('1.08') + 1e-06) == n)"
                ],
                "5": [
                    "print(i)"
                ],
                "6": [
                    "print(':(')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 432\n    (n == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (math.floor(Decimal(str(i)) * Decimal('1.08') + 1e-06) == n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    print(i)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(':(')\nNext:\n    <END>\n"
        },
        "s033471656": {
            "code": "N = 432.0\na = math.ceil(N / 1.08)\nfor i in range(a, N):\n    if math.floor(i * 1.08) == N:\n        print(a)\n        break\n    else:\n        print(':(')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 432.0",
                    "a=math.ceil(N/(1.08))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(a, N)"
                ],
                "3": [
                    "(math.floor(i * 1.08) == N)"
                ],
                "4": [
                    "print(a)"
                ],
                "5": [
                    "print(':(')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 432.0\n    a=math.ceil(N/(1.08))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a, N)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (math.floor(i * 1.08) == N)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(a)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(':(')\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02843": {
        "s062128650": {
            "code": "X = '615'\nif int(X) < 100:\n    print(0)\n    sys.exit(1)\ntmp = int(X[-2] + X[-1])\niteration = 0\nfor i in range(5, 0, -1):\n    iteration = tmp // i\n    tmp %= i\n    if tmp == 0:\n        break\nif iteration * 100 >= int(X):\n    print(1)\nelse:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "X = '615'",
                    "(int(X) < 100)"
                ],
                "2": [
                    "print(0)",
                    "sys.exit(1)"
                ],
                "3": [
                    "tmp = int(X[-2] + X[-1])",
                    "iteration = 0"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(5, 0, -1)"
                ],
                "5": [
                    "iteration = tmp // i",
                    "tmp %= i",
                    "(tmp == 0)"
                ],
                "6": [
                    "(iteration * 100 >= int(X))"
                ],
                "7": [
                    "print(1)"
                ],
                "8": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = '615'\n    (int(X) < 100)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    sys.exit(1)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    tmp = int(X[-2] + X[-1])\n    iteration = 0\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(5, 0, -1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    iteration = tmp // i\n    tmp %= i\n    (tmp == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    (iteration * 100 >= int(X))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(0)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02845": {
        "s573217752": {
            "code": "mod = 1000000007\nn = 6\nnums = [0, 1, 2, 3, 4, 5]\nn_colors = [0, 0, 0]\ncnt = 1\nfor x in nums:\n    cnt = cnt * collections.Counter(n_colors)[x] % mod\n    n_colors[n_colors.index(x)] += 1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "mod = 1000000007",
                    "n = 6",
                    "nums = [0, 1, 2, 3, 4, 5]",
                    "n_colors = [0, 0, 0]",
                    "cnt = 1"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> nums"
                ],
                "3": [
                    "cnt = (cnt * collections.Counter(n_colors)[x]) % mod",
                    "n_colors[n_colors.index(x)] += 1"
                ],
                "4": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    mod = 1000000007\n    n = 6\n    nums = [0, 1, 2, 3, 4, 5]\n    n_colors = [0, 0, 0]\n    cnt = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> nums\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cnt = (cnt * collections.Counter(n_colors)[x]) % mod\n    n_colors[n_colors.index(x)] += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02846": {
        "s469198719": {
            "code": "T = [1, 2]\nA = [10, 10]\nB = [12, 4]\nx = (A[0] - B[0]) * T[0]\ny = (B[0] - A[0]) * T[0] + (B[1] - A[1]) * T[1]\nif x < 0:\n    x *= -1\n    y *= -1\nans = -(-x // y) * 2 - 1\nif x % y == 0:\n    ans -= 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "T = [1, 2]",
                    "A = [10, 10]",
                    "B = [12, 4]",
                    "x = (A[0]-B[0])*T[0]",
                    "y = (B[0]-A[0])*T[0] + (B[1]-A[1])*T[1]",
                    "(x < 0)"
                ],
                "2": [
                    "x *= -1",
                    "y *= -1"
                ],
                "3": [
                    "ans = -(-x//y)*2-1",
                    "(x % y == 0)"
                ],
                "4": [
                    "ans -= 1"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    T = [1, 2]\n    A = [10, 10]\n    B = [12, 4]\n    x = (A[0]-B[0])*T[0]\n    y = (B[0]-A[0])*T[0] + (B[1]-A[1])*T[1]\n    (x < 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    x *= -1\n    y *= -1\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    ans = -(-x//y)*2-1\n    (x % y == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans -= 1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02847": {
        "s147428132": {
            "code": "input = sys.stdin.readline\nl = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\ns = 'SAT'\nprint(7 - l.index(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "l=[\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"]",
                    "s = 'SAT'",
                    "print(7-l.index(s))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    l=[\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"]\n    s = 'SAT'\n    print(7-l.index(s))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02848": {
        "s246669123": {
            "code": "N = 2\nS = ['A', 'B', 'C', 'X', 'Y', 'Z']\narray = string.ascii_uppercase\nfor I in S:\n    if array.index(I) + N <= 25:\n        print(array[array.index(I) + N], end='')\n    else:\n        print(array[array.index(I) + N - 25], end='')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                5,
                8,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "['A', 'B', 'C', 'X', 'Y', 'Z']"
                        },
                        {
                            "N": "2"
                        },
                        {
                            "array": "'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "S = ['A', 'B', 'C', 'X', 'Y', 'Z']",
                    "array = string.ascii_uppercase"
                ],
                "2": [
                    "iterator -> I, Iterate Over -> S"
                ],
                "3": [
                    "(array.index(I) + N <= 25)"
                ],
                "4": [
                    "print(array[array.index(I) + N],end='')"
                ],
                "5": [
                    "print(array[(array.index(I) + N) - 25],end='')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    S = ['A', 'B', 'C', 'X', 'Y', 'Z']\n    array = string.ascii_uppercase\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> I, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (array.index(I) + N <= 25)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(array[array.index(I) + N],end='')\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(array[(array.index(I) + N) - 25],end='')\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        }
    },
    "p02854": {
        "s143954291": {
            "code": "N = 3\nA = [2, 4, 3]\nsumA = sum(A)\nans = 0\nif sumA % 2 != 0:\n    ans += 1\ncumsum = np.cumsum(A)\nhalf = sumA // 2\nid = bisect.bisect_left(cumsum, half)\nmini = min(abs(half - cumsum[id]), abs(cumsum[id + 1] - half))\nans += mini\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [2, 4, 3]",
                    "sumA = sum(A)",
                    "ans = 0",
                    "(sumA % 2 != 0)"
                ],
                "2": [
                    "ans += 1"
                ],
                "3": [
                    "cumsum = np.cumsum(A)",
                    "half = sumA//2",
                    "id = bisect.bisect_left(cumsum,half)",
                    "mini = min(abs(half-cumsum[id]),abs(cumsum[id+1]-half))",
                    "ans += mini",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [2, 4, 3]\n    sumA = sum(A)\n    ans = 0\n    (sumA % 2 != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    cumsum = np.cumsum(A)\n    half = sumA//2\n    id = bisect.bisect_left(cumsum,half)\n    mini = min(abs(half-cumsum[id]),abs(cumsum[id+1]-half))\n    ans += mini\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s415212904": {
            "code": "N = 3\nA = [2, 4, 3]\nif A[:1] < A[1:]:\n    print(abs(A[1:] - A[:1]))\n    sys.exit()\nif A[:1] > A[1:]:\n    print(abs(A[:1] - A[1:]))\n    sys.exit()\nsep = N // 2\nfor i in range(N):\n    if sum(A[:sep]) >= sum(A[sep:]):\n        sep -= N // (i + 2) ** 2\n    else:\n        sep += N // (i + 2) ** 2\n    if N // (i + 2) ** 2 == 1:\n        break\na = abs(sum(A[:sep]) - sum(A[sep:]))\nb = abs(sum(A[:sep + 1]) - sum(A[sep + 1:]))\nc = abs(sum(A[:sep - 1]) - sum(A[sep - 1:]))\nprint(min(a, b, c, d, e))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                },
                "10": {
                    "range": [
                        14,
                        14
                    ]
                },
                "11": {
                    "range": [
                        15,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [2, 4, 3]",
                    "(A[:1] < A[1:])"
                ],
                "2": [
                    "print(abs(A[1:]-A[:1]))",
                    "sys.exit()"
                ],
                "3": [
                    "(A[:1] > A[1:])"
                ],
                "4": [
                    "print(abs(A[:1]-A[1:]))",
                    "sys.exit()"
                ],
                "5": [
                    "sep = N//2"
                ],
                "6": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "7": [
                    "(sum(A[:sep]) >= sum(A[sep:]))"
                ],
                "8": [
                    "sep -= N//((i+2)**2)"
                ],
                "9": [
                    "sep += N//((i+2)**2)"
                ],
                "10": [
                    "(N // (i + 2) ** 2 == 1)"
                ],
                "11": [
                    "a = abs(sum(A[:sep])-sum(A[sep:]))",
                    "b = abs(sum(A[:sep+1])-sum(A[sep+1:]))",
                    "c = abs(sum(A[:sep-1])-sum(A[sep-1:]))",
                    "print(min(a,b,c,d,e))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 11
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 6
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [2, 4, 3]\n    (A[:1] < A[1:])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(abs(A[1:]-A[:1]))\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (A[:1] > A[1:])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(abs(A[:1]-A[1:]))\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    sep = N//2\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 11\n\nBlock 7:\nStatement:\n    (sum(A[:sep]) >= sum(A[sep:]))\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    sep -= N//((i+2)**2)\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    sep += N//((i+2)**2)\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    (N // (i + 2) ** 2 == 1)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 6\n\nBlock 11:\nStatement:\n    a = abs(sum(A[:sep])-sum(A[sep:]))\n    b = abs(sum(A[:sep+1])-sum(A[sep+1:]))\n    c = abs(sum(A[:sep-1])-sum(A[sep-1:]))\n    print(min(a,b,c,d,e))\nNext:\n    <END>\n"
        }
    },
    "p02860": {
        "s556992522": {
            "code": "N = 6\nS = 'abcabc'\nif N == 1:\n    print('No')\n    exit()\nn = math.ceil(N / 2)\nj = True\nfor i in range(n):\n    if S[i] != S[i + n]:\n        j = False\nif j:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "S = 'abcabc'",
                    "(N == 1)"
                ],
                "2": [
                    "print('No')",
                    "exit()"
                ],
                "3": [
                    "n = math.ceil(N/2)",
                    "j = True"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "5": [
                    "(S[i] != S[i + n])"
                ],
                "6": [
                    "j = False"
                ],
                "7": [
                    "(j)"
                ],
                "8": [
                    "print('Yes')"
                ],
                "9": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 7
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    (N == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    n = math.ceil(N/2)\n    j = True\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    (S[i] != S[i + n])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    j = False\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    (j)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s402844391": {
            "code": "n = 6\ns = 'abcabc'\nif n == 1:\n    print('No')\n    sys.exit()\nn = n / 2\nif s[:n] == s[n:]:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "s = 'abcabc'",
                    "(n == 1)"
                ],
                "2": [
                    "print(\"No\")",
                    "sys.exit()"
                ],
                "3": [
                    "n = n / 2",
                    "(s[:n] == s[n:])"
                ],
                "4": [
                    "print(\"Yes\")"
                ],
                "5": [
                    "print (\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    s = 'abcabc'\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    n = n / 2\n    (s[:n] == s[n:])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print (\"No\")\nNext:\n    <END>\n"
        },
        "s002509633": {
            "code": "N = 6\nS = 'abcabc'\nif N == 1:\n    print('No')\n    exit()\nif N % 2 == 1:\n    print('No')\n    exit()\nn = N / 2\nj = True\nfor i in range(n):\n    if S[i] != S[i + n]:\n        j = False\nif j:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                },
                "10": {
                    "range": [
                        15,
                        15
                    ]
                },
                "11": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "S = 'abcabc'",
                    "(N == 1)"
                ],
                "2": [
                    "print('No')",
                    "exit()"
                ],
                "3": [
                    "(N % 2 == 1)"
                ],
                "4": [
                    "print('No')",
                    "exit()"
                ],
                "5": [
                    "n = (N/2)",
                    "j = True"
                ],
                "6": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "7": [
                    "(S[i] != S[i + n])"
                ],
                "8": [
                    "j = False"
                ],
                "9": [
                    "(j)"
                ],
                "10": [
                    "print('Yes')"
                ],
                "11": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 9
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 6
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    (N == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (N % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('No')\n    exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    n = (N/2)\n    j = True\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 9\n\nBlock 7:\nStatement:\n    (S[i] != S[i + n])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 6\n\nBlock 8:\nStatement:\n    j = False\nNext:\n    Go to Block: 6\n\nBlock 9:\nStatement:\n    (j)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p02862": {
        "s742151825": {
            "code": "xy = [3, 3]\nif (2 * xy[1] - xy[0]) % 3 == 0 and (2 * xy[0] - xy[1]) % 3 == 0:\n    a = (2 * xy[1] - xy[0]) // 3\n    b = (2 * xy[0] - xy[1]) // 3\n    ans = int(math.factorial(a + b) / (math.factorial(a) * math.factorial(b)))\n    print(int(ans / (10 ** 9 + 7)))\nelse:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "xy = [3, 3]",
                    "((2 * xy[1] - xy[0]) % 3 == 0 and (2 * xy[0] - xy[1]) % 3 == 0)"
                ],
                "2": [
                    "a = (2*xy[1]-xy[0]) // 3",
                    "b = (2*xy[0]-xy[1]) // 3",
                    "ans = int(math.factorial(a+b)/(math.factorial(a)*math.factorial(b)))",
                    "print(int(ans/(10**9 + 7)))"
                ],
                "3": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    xy = [3, 3]\n    ((2 * xy[1] - xy[0]) % 3 == 0 and (2 * xy[0] - xy[1]) % 3 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a = (2*xy[1]-xy[0]) // 3\n    b = (2*xy[0]-xy[1]) // 3\n    ans = int(math.factorial(a+b)/(math.factorial(a)*math.factorial(b)))\n    print(int(ans/(10**9 + 7)))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(0)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s947486285": {
            "code": "x = 3\ny = 3\nA = np.array([[1, 2], [2, 1]])\nb = np.array([x, y])\nsol_auto = np.linalg.solve(A, b)\nif sol_auto[0].is_integer() == True and sol_auto[1].is_integer() == True:\n    k = math.factorial(sol_auto[0] + sol_auto[1]) / (math.factorial(sol_auto[0]) * math.factorial(sol_auto[1]))\n    print(int(k % 1000000007))\nelse:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                2,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'numpy.float64' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = 3; y = 3",
                    "x = 3; y = 3",
                    "A = np.array([[1, 2],",
                    "b = np.array([x, y])",
                    "sol_auto = np.linalg.solve(A, b)",
                    "(sol_auto[0].is_integer() == True and sol_auto[1].is_integer() == True)"
                ],
                "2": [
                    "k = math.factorial(sol_auto[0]+sol_auto[1])/(math.factorial(sol_auto[0])*math.factorial(sol_auto[1]))",
                    "print(int(k%1000000007))"
                ],
                "3": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 3; y = 3\n    x = 3; y = 3\n    A = np.array([[1, 2],\n    b = np.array([x, y])\n    sol_auto = np.linalg.solve(A, b)\n    (sol_auto[0].is_integer() == True and sol_auto[1].is_integer() == True)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    k = math.factorial(sol_auto[0]+sol_auto[1])/(math.factorial(sol_auto[0])*math.factorial(sol_auto[1]))\n    print(int(k%1000000007))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(0)\nNext:\n    <END>\n"
        },
        "s398665729": {
            "code": "x = 3\ny = 3\nA = np.array([[1, 2], [2, 1]])\nb = np.array([x, y])\nsol_auto = np.linalg.solve(A, b)\nif sol_auto[0].is_integer() == True and sol_auto[1].is_integer() == True:\n    k = math.factorial(sol_auto[0] + sol_auto[1]) / (math.factorial(sol_auto[0]) * math.factorial(sol_auto[1]))\n    print(int(k % 1000000007))\nelse:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                2,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'numpy.float64' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = 3; y = 3",
                    "x = 3; y = 3",
                    "A = np.array([[1, 2],",
                    "b = np.array([x, y])",
                    "sol_auto = np.linalg.solve(A, b)",
                    "(sol_auto[0].is_integer() == True and sol_auto[1].is_integer() == True)"
                ],
                "2": [
                    "k = math.factorial(sol_auto[0]+sol_auto[1])/(math.factorial(sol_auto[0])*math.factorial(sol_auto[1]))",
                    "print(int(k%1000000007))"
                ],
                "3": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 3; y = 3\n    x = 3; y = 3\n    A = np.array([[1, 2],\n    b = np.array([x, y])\n    sol_auto = np.linalg.solve(A, b)\n    (sol_auto[0].is_integer() == True and sol_auto[1].is_integer() == True)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    k = math.factorial(sol_auto[0]+sol_auto[1])/(math.factorial(sol_auto[0])*math.factorial(sol_auto[1]))\n    print(int(k%1000000007))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(0)\nNext:\n    <END>\n"
        }
    },
    "p02866": {
        "s993458503": {
            "code": "N = 4\nD = [0, 1, 1, 2]\nD_sorted = sorted(D)\ncount_list = collections.Counter(D)\nif count_list[0] != 1:\n    print(0)\nelse:\n    prod = 1\n    for i in range(1, D_sorted[-1] + 1):\n        if count_list[i] == 0:\n            print(0)\n            break\n        prod *= count_list[i - 1] ** count_list[i]\nprint(prod % 998244353)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10,
                13,
                9,
                10,
                13,
                9,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "D = [0, 1, 1, 2]",
                    "D_sorted = sorted(D)",
                    "count_list = collections.Counter(D)",
                    "(count_list[0] != 1)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "prod = 1"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(1, D_sorted[-1] + 1)"
                ],
                "5": [
                    "(count_list[i] == 0)"
                ],
                "6": [
                    "print(0)"
                ],
                "7": [
                    "prod *= count_list[i - 1]**count_list[i]"
                ],
                "8": [
                    "print(prod % 998244353)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    D = [0, 1, 1, 2]\n    D_sorted = sorted(D)\n    count_list = collections.Counter(D)\n    (count_list[0] != 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    Go to Block: 8\n\nBlock 3:\nStatement:\n    prod = 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(1, D_sorted[-1] + 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (count_list[i] == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    prod *= count_list[i - 1]**count_list[i]\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    print(prod % 998244353)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s839580086": {
            "code": "N = 4\nDlist = [0, 1, 1, 2]\nDCounter = Counter(Dlist)\nif DCounter[0] == 1 and Dlist[0] == 0:\n    num = 1\n    mae = 1\n    for key, value in sorted(DCounter.items()[1:]):\n        num *= mae ** value\n        mae = value\n        num %= 998244353\n    print(num % 998244353)\nelse:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_items' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "Dlist = [0, 1, 1, 2]",
                    "DCounter = Counter(Dlist)",
                    "(DCounter[0] == 1 and Dlist[0] == 0)"
                ],
                "2": [
                    "num = 1",
                    "mae = 1"
                ],
                "3": [
                    "key <- index\n    value <- iterator"
                ],
                "4": [
                    "num *= (mae ** value)",
                    "mae = value",
                    "num %= 998244353"
                ],
                "5": [
                    "print(num % 998244353)"
                ],
                "6": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    Dlist = [0, 1, 1, 2]\n    DCounter = Counter(Dlist)\n    (DCounter[0] == 1 and Dlist[0] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 6\n\nBlock 2:\nStatement:\n    num = 1\n    mae = 1\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    key <- index\n    value <- iterator\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    num *= (mae ** value)\n    mae = value\n    num %= 998244353\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    print(num % 998244353)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    <END>\n"
        },
        "s645429049": {
            "code": "N = 4\nD = [0, 1, 1, 2]\nif D[0] != 0 or D[1] == 0:\n    print(0)\n    sys.exit()\nDD = collections.Counter(D)\nresult = 1\nfor i in range(N - 1) - 1:\n    if DD[i + 1] == 0:\n        print(0)\n        sys.exit()\n    result *= DD[i] ** DD[i + 1]\nprint(result % 998244353)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'range' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "D = [0, 1, 1, 2]",
                    "(D[0] != 0 or D[1] == 0)"
                ],
                "2": [
                    "print(0)",
                    "sys.exit()"
                ],
                "3": [
                    "DD = collections.Counter(D)",
                    "result = 1"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(N - 1) - 1"
                ],
                "5": [
                    "(DD[i + 1] == 0)"
                ],
                "6": [
                    "print(0)",
                    "sys.exit()"
                ],
                "7": [
                    "result *= DD[i] ** DD[i + 1]"
                ],
                "8": [
                    "print(result % 998244353)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    D = [0, 1, 1, 2]\n    (D[0] != 0 or D[1] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    DD = collections.Counter(D)\n    result = 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1) - 1\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (DD[i + 1] == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(0)\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    result *= DD[i] ** DD[i + 1]\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    print(result % 998244353)\nNext:\n    <END>\n"
        }
    },
    "p02873": {
        "s417335401": {
            "code": "sys.setrecursionlimit(10 ** 9)\nS = '<>>'\ns = list(S)\nx1 = 0\nx2 = 1\ny = 0\nfor i in range(len(s) - 1):\n    if s[i + 1] == s[i]:\n        x2 = x2 + 1\n    else:\n        if i == 0:\n            x2 = 0\n        if s[i] == '>':\n            if x2 < x1:\n                x2 = x2 - 1\n            else:\n                x1 = x1 - 1\n        y += x1 * (x1 + 1) / 2\n        x1 = x2\n        x2 = 1\nif s[i + 1] == '>':\n    if x2 < x1:\n        x2 = x2 - 1\n    else:\n        x1 = x1 - 1\ny += x1 * (x1 + 1) / 2\ny += x2 * (x2 + 1) / 2\nprint(int(y))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                },
                "10": {
                    "range": [
                        15,
                        15
                    ]
                },
                "11": {
                    "range": [
                        16,
                        18
                    ]
                },
                "12": {
                    "range": [
                        19,
                        19
                    ]
                },
                "13": {
                    "range": [
                        20,
                        20
                    ]
                },
                "14": {
                    "range": [
                        21,
                        21
                    ]
                },
                "15": {
                    "range": [
                        22,
                        22
                    ]
                },
                "16": {
                    "range": [
                        23,
                        25
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                11,
                12,
                13,
                18,
                19,
                20,
                7,
                8,
                9,
                7,
                21,
                22,
                25,
                26,
                27,
                28
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 16,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "sys.setrecursionlimit(10**9)",
                    "S = '<>>'",
                    "s=list(S)",
                    "x1=0",
                    "x2=1",
                    "y=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s) - 1)"
                ],
                "3": [
                    "(s[i + 1] == s[i])"
                ],
                "4": [
                    "x2=x2+1"
                ],
                "5": [
                    "(i == 0)"
                ],
                "6": [
                    "x2=0"
                ],
                "7": [
                    "(s[i] == '>')"
                ],
                "8": [
                    "(x2 < x1)"
                ],
                "9": [
                    "x2=x2-1"
                ],
                "10": [
                    "x1=x1-1"
                ],
                "11": [
                    "y+=x1*(x1+1)/2",
                    "x1=x2",
                    "x2=1"
                ],
                "12": [
                    "(s[i + 1] == '>')"
                ],
                "13": [
                    "(x2 < x1)"
                ],
                "14": [
                    "x2=x2-1"
                ],
                "15": [
                    "x1=x1-1"
                ],
                "16": [
                    "y+=x1*(x1+1)/2",
                    "y+=x2*(x2+1)/2",
                    "print(int(y))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 12
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 11
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 16
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 16
                },
                "15": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 16
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    sys.setrecursionlimit(10**9)\n    S = '<>>'\n    s=list(S)\n    x1=0\n    x2=1\n    y=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s) - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 12\n\nBlock 3:\nStatement:\n    (s[i + 1] == s[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    x2=x2+1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    x2=0\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (s[i] == '>')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    (x2 < x1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    x2=x2-1\nNext:\n    Go to Block: 11\n\nBlock 10:\nStatement:\n    x1=x1-1\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    y+=x1*(x1+1)/2\n    x1=x2\n    x2=1\nNext:\n    Go to Block: 2\n\nBlock 12:\nStatement:\n    (s[i + 1] == '>')\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 16\n\nBlock 13:\nStatement:\n    (x2 < x1)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    x2=x2-1\nNext:\n    Go to Block: 16\n\nBlock 15:\nStatement:\n    x1=x1-1\nNext:\n    Go to Block: 16\n\nBlock 16:\nStatement:\n    y+=x1*(x1+1)/2\n    y+=x2*(x2+1)/2\n    print(int(y))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02880": {
        "s004707743": {
            "code": "S = 10\ndivisors = sympy.divisors(S)\nn = len(divisors)\nfor i in range(n):\n    if S // divisors[i - 1] <= 9:\n        result = 'Yes'\n    else:\n        result = 'No'\nprint(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 10",
                    "divisors = sympy.divisors(S)",
                    "n = len(divisors)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(S // divisors[i - 1] <= 9)"
                ],
                "4": [
                    "result =\"Yes\""
                ],
                "5": [
                    "result =\"No\""
                ],
                "6": [
                    "print(result)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 10\n    divisors = sympy.divisors(S)\n    n = len(divisors)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (S // divisors[i - 1] <= 9)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    result =\"Yes\"\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    result =\"No\"\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(result)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s718357419": {
            "code": "n = '10'\nif n <= 81:\n    m = int(math.sqrt(n))\n    while True:\n        if n % m == 0:\n            print('Yes')\n            break\n        else:\n            m += 1\n            if m >= 10:\n                print('No')\n                break\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '10'",
                    "(n <= 81)"
                ],
                "2": [
                    "m = int(math.sqrt(n))"
                ],
                "3": [
                    "while True:"
                ],
                "4": [
                    "(n % m == 0)"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "m += 1",
                    "(m >= 10)"
                ],
                "7": [
                    "print(\"No\")"
                ],
                "8": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 8
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '10'\n    (n <= 81)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 8\n\nBlock 2:\nStatement:\n    m = int(math.sqrt(n))\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    (n % m == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    m += 1\n    (m >= 10)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 3\n\nBlock 7:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s547741974": {
            "code": "a = 10\nflag = False\ni = 0\nwhile i <= math.sqrt(a):\n    b = divmod(a)\n    if b[0] < 10 and b[1] == 0:\n        flag = True\n    else:\n        i += 1\nif flag:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('divmod expected 2 arguments, got 1')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 10",
                    "flag = False",
                    "i = 0"
                ],
                "2": [
                    "while i <= math.sqrt(a):"
                ],
                "3": [
                    "b = divmod(a)",
                    "(b[0] < 10 and b[1] == 0)"
                ],
                "4": [
                    "flag = True"
                ],
                "5": [
                    "i+=1"
                ],
                "6": [
                    "(flag)"
                ],
                "7": [
                    "print(\"Yes\")"
                ],
                "8": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 10\n    flag = False\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i <= math.sqrt(a):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    b = divmod(a)\n    (b[0] < 10 and b[1] == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    flag = True\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (flag)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02881": {
        "s107709393": {
            "code": "N = 10\nM = []\nsqr_N = math.floor(math.sqrt(N))\nfor i in range(sqr_N):\n    if i == 0:\n        continue\n    elif N % i == 0:\n        M.append(i)\nANS = max(M) - 1 + (N / max(M) - 1)\nprint(int(ANS))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                7,
                8,
                4,
                5,
                7,
                8,
                4,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "M = []",
                    "sqr_N = math.floor(math.sqrt(N))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(sqr_N)"
                ],
                "3": [
                    "(i == 0)"
                ],
                "4": [
                    "(N % i == 0)"
                ],
                "5": [
                    "M.append(i)"
                ],
                "6": [
                    "ANS = (max(M) - 1) + ((N / max(M)) - 1)",
                    "print(int(ANS))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    M = []\n    sqr_N = math.floor(math.sqrt(N))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(sqr_N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (N % i == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    M.append(i)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    ANS = (max(M) - 1) + ((N / max(M)) - 1)\n    print(int(ANS))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s732910481": {
            "code": "n = 10\nt = int(math.sqrt(n))\nans = 0\nfor i in reversed(range(t)):\n    if n % i == 0:\n        ans = n // i + i\n        break\nprint(ans - 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "t = int(math.sqrt(n))",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> reversed(range(t))"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "ans = n//i+i"
                ],
                "5": [
                    "print(ans-2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    t = int(math.sqrt(n))\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> reversed(range(t))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans = n//i+i\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(ans-2)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s592367861": {
            "code": "N = 10\nheap = []\nheapify(heap)\nfor i in range(1, int(N ** 0.5)):\n    if N % i == 0:\n        heappush(heap, i - 1 + N // i - 1)\nprint(heappop(heap))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "heap = []",
                    "heapify(heap)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, int(N ** 0.5))"
                ],
                "3": [
                    "(N % i == 0)"
                ],
                "4": [
                    "heappush(heap, i - 1 + N // i - 1)"
                ],
                "5": [
                    "print(heappop(heap))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    heap = []\n    heapify(heap)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, int(N ** 0.5))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    heappush(heap, i - 1 + N // i - 1)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(heappop(heap))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s349262883": {
            "code": "n = 10\na = []\nm = math.floor(a ** (1 / 2))\nfor i in range(1, m + 1):\n    if n % i == 0:\n        a.append(i + n / i - 2)\nprint(int(min(a)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'list' and 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "a = []",
                    "m = math.floor(a**(1/2))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, m + 1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "a.append(i + (n/i) - 2)"
                ],
                "5": [
                    "print(int(min(a)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    a = []\n    m = math.floor(a**(1/2))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, m + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a.append(i + (n/i) - 2)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(int(min(a)))\nNext:\n    <END>\n"
        },
        "s041952716": {
            "code": "n = 10\nans = 10 ** 7\nfor i in range(1, math.sqrt(n) + 1):\n    if n % i != 0:\n        continue\n    j = n / i\n    ans = min(ans, i + j - 2)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "ans  = 10 ** 7"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, math.sqrt(n) + 1)"
                ],
                "3": [
                    "(n % i != 0)"
                ],
                "4": [
                    "j = n/i",
                    "ans = min(ans, i+j-2)"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    ans  = 10 ** 7\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, math.sqrt(n) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n % i != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    j = n/i\n    ans = min(ans, i+j-2)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s391195338": {
            "code": "n = 10\nl = np.empty(n)\nl = np.nan\nk = 0\ni = 1\nwhile i <= n ** 0.5:\n    if n % i == 0:\n        l[k] = i + n / i - 2\n    i += 1\nprint(int(np.nanmin(l)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "l = np.empty(n)",
                    "l = np.nan",
                    "k = 0",
                    "i = 1"
                ],
                "2": [
                    "while i <= n ** 0.5:"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "l[k] = i + (n / i) - 2"
                ],
                "5": [
                    "i += 1"
                ],
                "6": [
                    "print(int(np.nanmin(l)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    l = np.empty(n)\n    l = np.nan\n    k = 0\n    i = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i <= n ** 0.5:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    l[k] = i + (n / i) - 2\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    i += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(int(np.nanmin(l)))\nNext:\n    <END>\n"
        },
        "s438153342": {
            "code": "N = 10\nsn = math.sqrt(N) // 1\na = 0\nfor i in range(1, sn + 1):\n    if N % i == 0:\n        a = i\n        break\nprint(int(a + N / a - 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "sn = math.sqrt(N) // 1",
                    "a = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, sn + 1)"
                ],
                "3": [
                    "(N % i == 0)"
                ],
                "4": [
                    "a = i"
                ],
                "5": [
                    "print(int(a + (N / a) - 2))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    sn = math.sqrt(N) // 1\n    a = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, sn + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a = i\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(int(a + (N / a) - 2))\nNext:\n    <END>\n"
        },
        "s754009136": {
            "code": "N = 10\nsn = math.sqrt(N) // 1\ni = 0\nfor i in range(1, sn + 1):\n    if N % i == 0:\n        break\nprint(int(i + N / i - 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "sn = math.sqrt(N) // 1",
                    "i = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, sn + 1)"
                ],
                "3": [
                    "(N % i == 0)"
                ],
                "4": [
                    "print(int(i + (N / i) - 2))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    sn = math.sqrt(N) // 1\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, sn + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    (N % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(int(i + (N / i) - 2))\nNext:\n    <END>\n"
        },
        "s557068327": {
            "code": "N = 10\nk = int(math.sqrt(N))\nfor i in range(1, k)[-1]:\n    if N % i == 0:\n        print(int(N % i) + i)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "k = int(math.sqrt(N))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, k)[-1]"
                ],
                "3": [
                    "(N % i == 0)"
                ],
                "4": [
                    "print(int(N%i)+i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    k = int(math.sqrt(N))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, k)[-1]\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (N % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(int(N%i)+i)\nNext:\n    Go to Block: 2\n"
        },
        "s011961266": {
            "code": "n = '10'\nfor i in range(sqrt(n), 0, -1):\n    if n % i == 0:\n        j = n // i\n        pirnt(i + j - 2)\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('must be real number, not str')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '10'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(sqrt(n), 0, -1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "j=n//i",
                    "pirnt(i+j-2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '10'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(sqrt(n), 0, -1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    j=n//i\n    pirnt(i+j-2)\nNext:\n    <END>\n"
        },
        "s388198554": {
            "code": "n = 10\nm = np.floor(np.sqrt(n))\nl = []\nfor i in range(1, m + 1, 1):\n    if n % i == 0:\n        a = i + n / i\n        l.append(a)\nc = int(min(l))\nprint(c - 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'numpy.float64' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "m=np.floor(np.sqrt(n))",
                    "l=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, m + 1, 1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "a=i+(n/i)",
                    "l.append(a)"
                ],
                "5": [
                    "c=int(min(l))",
                    "print(c-2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    m=np.floor(np.sqrt(n))\n    l=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, m + 1, 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a=i+(n/i)\n    l.append(a)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    c=int(min(l))\n    print(c-2)\nNext:\n    <END>\n"
        },
        "s307850900": {
            "code": "N = 10\nans = N - 1\nfor i in range(1, math.sqrt(N) + 1):\n    if N % i == 0:\n        ans = min(ans, i + N / i - 2)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "ans = N-1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, math.sqrt(N) + 1)"
                ],
                "3": [
                    "(N % i == 0)"
                ],
                "4": [
                    "ans = min(ans, i+(N/i)-2)"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    ans = N-1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, math.sqrt(N) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans = min(ans, i+(N/i)-2)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s807489822": {
            "code": "n = 10\nfor i in range(sqrt(n), 0, -1):\n    if n % i == 0:\n        j = n // i\n        pirnt(i + j - 2)\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(sqrt(n), 0, -1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "j=n//i",
                    "pirnt(i+j-2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(sqrt(n), 0, -1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    j=n//i\n    pirnt(i+j-2)\nNext:\n    <END>\n"
        }
    },
    "p02882": {
        "s143366394": {
            "code": "data = [2, 2, 4]\na = data[0]\nb = data[1]\nx = data[2]\nc = a * a * b / 2\nd = a * a * b - x\nif x > c:\n    e = d / a * 2 / a\n    t = a / e\n    print(math.degrees(math.atan(t)))\nelse:\n    f = x / a * 2 / b\n    t = f / b\n    print(90 - math.degrees(math.atan(t)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        10
                    ]
                },
                "3": {
                    "range": [
                        11,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                12,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "data = [2, 2, 4]",
                    "a = data[0]",
                    "b = data[1]",
                    "x = data[2]",
                    "c = a*a*b/2",
                    "d = a*a*b-x",
                    "(x > c)"
                ],
                "2": [
                    "e = ((d/a)*2)/a",
                    "t = a/e",
                    "print(math.degrees(math.atan(t)))"
                ],
                "3": [
                    "f = ((x/a)*2)/b",
                    "t = f/b",
                    "print(90-math.degrees(math.atan(t)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    data = [2, 2, 4]\n    a = data[0]\n    b = data[1]\n    x = data[2]\n    c = a*a*b/2\n    d = a*a*b-x\n    (x > c)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    e = ((d/a)*2)/a\n    t = a/e\n    print(math.degrees(math.atan(t)))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    f = ((x/a)*2)/b\n    t = f/b\n    print(90-math.degrees(math.atan(t)))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02886": {
        "s504374255": {
            "code": "N = 3\nd = [3, 1, 2]\nans = 0\nfor i, j in combinations(d, 2):\n    ans += d[i - 1] * d[j - 1]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "8"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "8"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "11"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "11"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "ans": "11"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "d = [3, 1, 2]",
                    "ans = 0"
                ],
                "2": [
                    "i <- index\n    j <- iterator"
                ],
                "3": [
                    "ans += d[i-1]*d[j-1]"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    d = [3, 1, 2]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    j <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += d[i-1]*d[j-1]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s868583277": {
            "code": "N = 3\nd = [3, 1, 2]\nans = 0\nfor i, j in combinations(N, 2):\n    ans += d[i] * d[j]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "d": "[3, 1, 2]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "d = [3, 1, 2]",
                    "ans = 0"
                ],
                "2": [
                    "i <- index\n    j <- iterator"
                ],
                "3": [
                    "ans += d[i]*d[j]"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    d = [3, 1, 2]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    j <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += d[i]*d[j]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02887": {
        "s392669474": {
            "code": "n = 10\ns = 'aabbbbaaca'\nif n == 1:\n    if s[0] == s[1]:\n        print(2)\n    else:\n        print(1)\n    sys.exit()\ncount = 0\ni = 0\nwhile i < n - 1:\n    if s[i] == s[i + 1]:\n        count = count + 1\n    i = i + 1\nans = n - count\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        13
                    ]
                },
                "11": {
                    "range": [
                        14,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                9,
                10,
                11,
                12,
                13,
                14,
                11,
                12,
                14,
                11,
                12,
                13,
                14,
                11,
                12,
                13,
                14,
                11,
                12,
                13,
                14,
                11,
                12,
                14,
                11,
                12,
                13,
                14,
                11,
                12,
                14,
                11,
                12,
                14,
                11,
                15,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "s = 'aabbbbaaca'",
                    "(n == 1)"
                ],
                "2": [
                    "(s[0] == s[1])"
                ],
                "3": [
                    "print(2)"
                ],
                "4": [
                    "print(1)"
                ],
                "5": [
                    "sys.exit()"
                ],
                "6": [
                    "count = 0",
                    "i = 0"
                ],
                "7": [
                    "while i < n - 1:"
                ],
                "8": [
                    "(s[i] == s[i + 1])"
                ],
                "9": [
                    "count = count + 1"
                ],
                "10": [
                    "i = i + 1"
                ],
                "11": [
                    "ans = n - count",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = 'aabbbbaaca'\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 6\n\nBlock 2:\nStatement:\n    (s[0] == s[1])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(2)\nNext:\n    Go to Block: 5\n\nBlock 4:\nStatement:\n    print(1)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    sys.exit()\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    count = 0\n    i = 0\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    while i < n - 1:\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    (s[i] == s[i + 1])\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    count = count + 1\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    i = i + 1\nNext:\n    Go to Block: 7\n\nBlock 11:\nStatement:\n    ans = n - count\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s517657625": {
            "code": "N = 10\nS = 'aabbbbaaca'\nG = groupby(S)\nprint(len(G))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'itertools.groupby' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "S = 'aabbbbaaca'",
                    "G = groupby(S)",
                    "print(len(G))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    S = 'aabbbbaaca'\n    G = groupby(S)\n    print(len(G))\nNext:\n    <END>\n"
        },
        "s331115237": {
            "code": "N = 10\nS = 'aabbbbaaca'\nprint(len(groupby(S)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'itertools.groupby' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "S = 'aabbbbaaca'",
                    "print(len(groupby(S)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    S = 'aabbbbaaca'\n    print(len(groupby(S)))\nNext:\n    <END>\n"
        },
        "s215480031": {
            "code": "N = 10\ns = 'aabbbbaaca'\nprint(len(groupby(s)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'itertools.groupby' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "s = 'aabbbbaaca'",
                    "print(len(groupby(s)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    s = 'aabbbbaaca'\n    print(len(groupby(s)))\nNext:\n    <END>\n"
        }
    },
    "p02888": {
        "s871302753": {
            "code": "n = 4\nl_ls = [int(i) for i in sys.stdin.readline().split()]\nl_ls.sort()\n_sum_ls = []\ncnt = 0\nfor combi in combinations(l_ls, 2):\n    _sum = combi[0] + combi[1]\n    ind = bisect.bisect_left(l_ls, _sum)\n    cnt += n - ind\nprint(int(math.factorial(n) / math.factorial(3) / math.factorial(n - 3)) - cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "3"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "2"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "2"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "4"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "3"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "4"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "3"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "5"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "4"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "5"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "4"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "5"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "4"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "5"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "4"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "6"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "4"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "6"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "4"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "7"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "4"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l_ls": "[1, 2, 3, 4]"
                        },
                        {
                            "_sum": "7"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "ind": "4"
                        },
                        {
                            "_sum_ls": "[]"
                        },
                        {
                            "cnt": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "l_ls = [int(i) for i in sys.stdin.readline().split()]",
                    "l_ls.sort()",
                    "_sum_ls = []",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> combi, Iterate Over -> combinations(l_ls, 2)"
                ],
                "3": [
                    "_sum = combi[0] + combi[1]",
                    "ind = bisect.bisect_left(l_ls, _sum)",
                    "cnt += n - ind"
                ],
                "4": [
                    "print(int(math.factorial(n) / math.factorial(3) / math.factorial(n-3)) - cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    l_ls = [int(i) for i in sys.stdin.readline().split()]\n    l_ls.sort()\n    _sum_ls = []\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> combi, Iterate Over -> combinations(l_ls, 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    _sum = combi[0] + combi[1]\n    ind = bisect.bisect_left(l_ls, _sum)\n    cnt += n - ind\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(int(math.factorial(n) / math.factorial(3) / math.factorial(n-3)) - cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s054996395": {
            "code": "n = 4\na = [3, 4, 2, 1]\ns = itertools.permutations(n, 3)\ncount = 0\nfor i in range(len(s)):\n    r = [a[s[0]], a[s[1]], a[s[2]]]\n    if sum(r) - max(r) >= max(r):\n        count += 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [3, 4, 2, 1]",
                    "s = itertools.permutations(n,3)",
                    "count = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s))"
                ],
                "3": [
                    "r = [a[s[0]],a[s[1]],a[s[2]]]",
                    "(sum(r) - max(r) >= max(r))"
                ],
                "4": [
                    "count += 1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [3, 4, 2, 1]\n    s = itertools.permutations(n,3)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    r = [a[s[0]],a[s[1]],a[s[2]]]\n    (sum(r) - max(r) >= max(r))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        },
        "s769655749": {
            "code": "n = 4\nl = [3, 4, 2, 1]\nl.sort()\nans = 0\nfor i, j in itertools.combinations(len(n), 2):\n    t = l[i] + l[j]\n    idx = bisect_left(l, t)\n    ans += max(0, idx - j - 1)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "l = [3, 4, 2, 1]",
                    "l.sort()",
                    "ans = 0"
                ],
                "2": [
                    "i <- index\n    j <- iterator"
                ],
                "3": [
                    "t = l[i]+l[j]",
                    "idx = bisect_left(l, t)",
                    "ans += max(0, idx-j-1)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    l = [3, 4, 2, 1]\n    l.sort()\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    j <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    t = l[i]+l[j]\n    idx = bisect_left(l, t)\n    ans += max(0, idx-j-1)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s227589898": {
            "code": "n = 4\nl = [3, 4, 2, 1]\ncnt = 0\nfor bars in comb(l, 3, exact=True):\n    a, b, c = (bars[0], bars[1], bars[2])\n    if a < b + c and b < a + c and (c < b + a):\n        cnt += 1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "l = [3, 4, 2, 1]",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> bars, Iterate Over -> comb(l, 3, exact=True)"
                ],
                "3": [
                    "a, b, c = bars[0], bars[1], bars[2]",
                    "(a < b + c and b < a + c and (c < b + a))"
                ],
                "4": [
                    "cnt += 1"
                ],
                "5": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    l = [3, 4, 2, 1]\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> bars, Iterate Over -> comb(l, 3, exact=True)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    a, b, c = bars[0], bars[1], bars[2]\n    (a < b + c and b < a + c and (c < b + a))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        }
    },
    "p02891": {
        "s428893088": {
            "code": "S = 'issii'\nK = 2\nif len(S) == 1:\n    print(K // 2)\n    sys.exit()\nif len(S) == 2:\n    if S[0] == S[1]:\n        print(K)\n    else:\n        print('0')\n    sys.exit()\nolds = S[0]\nl = 1\nc = 0\nfirst = 1\nfor i in range(1, len(S)):\n    if olds == S[i]:\n        l += 1\n    else:\n        if first:\n            firstL = l\n            first = 0\n        c += l // 2\n        l = 1\n    olds = S[i]\n    if i == len(S) - 1:\n        lastL = l\n        c += l // 2\nif S[0] == S[-1] and firstL % 2 == 1 and (lastL % 2 == 1):\n    print((c + 1) * K - 1)\nelse:\n    print(c * K)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                },
                "11": {
                    "range": [
                        17,
                        17
                    ]
                },
                "12": {
                    "range": [
                        18,
                        18
                    ]
                },
                "13": {
                    "range": [
                        19,
                        20
                    ]
                },
                "14": {
                    "range": [
                        21,
                        22
                    ]
                },
                "15": {
                    "range": [
                        23,
                        24
                    ]
                },
                "16": {
                    "range": [
                        25,
                        26
                    ]
                },
                "17": {
                    "range": [
                        27,
                        27
                    ]
                },
                "18": {
                    "range": [
                        28,
                        28
                    ]
                },
                "19": {
                    "range": [
                        29,
                        29
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                12,
                13,
                14,
                15,
                16,
                17,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                16,
                17,
                18,
                25,
                26,
                16,
                17,
                20,
                23,
                24,
                25,
                26,
                16,
                17,
                18,
                25,
                26,
                27,
                28,
                16,
                29,
                32
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 15,
                    "state": []
                },
                {
                    "block": 16,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                },
                {
                    "block": 19,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'issii'",
                    "K = 2",
                    "(len(S) == 1)"
                ],
                "2": [
                    "print(K//2)",
                    "sys.exit()"
                ],
                "3": [
                    "(len(S) == 2)"
                ],
                "4": [
                    "(S[0] == S[1])"
                ],
                "5": [
                    "print(K)"
                ],
                "6": [
                    "print('0')"
                ],
                "7": [
                    "sys.exit()"
                ],
                "8": [
                    "olds = S[0]",
                    "l = 1",
                    "c = 0",
                    "first = 1"
                ],
                "9": [
                    "iterator -> i, Iterate Over -> range(1, len(S))"
                ],
                "10": [
                    "(olds == S[i])"
                ],
                "11": [
                    "l += 1"
                ],
                "12": [
                    "(first)"
                ],
                "13": [
                    "firstL = l",
                    "first = 0"
                ],
                "14": [
                    "c += l//2",
                    "l = 1"
                ],
                "15": [
                    "olds = S[i]",
                    "(i == len(S) - 1)"
                ],
                "16": [
                    "lastL = l",
                    "c += l//2"
                ],
                "17": [
                    "(S[0] == S[-1] and firstL % 2 == 1 and (lastL % 2 == 1))"
                ],
                "18": [
                    "print((c+1)*K-1)"
                ],
                "19": [
                    "print(c*K)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 8
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 17
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": 9
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "16": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "17": {
                    "with_condition": {
                        "true": 18,
                        "false": 19
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'issii'\n    K = 2\n    (len(S) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(K//2)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (len(S) == 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 8\n\nBlock 4:\nStatement:\n    (S[0] == S[1])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(K)\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    print('0')\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    sys.exit()\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    olds = S[0]\n    l = 1\n    c = 0\n    first = 1\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    iterator -> i, Iterate Over -> range(1, len(S))\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 17\n\nBlock 10:\nStatement:\n    (olds == S[i])\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    l += 1\nNext:\n    Go to Block: 15\n\nBlock 12:\nStatement:\n    (first)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    firstL = l\n    first = 0\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    c += l//2\n    l = 1\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    olds = S[i]\n    (i == len(S) - 1)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 9\n\nBlock 16:\nStatement:\n    lastL = l\n    c += l//2\nNext:\n    Go to Block: 9\n\nBlock 17:\nStatement:\n    (S[0] == S[-1] and firstL % 2 == 1 and (lastL % 2 == 1))\nNext:\n    If True: Go to Block 18\n    If False: Go to Block 19\n\nBlock 18:\nStatement:\n    print((c+1)*K-1)\nNext:\n    <END>\n\nBlock 19:\nStatement:\n    print(c*K)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02897": {
        "s439939157": {
            "code": "n = 4\nif n % 2 == 1:\n    d = int((n - 1) / 2) + 1\nelse:\n    d = int(n / 2)\nans = d / n\nprint(f'{ans:.08f}')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "(n % 2 == 1)"
                ],
                "2": [
                    "d = int((n-1)/2) + 1"
                ],
                "3": [
                    "d = int(n/2)"
                ],
                "4": [
                    "ans = d/n",
                    "print(f'{ans:.08f}')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    d = int((n-1)/2) + 1\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    d = int(n/2)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    ans = d/n\n    print(f'{ans:.08f}')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s503229224": {
            "code": "n = '4'\nprint(ceil(n / 2) / n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '4'",
                    "print(ceil(n/2)/n)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '4'\n    print(ceil(n/2)/n)\nNext:\n    <END>\n"
        },
        "s065216355": {
            "code": "N = '4'\nif N % 2 == 0:\n    answer = 1.0 / 2\nelse:\n    answer = ((N - 1) / 2 + 1) / (N - 1) / 2\nprint(answer)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '4'",
                    "(N % 2 == 0)"
                ],
                "2": [
                    "answer = 1.0/2"
                ],
                "3": [
                    "answer = ((N-1)/2 + 1) /(N-1)/2"
                ],
                "4": [
                    "print(answer)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    answer = 1.0/2\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    answer = ((N-1)/2 + 1) /(N-1)/2\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(answer)\nNext:\n    <END>\n"
        }
    },
    "p02899": {
        "s193195541": {
            "code": "N = 3\nA = [2, 3, 1]\nB = A.copy()\nheapq.heapify(B)\nans = deque()\nfor i in range(N - 1):\n    ans.append(A.index(heapq.heappop(B)) + 1)\nprint(' '.join(map(str, list(ans) + [A.index(B[0]) + 1])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                6,
                7,
                6,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "[2, 3]"
                        },
                        {
                            "A": "[2, 3, 1]"
                        },
                        {
                            "ans": "deque([3])"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "[3]"
                        },
                        {
                            "A": "[2, 3, 1]"
                        },
                        {
                            "ans": "deque([3, 1])"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "[3]"
                        },
                        {
                            "A": "[2, 3, 1]"
                        },
                        {
                            "ans": "deque([3, 1])"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [2, 3, 1]",
                    "B = A.copy()",
                    "heapq.heapify(B)",
                    "ans = deque()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "ans.append(A.index(heapq.heappop(B)) + 1)"
                ],
                "4": [
                    "print(\" \".join(map(str, list(ans) + [A.index(B[0]) + 1])))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [2, 3, 1]\n    B = A.copy()\n    heapq.heapify(B)\n    ans = deque()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans.append(A.index(heapq.heappop(B)) + 1)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(\" \".join(map(str, list(ans) + [A.index(B[0]) + 1])))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s667684033": {
            "code": "n = 3\na = [2, 3, 1]\nnp_a = np.array(a)\na_idx = np.argsort(np_a)\nres = [str(1 + int(x)) for x in a_idx.tolist()]\nprint(' '.join(res))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [2, 3, 1]",
                    "np_a = np.array(a)",
                    "a_idx = np.argsort(np_a)",
                    "res = [str(1+int(x)) for x in a_idx.tolist()]",
                    "print(' '.join(res))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [2, 3, 1]\n    np_a = np.array(a)\n    a_idx = np.argsort(np_a)\n    res = [str(1+int(x)) for x in a_idx.tolist()]\n    print(' '.join(res))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s029529033": {
            "code": "N = 3\nA = [2, 3, 1]\ns = numpy.argsort(A)\nprint(' '.join(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, numpy.int64 found')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [2, 3, 1]",
                    "s=numpy.argsort(A)",
                    "print(' '.join(s))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [2, 3, 1]\n    s=numpy.argsort(A)\n    print(' '.join(s))\nNext:\n    <END>\n"
        },
        "s659007785": {
            "code": "n = 3\nan = list(map(int, sys.stdin.readline().split()))\nans = [0] * n\nfor i in range(n):\n    ans[an[i] - 1] = i + 1\nprint(' '.join(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "an = list(map(int, sys.stdin.readline().split()))",
                    "ans = [0]*n"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "ans[an[i]-1] = i+1"
                ],
                "4": [
                    "print(' '.join(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    an = list(map(int, sys.stdin.readline().split()))\n    ans = [0]*n\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans[an[i]-1] = i+1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(' '.join(ans))\nNext:\n    <END>\n"
        },
        "s288615174": {
            "code": "N = 3\nA = [2, 3, 1]\nls = [0] * N\nfor i in range(N):\n    ls[i] = A.index(i + 1)\nnp.add(ls + 1)\nprint(*ls)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate list (not \"int\") to list')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [2, 3, 1]",
                    "ls = [0]*N"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "ls[i] = A.index(i+1)"
                ],
                "4": [
                    "np.add(ls+1)",
                    "print(*ls)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [2, 3, 1]\n    ls = [0]*N\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ls[i] = A.index(i+1)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    np.add(ls+1)\n    print(*ls)\nNext:\n    <END>\n"
        }
    },
    "p02903": {
        "s684044367": {
            "code": "a = [3, 3, 1, 1]\nbb = np.ones((a[2], a[3]))\nbc = np.zeros((a[2], a[1] - a[3]))\ncb = np.zeros((a[0] - a[2], a[3]))\ncc = np.ones((a[0] - a[2], a[1] - a[3]))\nans = np.r_[np.c_[bb, bc], np.c_[cb, cc]]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = [3, 3, 1, 1]",
                    "bb = np.ones((a[2],a[3]))",
                    "bc = np.zeros((a[2],a[1]-a[3]))",
                    "cb = np.zeros((a[0]-a[2],a[3]))",
                    "cc = np.ones((a[0]-a[2],a[1]-a[3]))",
                    "ans = np.r_[np.c_[bb,bc],np.c_[cb,cc]]",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [3, 3, 1, 1]\n    bb = np.ones((a[2],a[3]))\n    bc = np.zeros((a[2],a[1]-a[3]))\n    cb = np.zeros((a[0]-a[2],a[3]))\n    cc = np.ones((a[0]-a[2],a[1]-a[3]))\n    ans = np.r_[np.c_[bb,bc],np.c_[cb,cc]]\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02909": {
        "s441763693": {
            "code": "w = 'Sunny'\nif w == 'Sunny':\n    print('Cloudy')\nelif w == 'Cloudy':\n    print('Rainy')\nelif W == 'Rainy':\n    print('Sunny')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "w = 'Sunny'",
                    "(w == 'Sunny')"
                ],
                "2": [
                    "print(\"Cloudy\")"
                ],
                "3": [
                    "(w == 'Cloudy')"
                ],
                "4": [
                    "print(\"Rainy\")"
                ],
                "5": [
                    "(W == 'Rainy')"
                ],
                "6": [
                    "print(\"Sunny\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    w = 'Sunny'\n    (w == 'Sunny')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Cloudy\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (w == 'Cloudy')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Rainy\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (W == 'Rainy')\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(\"Sunny\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s181599415": {
            "code": "status = 'Sunny'\nout = {'Sunny', 'Cloudy', 'Rainy'}\nif status == out[0]:\n    print(out[1])\nelif status == out[1]:\n    print(out[2])\nelif status == out[2]:\n    print(out[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'set' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "status = 'Sunny'",
                    "out = {\"Sunny\", \"Cloudy\", \"Rainy\"}",
                    "(status == out[0])"
                ],
                "2": [
                    "print(out[1])"
                ],
                "3": [
                    "(status == out[1])"
                ],
                "4": [
                    "print(out[2])"
                ],
                "5": [
                    "(status == out[2])"
                ],
                "6": [
                    "print(out[0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    status = 'Sunny'\n    out = {\"Sunny\", \"Cloudy\", \"Rainy\"}\n    (status == out[0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(out[1])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (status == out[1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(out[2])\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (status == out[2])\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(out[0])\nNext:\n    <END>\n"
        }
    },
    "p02910": {
        "s470423463": {
            "code": "step_strings = {'L': 0, 'U': 1, 'D': 2, 'R': 3}\nsteps = 'RUDLUDR'\nsteps = np.array([step_strings[s] for s in steps])\nsteps_index = (np.arange(steps.size) + 1) % 2\nif steps[steps_index == 0].max() < 3 and steps[steps_index == 1].min() > 0:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "step_strings = {'L': 0, 'U': 1, 'D': 2, 'R': 3}",
                    "steps = 'RUDLUDR'",
                    "steps = np.array([step_strings[s] for s in steps])",
                    "steps_index = (np.arange(steps.size) + 1) % 2",
                    "(steps[steps_index == 0].max() < 3 and steps[steps_index == 1].min() > 0)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    step_strings = {'L': 0, 'U': 1, 'D': 2, 'R': 3}\n    steps = 'RUDLUDR'\n    steps = np.array([step_strings[s] for s in steps])\n    steps_index = (np.arange(steps.size) + 1) % 2\n    (steps[steps_index == 0].max() < 3 and steps[steps_index == 1].min() > 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s246508419": {
            "code": "S = 'RUDLUDR'\nP = re.compile()\nif P.match(S):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"compile() missing 1 required positional argument: 'pattern'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'RUDLUDR'",
                    "P = re.compile()",
                    "(P.match(S))"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'RUDLUDR'\n    P = re.compile()\n    (P.match(S))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s733332310": {
            "code": "s = 'RUDLUDR'\nfor i in len(s):\n    if i % 2 == 0:\n        if s[i] == 'R':\n            print('No')\n            sys.exit()\n    elif s[i] == 'L':\n        print('No')\n        sys.exit()\nprint('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                },
                "5": {
                    "range": [
                        5,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'RUDLUDR'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> len(s)"
                ],
                "3": [
                    "(i % 2 == 0)"
                ],
                "4": [
                    "(s[i] == 'R')"
                ],
                "5": [
                    "print(\"No\")",
                    "sys.exit()"
                ],
                "6": [
                    "(s[i] == 'L')"
                ],
                "7": [
                    "print(\"No\")",
                    "sys.exit()"
                ],
                "8": [
                    "print(\"Yes\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 2
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'RUDLUDR'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (s[i] == 'R')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    print(\"No\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (s[i] == 'L')\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 2\n\nBlock 7:\nStatement:\n    print(\"No\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n"
        }
    },
    "p02912": {
        "s994650186": {
            "code": "i = [3, 3]\nitemCount = i[0]\ndiscountTicketsCount = i[1]\npriceList = [2, 13, 8]\npriceList = [n * -1 for n in priceList]\nheapq.heapify(priceList)\naaa = heapq.heappop(priceList)\nprint(aaa)\naaa = heapq.heappop(priceList)\nprint(aaa)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "i = [3, 3]",
                    "itemCount = i[0]",
                    "discountTicketsCount = i[1]",
                    "priceList = [2, 13, 8]",
                    "priceList = [ n * -1 for n in priceList]",
                    "heapq.heapify(priceList)",
                    "aaa = heapq.heappop(priceList)",
                    "print(aaa)",
                    "aaa = heapq.heappop(priceList)",
                    "print(aaa)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    i = [3, 3]\n    itemCount = i[0]\n    discountTicketsCount = i[1]\n    priceList = [2, 13, 8]\n    priceList = [ n * -1 for n in priceList]\n    heapq.heapify(priceList)\n    aaa = heapq.heappop(priceList)\n    print(aaa)\n    aaa = heapq.heappop(priceList)\n    print(aaa)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s369930107": {
            "code": "L1 = ['3', '3']\nL2 = ['2', '13', '8']\ntickets = int(L1[1])\nL2int = [-int(s) for s in L2]\nheapq.heapify(L2int)\nfor t in range(tickets):\n    heapq.heappush(L2int, heapq.heappop // 2)\nprint(-sum(L2int))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'builtin_function_or_method' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "L1 = ['3', '3']",
                    "L2 = ['2', '13', '8']",
                    "tickets = int(L1[1])",
                    "L2int = [-int(s) for s in L2]",
                    "heapq.heapify(L2int)"
                ],
                "2": [
                    "iterator -> t, Iterate Over -> range(tickets)"
                ],
                "3": [
                    "heapq.heappush(L2int,heapq.heappop//2)"
                ],
                "4": [
                    "print(-sum(L2int))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    L1 = ['3', '3']\n    L2 = ['2', '13', '8']\n    tickets = int(L1[1])\n    L2int = [-int(s) for s in L2]\n    heapq.heapify(L2int)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> t, Iterate Over -> range(tickets)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    heapq.heappush(L2int,heapq.heappop//2)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(-sum(L2int))\nNext:\n    <END>\n"
        }
    },
    "p02916": {
        "s037287638": {
            "code": "N = 3\nA = [3, 1, 2]\nB = [2, 5, 4]\nC = [3, 6]\nr = np.sum(B)\nfor i in range(N - 1):\n    if A[i] + 1 == A[i + 1]:\n        r += C[A[i]]\nprint(r)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                6,
                7,
                8,
                6,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [3, 1, 2]",
                    "B = [2, 5, 4]",
                    "C = [3, 6]",
                    "r = np.sum(B)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "(A[i] + 1 == A[i + 1])"
                ],
                "4": [
                    "r += C[A[i]]"
                ],
                "5": [
                    "print(r)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [3, 1, 2]\n    B = [2, 5, 4]\n    C = [3, 6]\n    r = np.sum(B)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (A[i] + 1 == A[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    r += C[A[i]]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(r)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02917": {
        "s294400968": {
            "code": "n = 3\nb = [2, 5]\nans = 0\nls = copy.copy(b)\nfor i in range(n - 1):\n    if b[i] == 0:\n        ls.remove(0)\n        if i + 1 < n - 1:\n            ls.remove(b[i + 1])\nif n == 2:\n    print(min(b) * 2)\nelse:\n    print(sum(ls) + min(ls))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                10,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "b = [2, 5]",
                    "ans = 0",
                    "ls = copy.copy(b)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n - 1)"
                ],
                "3": [
                    "(b[i] == 0)"
                ],
                "4": [
                    "ls.remove(0)",
                    "(i + 1 < n - 1)"
                ],
                "5": [
                    "ls.remove(b[i+1])"
                ],
                "6": [
                    "(n == 2)"
                ],
                "7": [
                    "print(min(b)*2)"
                ],
                "8": [
                    "print(sum(ls)+min(ls))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    b = [2, 5]\n    ans = 0\n    ls = copy.copy(b)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (b[i] == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ls.remove(0)\n    (i + 1 < n - 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    ls.remove(b[i+1])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (n == 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(min(b)*2)\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(sum(ls)+min(ls))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02922": {
        "s921504134": {
            "code": "S = '4 10'\nA = int(S[0])\nB = int(S[1:])\nn = math.ceil(B / A)\nprint(n, ' power strips, each with', A, 'sockets, extend the socket into', A * n, 'empty sockets.')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = '4 10'",
                    "A = int(S[0])",
                    "B = int(S[1:])",
                    "n = math.ceil(B/A)",
                    "print(n, \" power strips, each with\", A , \"sockets, extend the socket into\", A*n, \"empty sockets.\")"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '4 10'\n    A = int(S[0])\n    B = int(S[1:])\n    n = math.ceil(B/A)\n    print(n, \" power strips, each with\", A , \"sockets, extend the socket into\", A*n, \"empty sockets.\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02923": {
        "s241760220": {
            "code": "N = 5\nH = [10, 4, 8, 7, 3]\nDif = numpy.array([H[i] - H[i + 1] for i in range(N - 1)])\nDif = numpy.append(Dif, -1)\nS = list(numpy.where(Dif < 0)[0])\nT = [S[j + 1] - S[j] - 1 for j in range(len(S) - 1)]\nprint(max(T))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "H = [10, 4, 8, 7, 3]",
                    "Dif = numpy.array([(H[i] - H[i + 1]) for i in range(N - 1)])",
                    "Dif = numpy.append(Dif, -1)",
                    "S = list(numpy.where(Dif < 0)[0])",
                    "T = [S[j + 1] - S[j] - 1 for j in range(len(S) - 1)]",
                    "print(max(T))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    H = [10, 4, 8, 7, 3]\n    Dif = numpy.array([(H[i] - H[i + 1]) for i in range(N - 1)])\n    Dif = numpy.append(Dif, -1)\n    S = list(numpy.where(Dif < 0)[0])\n    T = [S[j + 1] - S[j] - 1 for j in range(len(S) - 1)]\n    print(max(T))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02924": {
        "s357704787": {
            "code": "n = 2\nplist = list(range(1, n + 1))\nqlist = list(range(2, n + 1))\nqlist.append(1)\nparray = np.array(plist)\nqarray = np.array(qlist)\nrarray = parray % qarray\nsm = rarray.sum()\nprint(sm)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "plist=list(range(1,n+1))",
                    "qlist=list(range(2,n+1))",
                    "qlist.append(1)",
                    "parray=np.array(plist)",
                    "qarray=np.array(qlist)",
                    "rarray=parray%qarray",
                    "sm=rarray.sum()",
                    "print(sm)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    plist=list(range(1,n+1))\n    qlist=list(range(2,n+1))\n    qlist.append(1)\n    parray=np.array(plist)\n    qarray=np.array(qlist)\n    rarray=parray%qarray\n    sm=rarray.sum()\n    print(sm)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s709774009": {
            "code": "n = 2\nprint(n(n - 1) // 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "print(n(n-1) //2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    print(n(n-1) //2)\nNext:\n    <END>\n"
        }
    },
    "p02928": {
        "s584812905": {
            "code": "tmp = [2, 2]\nn = tmp[0]\nk = tmp[1]\na = [2, 1]\nuni, co = np.unique(a, return_counts=True)\nind = [np.sum(co[:uni.tolist().index(i)]) for i in a]\nc = 0\na = np.array(a)\nfor i in range(len(a)):\n    c += np.sum(a[i:] < a[i])\nm = 10 ** 9 + 7\ntm = int(c) * int(k) % m\nif k % 2 == 0:\n    t = k * (k // 2 - 1) + k // 2\n    t %= m\nelse:\n    t = k * (k // 2)\n    t %= m\nprint((np.sum(ind) * t + tm) % m)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        13
                    ]
                },
                "5": {
                    "range": [
                        14,
                        15
                    ]
                },
                "6": {
                    "range": [
                        16,
                        17
                    ]
                },
                "7": {
                    "range": [
                        18,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                9,
                10,
                9,
                11,
                12,
                13,
                14,
                15,
                19
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "c": "0"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "c": "0"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "c": "<numpy.int64 object at 0x7ff5aa27d5b0>"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "c": "<numpy.int64 object at 0x7ff5aa27d5b0>"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "c": "<numpy.int64 object at 0x7ff5aa27e090>"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "c": "<numpy.int64 object at 0x7ff5aa27e090>"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "c": "<numpy.int64 object at 0x7ff5aa27e090>"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tm": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        },
                        {
                            "m": "1000000007"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "c": "<numpy.int64 object at 0x7ff5aa27e090>"
                        },
                        {
                            "t": "1"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tm": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        },
                        {
                            "m": "1000000007"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "c": "<numpy.int64 object at 0x7ff5aa27e090>"
                        },
                        {
                            "t": "1"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "ind": "[<numpy.int64 object at 0x7ff5abed4cd0>, <numpy.int64 object at 0x7ff5aa27e0f0>]"
                        },
                        {
                            "k": "2"
                        },
                        {
                            "tm": "2"
                        },
                        {
                            "tmp": "[2, 2]"
                        },
                        {
                            "uni": "<numpy.ndarray object at 0x7ff5abf53cf0>"
                        },
                        {
                            "a": "<numpy.ndarray object at 0x7ff5a9a43330>"
                        },
                        {
                            "co": "<numpy.ndarray object at 0x7ff5a9a8c1b0>"
                        },
                        {
                            "m": "1000000007"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "tmp = [2, 2]",
                    "n = tmp[0]",
                    "k = tmp[1]",
                    "a = [2, 1]",
                    "uni, co = np.unique(a, return_counts=True)",
                    "ind = [np.sum(co[:uni.tolist().index(i)]) for i in a]",
                    "c = 0",
                    "a = np.array(a)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(a))"
                ],
                "3": [
                    "c += np.sum(a[i:]<a[i])"
                ],
                "4": [
                    "m = 10**9+7",
                    "tm = int(c)*int(k) % m",
                    "(k % 2 == 0)"
                ],
                "5": [
                    "t = k * (k//2-1) + k//2",
                    "t %= m"
                ],
                "6": [
                    "t = k * (k//2)",
                    "t %= m"
                ],
                "7": [
                    "print((np.sum(ind)*t+tm) % m)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    tmp = [2, 2]\n    n = tmp[0]\n    k = tmp[1]\n    a = [2, 1]\n    uni, co = np.unique(a, return_counts=True)\n    ind = [np.sum(co[:uni.tolist().index(i)]) for i in a]\n    c = 0\n    a = np.array(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    c += np.sum(a[i:]<a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    m = 10**9+7\n    tm = int(c)*int(k) % m\n    (k % 2 == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    t = k * (k//2-1) + k//2\n    t %= m\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    t = k * (k//2)\n    t %= m\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print((np.sum(ind)*t+tm) % m)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02933": {
        "s287751789": {
            "code": "A = 3200\nS = 'pink'\nif A >= 3200:\n    print(S)\nelse:\n    print('red')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "A = 3200",
                    "S = 'pink'",
                    "(A >= 3200)"
                ],
                "2": [
                    "print(S)"
                ],
                "3": [
                    "print(\"red\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    A = 3200\n    S = 'pink'\n    (A >= 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"red\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02934": {
        "s627269441": {
            "code": "n = 2\narr = [10, 30]\nans = 0\nfor i in arr:\n    ans += fa(1, i)\nans = str(ans).split('/')\nprint(int(ans[1]) / int(ans[0]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "arr = [10, 30]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> arr"
                ],
                "3": [
                    "ans += fa(1,i)"
                ],
                "4": [
                    "ans = str(ans).split('/')",
                    "print(int(ans[1])/int(ans[0]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    arr = [10, 30]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> arr\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += fa(1,i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    ans = str(ans).split('/')\n    print(int(ans[1])/int(ans[0]))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s942048344": {
            "code": "n = 2\na = [10, 30]\nlcm = np.lcm.reduce(a)\nd = [0] * n\nfor i in range(n):\n    d[i] = lcm // a[i]\nprint(lcm / sum(d))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a = [10, 30]",
                    "lcm = np.lcm.reduce(a)",
                    "d = [0]*n"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "d[i] = lcm//a[i]"
                ],
                "4": [
                    "print(lcm/sum(d))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [10, 30]\n    lcm = np.lcm.reduce(a)\n    d = [0]*n\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    d[i] = lcm//a[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(lcm/sum(d))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s390657489": {
            "code": "input = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nN = 2\nA = [10, 30]\ns = 0\nfor i in A:\n    s += A ** (-1)\nprint(s ** (-1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "A": "[10, 30]"
                        },
                        {
                            "s": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f2ee1c63510>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "A": "[10, 30]"
                        },
                        {
                            "s": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f2ee1c63510>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "A": "[10, 30]"
                        },
                        {
                            "s": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f2ee1c63510>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input=sys.stdin.readline",
                    "sys.setrecursionlimit(10 ** 6)",
                    "N = 2",
                    "A = [10, 30]",
                    "s = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> A"
                ],
                "3": [
                    "s += A**(-1)"
                ],
                "4": [
                    "print(s**(-1))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input=sys.stdin.readline\n    sys.setrecursionlimit(10 ** 6)\n    N = 2\n    A = [10, 30]\n    s = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s += A**(-1)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(s**(-1))\nNext:\n    <END>\n"
        },
        "s430552485": {
            "code": "n = 2\narr = [10, 30]\nans = 0\nfor i in arr:\n    ans += fa(1, i)\nans = str(ans).split('/')\nprint(ans[1] / ans[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "arr = [10, 30]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> arr"
                ],
                "3": [
                    "ans += fa(1,i)"
                ],
                "4": [
                    "ans = str(ans).split('/')",
                    "print(ans[1]/ans[0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    arr = [10, 30]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> arr\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += fa(1,i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    ans = str(ans).split('/')\n    print(ans[1]/ans[0])\nNext:\n    <END>\n"
        }
    },
    "p02935": {
        "s762571258": {
            "code": "N = 2\nvn_list = ['3', '4']\nvn = np.array(vn_list, dtype='float')\nw = np.geomspace(1 / 2, 1 / 2 ** N, num=N)\nw[N - 1] = w[N - 2]\nresult = np.dot(vn, w)\nprint(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "vn_list = ['3', '4']",
                    "vn = np.array(vn_list, dtype=\"float\")",
                    "w = np.geomspace(1/2, 1/(2**N), num=N)",
                    "w[N-1] = w[N-2]",
                    "result = np.dot(vn, w)",
                    "print(result)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    vn_list = ['3', '4']\n    vn = np.array(vn_list, dtype=\"float\")\n    w = np.geomspace(1/2, 1/(2**N), num=N)\n    w[N-1] = w[N-2]\n    result = np.dot(vn, w)\n    print(result)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02937": {
        "s694931078": {
            "code": "s = 'contest'\nt = 'son'\nN = len(s)\nnext_map = sorted(zip(s * 2, range(N * 2)))\nbr = bisect.bisect_right\nans = 0\ni = 0\nfor c in t:\n    map_idx = br(next_map, (c, i))\n    if map_idx == N * 2:\n        ans = -2\n        break\n    a, j = next_map[map_idx]\n    if a != c:\n        ans = -2 / 0\n        break\n    ans += j - i\n    i = j % N\nans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        13
                    ]
                },
                "6": {
                    "range": [
                        14,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        16
                    ]
                },
                "8": {
                    "range": [
                        17,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                13,
                14,
                17,
                18,
                8,
                9,
                10,
                13,
                14,
                17,
                18,
                8,
                9,
                10,
                13,
                14,
                17,
                18,
                8,
                19,
                20
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'contest'",
                    "t = 'son'",
                    "N = len(s)",
                    "next_map = sorted(zip(s*2,range(N*2)))",
                    "br = bisect.bisect_right",
                    "ans = 0",
                    "i = 0"
                ],
                "2": [
                    "iterator -> c, Iterate Over -> t"
                ],
                "3": [
                    "map_idx = br(next_map,(c,i))",
                    "(map_idx == N * 2)"
                ],
                "4": [
                    "ans = -2"
                ],
                "5": [
                    "a,j = next_map[map_idx]",
                    "(a != c)"
                ],
                "6": [
                    "ans = -2/0"
                ],
                "7": [
                    "ans += j - i",
                    "i = j%N"
                ],
                "8": [
                    "ans += 1",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'contest'\n    t = 'son'\n    N = len(s)\n    next_map = sorted(zip(s*2,range(N*2)))\n    br = bisect.bisect_right\n    ans = 0\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> c, Iterate Over -> t\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    map_idx = br(next_map,(c,i))\n    (map_idx == N * 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans = -2\nNext:\n    Go to Block: 8\n\nBlock 5:\nStatement:\n    a,j = next_map[map_idx]\n    (a != c)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans = -2/0\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    ans += j - i\n    i = j%N\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    ans += 1\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02939": {
        "s096036271": {
            "code": "s = deque(['a', 'a', 'b', 'b', 'a', 'a'])\ncnt, i = (0, 0)\nl = len(s)\nwhile i < l:\n    if s[i] == s[i + 1]:\n        cnt += 1\n        i += 2\n    i += 1\nprint(l - cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                8,
                4,
                5,
                6,
                7,
                8,
                4,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = deque(['a', 'a', 'b', 'b', 'a', 'a'])",
                    "cnt, i = 0, 0",
                    "l = len(s)"
                ],
                "2": [
                    "while i < l:"
                ],
                "3": [
                    "(s[i] == s[i + 1])"
                ],
                "4": [
                    "cnt += 1",
                    "i += 2"
                ],
                "5": [
                    "i += 1"
                ],
                "6": [
                    "print(l-cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = deque(['a', 'a', 'b', 'b', 'a', 'a'])\n    cnt, i = 0, 0\n    l = len(s)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i < l:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] == s[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    cnt += 1\n    i += 2\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    i += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(l-cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s559524292": {
            "code": "s = deque(['a', 'a', 'b', 'b', 'a', 'a'])\ns.append(0)\nk = 0\nl = [s.popleft()]\nwhile True:\n    if s[0] == 0:\n        break\n    elif l[k] == s[0]:\n        l.append(s.popleft() + s.popleft())\n    else:\n        l.append(s.popleft())\n    k += 1\nprint(len(l))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                8,
                9,
                12,
                5,
                6,
                8,
                11,
                12,
                5,
                6,
                8,
                11,
                12,
                5,
                6,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = deque(['a', 'a', 'b', 'b', 'a', 'a'])",
                    "s.append(0)",
                    "k = 0",
                    "l = [s.popleft()]"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "(s[0] == 0)"
                ],
                "4": [
                    "(l[k] == s[0])"
                ],
                "5": [
                    "l.append(s.popleft()+s.popleft())"
                ],
                "6": [
                    "l.append(s.popleft())"
                ],
                "7": [
                    "k += 1"
                ],
                "8": [
                    "print(len(l))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 8,
                        "false": 4
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = deque(['a', 'a', 'b', 'b', 'a', 'a'])\n    s.append(0)\n    k = 0\n    l = [s.popleft()]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (s[0] == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (l[k] == s[0])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    l.append(s.popleft()+s.popleft())\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    l.append(s.popleft())\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    k += 1\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(len(l))\nNext:\n    <END>\n"
        }
    },
    "p02947": {
        "s666607260": {
            "code": "N = 3\ns = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\nc = Counter(s)\nkeys, values = zip(*c.most_common())\nans = 0\nn = 0\nfor i in range(len(values)):\n    if values[i] > 1:\n        n = values[i]\n        ans += factorial(n) / factorial(2) / factorial(n - 2)\nprint(int(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                7,
                8,
                7,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "values": "(2, 1)"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n": "0"
                        },
                        {
                            "keys": "('acinnorstt', 'abbemnoptu')"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "values": "(2, 1)"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n": "0"
                        },
                        {
                            "keys": "('acinnorstt', 'abbemnoptu')"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "values": "(2, 1)"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n": "0"
                        },
                        {
                            "keys": "('acinnorstt', 'abbemnoptu')"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "values": "(2, 1)"
                        },
                        {
                            "ans": "1.0"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "keys": "('acinnorstt', 'abbemnoptu')"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "values": "(2, 1)"
                        },
                        {
                            "ans": "1.0"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "keys": "('acinnorstt', 'abbemnoptu')"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "values": "(2, 1)"
                        },
                        {
                            "ans": "1.0"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "keys": "('acinnorstt', 'abbemnoptu')"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "values": "(2, 1)"
                        },
                        {
                            "ans": "1.0"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "keys": "('acinnorstt', 'abbemnoptu')"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "values": "(2, 1)"
                        },
                        {
                            "ans": "1.0"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "keys": "('acinnorstt', 'abbemnoptu')"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "c": "Counter({'acinnorstt': 2, 'abbemnoptu': 1})"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "s = ['acinnorstt', 'abbemnoptu', 'acinnorstt']",
                    "c = Counter(s)",
                    "keys, values = zip(*c.most_common())",
                    "ans = 0",
                    "n = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(values))"
                ],
                "3": [
                    "(values[i] > 1)"
                ],
                "4": [
                    "n = values[i]",
                    "ans += factorial(n) / factorial(2) / factorial(n - 2)"
                ],
                "5": [
                    "print(int(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    s = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\n    c = Counter(s)\n    keys, values = zip(*c.most_common())\n    ans = 0\n    n = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(values))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (values[i] > 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    n = values[i]\n    ans += factorial(n) / factorial(2) / factorial(n - 2)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(int(ans))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s403719281": {
            "code": "n = 3\nans = 0\ns = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\nc = collections.Counter(s)\nfor i in set(s):\n    a = c[s]\n    ans += a * (a - 1) // 2\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unhashable type: 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "ans=0",
                    "s = ['acinnorstt', 'abbemnoptu', 'acinnorstt']",
                    "c=collections.Counter(s)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> set(s)"
                ],
                "3": [
                    "a=c[s]",
                    "ans+=a*(a-1)//2"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    ans=0\n    s = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\n    c=collections.Counter(s)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> set(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a=c[s]\n    ans+=a*(a-1)//2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s640910885": {
            "code": "n = 3\nl = ['acornistnt', 'peanutbomb', 'constraint']\nans = 0\nfor k in itertools.combinations:\n    c1 = collections.Counter(k[0])\n    c2 = collections.Counter(k[1])\n    if c1.most_common() == c2.most_common():\n        ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'type' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "l = ['acornistnt', 'peanutbomb', 'constraint']",
                    "ans=0"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> itertools.combinations"
                ],
                "3": [
                    "c1=collections.Counter(k[0])",
                    "c2=collections.Counter(k[1])",
                    "(c1.most_common() == c2.most_common())"
                ],
                "4": [
                    "ans+=1"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    l = ['acornistnt', 'peanutbomb', 'constraint']\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> itertools.combinations\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    c1=collections.Counter(k[0])\n    c2=collections.Counter(k[1])\n    (c1.most_common() == c2.most_common())\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s879099582": {
            "code": "n = 3\nstring_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]\nstring_set = set(string_list)\ncnt = 0\nfor s in string_set:\n    n = string_list.count(s)\n    cnt += int(n * (n - 1) / 2)\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unhashable type: 'Counter'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "string_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]",
                    "string_set=set(string_list)",
                    "cnt=0"
                ],
                "2": [
                    "iterator -> s, Iterate Over -> string_set"
                ],
                "3": [
                    "n=string_list.count(s)",
                    "cnt+=int(n*(n-1)/2)"
                ],
                "4": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    string_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]\n    string_set=set(string_list)\n    cnt=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> string_set\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n=string_list.count(s)\n    cnt+=int(n*(n-1)/2)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        }
    },
    "p02952": {
        "s966971954": {
            "code": "N = 11\ni = 0\nwhile 10 ** i < N:\n    i = i + 1\nif i == 1:\n    num = N\nelif i == 2:\n    num = 9\nelif i == 3:\n    num = 9 + N - 99\nelif i == 4:\n    num = 9 + 999 - 99\nelif i == 5:\n    num = 9 + 900 + N - 10000\nprint(num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        9
                    ]
                },
                "9": {
                    "range": [
                        10,
                        10
                    ]
                },
                "10": {
                    "range": [
                        11,
                        11
                    ]
                },
                "11": {
                    "range": [
                        12,
                        12
                    ]
                },
                "12": {
                    "range": [
                        13,
                        13
                    ]
                },
                "13": {
                    "range": [
                        14,
                        14
                    ]
                },
                "14": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                5,
                7,
                8,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 11",
                    "i=0"
                ],
                "2": [
                    "while 10**i<N:"
                ],
                "3": [
                    "i=i+1"
                ],
                "4": [
                    "(i == 1)"
                ],
                "5": [
                    "num=N"
                ],
                "6": [
                    "(i == 2)"
                ],
                "7": [
                    "num=9"
                ],
                "8": [
                    "(i == 3)"
                ],
                "9": [
                    "num=9+N-99"
                ],
                "10": [
                    "(i == 4)"
                ],
                "11": [
                    "num=9+999-99"
                ],
                "12": [
                    "(i == 5)"
                ],
                "13": [
                    "num=9+900+N-10000"
                ],
                "14": [
                    "print(num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 11\n    i=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while 10**i<N:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    i=i+1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (i == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    num=N\nNext:\n    Go to Block: 14\n\nBlock 6:\nStatement:\n    (i == 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    num=9\nNext:\n    Go to Block: 14\n\nBlock 8:\nStatement:\n    (i == 3)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    num=9+N-99\nNext:\n    Go to Block: 14\n\nBlock 10:\nStatement:\n    (i == 4)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    num=9+999-99\nNext:\n    Go to Block: 14\n\nBlock 12:\nStatement:\n    (i == 5)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    num=9+900+N-10000\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    print(num)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s413577133": {
            "code": "n = 11\nans = 0\nfor i in range(n):\n    if len(i) % 2 == 1:\n        ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 11",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(len(i) % 2 == 1)"
                ],
                "4": [
                    "ans+=1"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 11\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(i) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s986455297": {
            "code": "input = sys.stdin.readline\nN = '11'\nif N <= 9:\n    print(N)\nelif 10 <= N <= 99:\n    print(10)\nelif 100 <= N <= 999:\n    print(9 + (N - 99))\nelif 1000 <= N <= 9999:\n    print(909)\nelif 10000 <= N <= 99999:\n    print(909 + (N - 9999))\nelse:\n    print(90909)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        11,
                        11
                    ]
                },
                "10": {
                    "range": [
                        12,
                        12
                    ]
                },
                "11": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'11'"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f522ecb7510>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input=sys.stdin.readline",
                    "N = '11'",
                    "(N <= 9)"
                ],
                "2": [
                    "print(N)"
                ],
                "3": [
                    "(10 <= N <= 99)"
                ],
                "4": [
                    "print(10)"
                ],
                "5": [
                    "(100 <= N <= 999)"
                ],
                "6": [
                    "print(9+(N-99))"
                ],
                "7": [
                    "(1000 <= N <= 9999)"
                ],
                "8": [
                    "print(909)"
                ],
                "9": [
                    "(10000 <= N <= 99999)"
                ],
                "10": [
                    "print(909+(N-9999))"
                ],
                "11": [
                    "print(90909)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input=sys.stdin.readline\n    N = '11'\n    (N <= 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (10 <= N <= 99)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(10)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (100 <= N <= 999)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(9+(N-99))\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (1000 <= N <= 9999)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(909)\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    (10000 <= N <= 99999)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(909+(N-9999))\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print(90909)\nNext:\n    <END>\n"
        },
        "s097044872": {
            "code": "input = sys.stdin.readline\nN = '11'\nif N <= 9:\n    print(N)\nelif N <= 99:\n    print(10)\nelif N <= 999:\n    print(9 + (N - 99))\nelif N <= 9999:\n    print(909)\nelif N <= 99999:\n    print(909 + (N - 9999))\nelse:\n    print(90909)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        11,
                        11
                    ]
                },
                "10": {
                    "range": [
                        12,
                        12
                    ]
                },
                "11": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f9093673510>"
                        },
                        {
                            "N": "'11'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input=sys.stdin.readline",
                    "N = '11'",
                    "(N <= 9)"
                ],
                "2": [
                    "print(N)"
                ],
                "3": [
                    "(N <= 99)"
                ],
                "4": [
                    "print(10)"
                ],
                "5": [
                    "(N <= 999)"
                ],
                "6": [
                    "print(9+(N-99))"
                ],
                "7": [
                    "(N <= 9999)"
                ],
                "8": [
                    "print(909)"
                ],
                "9": [
                    "(N <= 99999)"
                ],
                "10": [
                    "print(909+(N-9999))"
                ],
                "11": [
                    "print(90909)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input=sys.stdin.readline\n    N = '11'\n    (N <= 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (N <= 99)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(10)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (N <= 999)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(9+(N-99))\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (N <= 9999)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(909)\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    (N <= 99999)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(909+(N-9999))\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print(90909)\nNext:\n    <END>\n"
        },
        "s978424677": {
            "code": "input = sys.stdin.readline\nN = '11'\nans = 0\nif N <= 9:\n    ans = N\nelif 10 <= N <= 99:\n    ans = 10\nelif 100 <= N <= 999:\n    ans = 9 + (N - 99)\nelif 1000 <= N <= 9999:\n    ans = 909\nelif 10000 <= N <= 99999:\n    ans = 909 + (N - 9999)\nelse:\n    ans = 90909\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        13
                    ]
                },
                "11": {
                    "range": [
                        14,
                        14
                    ]
                },
                "12": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'11'"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f4f75f1f510>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input=sys.stdin.readline",
                    "N = '11'",
                    "ans=0",
                    "(N <= 9)"
                ],
                "2": [
                    "ans=N"
                ],
                "3": [
                    "(10 <= N <= 99)"
                ],
                "4": [
                    "ans=10"
                ],
                "5": [
                    "(100 <= N <= 999)"
                ],
                "6": [
                    "ans=9+(N-99)"
                ],
                "7": [
                    "(1000 <= N <= 9999)"
                ],
                "8": [
                    "ans=909"
                ],
                "9": [
                    "(10000 <= N <= 99999)"
                ],
                "10": [
                    "ans=909+(N-9999)"
                ],
                "11": [
                    "ans=90909"
                ],
                "12": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input=sys.stdin.readline\n    N = '11'\n    ans=0\n    (N <= 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans=N\nNext:\n    Go to Block: 12\n\nBlock 3:\nStatement:\n    (10 <= N <= 99)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans=10\nNext:\n    Go to Block: 12\n\nBlock 5:\nStatement:\n    (100 <= N <= 999)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans=9+(N-99)\nNext:\n    Go to Block: 12\n\nBlock 7:\nStatement:\n    (1000 <= N <= 9999)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ans=909\nNext:\n    Go to Block: 12\n\nBlock 9:\nStatement:\n    (10000 <= N <= 99999)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    ans=909+(N-9999)\nNext:\n    Go to Block: 12\n\nBlock 11:\nStatement:\n    ans=90909\nNext:\n    Go to Block: 12\n\nBlock 12:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s932604440": {
            "code": "N = '11'\ncount = 0\nfor i in range(1, N + 1):\n    if int(math.log10(i)) % 2 == 1:\n        count += 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'11'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "'11'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '11'",
                    "count = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, N + 1)"
                ],
                "3": [
                    "(int(math.log10(i)) % 2 == 1)"
                ],
                "4": [
                    "count+= 1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '11'\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (int(math.log10(i)) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count+= 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p02953": {
        "s625975227": {
            "code": "N = 5\nmylist = ['1', '2', '1', '1', '3']\nfor i in range(N - 1):\n    if int(mylist[i + 1]) >= int(mylist[i]) - 1:\n        continue\n    else:\n        print('No')\n        sye.exit()\nprint('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "mylist = ['1', '2', '1', '1', '3']"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "(int(mylist[i + 1]) >= int(mylist[i]) - 1)"
                ],
                "4": [
                    "print('No')",
                    "sye.exit()"
                ],
                "5": [
                    "print('Yes')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    mylist = ['1', '2', '1', '1', '3']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (int(mylist[i + 1]) >= int(mylist[i]) - 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    print('No')\n    sye.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02954": {
        "s702611970": {
            "code": "S = ['R', 'R', 'L', 'R', 'L']\nN = len(S)\nM = np.array([[0] * N for i in range(N)])\nfor i in range(N):\n    if S[i] == 'L':\n        M[i - 1][i] = 1\n    else:\n        M[i + 1][i] = 1\nL = np.linalg.matrix_power(M, 10 ** 10)\na = np.dot(L, [1 for i in range(N)])\nprint(' '.join(map(str, a)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = ['R', 'R', 'L', 'R', 'L']",
                    "N = len(S)",
                    "M = np.array([[0] * N for i in range(N)])"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(S[i] == 'L')"
                ],
                "4": [
                    "M[i - 1][i] = 1"
                ],
                "5": [
                    "M[i + 1][i] = 1"
                ],
                "6": [
                    "L = np.linalg.matrix_power(M, 10 ** 10)",
                    "a = np.dot(L, [1 for i in range(N)])",
                    "print(' '.join(map(str, a)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = ['R', 'R', 'L', 'R', 'L']\n    N = len(S)\n    M = np.array([[0] * N for i in range(N)])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (S[i] == 'L')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    M[i - 1][i] = 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    M[i + 1][i] = 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    L = np.linalg.matrix_power(M, 10 ** 10)\n    a = np.dot(L, [1 for i in range(N)])\n    print(' '.join(map(str, a)))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02957": {
        "s382530165": {
            "code": "temp = [2, 16]\ntemp = np.mean(temp)\nif temp - int(temp) > 0:\n    output = 'IMPOSSIBLE'\nelse:\n    output = temp\nprint(int(output))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "temp = [2, 16]",
                    "temp=np.mean(temp)",
                    "(temp - int(temp) > 0)"
                ],
                "2": [
                    "output='IMPOSSIBLE'"
                ],
                "3": [
                    "output=temp"
                ],
                "4": [
                    "print(int(output))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    temp = [2, 16]\n    temp=np.mean(temp)\n    (temp - int(temp) > 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    output='IMPOSSIBLE'\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    output=temp\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(int(output))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02958": {
        "s295569608": {
            "code": "N = 5\np_list = [5, 2, 3, 4, 1]\ndifferent_index = -1\nshould_place = -1\nfor i, p in enumerate(p_list):\n    if different_index >= 0 and p != i + 1 and (i != should_place):\n        print('NO')\n        sys.exit(1)\n    if different_index == -1 and p != i + 1:\n        different_index = i\n        should_place = p - 1\n        continue\nif different_index == -1:\n    print('YES')\nelif p_list[should_place] == different_index + 1:\n    print('YES')\nelse:\n    print('NO')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                },
                "10": {
                    "range": [
                        15,
                        15
                    ]
                },
                "11": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                10,
                11,
                12,
                5,
                6,
                9,
                5,
                6,
                9,
                5,
                6,
                9,
                5,
                6,
                9,
                5,
                13,
                15,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "p_list = [5, 2, 3, 4, 1]",
                    "different_index = -1",
                    "should_place = -1"
                ],
                "2": [
                    "i <- index\n    p <- iterator"
                ],
                "3": [
                    "(different_index >= 0 and p != i + 1 and (i != should_place))"
                ],
                "4": [
                    "print(\"NO\")",
                    "sys.exit(1)"
                ],
                "5": [
                    "(different_index == -1 and p != i + 1)"
                ],
                "6": [
                    "different_index = i",
                    "should_place = p - 1"
                ],
                "7": [
                    "(different_index == -1)"
                ],
                "8": [
                    "print(\"YES\")"
                ],
                "9": [
                    "(p_list[should_place] == different_index + 1)"
                ],
                "10": [
                    "print(\"YES\")"
                ],
                "11": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    p_list = [5, 2, 3, 4, 1]\n    different_index = -1\n    should_place = -1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    p <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (different_index >= 0 and p != i + 1 and (i != should_place))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"NO\")\n    sys.exit(1)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (different_index == -1 and p != i + 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    different_index = i\n    should_place = p - 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (different_index == -1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    (p_list[should_place] == different_index + 1)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s831938020": {
            "code": "n = 5\np = [5, 2, 3, 4, 1]\nq = copy.copy(p)\nr = q.sort()\nkaisu = 0\nfor i in range(n):\n    if p[i] != r[i]:\n        kaisu += 1\nif kaisu == 0 or kaisu == 2:\n    print('YES')\nelse:\n    print('NO')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "p = [5, 2, 3, 4, 1]",
                    "q = copy.copy(p)",
                    "r = q.sort()",
                    "kaisu = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(p[i] != r[i])"
                ],
                "4": [
                    "kaisu += 1"
                ],
                "5": [
                    "(kaisu == 0 or kaisu == 2)"
                ],
                "6": [
                    "print(\"YES\")"
                ],
                "7": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    p = [5, 2, 3, 4, 1]\n    q = copy.copy(p)\n    r = q.sort()\n    kaisu = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (p[i] != r[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    kaisu += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (kaisu == 0 or kaisu == 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
        }
    },
    "p02959": {
        "s761738440": {
            "code": "n = 2\na = [3, 5, 2]\nb = [4, 5]\nc = 0\nfor i in range(n):\n    c += min(a[i], b[i])\n    if a[i] < b[i]:\n        a[i + 1] -= b[i] - a[i]\n        c += b[i] - a[i]\nprint(c)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                5,
                6,
                7,
                8,
                9,
                5,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "[3, 4, 2]"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "b": "[4, 5]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "[3, 4, 2]"
                        },
                        {
                            "c": "8"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "b": "[4, 5]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "a": "[3, 4, 1]"
                        },
                        {
                            "c": "9"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "b": "[4, 5]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "[3, 4, 1]"
                        },
                        {
                            "c": "9"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "b": "[4, 5]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a = [3, 5, 2]",
                    "b = [4, 5]",
                    "c = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "c += min(a[i],b[i])",
                    "(a[i] < b[i])"
                ],
                "4": [
                    "a[i+1] -= b[i]-a[i]",
                    "c += b[i]-a[i]"
                ],
                "5": [
                    "print(c)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [3, 5, 2]\n    b = [4, 5]\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    c += min(a[i],b[i])\n    (a[i] < b[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a[i+1] -= b[i]-a[i]\n    c += b[i]-a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(c)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02960": {
        "s528918514": {
            "code": "S = '??2??5'\nhatena = S.count('?')\nS_temp = int(S.replace('?', '0'))\nQ = 10 ** hatena\nS_temp_amari = (S_temp - 5) % 13\ntemp = math.floor((Q - S_temp_amari) / 13)\nprint(temp % (1000000000 + 7))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = '??2??5'",
                    "hatena = S.count(\"?\")",
                    "S_temp = int(S.replace(\"?\",\"0\"))",
                    "Q = 10 ** hatena",
                    "S_temp_amari =(S_temp-5) %13",
                    "temp = math.floor((Q-S_temp_amari)/13)",
                    "print(temp%(1000000000+7))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '??2??5'\n    hatena = S.count(\"?\")\n    S_temp = int(S.replace(\"?\",\"0\"))\n    Q = 10 ** hatena\n    S_temp_amari =(S_temp-5) %13\n    temp = math.floor((Q-S_temp_amari)/13)\n    print(temp%(1000000000+7))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02963": {
        "s108696932": {
            "code": "S = 3\nans = [0, 0]\nif S <= 10 ** 9:\n    ans += [S, 0, 0, 1]\nelse:\n    root = int(matn.sqrt(S))\n    ans += [root ** 2 - S, root, root, 1]\nprint(*ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 3",
                    "ans = [0, 0]",
                    "(S <= 10 ** 9)"
                ],
                "2": [
                    "ans += [S, 0, 0, 1]"
                ],
                "3": [
                    "root = int(matn.sqrt(S))",
                    "ans += [root ** 2 - S, root, root, 1]"
                ],
                "4": [
                    "print(*ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 3\n    ans = [0, 0]\n    (S <= 10 ** 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans += [S, 0, 0, 1]\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    root = int(matn.sqrt(S))\n    ans += [root ** 2 - S, root, root, 1]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(*ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02970": {
        "s064737711": {
            "code": "N = [6, 2]\nif N[0] % (2 * N[1] + 1) == 0:\n    S = int(N[0] / (2 * N[1] + 1))\nelse:\n    S = int(N[0] / (2 * N[1] + 1)) + 1\nprint(S)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = [6, 2]",
                    "(N[0] % (2 * N[1] + 1) == 0)"
                ],
                "2": [
                    "S=int(N[0]/(2*N[1]+1))"
                ],
                "3": [
                    "S=int(N[0]/(2*N[1]+1))+1"
                ],
                "4": [
                    "print(S)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = [6, 2]\n    (N[0] % (2 * N[1] + 1) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    S=int(N[0]/(2*N[1]+1))\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    S=int(N[0]/(2*N[1]+1))+1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(S)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s371607575": {
            "code": "nd = ['6', '2']\nn = nd[0]\nd = nd[1]\ninspectors = math.ceil(n / (2 * d + 1))\nprint(inspectors)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "nd = ['6', '2']",
                    "n = nd[0]",
                    "d = nd[1]",
                    "inspectors = math.ceil(n / (2 * d + 1))",
                    "print(inspectors)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    nd = ['6', '2']\n    n = nd[0]\n    d = nd[1]\n    inspectors = math.ceil(n / (2 * d + 1))\n    print(inspectors)\nNext:\n    <END>\n"
        }
    },
    "p02971": {
        "s666219171": {
            "code": "N = 3\ns = ['1', '4', '3']\nmax_ind = [i for i, a in enumerate(s) if a == max(s)]\nmax_num = max(s)\nmax2_num = sorted(set(s))[-2]\nfor i in range(N):\n    if (np.array(max_ind) == i).any():\n        print(max2_num)\n    else:\n        print(max_num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                6,
                7,
                8,
                6,
                7,
                10,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "s = ['1', '4', '3']",
                    "max_ind = [i for i, a in enumerate(s) if a == max(s)]",
                    "max_num = max(s)",
                    "max2_num = sorted(set(s))[-2]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "((np.array(max_ind) == i).any())"
                ],
                "4": [
                    "print(max2_num)"
                ],
                "5": [
                    "print(max_num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    s = ['1', '4', '3']\n    max_ind = [i for i, a in enumerate(s) if a == max(s)]\n    max_num = max(s)\n    max2_num = sorted(set(s))[-2]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    ((np.array(max_ind) == i).any())\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(max2_num)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(max_num)\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        },
        "s467000344": {
            "code": "n = 3\na = [1, 4, 3]\nb = heapq.nlargest(2, set(a))\nc = [i for i, x in enumerate(a) if x == b[0]]\nfor i in range(n):\n    if i in c:\n        print(b[1])\n    else:\n        print(b[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                5,
                6,
                7,
                5,
                6,
                9,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [1, 4, 3]",
                    "b = heapq.nlargest(2, set(a))",
                    "c = [i for i, x in enumerate(a) if x == b[0]]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i in c)"
                ],
                "4": [
                    "print(b[1])"
                ],
                "5": [
                    "print(b[0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, 4, 3]\n    b = heapq.nlargest(2, set(a))\n    c = [i for i, x in enumerate(a) if x == b[0]]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (i in c)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(b[1])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(b[0])\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        },
        "s894968968": {
            "code": "n = 3\na = [1, 4, 3]\nm = max(a)\nfor i in range(n):\n    if a[i] != m:\n        print(m)\n    else:\n        print(max(a[:n].extend(a[n + 1:])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [1, 4, 3]",
                    "m=max(a)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(a[i] != m)"
                ],
                "4": [
                    "print(m)"
                ],
                "5": [
                    "print(max(a[:n].extend(a[n+1:])))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, 4, 3]\n    m=max(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (a[i] != m)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(m)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(max(a[:n].extend(a[n+1:])))\nNext:\n    Go to Block: 2\n"
        },
        "s730784030": {
            "code": "a = 3\nb = [1, 4, 3]\nc = 0\nfirst = max(b)\ng = b.copy()\nh = list(g.index(first))\ndel g[h]\nsecond = max(g)\nfor i in range(a):\n    if max(b) > b[i]:\n        print(first)\n    elif first == b[i]:\n        print(second)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 3",
                    "b = [1, 4, 3]",
                    "c = 0;",
                    "first = max(b);",
                    "g = b.copy();",
                    "h = list(g.index(first));",
                    "del g[h];",
                    "second = max(g);"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(a)"
                ],
                "3": [
                    "(max(b) > b[i])"
                ],
                "4": [
                    "print(first);"
                ],
                "5": [
                    "(first == b[i])"
                ],
                "6": [
                    "print(second);"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 3\n    b = [1, 4, 3]\n    c = 0;\n    first = max(b);\n    g = b.copy();\n    h = list(g.index(first));\n    del g[h];\n    second = max(g);\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (max(b) > b[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(first);\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (first == b[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(second);\nNext:\n    Go to Block: 2\n"
        },
        "s066261892": {
            "code": "input = sys.stdin.readline\nN = 3\nA = [1, 4, 3]\nB = sorted(A, reversed=True)\nfor i in range(N):\n    if A[i] == B[0]:\n        print(B[1])\n    else:\n        print(B[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "A": "[1, 4, 3]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fb86ff1f510>"
                        },
                        {
                            "N": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'reversed' is an invalid keyword argument for sort()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "N = 3",
                    "A = [1, 4, 3]",
                    "B = sorted(A, reversed = True)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(A[i] == B[0])"
                ],
                "4": [
                    "print(B[1])"
                ],
                "5": [
                    "print(B[0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    N = 3\n    A = [1, 4, 3]\n    B = sorted(A, reversed = True)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (A[i] == B[0])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(B[1])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(B[0])\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02972": {
        "s049200246": {
            "code": "N = 3\nA = [1, 0, 0]\nB = np.zeros(N)\nfor a in range(1, N + 1)[::-1]:\n    if N % a == 0:\n        idx = np.arange(a, N + a, a) - 1\n    else:\n        idx = np.arange(a, N, a) - 1\n    B[a - 1] = (A[a - 1] - B[idx].sum()) % 2\nB = B\nans = np.where(B != 0)[0] + 1\nprint(len(ans))\nif len(ans) != 0:\n    print(*ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                4,
                5,
                8,
                9,
                4,
                5,
                6,
                9,
                4,
                10,
                11,
                12,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [1, 0, 0]",
                    "B=np.zeros(N)"
                ],
                "2": [
                    "iterator -> a, Iterate Over -> range(1, N + 1)[::-1]"
                ],
                "3": [
                    "(N % a == 0)"
                ],
                "4": [
                    "idx=np.arange(a,N+a,a)-1"
                ],
                "5": [
                    "idx=np.arange(a,N,a)-1"
                ],
                "6": [
                    "B[a-1] = (A[a-1] - B[idx].sum()) % 2"
                ],
                "7": [
                    "B=B",
                    "ans=np.where(B!=0)[0]+1",
                    "print(len(ans))",
                    "(len(ans) != 0)"
                ],
                "8": [
                    "print(*ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 0, 0]\n    B=np.zeros(N)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> range(1, N + 1)[::-1]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (N % a == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    idx=np.arange(a,N+a,a)-1\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    idx=np.arange(a,N,a)-1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    B[a-1] = (A[a-1] - B[idx].sum()) % 2\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    B=B\n    ans=np.where(B!=0)[0]+1\n    print(len(ans))\n    (len(ans) != 0)\nNext:\n    If True: Go to Block 8\n    <END>\nBlock 8:\nStatement:\n    print(*ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s820744807": {
            "code": "input = sys.stdin.readline\nn = 3\na = [1, 0, 0]\nret = [0 for _ in range(n + 1)]\nfor i, a_i in enumerate(a[-1::-1]):\n    cur_ret_sum = sum(ret[n - i::n - i]) % 2\n    if a_i != cur_ret_sum:\n        ret[n - i] = 1\nprint(sum(ret[1:]))\nprint(' '.join(ret[1:]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                6,
                7,
                8,
                5,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        },
                        {
                            "ret": "[0, 0, 0, 0]"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        },
                        {
                            "ret": "[0, 0, 0, 0]"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cur_ret_sum": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        },
                        {
                            "ret": "[0, 0, 0, 0]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cur_ret_sum": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        },
                        {
                            "ret": "[0, 0, 0, 0]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cur_ret_sum": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        },
                        {
                            "ret": "[0, 0, 0, 0]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cur_ret_sum": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        },
                        {
                            "ret": "[0, 0, 0, 0]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cur_ret_sum": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        },
                        {
                            "ret": "[0, 0, 0, 0]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "cur_ret_sum": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "ret": "[0, 1, 0, 0]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cur_ret_sum": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "ret": "[0, 1, 0, 0]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "cur_ret_sum": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "ret": "[0, 1, 0, 0]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fe28b51f510>"
                        },
                        {
                            "a": "[1, 0, 0]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "n = 3",
                    "a = [1, 0, 0]",
                    "ret = [0 for _ in range(n+1)]"
                ],
                "2": [
                    "i <- index\n    a_i <- iterator"
                ],
                "3": [
                    "cur_ret_sum = sum(ret[n-i::n-i])%2",
                    "(a_i != cur_ret_sum)"
                ],
                "4": [
                    "ret[n-i]=1"
                ],
                "5": [
                    "print(sum(ret[1::]))",
                    "print(\" \".join(ret[1::]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    n = 3\n    a = [1, 0, 0]\n    ret = [0 for _ in range(n+1)]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    a_i <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    cur_ret_sum = sum(ret[n-i::n-i])%2\n    (a_i != cur_ret_sum)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ret[n-i]=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(sum(ret[1::]))\n    print(\" \".join(ret[1::]))\nNext:\n    <END>\n"
        }
    },
    "p02973": {
        "s618589432": {
            "code": "n = 5\na = [2, 1, 4, 5, 3]\nt = [a[-1]]\nfor i in reversed(a[:-1]):\n    idx = bisect.bisect_left(t, i + 1)\n    print(i, idx)\n    if idx == len(t):\n        t.append(i)\n    else:\n        t[idx] = i\n    print(t)\nprint(len(t))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                11,
                4,
                5,
                6,
                7,
                10,
                11,
                4,
                5,
                6,
                7,
                10,
                11,
                4,
                5,
                6,
                7,
                10,
                11,
                4,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [2, 1, 4, 5, 3]",
                    "t = [a[-1]]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> reversed(a[:-1])"
                ],
                "3": [
                    "idx = bisect.bisect_left(t, i + 1)",
                    "print(i, idx)",
                    "(idx == len(t))"
                ],
                "4": [
                    "t.append(i)"
                ],
                "5": [
                    "t[idx] = i"
                ],
                "6": [
                    "print(t)"
                ],
                "7": [
                    "print(len(t))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [2, 1, 4, 5, 3]\n    t = [a[-1]]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> reversed(a[:-1])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    idx = bisect.bisect_left(t, i + 1)\n    print(i, idx)\n    (idx == len(t))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    t.append(i)\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    t[idx] = i\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(t)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(len(t))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s654968985": {
            "code": "n = 5\na = [2, 1, 4, 5, 3]\nc = [a[-1]]\nif len(np.unique(a)) == 1:\n    print(len(a))\nelse:\n    for i in a[::-1][1:]:\n        if max(c) <= i:\n            c.append(i)\n        else:\n            mask = np.array(c) - i > 0\n            c[mask][np.argmin(c[mask])] = i\n    print(len(c))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9,
                7,
                8,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('only integer scalar arrays can be converted to a scalar index')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [2, 1, 4, 5, 3]",
                    "c = [a[-1]]",
                    "(len(np.unique(a)) == 1)"
                ],
                "2": [
                    "print(len(a))"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> a[::-1][1:]"
                ],
                "4": [
                    "(max(c) <= i)"
                ],
                "5": [
                    "c.append(i)"
                ],
                "6": [
                    "mask = np.array(c) - i > 0",
                    "c[mask][np.argmin(c[mask])] = i"
                ],
                "7": [
                    "print(len(c))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [2, 1, 4, 5, 3]\n    c = [a[-1]]\n    (len(np.unique(a)) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(len(a))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> a[::-1][1:]\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (max(c) <= i)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    c.append(i)\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    mask = np.array(c) - i > 0\n    c[mask][np.argmin(c[mask])] = i\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    print(len(c))\nNext:\n    <END>\n"
        },
        "s045358629": {
            "code": "N = 5\nA = [2, 1, 4, 5, 3]\ntree = [[A[0]]]\nleaf = [A[0]]\nfor n in range(1, N):\n    a = A[n]\n    pos = min(n - 1, bisect.bisect_left(leaf, a) - 1)\n    if pos == -1:\n        tree = a + tree\n        leaf = a + leaf\n    else:\n        tree[pos].append(a)\n        leaf[pos] = a\nprint(len(tree))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "A = [2, 1, 4, 5, 3]",
                    "tree = [[A[0]]]",
                    "leaf = [A[0]]"
                ],
                "2": [
                    "iterator -> n, Iterate Over -> range(1, N)"
                ],
                "3": [
                    "a = A[n]",
                    "pos = min(n-1,bisect.bisect_left(leaf,a)-1)",
                    "(pos == -1)"
                ],
                "4": [
                    "tree = a + tree",
                    "leaf = a + leaf"
                ],
                "5": [
                    "tree[pos].append(a)",
                    "leaf[pos] = a"
                ],
                "6": [
                    "print(len(tree))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [2, 1, 4, 5, 3]\n    tree = [[A[0]]]\n    leaf = [A[0]]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    a = A[n]\n    pos = min(n-1,bisect.bisect_left(leaf,a)-1)\n    (pos == -1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    tree = a + tree\n    leaf = a + leaf\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    tree[pos].append(a)\n    leaf[pos] = a\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(len(tree))\nNext:\n    <END>\n"
        }
    },
    "p02975": {
        "s238882856": {
            "code": "n = 3\na = [1, 2, 3]\nc = Counter(a)\nif len(list(c.keys())) == 3:\n    if list(c.values()) == [n // 3, n // 3, n // 3]:\n        print('Yes')\nelif len(list(c.keys())) == 2:\n    if c.most_common()[0][1] == 2 * n // 3:\n        print('Yes')\nelif len(list(c.keys())) == 1:\n    if c.keys()[0] == 0:\n        print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "[1, 2, 3]"
                        },
                        {
                            "c": "Counter({1: 1, 2: 1, 3: 1})"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "[1, 2, 3]"
                        },
                        {
                            "c": "Counter({1: 1, 2: 1, 3: 1})"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "[1, 2, 3]"
                        },
                        {
                            "c": "Counter({1: 1, 2: 1, 3: 1})"
                        },
                        {
                            "n": "3"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [1, 2, 3]",
                    "c=Counter(a)",
                    "(len(list(c.keys())) == 3)"
                ],
                "2": [
                    "(list(c.values()) == [n // 3, n // 3, n // 3])"
                ],
                "3": [
                    "print('Yes')"
                ],
                "4": [
                    "(len(list(c.keys())) == 2)"
                ],
                "5": [
                    "(c.most_common()[0][1] == 2 * n // 3)"
                ],
                "6": [
                    "print('Yes')"
                ],
                "7": [
                    "(len(list(c.keys())) == 1)"
                ],
                "8": [
                    "(c.keys()[0] == 0)"
                ],
                "9": [
                    "print('Yes')"
                ],
                "10": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 7
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 10
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, 2, 3]\n    c=Counter(a)\n    (len(list(c.keys())) == 3)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 2:\nStatement:\n    (list(c.values()) == [n // 3, n // 3, n // 3])\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    (len(list(c.keys())) == 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    (c.most_common()[0][1] == 2 * n // 3)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (len(list(c.keys())) == 1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 10\n\nBlock 8:\nStatement:\n    (c.keys()[0] == 0)\nNext:\n    If True: Go to Block 9\n    <END>\nBlock 9:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s238420328": {
            "code": "n = 3\na = [1, 2, 3]\na_counter = Counter(a)\nk = list(a_counter.keys())\nv = list(a_counter.values())\nif len(a_counter) == 3 and k[0] ^ k[1] ^ k[2] == 0 and (v[0] == v[1] == v[2]):\n    print('Yes')\nelif len(a_counter) == 2 and 0 in k and (v[0] == v[1] * 2) or v[1] == v[0] * 2:\n    print('Yes')\nelif len(a_counter) == 1 and 0 in k:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [1, 2, 3]",
                    "a_counter = Counter(a)",
                    "k = list(a_counter.keys())",
                    "v = list(a_counter.values())",
                    "(len(a_counter) == 3 and k[0] ^ k[1] ^ k[2] == 0 and (v[0] == v[1] == v[2]))"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "(len(a_counter) == 2 and 0 in k and (v[0] == v[1] * 2) or v[1] == v[0] * 2)"
                ],
                "4": [
                    "print(\"Yes\")"
                ],
                "5": [
                    "(len(a_counter) == 1 and 0 in k)"
                ],
                "6": [
                    "print(\"Yes\")"
                ],
                "7": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, 2, 3]\n    a_counter = Counter(a)\n    k = list(a_counter.keys())\n    v = list(a_counter.values())\n    (len(a_counter) == 3 and k[0] ^ k[1] ^ k[2] == 0 and (v[0] == v[1] == v[2]))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (len(a_counter) == 2 and 0 in k and (v[0] == v[1] * 2) or v[1] == v[0] * 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (len(a_counter) == 1 and 0 in k)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s893921827": {
            "code": "n = 3\na = [1, 2, 3]\nc = Counter(a)\ns = set(a)\nl = len(s)\nif l == 1 and a[0] == 0:\n    print('Yes')\nelif len(a) % 3 == 0:\n    if l == 2 and c[0] == n // 3:\n        print('Yes')\n    elif l == 3:\n        if s[0] ^ s[1] ^ s[2] == 0:\n            tmp = c[a[0]]\n            if all((x == tmp for x in c.values())):\n                print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                },
                "11": {
                    "range": [
                        17,
                        17
                    ]
                },
                "12": {
                    "range": [
                        18,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                8,
                9,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'set' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [1, 2, 3]",
                    "c = Counter(a)",
                    "s = set(a)",
                    "l = len(s)",
                    "(l == 1 and a[0] == 0)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "(len(a) % 3 == 0)"
                ],
                "4": [
                    "(l == 2 and c[0] == n // 3)"
                ],
                "5": [
                    "print('Yes')"
                ],
                "6": [
                    "(l == 3)"
                ],
                "7": [
                    "(s[0] ^ s[1] ^ s[2] == 0)"
                ],
                "8": [
                    "tmp = c[a[0]]",
                    "(all((x == tmp for x in c.values())))"
                ],
                "9": [
                    "print('Yes')"
                ],
                "10": [
                    "print('No')"
                ],
                "11": [
                    "print('No')"
                ],
                "12": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 12
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 11
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 10
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, 2, 3]\n    c = Counter(a)\n    s = set(a)\n    l = len(s)\n    (l == 1 and a[0] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (len(a) % 3 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 12\n\nBlock 4:\nStatement:\n    (l == 2 and c[0] == n // 3)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    (l == 3)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 11\n\nBlock 7:\nStatement:\n    (s[0] ^ s[1] ^ s[2] == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 10\n\nBlock 8:\nStatement:\n    tmp = c[a[0]]\n    (all((x == tmp for x in c.values())))\nNext:\n    If True: Go to Block 9\n    <END>\nBlock 9:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s354371368": {
            "code": "N = 3\nA = [1, 2, 3]\nd = Counter(A)\nif d[0] == N:\n    print('Yes')\n    sys.exit()\nif d[0] == N // 3:\n    for x in d.keys():\n        if d[x] == 2 * N // 3:\n            print('Yes')\n            sys.exit()\nthird = N // 3\nif len(d.keys() == 3):\n    a, b, c = d.keys()\n    if d[a] == d[b] and d[b] == d[c]:\n        if a ^ b ^ c == 0:\n            print('Yes')\n            sys.exit()\nprint('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        15
                    ]
                },
                "9": {
                    "range": [
                        16,
                        16
                    ]
                },
                "10": {
                    "range": [
                        17,
                        18
                    ]
                },
                "11": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                12,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "d": "Counter({1: 1, 2: 1, 3: 1})"
                        },
                        {
                            "A": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "d": "Counter({1: 1, 2: 1, 3: 1})"
                        },
                        {
                            "A": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "third": "1"
                        },
                        {
                            "d": "Counter({1: 1, 2: 1, 3: 1})"
                        },
                        {
                            "A": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'bool' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [1, 2, 3]",
                    "d = Counter(A)",
                    "(d[0] == N)"
                ],
                "2": [
                    "print(\"Yes\")",
                    "sys.exit()"
                ],
                "3": [
                    "(d[0] == N // 3)"
                ],
                "4": [
                    "iterator -> x, Iterate Over -> d.keys()"
                ],
                "5": [
                    "(d[x] == 2 * N // 3)"
                ],
                "6": [
                    "print(\"Yes\")",
                    "sys.exit()"
                ],
                "7": [
                    "third = N // 3",
                    "(len(d.keys() == 3))"
                ],
                "8": [
                    "a, b, c = d.keys()",
                    "(d[a] == d[b] and d[b] == d[c])"
                ],
                "9": [
                    "(a ^ b ^ c == 0)"
                ],
                "10": [
                    "print(\"Yes\")",
                    "sys.exit()"
                ],
                "11": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 11
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 7
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 11
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 2, 3]\n    d = Counter(A)\n    (d[0] == N)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (d[0] == N // 3)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    iterator -> x, Iterate Over -> d.keys()\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    (d[x] == 2 * N // 3)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    third = N // 3\n    (len(d.keys() == 3))\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 11\n\nBlock 8:\nStatement:\n    a, b, c = d.keys()\n    (d[a] == d[b] and d[b] == d[c])\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 11\n\nBlock 9:\nStatement:\n    (a ^ b ^ c == 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s928430597": {
            "code": "n = 3\na = [1, 2, 3]\nc = Counter(a)\ns = set(a)\nl = len(s)\nif l == 1 and a[0] == 0:\n    print('Yes')\nelif len(a) % 3 == 0:\n    if l == 2 and c[0] == n // 3:\n        print('Yes')\n    elif l == 3:\n        if s[0] ^ s[1] ^ s[2] == 0:\n            tmp = c[a[0]]\n            if all((x == tmp for x in c.values())):\n                print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                },
                "11": {
                    "range": [
                        17,
                        17
                    ]
                },
                "12": {
                    "range": [
                        18,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                8,
                9,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'set' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [1, 2, 3]",
                    "c = Counter(a)",
                    "s = set(a)",
                    "l = len(s)",
                    "(l == 1 and a[0] == 0)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "(len(a) % 3 == 0)"
                ],
                "4": [
                    "(l == 2 and c[0] == n // 3)"
                ],
                "5": [
                    "print('Yes')"
                ],
                "6": [
                    "(l == 3)"
                ],
                "7": [
                    "(s[0] ^ s[1] ^ s[2] == 0)"
                ],
                "8": [
                    "tmp = c[a[0]]",
                    "(all((x == tmp for x in c.values())))"
                ],
                "9": [
                    "print('Yes')"
                ],
                "10": [
                    "print('No')"
                ],
                "11": [
                    "print('No')"
                ],
                "12": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 12
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 11
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 10
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, 2, 3]\n    c = Counter(a)\n    s = set(a)\n    l = len(s)\n    (l == 1 and a[0] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (len(a) % 3 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 12\n\nBlock 4:\nStatement:\n    (l == 2 and c[0] == n // 3)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    (l == 3)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 11\n\nBlock 7:\nStatement:\n    (s[0] ^ s[1] ^ s[2] == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 10\n\nBlock 8:\nStatement:\n    tmp = c[a[0]]\n    (all((x == tmp for x in c.values())))\nNext:\n    If True: Go to Block 9\n    <END>\nBlock 9:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s384792948": {
            "code": "N = 3\nA = Counter({1: 1, 2: 1, 3: 1})\nif len(A) == 1:\n    if 0 in A:\n        print('Yes')\n    else:\n        print('No')\nelif len(A) == 2:\n    if A[0] == N / 3:\n        print('Yes')\n    else:\n        print('No')\nelif len(A) == 3:\n    if list(A.values()) == [N / 3] * 3 and A.keys()[0] ^ A.keys()[1] ^ A.keys()[2] == 0:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        11,
                        11
                    ]
                },
                "10": {
                    "range": [
                        12,
                        12
                    ]
                },
                "11": {
                    "range": [
                        13,
                        13
                    ]
                },
                "12": {
                    "range": [
                        14,
                        14
                    ]
                },
                "13": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                8,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_keys' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = Counter({1: 1, 2: 1, 3: 1})",
                    "(len(A) == 1)"
                ],
                "2": [
                    "(0 in A)"
                ],
                "3": [
                    "print(\"Yes\")"
                ],
                "4": [
                    "print(\"No\")"
                ],
                "5": [
                    "(len(A) == 2)"
                ],
                "6": [
                    "(A[0] == N / 3)"
                ],
                "7": [
                    "print(\"Yes\")"
                ],
                "8": [
                    "print(\"No\")"
                ],
                "9": [
                    "(len(A) == 3)"
                ],
                "10": [
                    "(list(A.values()) == [N / 3] * 3 and A.keys()[0] ^ A.keys()[1] ^ A.keys()[2] == 0)"
                ],
                "11": [
                    "print(\"Yes\")"
                ],
                "12": [
                    "print(\"No\")"
                ],
                "13": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = Counter({1: 1, 2: 1, 3: 1})\n    (len(A) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (0 in A)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (len(A) == 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 9\n\nBlock 6:\nStatement:\n    (A[0] == N / 3)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    (len(A) == 3)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 13\n\nBlock 10:\nStatement:\n    (list(A.values()) == [N / 3] * 3 and A.keys()[0] ^ A.keys()[1] ^ A.keys()[2] == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 13:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s808886132": {
            "code": "N = 3\nan = [1, 2, 3]\nret = an[0]\nfor x in range(1, N):\n    ret = ret[x] ^ ret\nif ret == 0:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "an = [1, 2, 3]",
                    "ret=an[0]"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> range(1, N)"
                ],
                "3": [
                    "ret= ret[x] ^ ret"
                ],
                "4": [
                    "(ret == 0)"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    an = [1, 2, 3]\n    ret=an[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ret= ret[x] ^ ret\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (ret == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02984": {
        "s256408089": {
            "code": "N = 3\nA = [2, 2, 4]\na = np.array(A)\nl = int((N ** 2 + 1) / 2)\nb = np.tile((1, -1), (1, l))\nc = np.delete(b, 2 * l - 1, axis=None).reshape(N, N)\ninv = 0.5 * (np.triu(c) - (np.tril(c) - np.eye(N)))\nprint(1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [2, 2, 4]",
                    "a = np.array(A)",
                    "l = int(((N**2)+1)/2)",
                    "b = np.tile((1,-1),(1,l))",
                    "c = (np.delete(b, 2*l-1, axis=None)).reshape(N,N)",
                    "inv = 0.5*( np.triu(c) - ( np.tril(c) - np.eye(N) ) )",
                    "print(1)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [2, 2, 4]\n    a = np.array(A)\n    l = int(((N**2)+1)/2)\n    b = np.tile((1,-1),(1,l))\n    c = (np.delete(b, 2*l-1, axis=None)).reshape(N,N)\n    inv = 0.5*( np.triu(c) - ( np.tril(c) - np.eye(N) ) )\n    print(1)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p02987": {
        "s690368044": {
            "code": "x = 'ASSA'\nTF = x.isupper() and x.isalpha()\nif TF:\n    li = [i for i in x]\n    count_dict = collections.Counter(li)\n    list = [v for k, v in count_dict.items()]\n    if list == [2, 2]:\n        print('Yes')\nprint('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 'ASSA'",
                    "TF =  x.isupper() and x.isalpha()",
                    "(TF)"
                ],
                "2": [
                    "li = [i for i in x]",
                    "count_dict = collections.Counter(li)",
                    "list = [v for k, v in count_dict.items()]",
                    "(list == [2, 2])"
                ],
                "3": [
                    "print(\"Yes\")"
                ],
                "4": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 'ASSA'\n    TF =  x.isupper() and x.isalpha()\n    (TF)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 2:\nStatement:\n    li = [i for i in x]\n    count_dict = collections.Counter(li)\n    list = [v for k, v in count_dict.items()]\n    (list == [2, 2])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s838110399": {
            "code": "S = 'ASSA'\nc = Counter(S)\nfor v in c.values():\n    if v != 2:\n        return False\nreturn True",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'ASSA'",
                    "c = Counter(S)"
                ],
                "2": [
                    "iterator -> v, Iterate Over -> c.values()"
                ],
                "3": [
                    "(v != 2)"
                ],
                "4": [
                    "return True"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 3,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ASSA'\n    c = Counter(S)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> c.values()\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    (v != 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    return True\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s881545983": {
            "code": "S = 'ASSA'\nc = C(S)\nif len(c.keys()) == 2:\n    if c.values[0] == 2:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'ASSA'",
                    "c = C(S)",
                    "(len(c.keys()) == 2)"
                ],
                "2": [
                    "(c.values[0] == 2)"
                ],
                "3": [
                    "print(\"Yes\")"
                ],
                "4": [
                    "print(\"No\")"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ASSA'\n    c = C(S)\n    (len(c.keys()) == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (c.values[0] == 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s465066480": {
            "code": "counter = dedict(int)\na = 'ASSA'\nfor i in list(a):\n    counter[i] += 1\nif len(counter) == 2 and counter[counter.keys()[0]] == 2:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                4,
                3,
                4,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_keys' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "counter = dedict(int)",
                    "a = 'ASSA'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> list(a)"
                ],
                "3": [
                    "counter[i] += 1"
                ],
                "4": [
                    "(len(counter) == 2 and counter[counter.keys()[0]] == 2)"
                ],
                "5": [
                    "print (\"Yes\")"
                ],
                "6": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    counter = dedict(int)\n    a = 'ASSA'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> list(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    counter[i] += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (len(counter) == 2 and counter[counter.keys()[0]] == 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print (\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s667889262": {
            "code": "s = 'ASSA'\nc = Counter(s)\nif c.values()[0] == 2 and c.values()[1] == 2:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_values' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'ASSA'",
                    "c = Counter(s)",
                    "(c.values()[0] == 2 and c.values()[1] == 2)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ASSA'\n    c = Counter(s)\n    (c.values()[0] == 2 and c.values()[1] == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s842554197": {
            "code": "S = 'ASSA'\nL = collections.Counter(S)\nif len(L) == 2 and L[0][1] == 2:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'ASSA'",
                    "L = collections.Counter(S)",
                    "(len(L) == 2 and L[0][1] == 2)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ASSA'\n    L = collections.Counter(S)\n    (len(L) == 2 and L[0][1] == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p02989": {
        "s299101213": {
            "code": "n = 6\nd = [9, 1, 4, 4, 6, 7]\nm = statistics.median(d)\nans = 0\np = 0\nq = 0\nd.sort()\nfor i in range(len(d)):\n    if d[i] >= m:\n        if d[i] == d[i + 1]:\n            ans += 0\n            break\n        else:\n            p = d[i]\n            q = d[i - 1]\n            break\nprint(p - q)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                9,
                10,
                14,
                15,
                16,
                17
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "q": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "d": "[1, 4, 4, 6, 7, 9]"
                        },
                        {
                            "p": "0"
                        },
                        {
                            "m": "5.0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "q": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "d": "[1, 4, 4, 6, 7, 9]"
                        },
                        {
                            "p": "0"
                        },
                        {
                            "m": "5.0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "q": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "d": "[1, 4, 4, 6, 7, 9]"
                        },
                        {
                            "p": "0"
                        },
                        {
                            "m": "5.0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "q": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "d": "[1, 4, 4, 6, 7, 9]"
                        },
                        {
                            "p": "0"
                        },
                        {
                            "m": "5.0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "q": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "d": "[1, 4, 4, 6, 7, 9]"
                        },
                        {
                            "p": "0"
                        },
                        {
                            "m": "5.0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "q": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "d": "[1, 4, 4, 6, 7, 9]"
                        },
                        {
                            "p": "0"
                        },
                        {
                            "m": "5.0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "d = [9, 1, 4, 4, 6, 7]",
                    "m = statistics.median(d)",
                    "ans = 0",
                    "p = 0",
                    "q = 0",
                    "d.sort()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(d))"
                ],
                "3": [
                    "(d[i] >= m)"
                ],
                "4": [
                    "(d[i] == d[i + 1])"
                ],
                "5": [
                    "ans += 0"
                ],
                "6": [
                    "p = d[i]",
                    "q = d[i-1]"
                ],
                "7": [
                    "print(p-q)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    d = [9, 1, 4, 4, 6, 7]\n    m = statistics.median(d)\n    ans = 0\n    p = 0\n    q = 0\n    d.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(d))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (d[i] >= m)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (d[i] == d[i + 1])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    ans += 0\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    p = d[i]\n    q = d[i-1]\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(p-q)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s384706935": {
            "code": "n = 6\nd = [9, 1, 4, 4, 6, 7]\nif n % 2 == 1:\n    print(0)\n    exit()\nd = sorted(d)\nprint(d[n / 2] - d[n / 2 - 1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not float')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "d = [9, 1, 4, 4, 6, 7]",
                    "(n % 2 == 1)"
                ],
                "2": [
                    "print(0)",
                    "exit()"
                ],
                "3": [
                    "d = sorted(d)",
                    "print(d[n/2] - d[(n/2) - 1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    d = [9, 1, 4, 4, 6, 7]\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    d = sorted(d)\n    print(d[n/2] - d[(n/2) - 1])\nNext:\n    <END>\n"
        },
        "s841291135": {
            "code": "a = '6'\nb = '9 1 4 4 6 7'\nm = int(-(a / 2))\ns = int(a / 2)\nn = int(a)\np = list(map(int, b.split()))\nm2 = sorted(p)[m]\ns2 = nsmallest(s, p)[-1]\nprint(m2 - s2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "b": "'9 1 4 4 6 7'"
                        },
                        {
                            "a": "'6'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '6'",
                    "b = '9 1 4 4 6 7'",
                    "m = int(-(a/2))",
                    "s = int(a/2)",
                    "n = int(a)",
                    "p = list(map(int, b.split()))",
                    "m2 = sorted(p)[m]",
                    "s2 = nsmallest(s, p)[-1]",
                    "print(m2-s2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '6'\n    b = '9 1 4 4 6 7'\n    m = int(-(a/2))\n    s = int(a/2)\n    n = int(a)\n    p = list(map(int, b.split()))\n    m2 = sorted(p)[m]\n    s2 = nsmallest(s, p)[-1]\n    print(m2-s2)\nNext:\n    <END>\n"
        },
        "s117871755": {
            "code": "input = sys.stdin.readline\nN = 6\nd = [9, 1, 4, 4, 6, 7]\nd.sort()\nprint(d[N / 2] - (d[N / 2] - 1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "d": "[1, 4, 4, 6, 7, 9]"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f439decb510>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not float')"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "N = 6",
                    "d = [9, 1, 4, 4, 6, 7]",
                    "d.sort()",
                    "print(d[N/2] - (d[N/2] - 1))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    N = 6\n    d = [9, 1, 4, 4, 6, 7]\n    d.sort()\n    print(d[N/2] - (d[N/2] - 1))\nNext:\n    <END>\n"
        }
    },
    "p02990": {
        "s155508464": {
            "code": "lis = [5, 3]\nmod = 10 ** 9 + 7\nfor i in range(1, lis[1] + 1):\n    ans = int(math.factorial(lis[0] - lis[1] + 1) / (math.factorial(i) * math.factorial(lis[0] - lis[1] - i + 1))) % mod\n    ans *= int(math.factorial(lis[1] - 1) / (math.factorial(i - 1) * math.factorial(lis[1] - i))) % mod\n    print(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                3,
                4,
                5,
                6,
                3,
                4,
                5,
                6,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "lis": "[5, 3]"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "lis": "[5, 3]"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "lis": "[5, 3]"
                        },
                        {
                            "ans": "3"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "lis": "[5, 3]"
                        },
                        {
                            "ans": "3"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "lis": "[5, 3]"
                        },
                        {
                            "ans": "6"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "lis": "[5, 3]"
                        },
                        {
                            "ans": "6"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "lis": "[5, 3]"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "lis": "[5, 3]"
                        },
                        {
                            "ans": "1"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "lis = [5, 3]",
                    "mod=(10**9)+7"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, lis[1] + 1)"
                ],
                "3": [
                    "ans=int(math.factorial(lis[0]-lis[1]+1)/(math.factorial(i)*math.factorial(lis[0]-lis[1]-i+1)))%mod",
                    "ans*=int(math.factorial(lis[1]-1)/(math.factorial(i-1)*math.factorial(lis[1]-i)))%mod",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    lis = [5, 3]\n    mod=(10**9)+7\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, lis[1] + 1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    ans=int(math.factorial(lis[0]-lis[1]+1)/(math.factorial(i)*math.factorial(lis[0]-lis[1]-i+1)))%mod\n    ans*=int(math.factorial(lis[1]-1)/(math.factorial(i-1)*math.factorial(lis[1]-i)))%mod\n    print(ans)\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        }
    },
    "p02994": {
        "s283798084": {
            "code": "a = '5 2'\nn, l = [int(i) for i in a.split(' ')]\napples = np.array([i for i in range(n)])\naji = apples + l\nabss = [np.abs(aji[apples != i].sum() - aji.sum()) for i in range(n)]\ni = abss.index(np.min(abss))\nprint([aji[apples != i].sum()][i])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = '5 2'",
                    "n, l = [int(i) for i in a.split(\" \")]",
                    "apples = np.array([i for i in range(n)])",
                    "aji = apples + l",
                    "abss = [np.abs(aji[apples != i].sum() - aji.sum()) for i in range(n)]",
                    "i = abss.index(np.min(abss))",
                    "print([aji[apples != i].sum()][i])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '5 2'\n    n, l = [int(i) for i in a.split(\" \")]\n    apples = np.array([i for i in range(n)])\n    aji = apples + l\n    abss = [np.abs(aji[apples != i].sum() - aji.sum()) for i in range(n)]\n    i = abss.index(np.min(abss))\n    print([aji[apples != i].sum()][i])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s690196802": {
            "code": "a = '5 2'\nn, l = a.split(' ')\napples = [i for i in range(n)]\nabs_app = np.abs(apples)\nm = abs_app.min()\nprint(np.array(apples)[abs_app == m].sum())",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '5 2'",
                    "n, l= a.split(\" \")",
                    "apples = [i for i in range(n)]",
                    "abs_app = np.abs(apples)",
                    "m = abs_app.min()",
                    "print((np.array(apples)[abs_app == m]).sum())"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '5 2'\n    n, l= a.split(\" \")\n    apples = [i for i in range(n)]\n    abs_app = np.abs(apples)\n    m = abs_app.min()\n    print((np.array(apples)[abs_app == m]).sum())\nNext:\n    <END>\n"
        }
    },
    "p02995": {
        "s627539847": {
            "code": "line = ['4', '9', '2', '3']\nA = int(line[0])\nB = int(line[1])\nC = int(line[2])\nD = int(line[3])\nfrom_1_a = int((A - 1) / C) + int((A - 1) / D) - int((A - 1) / np.lcm(C, D))\nfrom_1_b = int(B / C) + int(B / D) - int(B / np.lcm(C, D))\nbaisu_c_or_d = from_1_b - from_1_a\namong = B - A + 1\nprint(among - baisu_c_or_d)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "among": "6"
                        },
                        {
                            "C": "2"
                        },
                        {
                            "from_1_b": "6"
                        },
                        {
                            "baisu_c_or_d": "4"
                        },
                        {
                            "A": "4"
                        },
                        {
                            "D": "3"
                        },
                        {
                            "from_1_a": "2"
                        },
                        {
                            "line": "['4', '9', '2', '3']"
                        },
                        {
                            "B": "9"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "line = ['4', '9', '2', '3']",
                    "A =int(line[0])",
                    "B =int(line[1])",
                    "C =int(line[2])",
                    "D =int(line[3])",
                    "from_1_a = int((A-1)/C) +int((A-1)/D) - int((A-1)/np.lcm(C,D))",
                    "from_1_b = int(B/C) +int(B/D) - int(B/np.lcm(C,D))",
                    "baisu_c_or_d = from_1_b -from_1_a",
                    "among = B -A  +1",
                    "print(among - baisu_c_or_d)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    line = ['4', '9', '2', '3']\n    A =int(line[0])\n    B =int(line[1])\n    C =int(line[2])\n    D =int(line[3])\n    from_1_a = int((A-1)/C) +int((A-1)/D) - int((A-1)/np.lcm(C,D))\n    from_1_b = int(B/C) +int(B/D) - int(B/np.lcm(C,D))\n    baisu_c_or_d = from_1_b -from_1_a\n    among = B -A  +1\n    print(among - baisu_c_or_d)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s934471878": {
            "code": "x = ['4', '9', '2', '3']\na = int(x[0])\nb = int(x[1])\nc = int(x[2])\nd = int(x[3])\nc_count = b // c - (a - 1) // c\nd_count = b // d - (a - 1) // d\ncd = c * d // math.gcd(c, d)\ncd_count = b // cd - (a - 1) // cd\nans = b + 1 - a - c_count - d_count + cd_count\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = ['4', '9', '2', '3']",
                    "a = int(x[0])",
                    "b = int(x[1])",
                    "c = int(x[2])",
                    "d = int(x[3])",
                    "c_count = (b//c)-((a-1)//c)",
                    "d_count = (b//d)-((a-1)//d)",
                    "cd = c*d // math.gcd(c,d)",
                    "cd_count = (b//cd) - ((a-1)//cd)",
                    "ans = (b+1-a)-c_count-d_count+cd_count",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = ['4', '9', '2', '3']\n    a = int(x[0])\n    b = int(x[1])\n    c = int(x[2])\n    d = int(x[3])\n    c_count = (b//c)-((a-1)//c)\n    d_count = (b//d)-((a-1)//d)\n    cd = c*d // math.gcd(c,d)\n    cd_count = (b//cd) - ((a-1)//cd)\n    ans = (b+1-a)-c_count-d_count+cd_count\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s800814871": {
            "code": "num = ['4', '9', '2', '3']\na = int(num[0]) - 1\nb = int(num[1])\nc = int(num[2])\nd = int(num[3])\ne = c * d // int(math.gcd(c, d))\nbb = b - b // c - b // d + b // e\naa = a - a // c - a // d + a // e\nprint(int(bb - aa))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "num = ['4', '9', '2', '3']",
                    "a = int(num[0])-1",
                    "b = int(num[1])",
                    "c = int(num[2])",
                    "d = int(num[3])",
                    "e = c * d // int(math.gcd(c, d))",
                    "bb = b - (b//c) -(b//d) +(b//e)",
                    "aa = a - (a//c) -(a//d) + (a//e)",
                    "print(int(bb-aa))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    num = ['4', '9', '2', '3']\n    a = int(num[0])-1\n    b = int(num[1])\n    c = int(num[2])\n    d = int(num[3])\n    e = c * d // int(math.gcd(c, d))\n    bb = b - (b//c) -(b//d) +(b//e)\n    aa = a - (a//c) -(a//d) + (a//e)\n    print(int(bb-aa))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s620178677": {
            "code": "S = ['4', '9', '2', '3']\nA = float(S[0])\nB = float(S[1])\nC = float(S[2])\nD = float(S[3])\nE = C * D / math.gcd(C, D)\nX = math.floor(B / C) - math.floor(A / C)\nY = math.floor(B / D) - math.floor(A / D)\nZ = math.floor(B / E) - math.floor(A / E)\nprint(int(B - A - X - Y + Z))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = ['4', '9', '2', '3']",
                    "A = float(S[0])",
                    "B = float(S[1])",
                    "C = float(S[2])",
                    "D = float(S[3])",
                    "E = (C * D) / math.gcd(C, D)",
                    "X = math.floor(B/C) - math.floor(A/C)",
                    "Y = math.floor(B/D) - math.floor(A/D)",
                    "Z = math.floor(B/E) - math.floor(A/E)",
                    "print(int(B-A-X-Y+Z))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = ['4', '9', '2', '3']\n    A = float(S[0])\n    B = float(S[1])\n    C = float(S[2])\n    D = float(S[3])\n    E = (C * D) / math.gcd(C, D)\n    X = math.floor(B/C) - math.floor(A/C)\n    Y = math.floor(B/D) - math.floor(A/D)\n    Z = math.floor(B/E) - math.floor(A/E)\n    print(int(B-A-X-Y+Z))\nNext:\n    <END>\n"
        }
    },
    "p03006": {
        "s881447358": {
            "code": "N = 2\npoint = [(1, 1), (2, 2)]\nans = Counter()\nfor first, second in list(itertools.permutations(point, 2)):\n    fx, fy = first\n    sx, sy = second\n    if sx - fx < 0 or sy - fy < 0:\n        continue\n    else:\n        ans[sx - fx, sy - fy] += 1\nprint(N - ans.most_common()[0][1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                4,
                5,
                6,
                7,
                8,
                4,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "point = [(1, 1), (2, 2)]",
                    "ans = Counter()"
                ],
                "2": [
                    "first <- index\n    second <- iterator"
                ],
                "3": [
                    "fx, fy = first",
                    "sx, sy = second",
                    "(sx - fx < 0 or sy - fy < 0)"
                ],
                "4": [
                    "ans[(sx-fx, sy-fy)] += 1"
                ],
                "5": [
                    "print(N - ans.most_common()[0][1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    point = [(1, 1), (2, 2)]\n    ans = Counter()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    first <- index\n    second <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    fx, fy = first\n    sx, sy = second\n    (sx - fx < 0 or sy - fy < 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    ans[(sx-fx, sy-fy)] += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(N - ans.most_common()[0][1])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03007": {
        "s071570890": {
            "code": "n = 3\na = [1, -1, 2]\na.sort()\nfor i in range(n - 2):\n    x, y = (a[i], a[i + 1])\n    del a[i:i + 2]\n    a += [x - y]\n    a.sort()\n    print(x, y)\nprint(a[1], a[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                4,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [1, -1, 2]",
                    "a.sort()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n - 2)"
                ],
                "3": [
                    "x,y=a[i],a[i+1]",
                    "del a[i:i+2]",
                    "a+=[x-y]",
                    "a.sort()",
                    "print(x,y)"
                ],
                "4": [
                    "print(a[1],a[0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, -1, 2]\n    a.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x,y=a[i],a[i+1]\n    del a[i:i+2]\n    a+=[x-y]\n    a.sort()\n    print(x,y)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(a[1],a[0])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s739536782": {
            "code": "N = 3\nl = [1, -1, 2]\nl.sort()\nindex = bisect.bisect_right(l, 0)\nif index == 0:\n    print(sum(l) - l[0])\nelse:\n    print(sum(l[index:] - sum(l[:index - 1])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "[-1, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "index": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l": "[-1, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "index": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "l = [1, -1, 2]",
                    "l.sort()",
                    "index = bisect.bisect_right(l, 0)",
                    "(index == 0)"
                ],
                "2": [
                    "print(sum(l)-l[0])"
                ],
                "3": [
                    "print(sum(l[index:]-sum(l[:index-1])))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    l = [1, -1, 2]\n    l.sort()\n    index = bisect.bisect_right(l, 0)\n    (index == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(sum(l)-l[0])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(sum(l[index:]-sum(l[:index-1])))\nNext:\n    <END>\n"
        },
        "s641883945": {
            "code": "N = 3\nl = [1, -1, 2]\nl.sort()\nindex = bisect.bisect_right(l, 0)\nif index == 0:\n    print(sum(l) - l[0])\nelse:\n    print(sum(l[index:] - sum(l[:index - 1])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "[-1, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "index": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l": "[-1, 1, 2]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "index": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "l = [1, -1, 2]",
                    "l.sort()",
                    "index = bisect.bisect_right(l, 0)",
                    "(index == 0)"
                ],
                "2": [
                    "print(sum(l)-l[0])"
                ],
                "3": [
                    "print(sum(l[index:]-sum(l[:index-1])))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    l = [1, -1, 2]\n    l.sort()\n    index = bisect.bisect_right(l, 0)\n    (index == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(sum(l)-l[0])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(sum(l[index:]-sum(l[:index-1])))\nNext:\n    <END>\n"
        }
    },
    "p03012": {
        "s236080653": {
            "code": "n = 3\nwn = [1, 2, 3]\nmini = math.inf\nfor i in range(n - 1):\n    new_mini = abs(sum(wn[:i]) - sum(wn[i:]))\n    if new_mini < mini:\n        mini = new_mini\nprint(mini)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "wn = [1, 2, 3]",
                    "mini = math.inf"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n - 1)"
                ],
                "3": [
                    "new_mini = abs(sum(wn[:i]) -sum(wn[i:]))",
                    "(new_mini < mini)"
                ],
                "4": [
                    "mini = new_mini"
                ],
                "5": [
                    "print(mini)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    wn = [1, 2, 3]\n    mini = math.inf\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    new_mini = abs(sum(wn[:i]) -sum(wn[i:]))\n    (new_mini < mini)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    mini = new_mini\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(mini)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03018": {
        "s136817012": {
            "code": "s = 'ABCABC'\ns = s[::-1]\nans = 0\nfor i in range(s.count('A')):\n    a = re.search('(CB)+A', s)\n    ans += (a.end() - a.start() - 1) // 2\n    s = s.replace('A', '', 1)\n    print(a.end() - a.start(), s, ans)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                8,
                4,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'ABCABC'",
                    "s = s[::-1]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(s.count('A'))"
                ],
                "3": [
                    "a = re.search('(CB)+A', s)",
                    "ans += (a.end()-a.start()-1)//2",
                    "s = s.replace('A', '', 1)",
                    "print((a.end()-a.start()),s,ans)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABCABC'\n    s = s[::-1]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(s.count('A'))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a = re.search('(CB)+A', s)\n    ans += (a.end()-a.start()-1)//2\n    s = s.replace('A', '', 1)\n    print((a.end()-a.start()),s,ans)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03041": {
        "s411210591": {
            "code": "l = [3, 1]\n_ = l[0]\nK = l[1] - 1\nS = ['A', 'B', 'C']\nif K == 0:\n    left = list('')\nelse:\n    left = S[:K]\nif K == len(S) - 1:\n    right = ''\nelse:\n    right = S[K + 1:]\noutput = left + list(str(S[K]).lower()) + right\nprint(''.join(output))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                12,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "l = [3, 1]",
                    "_ = l[0]",
                    "K = l[1] - 1",
                    "S = ['A', 'B', 'C']",
                    "(K == 0)"
                ],
                "2": [
                    "left = list(\"\")"
                ],
                "3": [
                    "left = S[:K]"
                ],
                "4": [
                    "(K == len(S) - 1)"
                ],
                "5": [
                    "right = (\"\")"
                ],
                "6": [
                    "right = S[K+1:]"
                ],
                "7": [
                    "output = left + list(str(S[K]).lower()) + right",
                    "print( ''.join(output) )"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    l = [3, 1]\n    _ = l[0]\n    K = l[1] - 1\n    S = ['A', 'B', 'C']\n    (K == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    left = list(\"\")\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    left = S[:K]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (K == len(S) - 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    right = (\"\")\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    right = S[K+1:]\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    output = left + list(str(S[K]).lower()) + right\n    print( ''.join(output) )\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s042126550": {
            "code": "n = [3, 1]\ns = ['A', 'B', 'C']\nfor i in s:\n    if i == n[1]:\n        print(s[i].lower(), end='')\n        break\n    print(s[i], end='')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not str')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = [3, 1]",
                    "s = ['A', 'B', 'C']"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> s"
                ],
                "3": [
                    "(i == n[1])"
                ],
                "4": [
                    "print(s[i].lower(),end='')"
                ],
                "5": [
                    "print(s[i],end='')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = [3, 1]\n    s = ['A', 'B', 'C']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (i == n[1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(s[i].lower(),end='')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(s[i],end='')\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03050": {
        "s500615743": {
            "code": "n = 8\ns = 0\nfor p in range(1, int(math.sqrt(n)) + 1):\n    t = (n - p) / p\n    if t.is_integer():\n        if n // int(t) == n % int(t):\n            s += int(t)\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                3,
                4,
                5,
                6,
                7,
                3,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 8",
                    "s = 0"
                ],
                "2": [
                    "iterator -> p, Iterate Over -> range(1, int(math.sqrt(n)) + 1)"
                ],
                "3": [
                    "t = (n - p) / p",
                    "(t.is_integer())"
                ],
                "4": [
                    "(n // int(t) == n % int(t))"
                ],
                "5": [
                    "s += int(t)"
                ],
                "6": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 8\n    s = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> p, Iterate Over -> range(1, int(math.sqrt(n)) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    t = (n - p) / p\n    (t.is_integer())\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (n // int(t) == n % int(t))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    s += int(t)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(s)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s718651862": {
            "code": "N = 8\nans = 0\nfor k in range(1, int(math.sqrt(N) + 1)):\n    m = N // k - 1\n    if N % k == 0 and N // m == N % m:\n        ans += m\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                3,
                4,
                5,
                6,
                3,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "m": "7"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "7"
                        },
                        {
                            "m": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "7"
                        },
                        {
                            "m": "7"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "7"
                        },
                        {
                            "m": "3"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "10"
                        },
                        {
                            "m": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "10"
                        },
                        {
                            "m": "3"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "N": "8"
                        },
                        {
                            "ans": "10"
                        },
                        {
                            "m": "3"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 8",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(1, int(math.sqrt(N) + 1))"
                ],
                "3": [
                    "m = N // k - 1",
                    "(N % k == 0 and N // m == N % m)"
                ],
                "4": [
                    "ans += m"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 8\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(1, int(math.sqrt(N) + 1))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    m = N // k - 1\n    (N % k == 0 and N // m == N % m)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += m\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s830805398": {
            "code": "n = 8\ncount = 0\nfor i in range(1, math.ceil(int(n ** 0.5)) + 1):\n    if n % i == 0:\n        if i == n % (n // i - 1):\n            count += n // i - 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                3,
                4,
                5,
                6,
                3,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 8",
                    "count=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, math.ceil(int(n ** 0.5)) + 1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "(i == n % (n // i - 1))"
                ],
                "5": [
                    "count+=(n//i)-1"
                ],
                "6": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 8\n    count=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, math.ceil(int(n ** 0.5)) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (i == n % (n // i - 1))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    count+=(n//i)-1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03060": {
        "s723409156": {
            "code": "n = 3\nv = [10, 2, 5]\nc = [6, 3, 4]\nprint(reduce(add, [v[i] - c[i] for i in range(n) if v[i] > c[i]]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "v = [10, 2, 5]",
                    "c = [6, 3, 4]",
                    "print(reduce(add,[v[i]-c[i] for i in range(n) if v[i]>c[i]]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    v = [10, 2, 5]\n    c = [6, 3, 4]\n    print(reduce(add,[v[i]-c[i] for i in range(n) if v[i]>c[i]]))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s460866271": {
            "code": "n = '3'\nv = [10, 2, 5]\nc = [6, 3, 4]\nprofit = v - c\npositive_profit = profit(profit > 0)\nprint(positive_profit.sum())",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '3'",
                    "v = [10, 2, 5]",
                    "c = [6, 3, 4]",
                    "profit = v - c",
                    "positive_profit = profit(profit > 0)",
                    "print(positive_profit.sum())"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '3'\n    v = [10, 2, 5]\n    c = [6, 3, 4]\n    profit = v - c\n    positive_profit = profit(profit > 0)\n    print(positive_profit.sum())\nNext:\n    <END>\n"
        },
        "s088395456": {
            "code": "n = '3'\nv = [10, 2, 5]\nc = [6, 3, 4]\nprofit = v - c\npositive_profit = profit(profit > 0)\nprint(np.sum(positive_profit))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '3'",
                    "v = [10, 2, 5]",
                    "c = [6, 3, 4]",
                    "profit = v - c",
                    "positive_profit = profit(profit > 0)",
                    "print(np.sum(positive_profit))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '3'\n    v = [10, 2, 5]\n    c = [6, 3, 4]\n    profit = v - c\n    positive_profit = profit(profit > 0)\n    print(np.sum(positive_profit))\nNext:\n    <END>\n"
        }
    },
    "p03061": {
        "s365118613": {
            "code": "n = 3\na = [7, 6, 8]\nm = 0\nfor i in range(n):\n    b = a.copy()\n    b[i:i + 1] = []\n    g = reduce(math.gcd, b)\n    m = max(m, g)\nprint(m)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                6,
                7,
                8,
                4,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [7, 6, 8]",
                    "m = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "b = a.copy()",
                    "b[i:i+1] = []",
                    "g = reduce(math.gcd,b)",
                    "m = max(m,g)"
                ],
                "4": [
                    "print(m)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [7, 6, 8]\n    m = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    b = a.copy()\n    b[i:i+1] = []\n    g = reduce(math.gcd,b)\n    m = max(m,g)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(m)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s861119109": {
            "code": "n = 3\na = [7, 6, 8]\nL = [0] + list(accumulate(a, math.gcd))\nR = list(accumulate(reversed(a), math.gcd))[::-1] + [0]\nans = 0\nfor i in range(n - 1):\n    ans = max(math.gcd(L[i], R[i + 1]), ans)\nprint(L)\nprint(R)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                6,
                7,
                6,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "2"
                        },
                        {
                            "L": "[0, 7, 1, 1]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "R": "[1, 2, 8, 0]"
                        },
                        {
                            "a": "[7, 6, 8]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "2"
                        },
                        {
                            "L": "[0, 7, 1, 1]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "R": "[1, 2, 8, 0]"
                        },
                        {
                            "a": "[7, 6, 8]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "2"
                        },
                        {
                            "L": "[0, 7, 1, 1]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "R": "[1, 2, 8, 0]"
                        },
                        {
                            "a": "[7, 6, 8]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [7, 6, 8]",
                    "L = [0]+list(accumulate(a, math.gcd))",
                    "R = list(accumulate(reversed(a), math.gcd))[::-1]+[0]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n - 1)"
                ],
                "3": [
                    "ans = max(math.gcd(L[i],R[i+1]),ans)"
                ],
                "4": [
                    "print(L)",
                    "print(R)",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [7, 6, 8]\n    L = [0]+list(accumulate(a, math.gcd))\n    R = list(accumulate(reversed(a), math.gcd))[::-1]+[0]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = max(math.gcd(L[i],R[i+1]),ans)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(L)\n    print(R)\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s882989805": {
            "code": "N = 3\nA = [7, 6, 8]\nA.sort()\nif N >= 3:\n    ans = max(math.gcd(A[0], A[1]), math.gcd(A[1], A[2]), math.gcd(A[0], A[2]))\nelif N == 2:\n    ans = max(A[0], A[1])\nelse:\n    ans = 1000000000\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [7, 6, 8]",
                    "A.sort()",
                    "(N >= 3)"
                ],
                "2": [
                    "ans = max(math.gcd(A[0], A[1]), math.gcd(A[1], A[2]), math.gcd(A[0], A[2]))"
                ],
                "3": [
                    "(N == 2)"
                ],
                "4": [
                    "ans = max(A[0], A[1])"
                ],
                "5": [
                    "ans = 1000000000"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [7, 6, 8]\n    A.sort()\n    (N >= 3)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = max(math.gcd(A[0], A[1]), math.gcd(A[1], A[2]), math.gcd(A[0], A[2]))\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    (N == 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans = max(A[0], A[1])\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    ans = 1000000000\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s889591555": {
            "code": "n = 3\na = [7, 6, 8]\nb = []\nfor i in range(n):\n    b += gcd(a[i], a[i - 1])\nb.sort()\nprint(b[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [7, 6, 8]",
                    "b=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "b+=gcd(a[i],a[i-1])"
                ],
                "4": [
                    "b.sort()",
                    "print(b[2])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [7, 6, 8]\n    b=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    b+=gcd(a[i],a[i-1])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    b.sort()\n    print(b[2])\nNext:\n    <END>\n"
        },
        "s471678400": {
            "code": "n = 3\na = [7, 6, 8]\nL = list(accumulate(a, math.gcd))\nR = list(accumulate(reversed(a), math.gcd))\nans = 0\nif n == 2:\n    print(max(a))\nelse:\n    for i in range(1, n):\n        ans = max(math.gcd(L[i], R[i]), ans)\n        print(max(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [7, 6, 8]",
                    "L = list(accumulate(a, math.gcd))",
                    "R = list(accumulate(reversed(a), math.gcd))",
                    "ans = 0",
                    "(n == 2)"
                ],
                "2": [
                    "print(max(a))"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "4": [
                    "ans = max(math.gcd(L[i],R[i]),ans)",
                    "print(max(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [7, 6, 8]\n    L = list(accumulate(a, math.gcd))\n    R = list(accumulate(reversed(a), math.gcd))\n    ans = 0\n    (n == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(max(a))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    ans = max(math.gcd(L[i],R[i]),ans)\n    print(max(ans))\nNext:\n    Go to Block: 3\n"
        },
        "s434152821": {
            "code": "n = 3\na = [7, 6, 8]\nb = []\nif n == 2:\n    print(max(a))\nelse:\n    for i in range(n - 1):\n        x = a[i]\n        y = a[i + 1]\n        b += list(gcd(x, y))\n    b += list(gcd(a[0], a[-1]))\n    b.sort()\n    print(b[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [7, 6, 8]",
                    "b=[]",
                    "(n == 2)"
                ],
                "2": [
                    "print(max(a))"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(n - 1)"
                ],
                "4": [
                    "x=a[i]",
                    "y=a[i+1]",
                    "b+=list(gcd(x,y))"
                ],
                "5": [
                    "b+=list(gcd(a[0],a[-1]))",
                    "b.sort()",
                    "print(b[2])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [7, 6, 8]\n    b=[]\n    (n == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(max(a))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    x=a[i]\n    y=a[i+1]\n    b+=list(gcd(x,y))\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    b+=list(gcd(a[0],a[-1]))\n    b.sort()\n    print(b[2])\nNext:\n    <END>\n"
        }
    },
    "p03062": {
        "s290037428": {
            "code": "N = 3\narray = [-10, 5, -4]\nnega = []\nposi = []\nfor num in array:\n    if num >= 0:\n        heappush(posi, num)\n    else:\n        heappush(nega, num)\nnega = [num * -1 for num in nega]\nif len(nega) % 2 == 0:\n    ans = sum(nega) + sum(posi)\nelse:\n    min_posi = heappop(posi)\n    max_nega = heappop(nega)\n    if min_posi > max_nega:\n        ans = sum(nega) + sum(posi) + min_posi - max_nega\n    else:\n        ans = sum(nega) + sum(posi) - min_posi + max_nega\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                },
                "11": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                5,
                6,
                7,
                5,
                6,
                9,
                5,
                10,
                11,
                12,
                20
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "array = [-10, 5, -4]",
                    "nega = []",
                    "posi = []"
                ],
                "2": [
                    "iterator -> num, Iterate Over -> array"
                ],
                "3": [
                    "(num >= 0)"
                ],
                "4": [
                    "heappush(posi,num)"
                ],
                "5": [
                    "heappush(nega,num)"
                ],
                "6": [
                    "nega = [num*(-1) for num in nega]",
                    "(len(nega) % 2 == 0)"
                ],
                "7": [
                    "ans = sum(nega) + sum(posi)"
                ],
                "8": [
                    "min_posi = heappop(posi)",
                    "max_nega = heappop(nega)",
                    "(min_posi > max_nega)"
                ],
                "9": [
                    "ans = sum(nega) + sum(posi) + min_posi - max_nega"
                ],
                "10": [
                    "ans = sum(nega) + sum(posi) - min_posi + max_nega"
                ],
                "11": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    array = [-10, 5, -4]\n    nega = []\n    posi = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> num, Iterate Over -> array\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (num >= 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    heappush(posi,num)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    heappush(nega,num)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    nega = [num*(-1) for num in nega]\n    (len(nega) % 2 == 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans = sum(nega) + sum(posi)\nNext:\n    Go to Block: 11\n\nBlock 8:\nStatement:\n    min_posi = heappop(posi)\n    max_nega = heappop(nega)\n    (min_posi > max_nega)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    ans = sum(nega) + sum(posi) + min_posi - max_nega\nNext:\n    Go to Block: 11\n\nBlock 10:\nStatement:\n    ans = sum(nega) + sum(posi) - min_posi + max_nega\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s115262679": {
            "code": "n = 3\na = [-10, 5, -4]\na.sort()\nidx = bisect.bisect_left(a, 0)\nif idx % 2 == 0:\n    print(sum(abs(a)))\nelse:\n    sm = [abs(x) for x in a]\n    print(sum(sm) - 2 * min(abs(a[idx]), abs(a[idx - 1])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "[-10, -4, 5]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "idx": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "[-10, -4, 5]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "idx": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"bad operand type for abs(): 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [-10, 5, -4]",
                    "a.sort()",
                    "idx = bisect.bisect_left(a, 0)",
                    "(idx % 2 == 0)"
                ],
                "2": [
                    "print(sum(abs(a)))"
                ],
                "3": [
                    "sm = [abs(x) for x in a]",
                    "print(sum(sm) - 2*min(abs(a[idx]), abs(a[idx-1])))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [-10, 5, -4]\n    a.sort()\n    idx = bisect.bisect_left(a, 0)\n    (idx % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(sum(abs(a)))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    sm = [abs(x) for x in a]\n    print(sum(sm) - 2*min(abs(a[idx]), abs(a[idx-1])))\nNext:\n    <END>\n"
        },
        "s409567635": {
            "code": "N = 3\nA = [-10, 5, -4]\nA = list(map(math.fabs, A))\nA.sort()\nprint(sum(A[1:] - A[0]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [-10, 5, -4]",
                    "A=list(map(math.fabs, A))",
                    "A.sort()",
                    "print(sum(A[1:]-A[0]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [-10, 5, -4]\n    A=list(map(math.fabs, A))\n    A.sort()\n    print(sum(A[1:]-A[0]))\nNext:\n    <END>\n"
        }
    },
    "p03067": {
        "s386617095": {
            "code": "huga = [3, 8, 5]\na = huga[0]\nb = huga[1]\nc = huga[2]\nif a > b:\n    a = x\n    b = a\n    a = x\nif a < c and b > c:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "huga = [3, 8, 5]",
                    "a=huga[0]",
                    "b=huga[1]",
                    "c=huga[2]",
                    "(a > b)"
                ],
                "2": [
                    "a=x",
                    "b=a",
                    "a=x"
                ],
                "3": [
                    "(a < c and b > c)"
                ],
                "4": [
                    "print(\"Yes\")"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    huga = [3, 8, 5]\n    a=huga[0]\n    b=huga[1]\n    c=huga[2]\n    (a > b)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a=x\n    b=a\n    a=x\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (a < c and b > c)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03068": {
        "s699888743": {
            "code": "n = '5'\ns = 'error'\nk = '2'\nchlist = list(s)\nnonreplace = chlist[int(k)]\nfor num in range(int(n)):\n    if chlist[num] == nonreplace:\n        pass\n    else:\n        chlist[num] = '*'\nstred = ''.join(chlist)\nprint(stred)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                10,
                6,
                7,
                8,
                6,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "s = 'error'",
                    "k = '2'",
                    "chlist = list(s)",
                    "nonreplace = chlist[int(k)]"
                ],
                "2": [
                    "iterator -> num, Iterate Over -> range(int(n))"
                ],
                "3": [
                    "(chlist[num] == nonreplace)"
                ],
                "4": [
                    "chlist[num] = \"*\""
                ],
                "5": [
                    "stred = ''.join(chlist)",
                    "print(stred)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    s = 'error'\n    k = '2'\n    chlist = list(s)\n    nonreplace = chlist[int(k)]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> num, Iterate Over -> range(int(n))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (chlist[num] == nonreplace)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    chlist[num] = \"*\"\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    stred = ''.join(chlist)\n    print(stred)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s415320136": {
            "code": "n = 5\ns = 'error'\nk = 2\nprint(sub(f'[^{s[k - 1]}]', '*', s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "s = 'error'",
                    "k = 2",
                    "print(sub(f'[^{s[k-1]}]', '*', s))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    s = 'error'\n    k = 2\n    print(sub(f'[^{s[k-1]}]', '*', s))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s885221072": {
            "code": "N = 5\ns = 'error'\nk = 2\nt = s[k - 1]\nu = ''\nfor i in s:\n    if s[i] == t:\n        u += s[i]\n    else:\n        u += '*'\nprint(u)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"string indices must be integers, not 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "s = 'error'",
                    "k = 2",
                    "t = s[k-1]",
                    "u = \"\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> s"
                ],
                "3": [
                    "(s[i] == t)"
                ],
                "4": [
                    "u += s[i]"
                ],
                "5": [
                    "u += '*'"
                ],
                "6": [
                    "print(u)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    s = 'error'\n    k = 2\n    t = s[k-1]\n    u = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] == t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    u += s[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    u += '*'\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(u)\nNext:\n    <END>\n"
        }
    },
    "p03072": {
        "s199700684": {
            "code": "n = 4\nh = [6, 5, 6, 8]\nx = 1\nans = h[0]\nfor i in range(1, n):\n    if h[0] > h[1] and h[0] > h[2] and (h[0] > h[3]):\n        x = 0\n        print(1)\n        sys.exit()\n    if h[i] >= h[i - 1]:\n        x = x + 1\nprint(x)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                10,
                5,
                6,
                10,
                11,
                5,
                6,
                10,
                11,
                5,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "h = [6, 5, 6, 8]",
                    "x=1",
                    "ans=h[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "(h[0] > h[1] and h[0] > h[2] and (h[0] > h[3]))"
                ],
                "4": [
                    "x=0",
                    "print(1)",
                    "sys.exit()"
                ],
                "5": [
                    "(h[i] >= h[i - 1])"
                ],
                "6": [
                    "x=x+1"
                ],
                "7": [
                    "print(x)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    h = [6, 5, 6, 8]\n    x=1\n    ans=h[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (h[0] > h[1] and h[0] > h[2] and (h[0] > h[3]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    x=0\n    print(1)\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (h[i] >= h[i - 1])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    x=x+1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(x)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03073": {
        "s671328898": {
            "code": "H = '000'\nH = str.split(H)\nH = np.array(H, int)\nx = []\ny = []\nfor i in range(len(H)):\n    x.append(i % 2)\n    y.append((i + 1) // 2)\nprint(H == np.array(x))\nprint(H == np.array(y))\na = sum(H == np.array(x))\nb = sum(H == np.array(y))\nif a >= b:\n    print(len(H) - a)\nelse:\n    print(len(H) - b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        13
                    ]
                },
                "5": {
                    "range": [
                        14,
                        14
                    ]
                },
                "6": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                6,
                9,
                10,
                11,
                12,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "H = '000'",
                    "H = str.split(H)",
                    "H = np.array(H, int)",
                    "x = []",
                    "y = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(H))"
                ],
                "3": [
                    "x.append(i%2)",
                    "y.append((i+1)//2)"
                ],
                "4": [
                    "print(H == np.array(x))",
                    "print(H == np.array(y))",
                    "a = sum(H == np.array(x))",
                    "b = sum(H == np.array(y))",
                    "(a >= b)"
                ],
                "5": [
                    "print(len(H)-a)"
                ],
                "6": [
                    "print(len(H)-b)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    H = '000'\n    H = str.split(H)\n    H = np.array(H, int)\n    x = []\n    y = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(H))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x.append(i%2)\n    y.append((i+1)//2)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(H == np.array(x))\n    print(H == np.array(y))\n    a = sum(H == np.array(x))\n    b = sum(H == np.array(y))\n    (a >= b)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(len(H)-a)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(len(H)-b)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s293675298": {
            "code": "S = '000'\nS_int = int(S)\ntile_color = []\nketa = len(S)\nfor i in range(keta):\n    if S_int / 10 == int(S_int / 10):\n        tile_color.insert(0, '0')\n    else:\n        tile_color.insert(0, '1')\n    S_int = int(S_int / 10)\nlength_of_S = len(tile_color)\ncandidate_1 = np.zeros((1, length_of_S))\ncandidate_1[0, 0::2] = 1\ncandidate_2 = np.zeros((1, length_of_S))\ncandidate_2[0, 1::2] = 1\ntile_color = [int(n) for n in tile_color]\ndistance = [np.sum(np.abs(tile_color - candidate_1[0, :])), np.sum(np.abs(tile_color - candidate_2[0, :]))]\nprint(int(min(distance)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                5,
                6,
                7,
                10,
                5,
                6,
                7,
                10,
                5,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = '000'",
                    "S_int = int(S)",
                    "tile_color = []",
                    "keta = len(S)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(keta)"
                ],
                "3": [
                    "(S_int / 10 == int(S_int / 10))"
                ],
                "4": [
                    "tile_color.insert(0, '0')"
                ],
                "5": [
                    "tile_color.insert(0, '1')"
                ],
                "6": [
                    "S_int = int(S_int/10)"
                ],
                "7": [
                    "length_of_S = len(tile_color)",
                    "candidate_1 = np.zeros((1,length_of_S))",
                    "candidate_1[0,0::2] = 1",
                    "candidate_2 = np.zeros((1,length_of_S))",
                    "candidate_2[0,1::2] = 1",
                    "tile_color = [int(n) for n in tile_color]",
                    "distance = [np.sum(np.abs(tile_color - candidate_1[0,:])), np.sum(np.abs(tile_color - candidate_2[0,:]))]",
                    "print(int(min(distance)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '000'\n    S_int = int(S)\n    tile_color = []\n    keta = len(S)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(keta)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (S_int / 10 == int(S_int / 10))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    tile_color.insert(0, '0')\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    tile_color.insert(0, '1')\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    S_int = int(S_int/10)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    length_of_S = len(tile_color)\n    candidate_1 = np.zeros((1,length_of_S))\n    candidate_1[0,0::2] = 1\n    candidate_2 = np.zeros((1,length_of_S))\n    candidate_2[0,1::2] = 1\n    tile_color = [int(n) for n in tile_color]\n    distance = [np.sum(np.abs(tile_color - candidate_1[0,:])), np.sum(np.abs(tile_color - candidate_2[0,:]))]\n    print(int(min(distance)))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s326294511": {
            "code": "input = sys.stdin.readline\nS = ['0', '0', '0']\nS = map(int, S)\nprev = S[0]\nans = 0\nfor i in range(1, len(S) - 1):\n    cur = S[i]\n    if prev ^ cur == 0:\n        ans += 1\n        prev = 2 + ~cur\n    else:\n        prev = cur\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7ff41ac37510>"
                        },
                        {
                            "S": "<map object at 0x7ff41a6d8610>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'map' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "S = ['0', '0', '0']",
                    "S = map(int, S)",
                    "prev = S[0]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, len(S) - 1)"
                ],
                "3": [
                    "cur = S[i]",
                    "(prev ^ cur == 0)"
                ],
                "4": [
                    "ans += 1",
                    "prev = 2 + ~cur"
                ],
                "5": [
                    "prev = cur"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    S = ['0', '0', '0']\n    S = map(int, S)\n    prev = S[0]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, len(S) - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    cur = S[i]\n    (prev ^ cur == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += 1\n    prev = 2 + ~cur\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    prev = cur\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03075": {
        "s114582577": {
            "code": "n = 1\nli = [2]\nprint(math.ceil(n / min(li)) + 4)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 1",
                    "li = [2]",
                    "print(math.ceil(n/min(li))+4)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 1\n    li = [2]\n    print(math.ceil(n/min(li))+4)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s815157740": {
            "code": "a = 1\nb = 2\nc = 4\nd = 8\ne = 9\nA = a % 10\nB = b % 10\nC = c % 10\nD = d % 10\nE = e % 10\nS = []\nsum = 0\nif A != 0:\n    S.append(A)\nif B != 0:\n    S.append(B)\nif C != 0:\n    S.append(C)\nif D != 0:\n    S.append(D)\nif E != 0:\n    S.append(E)\nif len(S) == 0:\n    sum = a + b + c + d + e\nelse:\n    sum = (a // 10 + b // 10 + c // 10 + d // 10 + e // 10) * 10 + 10 * (len(A) - 1) + min(S)\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        13
                    ]
                },
                "2": {
                    "range": [
                        14,
                        14
                    ]
                },
                "3": {
                    "range": [
                        15,
                        15
                    ]
                },
                "4": {
                    "range": [
                        16,
                        16
                    ]
                },
                "5": {
                    "range": [
                        17,
                        17
                    ]
                },
                "6": {
                    "range": [
                        18,
                        18
                    ]
                },
                "7": {
                    "range": [
                        19,
                        19
                    ]
                },
                "8": {
                    "range": [
                        20,
                        20
                    ]
                },
                "9": {
                    "range": [
                        21,
                        21
                    ]
                },
                "10": {
                    "range": [
                        22,
                        22
                    ]
                },
                "11": {
                    "range": [
                        23,
                        23
                    ]
                },
                "12": {
                    "range": [
                        24,
                        24
                    ]
                },
                "13": {
                    "range": [
                        25,
                        25
                    ]
                },
                "14": {
                    "range": [
                        26,
                        26
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                26
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "S": "[]"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "S": "[1]"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "S": "[1]"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2]"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2]"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2, 4]"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2, 4]"
                        }
                    ]
                },
                {
                    "block": 8,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8]"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8]"
                        }
                    ]
                },
                {
                    "block": 10,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8, 9]"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 11,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8, 9]"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 13,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8, 9]"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 1",
                    "b = 2",
                    "c = 4",
                    "d = 8",
                    "e = 9",
                    "A = a % 10",
                    "B = b % 10",
                    "C = c % 10",
                    "D = d % 10",
                    "E = e % 10",
                    "S = []",
                    "sum = 0",
                    "(A != 0)"
                ],
                "2": [
                    "S.append(A)"
                ],
                "3": [
                    "(B != 0)"
                ],
                "4": [
                    "S.append(B)"
                ],
                "5": [
                    "(C != 0)"
                ],
                "6": [
                    "S.append(C)"
                ],
                "7": [
                    "(D != 0)"
                ],
                "8": [
                    "S.append(D)"
                ],
                "9": [
                    "(E != 0)"
                ],
                "10": [
                    "S.append(E)"
                ],
                "11": [
                    "(len(S) == 0)"
                ],
                "12": [
                    "sum = a + b + c + d + e"
                ],
                "13": [
                    "sum = (a //10 + b //10 + c //10 + d //10 + e //10)*10 + 10*(len(A) - 1) +min(S)"
                ],
                "14": [
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 9\n    A = a % 10\n    B = b % 10\n    C = c % 10\n    D = d % 10\n    E = e % 10\n    S = []\n    sum = 0\n    (A != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    S.append(A)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (B != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    S.append(B)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (C != 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    S.append(C)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (D != 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    S.append(D)\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (E != 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    S.append(E)\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (len(S) == 0)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    sum = a + b + c + d + e\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    sum = (a //10 + b //10 + c //10 + d //10 + e //10)*10 + 10*(len(A) - 1) +min(S)\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    print(sum)\nNext:\n    <END>\n"
        }
    },
    "p03076": {
        "s451836582": {
            "code": "a = 29\nb = 20\nc = 7\nd = 35\ne = 120\nA = list(str(a))\nB = list(str(b))\nC = list(str(c))\nD = list(str(d))\nE = list(str(e))\nS = []\nsum = 0\nif A[-1] == '0':\n    sum += a\nelse:\n    S.append(A[-1])\n    sum += a + (10 - int(A[-1]))\nif B[-1] == '0':\n    sum += b\nelse:\n    S.append(B[-1])\n    sum += b + (10 - int(B[-1]))\nif C[-1] == '0':\n    sum += c\nelse:\n    S.append(C[-1])\n    sum += c + (10 - int(C[-1]))\nif D[-1] == '0':\n    sum += d\nelse:\n    S.append(D[-1])\n    sum += d + (10 - int(D[-1]))\nif E[-1] == '0':\n    sum += e\nelse:\n    S.append(E[-1])\n    sum += e + (10 - int(E[-1]))\nif len(S) != '0':\n    k = np.argmin(S)\n    sum += int(S[k]) - 10\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        13
                    ]
                },
                "2": {
                    "range": [
                        14,
                        14
                    ]
                },
                "3": {
                    "range": [
                        15,
                        16
                    ]
                },
                "4": {
                    "range": [
                        17,
                        17
                    ]
                },
                "5": {
                    "range": [
                        18,
                        18
                    ]
                },
                "6": {
                    "range": [
                        19,
                        20
                    ]
                },
                "7": {
                    "range": [
                        21,
                        21
                    ]
                },
                "8": {
                    "range": [
                        22,
                        22
                    ]
                },
                "9": {
                    "range": [
                        23,
                        24
                    ]
                },
                "10": {
                    "range": [
                        25,
                        25
                    ]
                },
                "11": {
                    "range": [
                        26,
                        26
                    ]
                },
                "12": {
                    "range": [
                        27,
                        28
                    ]
                },
                "13": {
                    "range": [
                        29,
                        29
                    ]
                },
                "14": {
                    "range": [
                        30,
                        30
                    ]
                },
                "15": {
                    "range": [
                        31,
                        32
                    ]
                },
                "16": {
                    "range": [
                        33,
                        33
                    ]
                },
                "17": {
                    "range": [
                        34,
                        35
                    ]
                },
                "18": {
                    "range": [
                        36,
                        36
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                16,
                17,
                18,
                19,
                23,
                26,
                27,
                28,
                31,
                32,
                33,
                34,
                38,
                39,
                40,
                41
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                },
                {
                    "block": 16,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                },
                {
                    "block": 18,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = 29",
                    "b = 20",
                    "c = 7",
                    "d = 35",
                    "e = 120",
                    "A = list(str(a))",
                    "B = list(str(b))",
                    "C = list(str(c))",
                    "D = list(str(d))",
                    "E = list(str(e))",
                    "S = []",
                    "sum = 0",
                    "(A[-1] == '0')"
                ],
                "2": [
                    "sum += a"
                ],
                "3": [
                    "S.append(A[-1])",
                    "sum += a + (10 - int(A[-1]))"
                ],
                "4": [
                    "(B[-1] == '0')"
                ],
                "5": [
                    "sum += b"
                ],
                "6": [
                    "S.append(B[-1])",
                    "sum += b + (10 - int(B[-1]))"
                ],
                "7": [
                    "(C[-1] == '0')"
                ],
                "8": [
                    "sum += c"
                ],
                "9": [
                    "S.append(C[-1])",
                    "sum += c + (10 - int(C[-1]))"
                ],
                "10": [
                    "(D[-1] == '0')"
                ],
                "11": [
                    "sum += d"
                ],
                "12": [
                    "S.append(D[-1])",
                    "sum += d + (10 - int(D[-1]))"
                ],
                "13": [
                    "(E[-1] == '0')"
                ],
                "14": [
                    "sum += e"
                ],
                "15": [
                    "S.append(E[-1])",
                    "sum += e + (10 - int(E[-1]))"
                ],
                "16": [
                    "(len(S) != '0')"
                ],
                "17": [
                    "k = np.argmin(S)",
                    "sum += int(S[k]) - 10"
                ],
                "18": [
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "16": {
                    "with_condition": {
                        "true": 17,
                        "false": 18
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 16
                },
                "15": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 16
                },
                "17": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 18
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 29\n    b = 20\n    c = 7\n    d = 35\n    e = 120\n    A = list(str(a))\n    B = list(str(b))\n    C = list(str(c))\n    D = list(str(d))\n    E = list(str(e))\n    S = []\n    sum = 0\n    (A[-1] == '0')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    sum += a\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    S.append(A[-1])\n    sum += a + (10 - int(A[-1]))\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (B[-1] == '0')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    sum += b\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    S.append(B[-1])\n    sum += b + (10 - int(B[-1]))\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (C[-1] == '0')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    sum += c\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    S.append(C[-1])\n    sum += c + (10 - int(C[-1]))\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    (D[-1] == '0')\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    sum += d\nNext:\n    Go to Block: 13\n\nBlock 12:\nStatement:\n    S.append(D[-1])\n    sum += d + (10 - int(D[-1]))\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (E[-1] == '0')\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    sum += e\nNext:\n    Go to Block: 16\n\nBlock 15:\nStatement:\n    S.append(E[-1])\n    sum += e + (10 - int(E[-1]))\nNext:\n    Go to Block: 16\n\nBlock 16:\nStatement:\n    (len(S) != '0')\nNext:\n    If True: Go to Block 17\n    If False: Go to Block 18\n\nBlock 17:\nStatement:\n    k = np.argmin(S)\n    sum += int(S[k]) - 10\nNext:\n    Go to Block: 18\n\nBlock 18:\nStatement:\n    print(sum)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s261939313": {
            "code": "a = 29\nb = 20\nc = 7\nd = 35\ne = 120\nls = [a, b, c, d, e]\nls_1 = []\nfor i in range(len(ls)):\n    ls_1.append(int(str(ls[i])[-1]))\nls_1 = np.array(ls_1)\nls_1 = 10 - ls_1\nls_1_10 = ls_1[ls_1 < 10]\na = np.argmax(ls_1_10)\nls_non = np.delete(ls_1_10, a, 0)\nls = np.array(ls)\nans = np.sum(ls) + np.sum(ls_non)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = 29",
                    "b = 20",
                    "c = 7",
                    "d = 35",
                    "e = 120",
                    "ls=[a,b,c,d,e]",
                    "ls_1=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(ls))"
                ],
                "3": [
                    "ls_1.append(int(str(ls[i])[-1]))"
                ],
                "4": [
                    "ls_1=np.array(ls_1)",
                    "ls_1=10-ls_1",
                    "ls_1_10=ls_1[ls_1 < 10]",
                    "a=np.argmax(ls_1_10)",
                    "ls_non=np.delete(ls_1_10, a, 0)",
                    "ls=np.array(ls)",
                    "ans=np.sum(ls) + np.sum(ls_non)",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 29\n    b = 20\n    c = 7\n    d = 35\n    e = 120\n    ls=[a,b,c,d,e]\n    ls_1=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(ls))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ls_1.append(int(str(ls[i])[-1]))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    ls_1=np.array(ls_1)\n    ls_1=10-ls_1\n    ls_1_10=ls_1[ls_1 < 10]\n    a=np.argmax(ls_1_10)\n    ls_non=np.delete(ls_1_10, a, 0)\n    ls=np.array(ls)\n    ans=np.sum(ls) + np.sum(ls_non)\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s743803842": {
            "code": "num = ['29', '20', '7', '35', '120']\nnum2 = sorted([list(i)[-1] for i in num], reverse=False)\nnum3 = [n for n in num2 if n != '0']\nC = 0\nc = 1\nfor i in num:\n    j = list(i)[-1]\n    if j == num3[0] and c == 1:\n        C += int(i)\n        c += 1\n    elif c > 1:\n        if int(j) >= 5 or int(j) == 0:\n            C += round(int(i), -1)\n        elif 0 < int(j) < 5:\n            C += round(int(i), -1) + 10\n    elif int(j) >= 5 or int(j) == 0:\n        C += round(int(i), -1)\n    elif 0 < int(j) < 5:\n        C += round(int(i), -1) + 10\nprint(C)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                },
                "11": {
                    "range": [
                        17,
                        17
                    ]
                },
                "12": {
                    "range": [
                        18,
                        18
                    ]
                },
                "13": {
                    "range": [
                        19,
                        19
                    ]
                },
                "14": {
                    "range": [
                        20,
                        20
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                11,
                17,
                18,
                6,
                7,
                8,
                11,
                17,
                18,
                6,
                7,
                8,
                11,
                17,
                18,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                8,
                11,
                12,
                13,
                6,
                21
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "num = ['29', '20', '7', '35', '120']",
                    "num2 = sorted([list(i)[-1] for i in num],reverse = False)",
                    "num3 = [n for n in num2 if n != \"0\" ]",
                    "C = 0",
                    "c = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> num"
                ],
                "3": [
                    "j = list(i)[-1]",
                    "(j == num3[0] and c == 1)"
                ],
                "4": [
                    "C += int(i)",
                    "c += 1"
                ],
                "5": [
                    "(c > 1)"
                ],
                "6": [
                    "(int(j) >= 5 or int(j) == 0)"
                ],
                "7": [
                    "C += round(int(i),-1)"
                ],
                "8": [
                    "(0 < int(j) < 5)"
                ],
                "9": [
                    "C += round(int(i),-1)+10"
                ],
                "10": [
                    "(int(j) >= 5 or int(j) == 0)"
                ],
                "11": [
                    "C += round(int(i),-1)"
                ],
                "12": [
                    "(0 < int(j) < 5)"
                ],
                "13": [
                    "C += round(int(i),-1)+10"
                ],
                "14": [
                    "print(C)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 14
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 10
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 2
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 2
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = ['29', '20', '7', '35', '120']\n    num2 = sorted([list(i)[-1] for i in num],reverse = False)\n    num3 = [n for n in num2 if n != \"0\" ]\n    C = 0\n    c = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> num\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 14\n\nBlock 3:\nStatement:\n    j = list(i)[-1]\n    (j == num3[0] and c == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    C += int(i)\n    c += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (c > 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 10\n\nBlock 6:\nStatement:\n    (int(j) >= 5 or int(j) == 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    C += round(int(i),-1)\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    (0 < int(j) < 5)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 2\n\nBlock 9:\nStatement:\n    C += round(int(i),-1)+10\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    (int(j) >= 5 or int(j) == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    C += round(int(i),-1)\nNext:\n    Go to Block: 2\n\nBlock 12:\nStatement:\n    (0 < int(j) < 5)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 2\n\nBlock 13:\nStatement:\n    C += round(int(i),-1)+10\nNext:\n    Go to Block: 2\n\nBlock 14:\nStatement:\n    print(C)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s968624076": {
            "code": "a = [29, 20, 7, 35, 120]\nsum = 0\nr = []\nfor i in range(5):\n    if a[i] % 10 == 0:\n        sum += a[i]\n    elif a[i] % 10 != 0:\n        r.append(a[i] % 10)\n        sum += 10 * math.ceil(a[i] / 10)\nprint(sum - 10 + min(r))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                7,
                8,
                9,
                4,
                5,
                6,
                4,
                5,
                7,
                8,
                9,
                4,
                5,
                7,
                8,
                9,
                4,
                5,
                6,
                4,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = [29, 20, 7, 35, 120]",
                    "sum = 0",
                    "r =[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(5)"
                ],
                "3": [
                    "(a[i] % 10 == 0)"
                ],
                "4": [
                    "sum+=a[i]"
                ],
                "5": [
                    "(a[i] % 10 != 0)"
                ],
                "6": [
                    "r.append(a[i]%10)",
                    "sum+= (10*math.ceil(a[i]/10))"
                ],
                "7": [
                    "print(sum-10+min(r))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [29, 20, 7, 35, 120]\n    sum = 0\n    r =[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(5)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (a[i] % 10 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    sum+=a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (a[i] % 10 != 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    r.append(a[i]%10)\n    sum+= (10*math.ceil(a[i]/10))\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(sum-10+min(r))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s593061680": {
            "code": "a = [29, 20, 7, 35, 120]\nb = [ceil(i / 10) * 10 for i in a]\nprint(min([sum([a[i]] + [b[j] for j in range if i != j]) for i in range(5)]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'type' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = [29, 20, 7, 35, 120]",
                    "b = [ceil(i / 10) * 10 for i in a]",
                    "print(min([sum([a[i]] + [b[j] for j in range if i != j]) for i in range(5)]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [29, 20, 7, 35, 120]\n    b = [ceil(i / 10) * 10 for i in a]\n    print(min([sum([a[i]] + [b[j] for j in range if i != j]) for i in range(5)]))\nNext:\n    <END>\n"
        },
        "s593709966": {
            "code": "a = 29\nb = 20\nc = 7\nd = 35\ne = 120\nA = list(str(a))\nB = list(str(b))\nC = list(str(c))\nD = list(str(d))\nE = list(str(e))\nk = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])\nsum = 0\nif A[-1] == 0:\n    sum += a\nelse:\n    sum += a + (10 - int(A[-1]))\nif B[-1] == 0:\n    sum += b\nelse:\n    sum += b + (10 - int(B[-1]))\nif C[-1] == 0:\n    sum += c\nelse:\n    sum += c + (10 - int(C[-1]))\nif D[-1] == 0:\n    sum += d\nelse:\n    sum += d + (10 - int(D[-1]))\nif E[-1] == 0:\n    sum += e\nelse:\n    sum += e + (10 - int(E[-1]))\nsum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        13
                    ]
                },
                "2": {
                    "range": [
                        14,
                        14
                    ]
                },
                "3": {
                    "range": [
                        15,
                        15
                    ]
                },
                "4": {
                    "range": [
                        16,
                        16
                    ]
                },
                "5": {
                    "range": [
                        17,
                        17
                    ]
                },
                "6": {
                    "range": [
                        18,
                        18
                    ]
                },
                "7": {
                    "range": [
                        19,
                        19
                    ]
                },
                "8": {
                    "range": [
                        20,
                        20
                    ]
                },
                "9": {
                    "range": [
                        21,
                        21
                    ]
                },
                "10": {
                    "range": [
                        22,
                        22
                    ]
                },
                "11": {
                    "range": [
                        23,
                        23
                    ]
                },
                "12": {
                    "range": [
                        24,
                        24
                    ]
                },
                "13": {
                    "range": [
                        25,
                        25
                    ]
                },
                "14": {
                    "range": [
                        26,
                        26
                    ]
                },
                "15": {
                    "range": [
                        27,
                        27
                    ]
                },
                "16": {
                    "range": [
                        28,
                        29
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                16,
                17,
                20,
                21,
                24,
                25,
                28,
                29,
                32,
                33
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "sum": "30"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "sum": "30"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "sum": "60"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "sum": "60"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "sum": "70"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 10,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "sum": "70"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 12,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "sum": "110"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 13,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "sum": "110"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 15,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "sum": "240"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 16,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "sum": "240"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 29",
                    "b = 20",
                    "c = 7",
                    "d = 35",
                    "e = 120",
                    "A = list(str(a))",
                    "B = list(str(b))",
                    "C = list(str(c))",
                    "D = list(str(d))",
                    "E = list(str(e))",
                    "k = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])",
                    "sum = 0",
                    "(A[-1] == 0)"
                ],
                "2": [
                    "sum += a"
                ],
                "3": [
                    "sum += a + (10 - int(A[-1]))"
                ],
                "4": [
                    "(B[-1] == 0)"
                ],
                "5": [
                    "sum += b"
                ],
                "6": [
                    "sum += b + (10 - int(B[-1]))"
                ],
                "7": [
                    "(C[-1] == 0)"
                ],
                "8": [
                    "sum += c"
                ],
                "9": [
                    "sum += c + (10 - int(C[-1]))"
                ],
                "10": [
                    "(D[-1] == 0)"
                ],
                "11": [
                    "sum += d"
                ],
                "12": [
                    "sum += d + (10 - int(D[-1]))"
                ],
                "13": [
                    "(E[-1] == 0)"
                ],
                "14": [
                    "sum += e"
                ],
                "15": [
                    "sum += e + (10 - int(E[-1]))"
                ],
                "16": [
                    "sum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]",
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 16
                },
                "15": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 16
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 29\n    b = 20\n    c = 7\n    d = 35\n    e = 120\n    A = list(str(a))\n    B = list(str(b))\n    C = list(str(c))\n    D = list(str(d))\n    E = list(str(e))\n    k = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])\n    sum = 0\n    (A[-1] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    sum += a\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    sum += a + (10 - int(A[-1]))\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (B[-1] == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    sum += b\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    sum += b + (10 - int(B[-1]))\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (C[-1] == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    sum += c\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    sum += c + (10 - int(C[-1]))\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    (D[-1] == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    sum += d\nNext:\n    Go to Block: 13\n\nBlock 12:\nStatement:\n    sum += d + (10 - int(D[-1]))\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (E[-1] == 0)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    sum += e\nNext:\n    Go to Block: 16\n\nBlock 15:\nStatement:\n    sum += e + (10 - int(E[-1]))\nNext:\n    Go to Block: 16\n\nBlock 16:\nStatement:\n    sum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]\n    print(sum)\nNext:\n    <END>\n"
        },
        "s621597221": {
            "code": "S = ['29', '20', '7', '35', '120']\nnum = 0\npoint = int(S[0])\nfor i in range(1, 5):\n    if point[-1] == 0:\n        num += point\n        point = S[i]\n    elif point[-1] > int(S[i][-1]):\n        num += point + 10 - point[-1]\n        point = S[i]\n    else:\n        num += int(S[i]) + 10 - intS[i][-1]\nnum += point\nprint(num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = ['29', '20', '7', '35', '120']",
                    "num = 0",
                    "point = int(S[0])"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, 5)"
                ],
                "3": [
                    "(point[-1] == 0)"
                ],
                "4": [
                    "num += point",
                    "point = S[i]"
                ],
                "5": [
                    "(point[-1] > int(S[i][-1]))"
                ],
                "6": [
                    "num += point + 10 - point[-1]",
                    "point = S[i]"
                ],
                "7": [
                    "num += int(S[i]) +10 - intS[i][-1]"
                ],
                "8": [
                    "num += point",
                    "print(num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = ['29', '20', '7', '35', '120']\n    num = 0\n    point = int(S[0])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, 5)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (point[-1] == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    num += point\n    point = S[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (point[-1] > int(S[i][-1]))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    num += point + 10 - point[-1]\n    point = S[i]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    num += int(S[i]) +10 - intS[i][-1]\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    num += point\n    print(num)\nNext:\n    <END>\n"
        }
    },
    "p03077": {
        "s047558971": {
            "code": "n = 5\nlis = [3, 2, 4, 3, 5]\nprint(5 + math.ceil(n / min(lis)) - 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "lis = [3, 2, 4, 3, 5]",
                    "print(5 + math.ceil(n/min(lis))-1)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    lis = [3, 2, 4, 3, 5]\n    print(5 + math.ceil(n/min(lis))-1)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s918115862": {
            "code": "n = '5'\na = [3, 2, 4, 3, 5]\nprint(floor(n / min(a)) + 5)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "a = [3, 2, 4, 3, 5]",
                    "print(floor(n / min(a)) + 5)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    a = [3, 2, 4, 3, 5]\n    print(floor(n / min(a)) + 5)\nNext:\n    <END>\n"
        },
        "s706961220": {
            "code": "n = 5\nmiti = [3]\nmini = min(miti)\nretu = n // miti\nif n <= mini:\n    print(5)\nelse:\n    print(4 + retu)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "miti = [3]",
                    "mini=min(miti)",
                    "retu=n//miti",
                    "(n <= mini)"
                ],
                "2": [
                    "print(5)"
                ],
                "3": [
                    "print(4+retu)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    miti = [3]\n    mini=min(miti)\n    retu=n//miti\n    (n <= mini)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(5)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(4+retu)\nNext:\n    <END>\n"
        },
        "s899951298": {
            "code": "n = 5\nl = ['3', '2', '4', '3', '5']\nprint(math.ceil(n / min(l)) + 4)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "l = ['3', '2', '4', '3', '5']",
                    "print(math.ceil(n/min(l))+4)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    l = ['3', '2', '4', '3', '5']\n    print(math.ceil(n/min(l))+4)\nNext:\n    <END>\n"
        },
        "s156763467": {
            "code": "n = 5\nl = [int(input) for i in range(5)]\nprint(math.ceil(n / min(l)) + 4)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'builtin_function_or_method'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "l=[int(input) for i in range(5)]",
                    "print(math.ceil(n/min(l))+4)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    l=[int(input) for i in range(5)]\n    print(math.ceil(n/min(l))+4)\nNext:\n    <END>\n"
        },
        "s248871628": {
            "code": "n = 5\na = [3, 2, 4, 3, 5]\nb = 0\nfor i in range(5):\n    b = max(math.ceil(n // a[i]))\nprint(5 + b - 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [3, 2, 4, 3, 5]",
                    "b=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(5)"
                ],
                "3": [
                    "b=max(math.ceil(n//a[i]))"
                ],
                "4": [
                    "print(5+b-1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [3, 2, 4, 3, 5]\n    b=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(5)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    b=max(math.ceil(n//a[i]))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(5+b-1)\nNext:\n    <END>\n"
        },
        "s423088391": {
            "code": "N = 5\nr = [3, 2, 4, 3, 5]\nm_r = min(r)\nprint(math.ceil(N / r) + 4)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "r = [3, 2, 4, 3, 5]",
                    "m_r = min(r)",
                    "print(math.ceil(N/r) + 4)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    r = [3, 2, 4, 3, 5]\n    m_r = min(r)\n    print(math.ceil(N/r) + 4)\nNext:\n    <END>\n"
        }
    },
    "p03085": {
        "s527635336": {
            "code": "input = sys.stdin.readline\nlist = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}\nb = 'A'\nprint(list[b])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "list={\"A\":\"T\",\"T\":\"A\",\"G\":\"C\",\"C\":\"G\"}",
                    "b = 'A'",
                    "print(list[b])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    list={\"A\":\"T\",\"T\":\"A\",\"G\":\"C\",\"C\":\"G\"}\n    b = 'A'\n    print(list[b])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s910759171": {
            "code": "input = sys.stdin.readlines\nlist = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}\nb = ['A']\nprint(list[b])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "input": "<built-in method readlines of _io.TextIOWrapper object at 0x7f42b5083510>"
                        },
                        {
                            "list": "{'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}"
                        },
                        {
                            "b": "['A']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unhashable type: 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readlines",
                    "list={\"A\":\"T\",\"T\":\"A\",\"G\":\"C\",\"C\":\"G\"}",
                    "b = ['A']",
                    "print(list[b])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readlines\n    list={\"A\":\"T\",\"T\":\"A\",\"G\":\"C\",\"C\":\"G\"}\n    b = ['A']\n    print(list[b])\nNext:\n    <END>\n"
        }
    },
    "p03086": {
        "s074276755": {
            "code": "ans = 3\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "ans = 3",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    ans = 3\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s571850776": {
            "code": "S = 'ATCODER'\nprint(max([len(s) for s in re.findall('[ACGT]+', S)]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'ATCODER'",
                    "print(max([len(s) for s in re.findall('[ACGT]+',S)]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ATCODER'\n    print(max([len(s) for s in re.findall('[ACGT]+',S)]))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s102010848": {
            "code": "S = 'ATCODER'\nprint(len(max(re.findall('[ATCG]+', S))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'ATCODER'",
                    "print(len(max(re.findall('[ATCG]+', S))))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ATCODER'\n    print(len(max(re.findall('[ATCG]+', S))))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s243739053": {
            "code": "S = 'ATCODER'\np = re.compile('[ATCG]+')\nf = p.finditer\ncandidate = [i.span()[1] - i.span()[0] for i in f]\nif candidate == []:\n    print(0)\nelse:\n    print(max(candidate))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_method' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'ATCODER'",
                    "p = re.compile('[ATCG]+')",
                    "f = p.finditer",
                    "candidate = [i.span()[1]- i.span()[0] for i in f]",
                    "(candidate == [])"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "print(max(candidate))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ATCODER'\n    p = re.compile('[ATCG]+')\n    f = p.finditer\n    candidate = [i.span()[1]- i.span()[0] for i in f]\n    (candidate == [])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(max(candidate))\nNext:\n    <END>\n"
        }
    },
    "p03088": {
        "s664179411": {
            "code": "n = 3\nA_1 = np.zeros((4, 4), dtype='int64')\nA_2 = np.ones((4, 4), dtype='int64')\nB = np.ones((4, 4), dtype='int64')\nfor _ in range(n - 2):\n    A_3 = (B @ A_2).T\n    A_3 %= 10 ** 9 + 7\n    A_3[2, 1] -= A_2[0, 2] + A_1[0, 2] + A_1[0, 3]\n    A_3[1, 2] -= A_2[0, 1]\n    A_3[0, 1] -= A_2[2, 0]\n    A_3[3, 1] -= A_1[0, 2]\n    A_1, A_2 = (A_2, A_3)\nprint(np.sum(A_3) % (10 ** 9 + 7))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        12
                    ]
                },
                "4": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                5,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "A_1 = np.zeros((4,4), dtype='int64')",
                    "A_2 = np.ones((4,4), dtype='int64')",
                    "B = np.ones((4,4), dtype='int64')"
                ],
                "2": [
                    "iterator -> _, Iterate Over -> range(n - 2)"
                ],
                "3": [
                    "A_3 = (B@A_2).T",
                    "A_3 %= 10**9+7",
                    "A_3[2,1] -= A_2[0,2]+A_1[0,2]+A_1[0,3]",
                    "A_3[1,2] -= A_2[0,1]",
                    "A_3[0,1] -= A_2[2,0]",
                    "A_3[3,1] -= A_1[0,2]",
                    "A_1, A_2 = A_2, A_3"
                ],
                "4": [
                    "print(np.sum(A_3)%(10**9+7))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    A_1 = np.zeros((4,4), dtype='int64')\n    A_2 = np.ones((4,4), dtype='int64')\n    B = np.ones((4,4), dtype='int64')\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> _, Iterate Over -> range(n - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    A_3 = (B@A_2).T\n    A_3 %= 10**9+7\n    A_3[2,1] -= A_2[0,2]+A_1[0,2]+A_1[0,3]\n    A_3[1,2] -= A_2[0,1]\n    A_3[0,1] -= A_2[2,0]\n    A_3[3,1] -= A_1[0,2]\n    A_1, A_2 = A_2, A_3\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(np.sum(A_3)%(10**9+7))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03095": {
        "s060418275": {
            "code": "N = 4\nS = ['a', 'b', 'c', 'd']\nanswer = 0\ncol = collections.Counter(S)\nvalues, counts = zip(*col.most_common())\nfor i in range(N):\n    C = list(itertools.combinations(counts, i + 1))\n    kumiawase = [np.prod(j) for j in C]\n    answer += sum(kumiawase)\nprint(answer)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                7,
                8,
                9,
                6,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "S = ['a', 'b', 'c', 'd']",
                    "answer=0",
                    "col = collections.Counter(S)",
                    "values, counts = zip(*col.most_common())"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "C=list(itertools.combinations(counts, i+1))",
                    "kumiawase=[np.prod(j) for j in C]",
                    "answer+=sum(kumiawase)"
                ],
                "4": [
                    "print(answer)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    S = ['a', 'b', 'c', 'd']\n    answer=0\n    col = collections.Counter(S)\n    values, counts = zip(*col.most_common())\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    C=list(itertools.combinations(counts, i+1))\n    kumiawase=[np.prod(j) for j in C]\n    answer+=sum(kumiawase)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(answer)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03096": {
        "s937544429": {
            "code": "mod = 10 ** 9 + 7\nN = 5\nC = [1, 2, 1, 2, 2]\nL = [-1] * (N + 10)\ndp = [-1] * (N + 10)\ndp[0] = 1\nfor i in range(N):\n    if L[C[i]] == -1:\n        dp[i + 1] = dp[i]\n    elif C[i] == C[i - 1]:\n        dp[i + 1] = dp[i]\n    else:\n        dp[i + 1] = dp[i] + dp[L[C[i]]]\n    dp[i + 1] %= mod\n    L[C[i]] = i + 1\nprint(dp[N])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                14,
                15,
                7,
                8,
                9,
                14,
                15,
                7,
                8,
                10,
                13,
                14,
                15,
                7,
                8,
                10,
                13,
                14,
                15,
                7,
                8,
                10,
                11,
                14,
                15,
                7,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "mod = 10 ** 9 + 7",
                    "N = 5",
                    "C = [1, 2, 1, 2, 2]",
                    "L = [-1] * (N + 10)",
                    "dp = [-1] * (N + 10)",
                    "dp[0] = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(L[C[i]] == -1)"
                ],
                "4": [
                    "dp[i + 1] = dp[i]"
                ],
                "5": [
                    "(C[i] == C[i - 1])"
                ],
                "6": [
                    "dp[i + 1] = dp[i]"
                ],
                "7": [
                    "dp[i + 1] = dp[i] + dp[L[C[i]]]"
                ],
                "8": [
                    "dp[i + 1] %= mod",
                    "L[C[i]] = i + 1"
                ],
                "9": [
                    "print(dp[N])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    mod = 10 ** 9 + 7\n    N = 5\n    C = [1, 2, 1, 2, 2]\n    L = [-1] * (N + 10)\n    dp = [-1] * (N + 10)\n    dp[0] = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (L[C[i]] == -1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    dp[i + 1] = dp[i]\nNext:\n    Go to Block: 8\n\nBlock 5:\nStatement:\n    (C[i] == C[i - 1])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    dp[i + 1] = dp[i]\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    dp[i + 1] = dp[i] + dp[L[C[i]]]\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    dp[i + 1] %= mod\n    L[C[i]] = i + 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(dp[N])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03106": {
        "s568895549": {
            "code": "nums = [8, 12, 2]\ng = math.gcd(nums[0], nums[1])\narr = [0 for i in range(100)]\na = 0\nfor i in range(100):\n    i += 1\n    if nums[0] % i == 0 and nums[1] % i == 0:\n        arr[a] = i\n        a += 1\n        if i == g:\n            print(arr[a - nums[2]])\n            break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "nums = [8, 12, 2]",
                    "g=math.gcd(nums[0],nums[1])",
                    "arr=[0 for i in range(100)]",
                    "a=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(100)"
                ],
                "3": [
                    "i+=1",
                    "(nums[0] % i == 0 and nums[1] % i == 0)"
                ],
                "4": [
                    "arr[a]=i",
                    "a+=1",
                    "(i == g)"
                ],
                "5": [
                    "print(arr[a-nums[2]])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    nums = [8, 12, 2]\n    g=math.gcd(nums[0],nums[1])\n    arr=[0 for i in range(100)]\n    a=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(100)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    i+=1\n    (nums[0] % i == 0 and nums[1] % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    arr[a]=i\n    a+=1\n    (i == g)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    print(arr[a-nums[2]])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03107": {
        "s652547510": {
            "code": "input = sys.stdin.readline\ns = ['0', '0', '1', '1']\nl = {}\nfor v in s:\n    if l.get(v):\n        l[v] += 1\n    else:\n        l[v] = 1\nprint(min(l['0'], l['1']) * 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "s = ['0', '0', '1', '1']",
                    "l = {}"
                ],
                "2": [
                    "iterator -> v, Iterate Over -> s"
                ],
                "3": [
                    "(l.get(v))"
                ],
                "4": [
                    "l[v] += 1"
                ],
                "5": [
                    "l[v] = 1"
                ],
                "6": [
                    "print(min(l[\"0\"], l[\"1\"]) * 2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    s = ['0', '0', '1', '1']\n    l = {}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (l.get(v))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    l[v] += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    l[v] = 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(min(l[\"0\"], l[\"1\"]) * 2)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s136227948": {
            "code": "input = sys.stdin.readline\nb = deque([0, 0, 1, 1])\ncnt = 0\ni = 0\nwhile len(b) > 1:\n    if len(list(set(b))) == 1:\n        break\n    if b[i] != b[i + 1]:\n        b.pop(i)\n        b.pop(i)\n        cnt += 1\n        i = 0\n        continue\n    i += 1\nprint(cnt * 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                8,
                14,
                5,
                6,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "i": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "i": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "i": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "i": "0"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        },
                        {
                            "i": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        },
                        {
                            "i": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        },
                        {
                            "i": "1"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        },
                        {
                            "i": "1"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "b": "deque([0, 0, 1, 1])"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fbeb5e3f510>"
                        },
                        {
                            "i": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('deque.pop() takes no arguments (1 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "b = deque([0, 0, 1, 1])",
                    "cnt = 0",
                    "i = 0"
                ],
                "2": [
                    "while len(b) > 1:"
                ],
                "3": [
                    "(len(list(set(b))) == 1)"
                ],
                "4": [
                    "(b[i] != b[i + 1])"
                ],
                "5": [
                    "b.pop(i)",
                    "b.pop(i)",
                    "cnt += 1",
                    "i = 0"
                ],
                "6": [
                    "i += 1"
                ],
                "7": [
                    "print(cnt * 2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 7,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    b = deque([0, 0, 1, 1])\n    cnt = 0\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while len(b) > 1:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (len(list(set(b))) == 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (b[i] != b[i + 1])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    b.pop(i)\n    b.pop(i)\n    cnt += 1\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    i += 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(cnt * 2)\nNext:\n    <END>\n"
        },
        "s870458002": {
            "code": "s = '0011'\nm = 0\nfor i in range(len(s) / 2):\n    dst = re.sub('01|10', '', s)\n    if dst == s:\n        break\n    m += len(s) - len(dst)\n    s = dst\nprint(m)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '0011'",
                    "m=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s) / 2)"
                ],
                "3": [
                    "dst = re.sub(r'01|10', \"\", s)",
                    "(dst == s)"
                ],
                "4": [
                    "m += len(s) - len(dst)",
                    "s=dst"
                ],
                "5": [
                    "print(m)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 5,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '0011'\n    m=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s) / 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    dst = re.sub(r'01|10', \"\", s)\n    (dst == s)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    m += len(s) - len(dst)\n    s=dst\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(m)\nNext:\n    <END>\n"
        }
    },
    "p03109": {
        "s876756471": {
            "code": "s = '2019/04/30'\ninputDate = parse(s)\nheiseiDate = parse('20190430')\nif inputDate > heiseiDate:\n    print('TBD')\nelse:\n    print('Heisei')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = '2019/04/30'",
                    "inputDate = parse(s)",
                    "heiseiDate = parse('20190430')",
                    "(inputDate > heiseiDate)"
                ],
                "2": [
                    "print('TBD')"
                ],
                "3": [
                    "print('Heisei')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '2019/04/30'\n    inputDate = parse(s)\n    heiseiDate = parse('20190430')\n    (inputDate > heiseiDate)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('TBD')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Heisei')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s563019586": {
            "code": "dt = datetime.date(2019, 4, 30)\nth = date.fromisoformat('2019-04-30')\nif dt <= th:\n    print('Heisei')\nelse:\n    print('TBD')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "dt = datetime.date(2019, 4, 30)",
                    "th = date.fromisoformat('2019-04-30')",
                    "(dt <= th)"
                ],
                "2": [
                    "print('Heisei')"
                ],
                "3": [
                    "print('TBD')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    dt = datetime.date(2019, 4, 30)\n    th = date.fromisoformat('2019-04-30')\n    (dt <= th)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Heisei')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('TBD')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s232441442": {
            "code": "S = '2019/04/30'\nans = 'TBD'\ndatetime.datetime.strptime(S, '%Y/%M/%d')\ntbd = datetime(2019 / 4 / 30)\nif S <= tbd:\n    ans = 'Heisei'\nprint('ans')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'module' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '2019/04/30'",
                    "ans = \"TBD\"",
                    "datetime.datetime.strptime(S, '%Y/%M/%d')",
                    "tbd=datetime(2019/4/30)",
                    "(S <= tbd)"
                ],
                "2": [
                    "ans=\"Heisei\""
                ],
                "3": [
                    "print(\"ans\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '2019/04/30'\n    ans = \"TBD\"\n    datetime.datetime.strptime(S, '%Y/%M/%d')\n    tbd=datetime(2019/4/30)\n    (S <= tbd)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans=\"Heisei\"\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    print(\"ans\")\nNext:\n    <END>\n"
        },
        "s734366330": {
            "code": "s = '2019/04/30'\nh = datetime.date(2019, 4, 30)\nif s <= h:\n    print('Heisei')\nelse:\n    print('TBD')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'str' and 'datetime.date'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '2019/04/30'",
                    "h=datetime.date(2019,4,30)",
                    "(s <= h)"
                ],
                "2": [
                    "print(\"Heisei\")"
                ],
                "3": [
                    "print(\"TBD\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '2019/04/30'\n    h=datetime.date(2019,4,30)\n    (s <= h)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Heisei\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"TBD\")\nNext:\n    <END>\n"
        }
    },
    "p03127": {
        "s221140677": {
            "code": "n = 4\na = [2, 10, 8, 40]\ng = a[0]\nfor i in range(1, n):\n    g = math.gcd(g, a[i])\nprint(g)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [2, 10, 8, 40]",
                    "g = a[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "g = math.gcd(g,a[i])"
                ],
                "4": [
                    "print(g)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2, 10, 8, 40]\n    g = a[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    g = math.gcd(g,a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(g)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s475888143": {
            "code": "N = 4\nal = [2, 10, 8, 40]\nans = al[0]\nfor i in range(1, N):\n    ans = math.gcd(ans, al[i])\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "al = [2, 10, 8, 40]",
                    "ans = al[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, N)"
                ],
                "3": [
                    "ans = math.gcd(ans, al[i])"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    al = [2, 10, 8, 40]\n    ans = al[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = math.gcd(ans, al[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s532411547": {
            "code": "N = 4\nA = [2, 10, 8, 40]\ngcd = A[0]\nfor i in range(1, len(A)):\n    gcd = math.gcd(gcd, A[i])\nprint(gcd)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [2, 10, 8, 40]",
                    "gcd = A[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, len(A))"
                ],
                "3": [
                    "gcd = math.gcd(gcd,A[i])"
                ],
                "4": [
                    "print(gcd)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2, 10, 8, 40]\n    gcd = A[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, len(A))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    gcd = math.gcd(gcd,A[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(gcd)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s081027795": {
            "code": "n = 4\na = [2, 10, 8, 40]\ngcd = functools.reduce(math.gcd, a)\nprint(gcd)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [2, 10, 8, 40]",
                    "gcd = functools.reduce(math.gcd, a)",
                    "print(gcd)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2, 10, 8, 40]\n    gcd = functools.reduce(math.gcd, a)\n    print(gcd)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s294326718": {
            "code": "a = 4\nli = [2, 10, 8, 40]\ncnt = li[0]\nfor i in li:\n    cnt = math.gcd(cnt, i)\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = 4",
                    "li = [2, 10, 8, 40]",
                    "cnt = li[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> li"
                ],
                "3": [
                    "cnt = math.gcd(cnt, i)"
                ],
                "4": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 4\n    li = [2, 10, 8, 40]\n    cnt = li[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> li\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cnt = math.gcd(cnt, i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s418029183": {
            "code": "N = 4\nA = [2, 10, 8, 40]\nprint(math.gcd(A))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [2, 10, 8, 40]",
                    "print(math.gcd(A))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2, 10, 8, 40]\n    print(math.gcd(A))\nNext:\n    <END>\n"
        },
        "s074497268": {
            "code": "n = 4\na = [2, 10, 8, 40]\ng = a.sort()[n - 1]\nfor i in range(1, n):\n    g = math.gcd(g, a[i])\nprint(g)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [2, 10, 8, 40]",
                    "g = a.sort()[n - 1]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "g = math.gcd(g, a[i])"
                ],
                "4": [
                    "print(g)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2, 10, 8, 40]\n    g = a.sort()[n - 1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    g = math.gcd(g, a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(g)\nNext:\n    <END>\n"
        },
        "s026058407": {
            "code": "n = 4\na = [2, 10, 8, 40]\nprint(math.gcd(a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [2, 10, 8, 40]",
                    "print(math.gcd(a))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2, 10, 8, 40]\n    print(math.gcd(a))\nNext:\n    <END>\n"
        }
    },
    "p03140": {
        "s683103630": {
            "code": "n = 4\na = ['w', 'e', 's', 't']\nb = ['e', 'a', 's', 't']\nc = ['w', 'a', 'i', 't']\nans = 0\nfor i in range(n):\n    k = [a[i], b[i], c[i]]\n    if len(set(k)) != 3:\n        flag = mode(k)\n        ans += 3 - k.count(flag)\n    else:\n        ans += 2\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                8,
                9,
                10,
                6,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = ['w', 'e', 's', 't']",
                    "b = ['e', 'a', 's', 't']",
                    "c = ['w', 'a', 'i', 't']",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "k = [a[i], b[i], c[i]]",
                    "(len(set(k)) != 3)"
                ],
                "4": [
                    "flag = mode(k)",
                    "ans += 3-k.count(flag)"
                ],
                "5": [
                    "ans += 2"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = ['w', 'e', 's', 't']\n    b = ['e', 'a', 's', 't']\n    c = ['w', 'a', 'i', 't']\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    k = [a[i], b[i], c[i]]\n    (len(set(k)) != 3)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    flag = mode(k)\n    ans += 3-k.count(flag)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans += 2\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03147": {
        "s385249229": {
            "code": "n = 4\nh = [1, 2, 2, 1]\nh = np.array(h)\nh_zero = np.hstack([np.zeros(1), h, np.zeros(1)])\nd = np.diff(h_zero)\na = d[:-1] * d[1:] < 0\nh_a = h[a == True]\ns = 0\nfor k in range(len(h_a)):\n    if k % 2 == 0:\n        if k == 0:\n            s += h_a[k] - h_a[k + 1]\n        elif k == len(h_a) - 1:\n            s += h_a[k] - h_a[k - 1]\n        else:\n            s += h_a[k] - np.max([h_a[k - 1], h_a[k + 1]])\n    else:\n        s += h_a[k]\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                },
                "8": {
                    "range": [
                        15,
                        15
                    ]
                },
                "9": {
                    "range": [
                        16,
                        16
                    ]
                },
                "10": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                19
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "h = [1, 2, 2, 1]",
                    "h = np.array(h)",
                    "h_zero = np.hstack([np.zeros(1), h, np.zeros(1)])",
                    "d = np.diff(h_zero)",
                    "a= (d[:-1] * d[1:]) < 0",
                    "h_a = h[a == True]",
                    "s = 0"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(len(h_a))"
                ],
                "3": [
                    "(k % 2 == 0)"
                ],
                "4": [
                    "(k == 0)"
                ],
                "5": [
                    "s += h_a[k] - h_a[k+1]"
                ],
                "6": [
                    "(k == len(h_a) - 1)"
                ],
                "7": [
                    "s += h_a[k] - h_a[k-1]"
                ],
                "8": [
                    "s += h_a[k] - np.max([h_a[k-1], h_a[k+1]])"
                ],
                "9": [
                    "s += h_a[k]"
                ],
                "10": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 9
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    h = [1, 2, 2, 1]\n    h = np.array(h)\n    h_zero = np.hstack([np.zeros(1), h, np.zeros(1)])\n    d = np.diff(h_zero)\n    a= (d[:-1] * d[1:]) < 0\n    h_a = h[a == True]\n    s = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(len(h_a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (k % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 9\n\nBlock 4:\nStatement:\n    (k == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    s += h_a[k] - h_a[k+1]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (k == len(h_a) - 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    s += h_a[k] - h_a[k-1]\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    s += h_a[k] - np.max([h_a[k-1], h_a[k+1]])\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    s += h_a[k]\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(s)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s003657714": {
            "code": "N = '4'\nh = [1, 2, 2, 1]\na = np.zeros(N)\nh_min = min(h)\ntmp = (h >= h_min + 1) * 1\ncnt = 0\nfor idx, i in enumerate(tmp):\n    if idx == 0:\n        a0 = i\n        if i == 1:\n            cnt += 1\n        continue\n    if idx == a0:\n        continue\n    else:\n        cnt += 1\nelse:\n    if i == 0:\n        cnt -= 1\nprint(cnt + h_min)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '4'",
                    "h = [1, 2, 2, 1]",
                    "a = np.zeros(N)",
                    "h_min = min(h)",
                    "tmp = (h >= h_min+1)*1",
                    "cnt = 0"
                ],
                "2": [
                    "idx <- index\n    i <- iterator"
                ],
                "3": [
                    "(idx == 0)"
                ],
                "4": [
                    "a0 = i",
                    "(i == 1)"
                ],
                "5": [
                    "cnt+=1"
                ],
                "6": [
                    "(idx == a0)"
                ],
                "7": [
                    "cnt+=1"
                ],
                "8": [
                    "(i == 0)"
                ],
                "9": [
                    "cnt-=1"
                ],
                "10": [
                    "print(cnt+h_min)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 2,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    h = [1, 2, 2, 1]\n    a = np.zeros(N)\n    h_min = min(h)\n    tmp = (h >= h_min+1)*1\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    idx <- index\n    i <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (idx == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    a0 = i\n    (i == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    cnt+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (idx == a0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 7\n\nBlock 7:\nStatement:\n    cnt+=1\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    cnt-=1\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    print(cnt+h_min)\nNext:\n    <END>\n"
        }
    },
    "p03150": {
        "s520784039": {
            "code": "s = 'keyofscience'\nquery = list('keyence')\nfor p in range(8):\n    b = ''.join(query[:p])\n    a = ''.join(query[p:])\n    pattern = f'.*{b}.*{a}.*'\n    if re.findall(pattern, s):\n        print('YES')\n        break\nelse:\n    print('NO')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                3,
                4,
                5,
                6,
                7,
                3,
                4,
                5,
                6,
                7,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'keyofscience'",
                    "query = list('keyence')"
                ],
                "2": [
                    "iterator -> p, Iterate Over -> range(8)"
                ],
                "3": [
                    "b = ''.join(query[:p])",
                    "a = ''.join(query[p:])",
                    "pattern = f'.*{b}.*{a}.*'",
                    "(re.findall(pattern, s))"
                ],
                "4": [
                    "print('YES')"
                ],
                "5": [
                    "print('NO')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'keyofscience'\n    query = list('keyence')\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> p, Iterate Over -> range(8)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    b = ''.join(query[:p])\n    a = ''.join(query[p:])\n    pattern = f'.*{b}.*{a}.*'\n    (re.findall(pattern, s))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('NO')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03160": {
        "s308926692": {
            "code": "N = 4\nasiba = [10, 30, 40, 20]\ndp = [math.inf] * N\ndp[0] = 0\ndp[1] = abs(asiba[1] - asiba[0])\nfor i in range(2, N):\n    dp[i] = min(dp[i - 2] + abs(asiba[i] - asiba[i - 2]), dp[i])\n    dp[i] = min(dp[i - 1] + abs(asiba[i] - asiba[i - 1]), dp[i])\nprint(dp[N - 1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "asiba = [10, 30, 40, 20]",
                    "dp =[math.inf] *N",
                    "dp[0]=0",
                    "dp[1]=abs(asiba[1]-asiba[0])"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(2, N)"
                ],
                "3": [
                    "dp[i] = min(dp[i-2]+abs(asiba[i]-asiba[i-2]),dp[i])",
                    "dp[i] = min(dp[i-1]+abs(asiba[i]-asiba[i-1]),dp[i])"
                ],
                "4": [
                    "print(dp[N-1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    asiba = [10, 30, 40, 20]\n    dp =[math.inf] *N\n    dp[0]=0\n    dp[1]=abs(asiba[1]-asiba[0])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    dp[i] = min(dp[i-2]+abs(asiba[i]-asiba[i-2]),dp[i])\n    dp[i] = min(dp[i-1]+abs(asiba[i]-asiba[i-1]),dp[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(dp[N-1])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s085977015": {
            "code": "N = 4\nH = [10, 30, 40, 20]\ninf = 10 ** 9 + 7\ndp = [inf] * (N + 10)\nfor i, h in enumerate(H[:N - 1]):\n    dp[i + 1] = min(dp[i + 1], dp[i] + np.abs(h[i] - h[i + 1]))\n    if i < N - 2:\n        dp[i + 2] = min(dp[i + 2], dp[i] + np.abs(h[i] - h[i + 2]))\nprint(dp[N - 1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "dp": "[1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007]"
                        },
                        {
                            "inf": "1000000007"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "H": "[10, 30, 40, 20]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "[1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007]"
                        },
                        {
                            "inf": "1000000007"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "H": "[10, 30, 40, 20]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "[1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007]"
                        },
                        {
                            "inf": "1000000007"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "H": "[10, 30, 40, 20]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "H = [10, 30, 40, 20]",
                    "inf = 10**9+7",
                    "dp = [inf] * (N+10)"
                ],
                "2": [
                    "i <- index\n    h <- iterator"
                ],
                "3": [
                    "dp[i+1] = min(dp[i+1],dp[i] + np.abs(h[i]-h[i+1]))",
                    "(i < N - 2)"
                ],
                "4": [
                    "(i < N - 2)"
                ],
                "5": [
                    "print(dp[N-1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    H = [10, 30, 40, 20]\n    inf = 10**9+7\n    dp = [inf] * (N+10)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    h <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    dp[i+1] = min(dp[i+1],dp[i] + np.abs(h[i]-h[i+1]))\n    (i < N - 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (i < N - 2)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(dp[N-1])\nNext:\n    <END>\n"
        },
        "s714138295": {
            "code": "N = 4\nH = [10, 30, 40, 20]\ninf = 10 ** 9 + 7\ndp = [inf] * (N + 10)\nfor i, h in enumerate(H[:N - 1]):\n    dp[i + 1] = min(dp[i + 1], dp[i] + np.abs(h[i] - h[i + 1]))\n    if i > N - 2:\n        dp[i + 2] = min(dp[i + 2], dp[i] + np.abs(h[i] - h[i + 2]))\nprint(dp[N - 1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "dp": "[1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007]"
                        },
                        {
                            "inf": "1000000007"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "H": "[10, 30, 40, 20]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "[1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007]"
                        },
                        {
                            "inf": "1000000007"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "H": "[10, 30, 40, 20]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "[1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007, 1000000007]"
                        },
                        {
                            "inf": "1000000007"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "H": "[10, 30, 40, 20]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "H = [10, 30, 40, 20]",
                    "inf = 10**9+7",
                    "dp = [inf] * (N+10)"
                ],
                "2": [
                    "i <- index\n    h <- iterator"
                ],
                "3": [
                    "dp[i+1] = min(dp[i+1],dp[i] + np.abs(h[i]-h[i+1]))",
                    "(i > N - 2)"
                ],
                "4": [
                    "(i > N - 2)"
                ],
                "5": [
                    "print(dp[N-1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    H = [10, 30, 40, 20]\n    inf = 10**9+7\n    dp = [inf] * (N+10)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    h <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    dp[i+1] = min(dp[i+1],dp[i] + np.abs(h[i]-h[i+1]))\n    (i > N - 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (i > N - 2)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(dp[N-1])\nNext:\n    <END>\n"
        },
        "s290255807": {
            "code": "N = 4\nheights = [10, 30, 40, 20]\ndp = [math.inf for _ in range(N)]\ndp[0] = 0\nif len > 1:\n    dp[1] = abs(heights[1] - heights[0])\nfor i in range(2, N):\n    dp[i] = min(dp[i], dp[i - 1] + abs(heights[i] - heights[i - 1]), dp[i - 2] + abs(heights[i] - heights[i - 2]))\nprint(dp[N - 1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'builtin_function_or_method' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "heights = [10, 30, 40, 20]",
                    "dp = [math.inf for _ in range(N)]",
                    "dp[0] = 0",
                    "(len > 1)"
                ],
                "2": [
                    "dp[1] = abs(heights[1] - heights[0])"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(2, N)"
                ],
                "4": [
                    "dp[i] = min("
                ],
                "5": [
                    "print(dp[N - 1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    heights = [10, 30, 40, 20]\n    dp = [math.inf for _ in range(N)]\n    dp[0] = 0\n    (len > 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    dp[1] = abs(heights[1] - heights[0])\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(2, N)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    dp[i] = min(\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    print(dp[N - 1])\nNext:\n    <END>\n"
        }
    },
    "p03168": {
        "s548148893": {
            "code": "N = 3\np = [0.3, 0.6, 0.8]\ndp = np.full(N + 1, 0, dtype=np.float64)\ndp[0] = 1\nn_p = np.array(p)\nfor i in range(N):\n    tmp = np.zeros_like(dp)\n    tmp[1:] = dp[:-1] * n_p[i]\n    tmp[:-1] += dp[:-1] * (1 - n_p[i])\n    dp = tmp\nans = np.sum(dp[N // 2 + 1:])\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                8,
                9,
                10,
                6,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28aa57f30>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28aa57f30>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "tmp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "tmp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28aa57f30>"
                        },
                        {
                            "tmp": "<numpy.ndarray object at 0x7fc28aa57f30>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28aa57f30>"
                        },
                        {
                            "tmp": "<numpy.ndarray object at 0x7fc28aa57f30>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "tmp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "tmp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "ans": "<numpy.float64 object at 0x7fc28cf28bd0>"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "n_p": "<numpy.ndarray object at 0x7fc28aa57270>"
                        },
                        {
                            "dp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "tmp": "<numpy.ndarray object at 0x7fc28cfa4690>"
                        },
                        {
                            "p": "[0.3, 0.6, 0.8]"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "p = [0.3, 0.6, 0.8]",
                    "dp = np.full(N+1, 0, dtype=np.float64)",
                    "dp[0] = 1",
                    "n_p = np.array(p)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "tmp      = np.zeros_like(dp)",
                    "tmp[1:]  = dp[:-1] * n_p[i]",
                    "tmp[:-1]+= dp[:-1] * (1-n_p[i])",
                    "dp = tmp"
                ],
                "4": [
                    "ans = np.sum(dp[N//2+1:])",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    p = [0.3, 0.6, 0.8]\n    dp = np.full(N+1, 0, dtype=np.float64)\n    dp[0] = 1\n    n_p = np.array(p)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    tmp      = np.zeros_like(dp)\n    tmp[1:]  = dp[:-1] * n_p[i]\n    tmp[:-1]+= dp[:-1] * (1-n_p[i])\n    dp = tmp\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    ans = np.sum(dp[N//2+1:])\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03211": {
        "s626951133": {
            "code": "nums = '1234567876'\nlength = len(nums)\nnum = int(nums[:3])\ndif = abs(num - 753)\nfor i in range(1, length - 2):\n    num_ = int(nums[i:i + 3])\n    dif_ = abs(num_ - 753)\n    if dif_ < dif:\n        num = num_\n        dif = dif_\nprint(dif)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                8,
                9,
                10,
                5,
                6,
                7,
                8,
                5,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "nums = '1234567876'",
                    "length = len(nums)",
                    "num = int(nums[:3])",
                    "dif = abs(num - 753)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, length - 2)"
                ],
                "3": [
                    "num_ = int(nums[i:i+3])",
                    "dif_ = abs(num_ - 753)",
                    "(dif_ < dif)"
                ],
                "4": [
                    "num = num_",
                    "dif = dif_"
                ],
                "5": [
                    "print(dif)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    nums = '1234567876'\n    length = len(nums)\n    num = int(nums[:3])\n    dif = abs(num - 753)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, length - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    num_ = int(nums[i:i+3])\n    dif_ = abs(num_ - 753)\n    (dif_ < dif)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    num = num_\n    dif = dif_\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(dif)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s457555917": {
            "code": "s = '1234567876'\nss = []\nfor i in range(len(s) - 2):\n    print(s[i:i + 3])\n    ss.append(int(s[i:i + 3]))\nprint((ss - 754).max())",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '1234567876'",
                    "ss = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s) - 2)"
                ],
                "3": [
                    "print(s[i:i+3])",
                    "ss.append(int(s[i:i+3]))"
                ],
                "4": [
                    "print((ss - 754).max())"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1234567876'\n    ss = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s) - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print(s[i:i+3])\n    ss.append(int(s[i:i+3]))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print((ss - 754).max())\nNext:\n    <END>\n"
        }
    },
    "p03213": {
        "s533421219": {
            "code": "n = 9\na = math.factorial(n)\nsy = sympy.factorint(a)\ncount75 = 0\ncount25 = 0\ncount15 = 0\ncount5 = 0\ncount3 = 0\nfor k in sy.values():\n    if k + 1 >= 75:\n        count75 += 1\n    if k + 1 >= 25:\n        count25 += 1\n    if k + 1 >= 15:\n        count15 += 1\n    if k + 1 >= 5:\n        count5 += 1\n    if k + 1 >= 3:\n        count3 += 1\nprint(int(count75 + count25 * (count3 - 1) + count15 * (count5 - 1) + count5 * (count5 - 1) * (count3 - 2) / 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                },
                "8": {
                    "range": [
                        15,
                        15
                    ]
                },
                "9": {
                    "range": [
                        16,
                        16
                    ]
                },
                "10": {
                    "range": [
                        17,
                        17
                    ]
                },
                "11": {
                    "range": [
                        18,
                        18
                    ]
                },
                "12": {
                    "range": [
                        19,
                        19
                    ]
                },
                "13": {
                    "range": [
                        20,
                        20
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                12,
                14,
                16,
                17,
                18,
                19,
                9,
                10,
                12,
                14,
                16,
                17,
                18,
                19,
                9,
                10,
                12,
                14,
                16,
                18,
                9,
                10,
                12,
                14,
                16,
                18,
                9,
                20
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 9",
                    "a=math.factorial(n)",
                    "sy=sympy.factorint(a)",
                    "count75=0",
                    "count25=0",
                    "count15=0",
                    "count5=0",
                    "count3=0"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> sy.values()"
                ],
                "3": [
                    "(k + 1 >= 75)"
                ],
                "4": [
                    "count75+=1"
                ],
                "5": [
                    "(k + 1 >= 25)"
                ],
                "6": [
                    "count25+=1"
                ],
                "7": [
                    "(k + 1 >= 15)"
                ],
                "8": [
                    "count15+=1"
                ],
                "9": [
                    "(k + 1 >= 5)"
                ],
                "10": [
                    "count5+=1"
                ],
                "11": [
                    "(k + 1 >= 3)"
                ],
                "12": [
                    "count3+=1"
                ],
                "13": [
                    "print(int(count75+count25*(count3-1)+count15*(count5-1)+(count5*(count5-1)*(count3-2))/2))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 13
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 2
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 9\n    a=math.factorial(n)\n    sy=sympy.factorint(a)\n    count75=0\n    count25=0\n    count15=0\n    count5=0\n    count3=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> sy.values()\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 13\n\nBlock 3:\nStatement:\n    (k + 1 >= 75)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count75+=1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (k + 1 >= 25)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    count25+=1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (k + 1 >= 15)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    count15+=1\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (k + 1 >= 5)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    count5+=1\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (k + 1 >= 3)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 2\n\nBlock 12:\nStatement:\n    count3+=1\nNext:\n    Go to Block: 2\n\nBlock 13:\nStatement:\n    print(int(count75+count25*(count3-1)+count15*(count5-1)+(count5*(count5-1)*(count3-2))/2))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03229": {
        "s757238768": {
            "code": "N = 5\nA = [6, 8, 1, 2, 3]\nA.sort()\nif N % 2 == 0:\n    ans = 2 * (sum(A[N // 2 + 1:]) - sum(A[:N // 2 - 1])) + A[N // 2] - A[N // 2 - 1]\nelse:\n    x = 2 * (sum(A[N // 2 + 1:]) - sum(A[:N // 2 - 1])) - A[N // 2] - A[N // 2 - 1]\n    y = 2 * (sum(A[N // 2 + 2:]) - sum(A[:N // 2])) + A[N // 2] + A[N // 2 + 1]\n    ans = max(x, y)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "A = [6, 8, 1, 2, 3]",
                    "A.sort()",
                    "(N % 2 == 0)"
                ],
                "2": [
                    "ans = 2 * (sum(A[N // 2 + 1:]) - sum(A[:N // 2 - 1])) + A[N // 2] - A[N // 2 - 1]"
                ],
                "3": [
                    "x = 2 * (sum(A[N // 2 + 1:]) - sum(A[:N // 2 - 1])) - A[N // 2] - A[N // 2 - 1]",
                    "y = 2 * (sum(A[N // 2 + 2:]) - sum(A[:N // 2])) + A[N // 2] + A[N // 2 + 1]",
                    "ans = max(x, y)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [6, 8, 1, 2, 3]\n    A.sort()\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = 2 * (sum(A[N // 2 + 1:]) - sum(A[:N // 2 - 1])) + A[N // 2] - A[N // 2 - 1]\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    x = 2 * (sum(A[N // 2 + 1:]) - sum(A[:N // 2 - 1])) - A[N // 2] - A[N // 2 - 1]\n    y = 2 * (sum(A[N // 2 + 2:]) - sum(A[:N // 2])) + A[N // 2] + A[N // 2 + 1]\n    ans = max(x, y)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03231": {
        "s583689847": {
            "code": "nm = ['3', '2']\nn = int(nm[0])\nm = int(nm[1])\ns = 'acp'\nt = 'ae'\ng = gcd(n, m)\nans = int(n * m / g)\nfor i in range(g):\n    if s[n // g * i] != t[m // g * i]:\n        ans = -1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                8,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "nm = ['3', '2']",
                    "n = int(nm[0])",
                    "m = int(nm[1])",
                    "s = 'acp'",
                    "t = 'ae'",
                    "g = gcd(n,m)",
                    "ans = int(n*m / g)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(g)"
                ],
                "3": [
                    "(s[n // g * i] != t[m // g * i])"
                ],
                "4": [
                    "ans = -1"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    nm = ['3', '2']\n    n = int(nm[0])\n    m = int(nm[1])\n    s = 'acp'\n    t = 'ae'\n    g = gcd(n,m)\n    ans = int(n*m / g)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(g)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[n // g * i] != t[m // g * i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans = -1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03241": {
        "s588305285": {
            "code": "inputlist = [3, 14]\nn, m = (inputlist[0], inputlist[1])\nfor i in range(1, int(math.sqrt(m + 1))):\n    if m % i != 0:\n        continue\n    if i > m // n:\n        continue\n    ans = i\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                6,
                8,
                3,
                4,
                6,
                8,
                3,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "inputlist = [3, 14]",
                    "n, m = inputlist[0], inputlist[1]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, int(math.sqrt(m + 1)))"
                ],
                "3": [
                    "(m % i != 0)"
                ],
                "4": [
                    "(i > m // n)"
                ],
                "5": [
                    "ans = i"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    inputlist = [3, 14]\n    n, m = inputlist[0], inputlist[1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, int(math.sqrt(m + 1)))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (m % i != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (i > m // n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 5:\nStatement:\n    ans = i\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03243": {
        "s356461405": {
            "code": "x = 111\na = [i * 111 for i in range(1, 9)]\nprint(a[bisect.bisect_left(a, x)])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "x = 111",
                    "a=[i*111 for i in range(1,9)]",
                    "print(a[bisect.bisect_left(a,x)])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 111\n    a=[i*111 for i in range(1,9)]\n    print(a[bisect.bisect_left(a,x)])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s061061708": {
            "code": "N = 111\ncandidate = [int(i * 111) for i in range(1, 10)]\nprint(candidate[bisect.bisect_right(candidate, N)])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 111",
                    "candidate = [int(i*111) for i in range(1,10)]",
                    "print(candidate[bisect.bisect_right(candidate, N)])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 111\n    candidate = [int(i*111) for i in range(1,10)]\n    print(candidate[bisect.bisect_right(candidate, N)])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s787410062": {
            "code": "input = sys.stdin.readline\nN = 111\nans = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nfor i in ans:\n    if ans >= N:\n        print(ans)\n        sys.exit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "111"
                        },
                        {
                            "ans": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fd0394cb510>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "111"
                        },
                        {
                            "ans": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fd0394cb510>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "111"
                        },
                        {
                            "ans": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fd0394cb510>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "N = 111",
                    "ans = [111,222,333,444,555,666,777,888,999]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> ans"
                ],
                "3": [
                    "(ans >= N)"
                ],
                "4": [
                    "print(ans)",
                    "sys.exit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    N = 111\n    ans = [111,222,333,444,555,666,777,888,999]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> ans\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (ans >= N)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(ans)\n    sys.exit()\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03244": {
        "s080601791": {
            "code": "n = 4\na = [3, 1, 3, 2]\na1 = [a[x] for x in range(0, n, 2)]\nl_a1 = len(a1)\na2 = [a[y] for y in range(1, n, 2)]\nl_a2 = len(a2)\nc1 = collections.Counter(a1)\nc2 = collections.Counter(a2)\nK_a1 = c1.most_common()[0][0]\nK_a2 = c2.most_common()[0][0]\nF_a1 = c1.most_common(1)[0][1]\nF_a2 = c2.most_common(1)[0][1]\nif K_a1 == K_a2:\n    if c1.most_common(2)[0][1] >= c2.most_common(2)[0][1]:\n        F_a2 = c2.most_common()[1][1]\n    else:\n        F_a1 = c1.most_common()[1][1]\nprint(l_a1 - F_a1 + (l_a2 - F_a2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        13
                    ]
                },
                "2": {
                    "range": [
                        14,
                        14
                    ]
                },
                "3": {
                    "range": [
                        15,
                        15
                    ]
                },
                "4": {
                    "range": [
                        16,
                        16
                    ]
                },
                "5": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                18
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [3, 1, 3, 2]",
                    "a1 = [a[x] for x in range(0,n,2)]",
                    "l_a1 = len(a1)",
                    "a2 = [a[y] for y in range(1,n,2)]",
                    "l_a2 = len(a2)",
                    "c1 = collections.Counter(a1)",
                    "c2 = collections.Counter(a2)",
                    "K_a1 = c1.most_common()[0][0]",
                    "K_a2 = c2.most_common()[0][0]",
                    "F_a1 = c1.most_common(1)[0][1]",
                    "F_a2 = c2.most_common(1)[0][1]",
                    "(K_a1 == K_a2)"
                ],
                "2": [
                    "(c1.most_common(2)[0][1] >= c2.most_common(2)[0][1])"
                ],
                "3": [
                    "F_a2 = c2.most_common()[1][1]"
                ],
                "4": [
                    "F_a1 = c1.most_common()[1][1]"
                ],
                "5": [
                    "print((l_a1 - F_a1)+(l_a2 - F_a2))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [3, 1, 3, 2]\n    a1 = [a[x] for x in range(0,n,2)]\n    l_a1 = len(a1)\n    a2 = [a[y] for y in range(1,n,2)]\n    l_a2 = len(a2)\n    c1 = collections.Counter(a1)\n    c2 = collections.Counter(a2)\n    K_a1 = c1.most_common()[0][0]\n    K_a2 = c2.most_common()[0][0]\n    F_a1 = c1.most_common(1)[0][1]\n    F_a2 = c2.most_common(1)[0][1]\n    (K_a1 == K_a2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    (c1.most_common(2)[0][1] >= c2.most_common(2)[0][1])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    F_a2 = c2.most_common()[1][1]\nNext:\n    Go to Block: 5\n\nBlock 4:\nStatement:\n    F_a1 = c1.most_common()[1][1]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print((l_a1 - F_a1)+(l_a2 - F_a2))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s539348659": {
            "code": "n = 4\nv = [3, 1, 3, 2]\nli1 = []\nli2 = []\nfor i in range(n):\n    if i % 2 == 0:\n        li1.append(v[i])\n    else:\n        li2.append(v[i])\nli1 = collections.Counter(li1).most_common()\nli2 = collections.Counter(li2).most_common()\nif li1[0][0] != li2[0][0]:\n    print(n - li1[0][1] - li2[0][1])\nelif len(li1) == 1 and len(li2) == 1:\n    print(n // 2)\nelif len(li1) == 1:\n    print(n - li1[0][1] - li2[1][1])\nelif len(li2) == 1:\n    print(n - li1[1][1] - li2[0][1])\nelse:\n    print(min(n - li1[0][1] - li2[1][1]), n - li1[1][1] - li2[0][1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                },
                "10": {
                    "range": [
                        15,
                        15
                    ]
                },
                "11": {
                    "range": [
                        16,
                        16
                    ]
                },
                "12": {
                    "range": [
                        17,
                        17
                    ]
                },
                "13": {
                    "range": [
                        18,
                        18
                    ]
                },
                "14": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                9,
                5,
                6,
                7,
                5,
                6,
                9,
                5,
                10,
                11,
                12,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "v = [3, 1, 3, 2]",
                    "li1=[]",
                    "li2=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i % 2 == 0)"
                ],
                "4": [
                    "li1.append(v[i])"
                ],
                "5": [
                    "li2.append(v[i])"
                ],
                "6": [
                    "li1=collections.Counter(li1).most_common()",
                    "li2=collections.Counter(li2).most_common()",
                    "(li1[0][0] != li2[0][0])"
                ],
                "7": [
                    "print(n-li1[0][1]-li2[0][1])"
                ],
                "8": [
                    "(len(li1) == 1 and len(li2) == 1)"
                ],
                "9": [
                    "print(n//2)"
                ],
                "10": [
                    "(len(li1) == 1)"
                ],
                "11": [
                    "print(n-li1[0][1]-li2[1][1])"
                ],
                "12": [
                    "(len(li2) == 1)"
                ],
                "13": [
                    "print(n-li1[1][1]-li2[0][1])"
                ],
                "14": [
                    "print(min(n-li1[0][1]-li2[1][1]),n-li1[1][1]-li2[0][1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    v = [3, 1, 3, 2]\n    li1=[]\n    li2=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    li1.append(v[i])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    li2.append(v[i])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    li1=collections.Counter(li1).most_common()\n    li2=collections.Counter(li2).most_common()\n    (li1[0][0] != li2[0][0])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(n-li1[0][1]-li2[0][1])\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    (len(li1) == 1 and len(li2) == 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    print(n//2)\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    (len(li1) == 1)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    print(n-li1[0][1]-li2[1][1])\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    (len(li2) == 1)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(n-li1[1][1]-li2[0][1])\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print(min(n-li1[0][1]-li2[1][1]),n-li1[1][1]-li2[0][1])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s121127215": {
            "code": "n = 4\na = [3, 1, 3, 2]\nif len(set(a)) == 1:\n    p = int(n / 2)\nelse:\n    b0 = set(a[::2])\n    if len(b0) == 1:\n        q0 = 0\n        mark00 = b0[0]\n        count00, count01 = (n / 2, 0)\n    else:\n        c = Counter(l)\n        q0 = int(n / 2) - c.most_common(1)[0][1]\n        mark00, mark01 = (c.most_common(2)[0][0], c.most_common(2)[1][0])\n        count00, count01 = (c.most_common(2)[0][1], c.most_common(2)[1][1])\n    b1 = set(a[1::2])\n    if len(b1) == 1:\n        q1 = 0\n        mark10 = b1[0]\n        count10, count11 = (n / 2, 0)\n    else:\n        c = Counter(l)\n        q1 = int(n / 2) - c.most_common(1)[0][1]\n        mark10, mark11 = (c.most_common(2)[0][0], c.most_common(2)[1][0])\n        count10, count11 = (c.most_common(2)[0][1], c.most_common(2)[1][1])\n    if mark00 == mark10:\n        if count00 + count01 > count10 + count11:\n            p = n - (count00 + count01)\n        else:\n            p = n - (count10 + count11)\n    else:\n        p = n - (count00 + count10)\nprint(p)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        13
                    ]
                },
                "6": {
                    "range": [
                        14,
                        15
                    ]
                },
                "7": {
                    "range": [
                        16,
                        18
                    ]
                },
                "8": {
                    "range": [
                        19,
                        22
                    ]
                },
                "9": {
                    "range": [
                        23,
                        23
                    ]
                },
                "10": {
                    "range": [
                        24,
                        24
                    ]
                },
                "11": {
                    "range": [
                        25,
                        25
                    ]
                },
                "12": {
                    "range": [
                        26,
                        26
                    ]
                },
                "13": {
                    "range": [
                        27,
                        27
                    ]
                },
                "14": {
                    "range": [
                        28,
                        28
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'set' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [3, 1, 3, 2]",
                    "(len(set(a)) == 1)"
                ],
                "2": [
                    "p = int(n/2)"
                ],
                "3": [
                    "b0 = set(a[::2])",
                    "(len(b0) == 1)"
                ],
                "4": [
                    "q0 = 0",
                    "mark00 = b0[0]",
                    "count00, count01 = n/2, 0"
                ],
                "5": [
                    "c = Counter(l)",
                    "q0 =  int(n/2) - c.most_common(1)[0][1]",
                    "mark00, mark01 = c.most_common(2)[0][0], c.most_common(2)[1][0]",
                    "count00, count01 = c.most_common(2)[0][1], c.most_common(2)[1][1]"
                ],
                "6": [
                    "b1 = set(a[1::2])",
                    "(len(b1) == 1)"
                ],
                "7": [
                    "q1 = 0",
                    "mark10 = b1[0]",
                    "count10, count11 = n/2, 0"
                ],
                "8": [
                    "c = Counter(l)",
                    "q1 =  int(n/2) - c.most_common(1)[0][1]",
                    "mark10, mark11 = c.most_common(2)[0][0], c.most_common(2)[1][0]",
                    "count10, count11 = c.most_common(2)[0][1], c.most_common(2)[1][1]"
                ],
                "9": [
                    "(mark00 == mark10)"
                ],
                "10": [
                    "(count00 + count01 > count10 + count11)"
                ],
                "11": [
                    "p = n - (count00+count01)"
                ],
                "12": [
                    "p = n - (count10+count11)"
                ],
                "13": [
                    "p = n - (count00 + count10)"
                ],
                "14": [
                    "print(p)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 13
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [3, 1, 3, 2]\n    (len(set(a)) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    p = int(n/2)\nNext:\n    Go to Block: 14\n\nBlock 3:\nStatement:\n    b0 = set(a[::2])\n    (len(b0) == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    q0 = 0\n    mark00 = b0[0]\n    count00, count01 = n/2, 0\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    c = Counter(l)\n    q0 =  int(n/2) - c.most_common(1)[0][1]\n    mark00, mark01 = c.most_common(2)[0][0], c.most_common(2)[1][0]\n    count00, count01 = c.most_common(2)[0][1], c.most_common(2)[1][1]\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    b1 = set(a[1::2])\n    (len(b1) == 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    q1 = 0\n    mark10 = b1[0]\n    count10, count11 = n/2, 0\nNext:\n    Go to Block: 9\n\nBlock 8:\nStatement:\n    c = Counter(l)\n    q1 =  int(n/2) - c.most_common(1)[0][1]\n    mark10, mark11 = c.most_common(2)[0][0], c.most_common(2)[1][0]\n    count10, count11 = c.most_common(2)[0][1], c.most_common(2)[1][1]\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (mark00 == mark10)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 13\n\nBlock 10:\nStatement:\n    (count00 + count01 > count10 + count11)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    p = n - (count00+count01)\nNext:\n    Go to Block: 14\n\nBlock 12:\nStatement:\n    p = n - (count10+count11)\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    p = n - (count00 + count10)\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    print(p)\nNext:\n    <END>\n"
        },
        "s065293773": {
            "code": "n = 4\nv = [3, 1, 3, 2]\na = Counter(v[::2]).most_common()\nb = Counter(v[1::2]).most_common()\nif len(a) == 1:\n    a.append([0, 0])\nif len(b) == 1:\n    b.append([0, 0])\nif a[0, 0] == b[0, 0]:\n    print(min(n - a[1, 1] - b[0, 1], n - a[0, 1] - b[1, 1]))\nelse:\n    print(n - a[0, 1] - b[0, 1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not tuple')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "v = [3, 1, 3, 2]",
                    "a=Counter(v[::2]).most_common()",
                    "b=Counter(v[1::2]).most_common()",
                    "(len(a) == 1)"
                ],
                "2": [
                    "a.append([0,0])"
                ],
                "3": [
                    "(len(b) == 1)"
                ],
                "4": [
                    "b.append([0,0])"
                ],
                "5": [
                    "(a[0, 0] == b[0, 0])"
                ],
                "6": [
                    "print(min(n-a[1,1]-b[0,1],n-a[0,1]-b[1,1]))"
                ],
                "7": [
                    "print(n-a[0,1]-b[0,1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    v = [3, 1, 3, 2]\n    a=Counter(v[::2]).most_common()\n    b=Counter(v[1::2]).most_common()\n    (len(a) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a.append([0,0])\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (len(b) == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b.append([0,0])\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a[0, 0] == b[0, 0])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(min(n-a[1,1]-b[0,1],n-a[0,1]-b[1,1]))\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(n-a[0,1]-b[0,1])\nNext:\n    <END>\n"
        },
        "s014538916": {
            "code": "n = 4\nv = [3, 1, 3, 2]\ndummy = (-1, -1)\n(av1, ak1), (av2, ak2) = (collections.Counter(v[::2]).most_common(2) + dummy)[:2]\n(bv1, bk1), (bv2, bk2) = (collections.Counter(v[1::2]).most_common(2) + dummy)[:2]\nif av1 != bv1:\n    print(n - ak1 - bk1)\nelif ak1 < bk1:\n    print(n - ak2 - bk1)\nelse:\n    print(n - ak1 - bk2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate list (not \"tuple\") to list')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "v = [3, 1, 3, 2]",
                    "dummy = (-1, -1)",
                    "(av1, ak1), (av2, ak2) = (collections.Counter(v[::2]).most_common(2) + dummy)[:2]",
                    "(bv1, bk1), (bv2, bk2) = (collections.Counter(v[1::2]).most_common(2) + dummy)[:2]",
                    "(av1 != bv1)"
                ],
                "2": [
                    "print(n-ak1-bk1)"
                ],
                "3": [
                    "(ak1 < bk1)"
                ],
                "4": [
                    "print(n-ak2-bk1)"
                ],
                "5": [
                    "print(n-ak1-bk2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    v = [3, 1, 3, 2]\n    dummy = (-1, -1)\n    (av1, ak1), (av2, ak2) = (collections.Counter(v[::2]).most_common(2) + dummy)[:2]\n    (bv1, bk1), (bv2, bk2) = (collections.Counter(v[1::2]).most_common(2) + dummy)[:2]\n    (av1 != bv1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n-ak1-bk1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (ak1 < bk1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(n-ak2-bk1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(n-ak1-bk2)\nNext:\n    <END>\n"
        },
        "s495185164": {
            "code": "n = '4'\nv = [3, 1, 3, 2]\na = Counter(v[0::2]).most_common()\nb = Counter(v[1::2]).most_common()\na.append([0, 0])\nb.append([0, 0])\nif a[0][0] != b[0][0]:\n    print(n - (a[0][1] + b[0][1]))\nelse:\n    print(min(n - (a[1][1] + b[0][1]), n - (a[0][1] + b[1][1])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '4'",
                    "v = [3, 1, 3, 2]",
                    "a=Counter(v[0::2]).most_common()",
                    "b=Counter(v[1::2]).most_common()",
                    "a.append([0,0])",
                    "b.append([0,0])",
                    "(a[0][0] != b[0][0])"
                ],
                "2": [
                    "print(n-(a[0][1]+b[0][1]))"
                ],
                "3": [
                    "print(min(n-(a[1][1]+b[0][1]),n-(a[0][1]+b[1][1])))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '4'\n    v = [3, 1, 3, 2]\n    a=Counter(v[0::2]).most_common()\n    b=Counter(v[1::2]).most_common()\n    a.append([0,0])\n    b.append([0,0])\n    (a[0][0] != b[0][0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n-(a[0][1]+b[0][1]))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(min(n-(a[1][1]+b[0][1]),n-(a[0][1]+b[1][1])))\nNext:\n    <END>\n"
        },
        "s904799762": {
            "code": "n = 4\nr = [3, 1, 3, 2]\neNum = collections.Counter(r[1::2])\noNum = collections.Counter(r[::2])\nif eNum.keys()[0] == oNum.keys()[0]:\n    print(len(r) - max(eNum[eNum.keys()[0]] + oNum[oNum.keys()[1]], eNum[eNum.keys()[1]] + oNum[oNum.keys()[0]]))\nelse:\n    print(len(r) - eNum[eNum.keys()[0]] - oNum[oNum.keys()[1]])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_keys' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "r = [3, 1, 3, 2]",
                    "eNum=collections.Counter(r[1::2])",
                    "oNum=collections.Counter(r[::2])",
                    "(eNum.keys()[0] == oNum.keys()[0])"
                ],
                "2": [
                    "print(len(r)-max(eNum[eNum.keys()[0]]+oNum[oNum.keys()[1]],eNum[eNum.keys()[1]]+oNum[oNum.keys()[0]]))"
                ],
                "3": [
                    "print(len(r)-eNum[eNum.keys()[0]]-oNum[oNum.keys()[1]])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    r = [3, 1, 3, 2]\n    eNum=collections.Counter(r[1::2])\n    oNum=collections.Counter(r[::2])\n    (eNum.keys()[0] == oNum.keys()[0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(len(r)-max(eNum[eNum.keys()[0]]+oNum[oNum.keys()[1]],eNum[eNum.keys()[1]]+oNum[oNum.keys()[0]]))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(len(r)-eNum[eNum.keys()[0]]-oNum[oNum.keys()[1]])\nNext:\n    <END>\n"
        },
        "s649469603": {
            "code": "n = 4\nv = [3, 1, 3, 2]\nif v.count(v[0]) == n:\n    print(n // 2)\n    exit()\ne = []\no = []\nfor i in range(n):\n    if i % 2 == 0:\n        e.append(v[i])\n    else:\n        o.append(v[i])\ne_counter = Counter(e)\no_counter = Counter(o)\nE1 = list(e_counter.keys())[0]\nif len(list(e_counter.keys())) > 1:\n    E2 = list(e_counter.keys())[1]\nelse:\n    E2 = E1\nO1 = list(o_counter.keys())[0]\nif len(list(o_counter.keys())) > 1:\n    O2 = list(o_counter.keys())[1]\nelse:\n    O2 = O1\ne_cnt = n // 2 - max(e.count(E1))\no_cnt = n // 2 - max(o.count(O1))\nif e_cnt == 0 and o_cnt == 0:\n    print(0)\nelse:\n    print(e_cnt + o_cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        15
                    ]
                },
                "9": {
                    "range": [
                        16,
                        16
                    ]
                },
                "10": {
                    "range": [
                        17,
                        17
                    ]
                },
                "11": {
                    "range": [
                        18,
                        19
                    ]
                },
                "12": {
                    "range": [
                        20,
                        20
                    ]
                },
                "13": {
                    "range": [
                        21,
                        21
                    ]
                },
                "14": {
                    "range": [
                        22,
                        24
                    ]
                },
                "15": {
                    "range": [
                        25,
                        25
                    ]
                },
                "16": {
                    "range": [
                        26,
                        26
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7,
                8,
                9,
                10,
                8,
                9,
                12,
                8,
                9,
                10,
                8,
                9,
                12,
                8,
                13,
                14,
                15,
                16,
                19,
                20,
                21,
                22,
                25
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "v = [3, 1, 3, 2]",
                    "(v.count(v[0]) == n)"
                ],
                "2": [
                    "print(n // 2)",
                    "exit()"
                ],
                "3": [
                    "e = []",
                    "o = []"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "5": [
                    "(i % 2 == 0)"
                ],
                "6": [
                    "e.append(v[i])"
                ],
                "7": [
                    "o.append(v[i])"
                ],
                "8": [
                    "e_counter = Counter(e)",
                    "o_counter = Counter(o)",
                    "E1 = list(e_counter.keys())[0]",
                    "(len(list(e_counter.keys())) > 1)"
                ],
                "9": [
                    "E2 = list(e_counter.keys())[1]"
                ],
                "10": [
                    "E2 = E1"
                ],
                "11": [
                    "O1 = list(o_counter.keys())[0]",
                    "(len(list(o_counter.keys())) > 1)"
                ],
                "12": [
                    "O2 = list(o_counter.keys())[1]"
                ],
                "13": [
                    "O2 = O1"
                ],
                "14": [
                    "e_cnt = n // 2 - max(e.count(E1))",
                    "o_cnt = n // 2 - max(o.count(O1))",
                    "(e_cnt == 0 and o_cnt == 0)"
                ],
                "15": [
                    "print(0)"
                ],
                "16": [
                    "print(e_cnt + o_cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "14": {
                    "with_condition": {
                        "true": 15,
                        "false": 16
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    v = [3, 1, 3, 2]\n    (v.count(v[0]) == n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n // 2)\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    e = []\n    o = []\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    e.append(v[i])\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    o.append(v[i])\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    e_counter = Counter(e)\n    o_counter = Counter(o)\n    E1 = list(e_counter.keys())[0]\n    (len(list(e_counter.keys())) > 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    E2 = list(e_counter.keys())[1]\nNext:\n    Go to Block: 11\n\nBlock 10:\nStatement:\n    E2 = E1\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    O1 = list(o_counter.keys())[0]\n    (len(list(o_counter.keys())) > 1)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    O2 = list(o_counter.keys())[1]\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    O2 = O1\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    e_cnt = n // 2 - max(e.count(E1))\n    o_cnt = n // 2 - max(o.count(O1))\n    (e_cnt == 0 and o_cnt == 0)\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 16\n\nBlock 15:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 16:\nStatement:\n    print(e_cnt + o_cnt)\nNext:\n    <END>\n"
        },
        "s786796568": {
            "code": "N = 4\na = [3, 1, 3, 2]\nb = a[::2]\nc = a[1::2]\nb_ = collections.Counter(b)\nc_ = collections.Counter(c)\nbaa = b_.most_common(b_)\ncaa = c_.most_common(c_)\nbaa.append([0, 0])\ncaa.append([0, 0])\nif baa[0][0] != caa[0][0]:\n    print(N - baa[0][1] - caa[0][1])\nelse:\n    print(max(N - baa[0][1] - caa[1][1], N - caa[0][1] - baa[1][1]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        11
                    ]
                },
                "2": {
                    "range": [
                        12,
                        12
                    ]
                },
                "3": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'Counter' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "a = [3, 1, 3, 2]",
                    "b = a[::2]",
                    "c = a[1::2]",
                    "b_ =collections.Counter(b)",
                    "c_ =collections.Counter(c)",
                    "baa = b_.most_common(b_)",
                    "caa = c_.most_common(c_)",
                    "baa.append([0,0])",
                    "caa.append([0,0])",
                    "(baa[0][0] != caa[0][0])"
                ],
                "2": [
                    "print(N - baa[0][1] - caa[0][1])"
                ],
                "3": [
                    "print(max(N - baa[0][1] - caa[1][1],N - caa[0][1] - baa[1][1]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    a = [3, 1, 3, 2]\n    b = a[::2]\n    c = a[1::2]\n    b_ =collections.Counter(b)\n    c_ =collections.Counter(c)\n    baa = b_.most_common(b_)\n    caa = c_.most_common(c_)\n    baa.append([0,0])\n    caa.append([0,0])\n    (baa[0][0] != caa[0][0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N - baa[0][1] - caa[0][1])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(max(N - baa[0][1] - caa[1][1],N - caa[0][1] - baa[1][1]))\nNext:\n    <END>\n"
        },
        "s774473908": {
            "code": "N = 4\nV = [3, 1, 3, 2]\neven = V[0::2]\nodd = V[1::2]\neven_count = collections.Counter(even).most_common(2)\nodd_count = collections.Counter(odd).most_common(2)\nif even_count == N / 2:\n    print(N / 2 - odd_count)\nelif odd_count == N / 2:\n    print(N / 2 - even_count)\nelse:\n    print(N - odd_count - even_count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                9,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "V = [3, 1, 3, 2]",
                    "even = V[0::2]",
                    "odd =  V[1::2]",
                    "even_count = collections.Counter(even).most_common(2)",
                    "odd_count = collections.Counter(odd).most_common(2)",
                    "(even_count == N / 2)"
                ],
                "2": [
                    "print(N / 2 - odd_count)"
                ],
                "3": [
                    "(odd_count == N / 2)"
                ],
                "4": [
                    "print(N / 2 - even_count)"
                ],
                "5": [
                    "print(N - odd_count - even_count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    V = [3, 1, 3, 2]\n    even = V[0::2]\n    odd =  V[1::2]\n    even_count = collections.Counter(even).most_common(2)\n    odd_count = collections.Counter(odd).most_common(2)\n    (even_count == N / 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N / 2 - odd_count)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (odd_count == N / 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(N / 2 - even_count)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(N - odd_count - even_count)\nNext:\n    <END>\n"
        },
        "s512051843": {
            "code": "n = 4\nlst = ['3', '1', '3', '2']\nmap(int, lst)\nd1 = {}\nd2 = {}\nfor i in range(len(lst)):\n    if i % 2 == 0:\n        if lst[i] in d1:\n            d1[lst[i]] += 1\n        else:\n            d1[lst[i]] = 1\n    elif lst[i] in d2:\n        d2[lst[i]] += 1\n    else:\n        d2[lst[i]] = 1\nsd1 = sorted(d1.values(), reverse=True)\nsd2 = sorted(d2.values(), reverse=True)\nkey1 = max(d1.items(), key=operator.itemgetter(1))[0]\nkey2 = max(d2.items(), key=operator.itemgetter(1))[0]\nif key1 == key2:\n    v11 = sd1[0]\n    if len(d1) == 1:\n        v12 = 0\n    else:\n        v12 = sd1[1]\n    v21 = sd2[0]\n    if len(d2) == 1:\n        v22 = 0\n    else:\n        v22 = sd2[1]\n    print(min(n - v11 - v22, n - v12 - v21))\nelse:\n    print(n - sd1[0] - sd2[key2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                },
                "10": {
                    "range": [
                        14,
                        18
                    ]
                },
                "11": {
                    "range": [
                        19,
                        20
                    ]
                },
                "12": {
                    "range": [
                        21,
                        21
                    ]
                },
                "13": {
                    "range": [
                        22,
                        22
                    ]
                },
                "14": {
                    "range": [
                        23,
                        24
                    ]
                },
                "15": {
                    "range": [
                        25,
                        25
                    ]
                },
                "16": {
                    "range": [
                        26,
                        26
                    ]
                },
                "17": {
                    "range": [
                        27,
                        27
                    ]
                },
                "18": {
                    "range": [
                        28,
                        28
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                11,
                6,
                7,
                13,
                16,
                6,
                7,
                8,
                9,
                6,
                7,
                13,
                16,
                6,
                17,
                18,
                19,
                20,
                21,
                34
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 18,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not str')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "lst = ['3', '1', '3', '2']",
                    "map(int, lst)",
                    "d1 = {}",
                    "d2 = {}"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(lst))"
                ],
                "3": [
                    "(i % 2 == 0)"
                ],
                "4": [
                    "(lst[i] in d1)"
                ],
                "5": [
                    "d1[lst[i]] += 1"
                ],
                "6": [
                    "d1[lst[i]] = 1"
                ],
                "7": [
                    "(lst[i] in d2)"
                ],
                "8": [
                    "d2[lst[i]] += 1"
                ],
                "9": [
                    "d2[lst[i]] = 1"
                ],
                "10": [
                    "sd1 = sorted(d1.values(), reverse=True)",
                    "sd2 = sorted(d2.values(), reverse=True)",
                    "key1 = max(d1.items(), key=operator.itemgetter(1))[0]",
                    "key2 = max(d2.items(), key=operator.itemgetter(1))[0]",
                    "(key1 == key2)"
                ],
                "11": [
                    "v11 = sd1[0]",
                    "(len(d1) == 1)"
                ],
                "12": [
                    "v12 = 0"
                ],
                "13": [
                    "v12 = sd1[1]"
                ],
                "14": [
                    "v21 = sd2[0]",
                    "(len(d2) == 1)"
                ],
                "15": [
                    "v22 = 0"
                ],
                "16": [
                    "v22 = sd2[1]"
                ],
                "17": [
                    "print(min(n-v11-v22, n-v12-v21))"
                ],
                "18": [
                    "print(n-sd1[0]-sd2[key2])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 18
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": 15,
                        "false": 16
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "15": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                },
                "16": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    lst = ['3', '1', '3', '2']\n    map(int, lst)\n    d1 = {}\n    d2 = {}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(lst))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (lst[i] in d1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    d1[lst[i]] += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    d1[lst[i]] = 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (lst[i] in d2)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    d2[lst[i]] += 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    d2[lst[i]] = 1\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    sd1 = sorted(d1.values(), reverse=True)\n    sd2 = sorted(d2.values(), reverse=True)\n    key1 = max(d1.items(), key=operator.itemgetter(1))[0]\n    key2 = max(d2.items(), key=operator.itemgetter(1))[0]\n    (key1 == key2)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 18\n\nBlock 11:\nStatement:\n    v11 = sd1[0]\n    (len(d1) == 1)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    v12 = 0\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    v12 = sd1[1]\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    v21 = sd2[0]\n    (len(d2) == 1)\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 16\n\nBlock 15:\nStatement:\n    v22 = 0\nNext:\n    Go to Block: 17\n\nBlock 16:\nStatement:\n    v22 = sd2[1]\nNext:\n    Go to Block: 17\n\nBlock 17:\nStatement:\n    print(min(n-v11-v22, n-v12-v21))\nNext:\n    <END>\n\nBlock 18:\nStatement:\n    print(n-sd1[0]-sd2[key2])\nNext:\n    <END>\n"
        },
        "s209589494": {
            "code": "n = 4\nnums = [3, 1, 3, 2]\na = set(nums)\nif len(a) == 1:\n    print(n // 2)\nelse:\n    odd = nums[::2]\n    even = nums[1::2]\n    o = Counter(odd)\n    e = Counter(even)\n    ans = n - o.most_common()[0][1] - e.most_common()[0][1]\n    if o.most_common[0][0] == e.most_common[0][0]:\n        print(ans + min(o.most_common[1][1] - o.most_common[0][1], e.most_common[1][1] - e.most_common[0][1]))\n    else:\n        print(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        11
                    ]
                },
                "4": {
                    "range": [
                        12,
                        12
                    ]
                },
                "5": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'method' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "nums = [3, 1, 3, 2]",
                    "a=set(nums)",
                    "(len(a) == 1)"
                ],
                "2": [
                    "print(n//2)"
                ],
                "3": [
                    "odd=nums[::2]",
                    "even=nums[1::2]",
                    "o=Counter(odd)",
                    "e=Counter(even)",
                    "ans=n-o.most_common()[0][1]-e.most_common()[0][1]",
                    "(o.most_common[0][0] == e.most_common[0][0])"
                ],
                "4": [
                    "print(ans+min(o.most_common[1][1]-o.most_common[0][1],e.most_common[1][1]-e.most_common[0][1]))"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    nums = [3, 1, 3, 2]\n    a=set(nums)\n    (len(a) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n//2)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    odd=nums[::2]\n    even=nums[1::2]\n    o=Counter(odd)\n    e=Counter(even)\n    ans=n-o.most_common()[0][1]-e.most_common()[0][1]\n    (o.most_common[0][0] == e.most_common[0][0])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(ans+min(o.most_common[1][1]-o.most_common[0][1],e.most_common[1][1]-e.most_common[0][1]))\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03252": {
        "s590602291": {
            "code": "S = 'azzel'\nT = 'apple'\nd = {}\nfor i in range(len(S)):\n    if S[i] in d or T[i] in d:\n        if d[S[i]] != T[i] or d[T[i]] != S[i]:\n            print('No')\n            exit()\n    d[S[i]] = T[i]\n    d[T[i]] = S[i]\nprint('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                9,
                10,
                4,
                5,
                9,
                10,
                4,
                5,
                6,
                9,
                10,
                4,
                5,
                9,
                10,
                4,
                5,
                6,
                9,
                10,
                4,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'azzel'",
                    "T = 'apple'",
                    "d = {}"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(S))"
                ],
                "3": [
                    "(S[i] in d or T[i] in d)"
                ],
                "4": [
                    "(d[S[i]] != T[i] or d[T[i]] != S[i])"
                ],
                "5": [
                    "print('No')",
                    "exit()"
                ],
                "6": [
                    "d[S[i]] = T[i]",
                    "d[T[i]] = S[i]"
                ],
                "7": [
                    "print('Yes')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'azzel'\n    T = 'apple'\n    d = {}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (S[i] in d or T[i] in d)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (d[S[i]] != T[i] or d[T[i]] != S[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('No')\n    exit()\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    d[S[i]] = T[i]\n    d[T[i]] = S[i]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s555915804": {
            "code": "s = 'azzel'\nt = 'apple'\ns = collections.Counter(s)\nt = collections.Counter(t)\nif sorted(s.values()) == sorted(t.values):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'azzel'",
                    "t = 'apple'",
                    "s = collections.Counter(s)",
                    "t = collections.Counter(t)",
                    "(sorted(s.values()) == sorted(t.values))"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'azzel'\n    t = 'apple'\n    s = collections.Counter(s)\n    t = collections.Counter(t)\n    (sorted(s.values()) == sorted(t.values))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s005280607": {
            "code": "S = 'azzel'\nT = 'apple'\nd = defaultdict(str)\nno_flag = False\nfor i in range(len(S)):\n    if S[i] != T[i]:\n        if d[S[i]] == T[i]:\n            S[i] = T[i]\n            pass\n        elif d[S[i]] == '' and d[T[i]] == '':\n            d[S[i]] = T[i]\n            d[T[i]] = S[i]\n        else:\n            pass\nS = sorted(S)\nT = sorted(T)\nif S == T:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                7,
                10,
                11,
                12,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'azzel'",
                    "T = 'apple'",
                    "d = defaultdict(str)",
                    "no_flag = False"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(S))"
                ],
                "3": [
                    "(S[i] != T[i])"
                ],
                "4": [
                    "(d[S[i]] == T[i])"
                ],
                "5": [
                    "S[i] = T[i]"
                ],
                "6": [
                    "(d[S[i]] == '' and d[T[i]] == '')"
                ],
                "7": [
                    "d[S[i]] = T[i]",
                    "d[T[i]] = S[i]"
                ],
                "8": [
                    "S = sorted(S)",
                    "T = sorted(T)",
                    "(S == T)"
                ],
                "9": [
                    "print(\"Yes\")"
                ],
                "10": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 2
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'azzel'\n    T = 'apple'\n    d = defaultdict(str)\n    no_flag = False\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (S[i] != T[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (d[S[i]] == T[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    S[i] = T[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (d[S[i]] == '' and d[T[i]] == '')\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 2\n\nBlock 7:\nStatement:\n    d[S[i]] = T[i]\n    d[T[i]] = S[i]\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    S = sorted(S)\n    T = sorted(T)\n    (S == T)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03262": {
        "s865010583": {
            "code": "DATA = '3 3'\nN, X = DATA.split()\nN = int(N)\nX = int(X)\nDATA = '1 7 11'\nx = DATA.split()\nx[0] = int(x[0])\nnum = abs(X - x[0])\nfor lop in range(1, N):\n    x[lop] = int(x[lop])\n    sa = abs(X - x[lop])\n    num = math.gcd(num, sa)\nprint(num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        12
                    ]
                },
                "4": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                9,
                10,
                11,
                12,
                9,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "DATA = '3 3'",
                    "N,X = DATA.split()",
                    "N = int(N)",
                    "X = int(X)",
                    "DATA = '1 7 11'",
                    "x = DATA.split()",
                    "x[0] = int(x[0])",
                    "num = abs(X-x[0])"
                ],
                "2": [
                    "iterator -> lop, Iterate Over -> range(1, N)"
                ],
                "3": [
                    "x[lop] = int(x[lop])",
                    "sa = abs(X-x[lop])",
                    "num = math.gcd(num,sa)"
                ],
                "4": [
                    "print(num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    DATA = '3 3'\n    N,X = DATA.split()\n    N = int(N)\n    X = int(X)\n    DATA = '1 7 11'\n    x = DATA.split()\n    x[0] = int(x[0])\n    num = abs(X-x[0])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> lop, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x[lop] = int(x[lop])\n    sa = abs(X-x[lop])\n    num = math.gcd(num,sa)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(num)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03265": {
        "s963489246": {
            "code": "s = ['0', '0', '0', '1']\nl = [int(s[i]) for i in range(4)]\nv1 = np.array([l[0], l[1]])\nv2 = np.array([l[2], l[3]])\nv = v2 - v1\nA = np.array([[0, -1], [1, 0]])\nv3 = v2 + np.dot(A, v)\nv = v3 - v2\nv4 = v3 + np.dot(A, v)\nprint(v3[0], v3[1], v4[0], v4[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = ['0', '0', '0', '1']",
                    "l=[int(s[i]) for i in range(4)]",
                    "v1=np.array([l[0],l[1]])",
                    "v2=np.array([l[2],l[3]])",
                    "v=v2-v1",
                    "A=np.array([[0,-1],[1,0]])",
                    "v3=v2+np.dot(A,v)",
                    "v=v3-v2",
                    "v4=v3+np.dot(A,v)",
                    "print(v3[0],v3[1],v4[0],v4[1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['0', '0', '0', '1']\n    l=[int(s[i]) for i in range(4)]\n    v1=np.array([l[0],l[1]])\n    v2=np.array([l[2],l[3]])\n    v=v2-v1\n    A=np.array([[0,-1],[1,0]])\n    v3=v2+np.dot(A,v)\n    v=v3-v2\n    v4=v3+np.dot(A,v)\n    print(v3[0],v3[1],v4[0],v4[1])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03281": {
        "s230887524": {
            "code": "n = 105\nif n % 2 == 0 and len(sympy.divisors(n)) == 8:\n    print(1)\nelse:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 105",
                    "(n % 2 == 0 and len(sympy.divisors(n)) == 8)"
                ],
                "2": [
                    "print(1)"
                ],
                "3": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 105\n    (n % 2 == 0 and len(sympy.divisors(n)) == 8)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(0)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03282": {
        "s758489414": {
            "code": "s = '1214'\nk = 4\ni = 0\nwhile i < k and i < len(s):\n    if s[i] != '1':\n        break\n    i += 1\nprint(s[i])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                7,
                4,
                5,
                6,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = '1214'",
                    "k = 4",
                    "i = 0"
                ],
                "2": [
                    "while i < k and i < len(s):"
                ],
                "3": [
                    "(s[i] != '1')"
                ],
                "4": [
                    "i += 1"
                ],
                "5": [
                    "print(s[i])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 5,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = 4\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i < k and i < len(s):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] != '1')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    i += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(s[i])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s434789719": {
            "code": "s = 1214\nk = 4\nfor i in range(len(s)):\n    if s[i] != '1':\n        print(s[i])\n        break\n    elif i == k - 1:\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 1214",
                    "k = 4"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s))"
                ],
                "3": [
                    "(s[i] != '1')"
                ],
                "4": [
                    "print(s[i])"
                ],
                "5": [
                    "(i == k - 1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": "<END>",
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 1214\n    k = 4\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (s[i] != '1')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(s[i])\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (i == k - 1)\nNext:\n    <END>    If False: Go to Block 2\n"
        },
        "s909222040": {
            "code": "s = '1214'\nk = '4'\nfor i in range(len(s)):\n    if s[i] != '1' and i + 1 < k:\n        print(s[i])\n        sys.exit(0)\nprint(1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '1214'",
                    "k = '4'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s))"
                ],
                "3": [
                    "(s[i] != '1' and i + 1 < k)"
                ],
                "4": [
                    "print(s[i])",
                    "sys.exit(0)"
                ],
                "5": [
                    "print(1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = '4'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] != '1' and i + 1 < k)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(s[i])\n    sys.exit(0)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(1)\nNext:\n    <END>\n"
        },
        "s247438872": {
            "code": "s = '1214'\nk = 4\ni = 0\nwhile i < len(s):\n    if int(math.log(s[i])) * (500 * 10 ** 12) >= math.log(k):\n        break\n    i += 1\nprint(s[i])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('must be real number, not str')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '1214'",
                    "k = 4",
                    "i = 0"
                ],
                "2": [
                    "while i < len(s):"
                ],
                "3": [
                    "(int(math.log(s[i])) * (500 * 10 ** 12) >= math.log(k))"
                ],
                "4": [
                    "i += 1"
                ],
                "5": [
                    "print(s[i])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 5,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1214'\n    k = 4\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i < len(s):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (int(math.log(s[i])) * (500 * 10 ** 12) >= math.log(k))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    i += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(s[i])\nNext:\n    <END>\n"
        }
    },
    "p03286": {
        "s816984347": {
            "code": "n = -9\nif n == 0:\n    print(0)\nelse:\n    base = math.floor(math.log2(abs(n)))\n    res = ''\n    for i in range(base + 1, -1, -1):\n        if i % 2 == 0:\n            if -(-2) ** (i - 1) <= n <= -(-2) ** (i + 1):\n                res += '1'\n                n -= (-2) ** i\n            else:\n                res += '0'\n        elif -(-2) ** (i - 1) >= n >= -(-2) ** (i + 1):\n            res += '1'\n            n -= (-2) ** i\n        else:\n            res += '0'\n    if res[0] == '0':\n        print(res[1:])\n    else:\n        print(res)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        14
                    ]
                },
                "11": {
                    "range": [
                        15,
                        15
                    ]
                },
                "12": {
                    "range": [
                        16,
                        16
                    ]
                },
                "13": {
                    "range": [
                        17,
                        17
                    ]
                },
                "14": {
                    "range": [
                        18,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6,
                7,
                8,
                9,
                13,
                7,
                8,
                15,
                16,
                17,
                7,
                8,
                9,
                13,
                7,
                8,
                15,
                16,
                17,
                7,
                8,
                9,
                10,
                11,
                7,
                20,
                21
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = -9",
                    "(n == 0)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "base = math.floor(math.log2(abs(n)))",
                    "res = \"\""
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(base + 1, -1, -1)"
                ],
                "5": [
                    "(i % 2 == 0)"
                ],
                "6": [
                    "(-(-2) ** (i - 1) <= n <= -(-2) ** (i + 1))"
                ],
                "7": [
                    "res += \"1\"",
                    "n -= (-2) ** i"
                ],
                "8": [
                    "res += \"0\""
                ],
                "9": [
                    "(-(-2) ** (i - 1) >= n >= -(-2) ** (i + 1))"
                ],
                "10": [
                    "res += \"1\"",
                    "n -= (-2) ** i"
                ],
                "11": [
                    "res += \"0\""
                ],
                "12": [
                    "(res[0] == '0')"
                ],
                "13": [
                    "print(res[1:])"
                ],
                "14": [
                    "print(res)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 12
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = -9\n    (n == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    base = math.floor(math.log2(abs(n)))\n    res = \"\"\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(base + 1, -1, -1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 12\n\nBlock 5:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 9\n\nBlock 6:\nStatement:\n    (-(-2) ** (i - 1) <= n <= -(-2) ** (i + 1))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    res += \"1\"\n    n -= (-2) ** i\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    res += \"0\"\nNext:\n    Go to Block: 4\n\nBlock 9:\nStatement:\n    (-(-2) ** (i - 1) >= n >= -(-2) ** (i + 1))\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    res += \"1\"\n    n -= (-2) ** i\nNext:\n    Go to Block: 4\n\nBlock 11:\nStatement:\n    res += \"0\"\nNext:\n    Go to Block: 4\n\nBlock 12:\nStatement:\n    (res[0] == '0')\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(res[1:])\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print(res)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03289": {
        "s315700694": {
            "code": "s = 'AtCoder'\ncounter = Counter(s[2:-1])\nif s[0] == 'A':\n    s = s.lstrip('A')\nelse:\n    print('WA')\n    sys.exit(1)\nif counter['C'] == 1:\n    s = s.replace('C', '')\nelse:\n    print('WA')\n    sys.exit(1)\nif s.islower():\n    print('AC')\nelse:\n    print('WA')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                8,
                9,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'AtCoder'",
                    "counter = Counter(s[2:-1])",
                    "(s[0] == 'A')"
                ],
                "2": [
                    "s = s.lstrip('A')"
                ],
                "3": [
                    "print('WA')",
                    "sys.exit(1)"
                ],
                "4": [
                    "(counter['C'] == 1)"
                ],
                "5": [
                    "s = s.replace('C', '')"
                ],
                "6": [
                    "print('WA')",
                    "sys.exit(1)"
                ],
                "7": [
                    "(s.islower())"
                ],
                "8": [
                    "print('AC')"
                ],
                "9": [
                    "print('WA')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'AtCoder'\n    counter = Counter(s[2:-1])\n    (s[0] == 'A')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    s = s.lstrip('A')\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    print('WA')\n    sys.exit(1)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (counter['C'] == 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    s = s.replace('C', '')\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    print('WA')\n    sys.exit(1)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (s.islower())\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('AC')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print('WA')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s576152719": {
            "code": "s = ['A', 't', 'C', 'o', 'd', 'e', 'r']\nif s[0] == 'A' and 'C' in s[2:len(s)]:\n    t = copy.copy(s)\n    s.remove('A')\n    s.remove('C')\n    result = ''.join(s)\n    if len(s) == len(t) - 2 and result.islower() == True and (t[len(s - 1)] != 'C'):\n        print('AC')\n    else:\n        print('WA')\nelse:\n    print('WA')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['A', 't', 'C', 'o', 'd', 'e', 'r']",
                    "(s[0] == 'A' and 'C' in s[2:len(s)])"
                ],
                "2": [
                    "t=copy.copy(s)",
                    "s.remove('A')",
                    "s.remove('C')",
                    "result=''.join(s)",
                    "(len(s) == len(t) - 2 and result.islower() == True and (t[len(s - 1)] != 'C'))"
                ],
                "3": [
                    "print('AC')"
                ],
                "4": [
                    "print('WA')"
                ],
                "5": [
                    "print('WA')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['A', 't', 'C', 'o', 'd', 'e', 'r']\n    (s[0] == 'A' and 'C' in s[2:len(s)])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    t=copy.copy(s)\n    s.remove('A')\n    s.remove('C')\n    result=''.join(s)\n    (len(s) == len(t) - 2 and result.islower() == True and (t[len(s - 1)] != 'C'))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print('AC')\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print('WA')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('WA')\nNext:\n    <END>\n"
        },
        "s112631168": {
            "code": "s = ['A', 't', 'C', 'o', 'd', 'e', 'r']\nif s[0] == 'A' and 'C' in s[2:len(s)]:\n    t = copy.copy(s)\n    s.remove('A')\n    s.remove('C')\n    result = ''.join(s)\n    if len(s) == len(t) - 2 and result.islower() == True and (t[s - 1] != 'C'):\n        print('AC')\n    else:\n        print('WA')\nelse:\n    print('WA')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['A', 't', 'C', 'o', 'd', 'e', 'r']",
                    "(s[0] == 'A' and 'C' in s[2:len(s)])"
                ],
                "2": [
                    "t=copy.copy(s)",
                    "s.remove('A')",
                    "s.remove('C')",
                    "result=''.join(s)",
                    "(len(s) == len(t) - 2 and result.islower() == True and (t[s - 1] != 'C'))"
                ],
                "3": [
                    "print('AC')"
                ],
                "4": [
                    "print('WA')"
                ],
                "5": [
                    "print('WA')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['A', 't', 'C', 'o', 'd', 'e', 'r']\n    (s[0] == 'A' and 'C' in s[2:len(s)])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 5\n\nBlock 2:\nStatement:\n    t=copy.copy(s)\n    s.remove('A')\n    s.remove('C')\n    result=''.join(s)\n    (len(s) == len(t) - 2 and result.islower() == True and (t[s - 1] != 'C'))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    print('AC')\nNext:\n    <END>\n\nBlock 4:\nStatement:\n    print('WA')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('WA')\nNext:\n    <END>\n"
        }
    },
    "p03291": {
        "s414734855": {
            "code": "S = 'A??C'\nINF = 10 ** 9 + 7\ndp = np.array([0, 0, 0], dtype=np.int64)\nN = 1\nfor i in range(len(S)):\n    if S[i] == 'A':\n        dp[0] += N % INF\n        dp[0] %= INF\n    elif S[i] == 'B':\n        dp[1] += dp[0]\n        dp[1] %= INF\n    elif S[i] == 'C':\n        dp[2] += dp[1]\n        dp[2] %= INF\n    else:\n        dp[1:] = dp[1:] * 3 + dp[:-1]\n        dp[0] = dp[0] * 3 + N\n        dp %= INF\n        N *= 3\nprint(dp[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        18
                    ]
                },
                "10": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                5,
                6,
                9,
                12,
                16,
                17,
                18,
                19,
                5,
                6,
                9,
                12,
                16,
                17,
                18,
                19,
                5,
                6,
                9,
                12,
                13,
                14,
                5,
                20
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'A??C'",
                    "INF = 10**9+7",
                    "dp = np.array([0,0,0], dtype=np.int64)",
                    "N = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(S))"
                ],
                "3": [
                    "(S[i] == 'A')"
                ],
                "4": [
                    "dp[0] += N%INF",
                    "dp[0] %= INF"
                ],
                "5": [
                    "(S[i] == 'B')"
                ],
                "6": [
                    "dp[1] += dp[0]",
                    "dp[1] %= INF"
                ],
                "7": [
                    "(S[i] == 'C')"
                ],
                "8": [
                    "dp[2] += dp[1]",
                    "dp[2] %= INF"
                ],
                "9": [
                    "dp[1:] = dp[1:]*3+dp[:-1]",
                    "dp[0] = dp[0]*3+N",
                    "dp %= INF",
                    "N *= 3"
                ],
                "10": [
                    "print(dp[2])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'A??C'\n    INF = 10**9+7\n    dp = np.array([0,0,0], dtype=np.int64)\n    N = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (S[i] == 'A')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    dp[0] += N%INF\n    dp[0] %= INF\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (S[i] == 'B')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    dp[1] += dp[0]\n    dp[1] %= INF\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (S[i] == 'C')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    dp[2] += dp[1]\n    dp[2] %= INF\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    dp[1:] = dp[1:]*3+dp[:-1]\n    dp[0] = dp[0]*3+N\n    dp %= INF\n    N *= 3\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(dp[2])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03292": {
        "s447454240": {
            "code": "A = [1, 6, 3]\nprint(int(pd.Series(A).sort_values().diff().sum()))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "A": "[1, 6, 3]"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "A = [1, 6, 3]",
                    "print(int(pd.Series(A).sort_values().diff().sum()))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    A = [1, 6, 3]\n    print(int(pd.Series(A).sort_values().diff().sum()))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03293": {
        "s247858106": {
            "code": "s = 'kyoto'\nt = 'tokyo'\na = int(len(s))\nfor i in range(0, a):\n    s = s[:a - 1] + s[a - 1:]\n    if s == t:\n        print('Yes')\n        sys.exist()\nprint('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'kyoto'",
                    "t = 'tokyo'",
                    "a = int(len(s))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, a)"
                ],
                "3": [
                    "s = s[:a-1:]+s[a-1::]",
                    "(s == t)"
                ],
                "4": [
                    "print(\"Yes\")",
                    "sys.exist()"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'kyoto'\n    t = 'tokyo'\n    a = int(len(s))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    s = s[:a-1:]+s[a-1::]\n    (s == t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"Yes\")\n    sys.exist()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s119426849": {
            "code": "input = sys.stdin.readline\nS = ['k', 'y', 'o', 't', 'o', '\\n']\nT = ['t', 'o', 'k', 'y', 'o']\nN = len(S)\nfor i in range(N):\n    S = S[-1] + S[:N - 1]\n    if S == T:\n        print('Yes')\n        sys.exit()\nprint('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "['k', 'y', 'o', 't', 'o', '\\n']"
                        },
                        {
                            "T": "['t', 'o', 'k', 'y', 'o']"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fb1a151f510>"
                        },
                        {
                            "N": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "['k', 'y', 'o', 't', 'o', '\\n']"
                        },
                        {
                            "T": "['t', 'o', 'k', 'y', 'o']"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fb1a151f510>"
                        },
                        {
                            "N": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "S": "['k', 'y', 'o', 't', 'o', '\\n']"
                        },
                        {
                            "T": "['t', 'o', 'k', 'y', 'o']"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7fb1a151f510>"
                        },
                        {
                            "N": "6"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"list\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "S = ['k', 'y', 'o', 't', 'o', '\\n']",
                    "T = ['t', 'o', 'k', 'y', 'o']",
                    "N = len(S)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "S = S[-1] + S[:N-1]",
                    "(S == T)"
                ],
                "4": [
                    "print(\"Yes\")",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    S = ['k', 'y', 'o', 't', 'o', '\\n']\n    T = ['t', 'o', 'k', 'y', 'o']\n    N = len(S)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    S = S[-1] + S[:N-1]\n    (S == T)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s158655051": {
            "code": "s = 'kyoto'\nt = 'tokyo'\nfor i in range(len(s)):\n    if s == t:\n        print('Yes')\n        sys.exit()\n    else:\n        tmp = s[0]\n        del s[0]\n        s = s + tmp\nprint('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object doesn't support item deletion\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'kyoto'",
                    "t = 'tokyo'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s))"
                ],
                "3": [
                    "(s == t)"
                ],
                "4": [
                    "print(\"Yes\")",
                    "sys.exit()"
                ],
                "5": [
                    "tmp = s[0]",
                    "del s[0]",
                    "s = s + tmp"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'kyoto'\n    t = 'tokyo'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s == t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    tmp = s[0]\n    del s[0]\n    s = s + tmp\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03294": {
        "s393691208": {
            "code": "n = 3\nl = [3, 4, 6]\nans = l[0]\nfor i in range(1, n):\n    ans = ans * l[i] // math.gcd(ans, l[i])\nprint(ans - 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "l = [3, 4, 6]",
                    "ans = l[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "ans = ans * l[i] // math.gcd(ans, l[i])"
                ],
                "4": [
                    "print(ans - 1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    l = [3, 4, 6]\n    ans = l[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = ans * l[i] // math.gcd(ans, l[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans - 1)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s004449678": {
            "code": "n = 3\nl = [3, 4, 6]\nlcm = 1\nfor i in range(n):\n    lcm = lcm * l[i] // gcd(l[i], lcm)\nx = lcm - 1\nprint(sum([x % i for i in l]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "l = [3, 4, 6]",
                    "lcm = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "lcm = lcm*l[i]//gcd(l[i],lcm)"
                ],
                "4": [
                    "x = lcm-1",
                    "print(sum([x%i for i in l]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    l = [3, 4, 6]\n    lcm = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    lcm = lcm*l[i]//gcd(l[i],lcm)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    x = lcm-1\n    print(sum([x%i for i in l]))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03304": {
        "s893270489": {
            "code": "line = [2, 3, 1]\nn = line[0]\nm = line[1]\nd = line[2]\nif 2 * d < n and d > 0:\n    ret1 = 1 + (m - 2) * log2(n)\n    ret2 = log2(m - d)\n    ret3 = log2(m - 1)\n    ret4 = m * log2(n)\n    print(2 ** (ret1 + ret2 + ret3 - ret4))\nelse:\n    ret1 = (m - 1) * log2(n)\n    ret2 = log2(m - 1)\n    ret3 = m * log2(n)\n    print(2 ** (ret1 + ret2 - ret3))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        10
                    ]
                },
                "3": {
                    "range": [
                        11,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                12,
                13,
                14,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "line = [2, 3, 1]",
                    "n = line[0]",
                    "m = line[1]",
                    "d = line[2]",
                    "(2 * d < n and d > 0)"
                ],
                "2": [
                    "ret1 = 1+(m-2)*log2(n)",
                    "ret2 = log2(m-d)",
                    "ret3 = log2(m-1)",
                    "ret4 = m*log2(n)",
                    "print(2**(ret1+ret2+ret3-ret4))"
                ],
                "3": [
                    "ret1 = (m-1)*log2(n)",
                    "ret2 = log2(m-1)",
                    "ret3 = m*log2(n)",
                    "print(2**(ret1+ret2-ret3))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    line = [2, 3, 1]\n    n = line[0]\n    m = line[1]\n    d = line[2]\n    (2 * d < n and d > 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ret1 = 1+(m-2)*log2(n)\n    ret2 = log2(m-d)\n    ret3 = log2(m-1)\n    ret4 = m*log2(n)\n    print(2**(ret1+ret2+ret3-ret4))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ret1 = (m-1)*log2(n)\n    ret2 = log2(m-1)\n    ret3 = m*log2(n)\n    print(2**(ret1+ret2-ret3))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03307": {
        "s513008015": {
            "code": "n = 3\nprint(n * 2 // math.gcd(n, 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "print(n*2//math.gcd(n,2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    print(n*2//math.gcd(n,2))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s747812228": {
            "code": "n = 3\nlcm = 2 * n // math.gcd(2, n)\nprint(lcm)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "lcm = 2*n//math.gcd(2,n)",
                    "print(lcm)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    lcm = 2*n//math.gcd(2,n)\n    print(lcm)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03311": {
        "s009915761": {
            "code": "N = 5\nA = [2, 2, 3, 5, 5]\nA = sorted([A[k] - (k + 1) for k in range(N)])\nfor k in range((N - 2) // 2 + 1, N - 1):\n    if A[k] < A[k + 1]:\n        b = k\n        break\n    if k == N - 2:\n        print(0)\n        sys.exit()\nprint(sum([abs(A[k] - A[b]) for k in range(N)]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "A = [2, 2, 3, 5, 5]",
                    "A = sorted([A[k]-(k+1) for k in range(N)])"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range((N - 2) // 2 + 1, N - 1)"
                ],
                "3": [
                    "(A[k] < A[k + 1])"
                ],
                "4": [
                    "b = k"
                ],
                "5": [
                    "(k == N - 2)"
                ],
                "6": [
                    "print(0)",
                    "sys.exit()"
                ],
                "7": [
                    "print(sum([abs(A[k]-A[b]) for k in range(N)]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [2, 2, 3, 5, 5]\n    A = sorted([A[k]-(k+1) for k in range(N)])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range((N - 2) // 2 + 1, N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (A[k] < A[k + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b = k\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (k == N - 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(0)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(sum([abs(A[k]-A[b]) for k in range(N)]))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03325": {
        "s233053279": {
            "code": "count = 0\nN = 3\nL = [5, 2, 4]\nL2 = functools.reduce(operator.mul, L)\nfor l in range(L2):\n    if L2 % 2 == 0:\n        L2 /= 2\n        count += 1\n    else:\n        break\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                5,
                6,
                7,
                8,
                5,
                6,
                7,
                8,
                5,
                6,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "count = 0",
                    "N = 3",
                    "L = [5, 2, 4]",
                    "L2 = functools.reduce(operator.mul,L)"
                ],
                "2": [
                    "iterator -> l, Iterate Over -> range(L2)"
                ],
                "3": [
                    "(L2 % 2 == 0)"
                ],
                "4": [
                    "L2 /= 2",
                    "count += 1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    count = 0\n    N = 3\n    L = [5, 2, 4]\n    L2 = functools.reduce(operator.mul,L)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> l, Iterate Over -> range(L2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (L2 % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    L2 /= 2\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03329": {
        "s962962790": {
            "code": "n = 127\nans = 0\nwhile True:\n    a = int(math.log(n, 9))\n    b = int(math.log(n, 6))\n    if a == b == 0:\n        ans += n\n        break\n    elif 9 ** a >= 6 ** b:\n        n -= 9 ** a\n        ans += 1\n    else:\n        n -= 6 ** b\n        ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                10,
                11,
                12,
                3,
                4,
                5,
                6,
                10,
                14,
                15,
                3,
                4,
                5,
                6,
                10,
                11,
                12,
                3,
                4,
                5,
                6,
                7,
                8,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 127",
                    "ans = 0"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "a = int(math.log(n,9))",
                    "b = int(math.log(n,6))",
                    "(a == b == 0)"
                ],
                "4": [
                    "ans += n"
                ],
                "5": [
                    "(9 ** a >= 6 ** b)"
                ],
                "6": [
                    "n -= 9 ** a",
                    "ans += 1"
                ],
                "7": [
                    "n -= 6 ** b",
                    "ans += 1"
                ],
                "8": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 127\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    a = int(math.log(n,9))\n    b = int(math.log(n,6))\n    (a == b == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += n\nNext:\n    Go to Block: 8\n\nBlock 5:\nStatement:\n    (9 ** a >= 6 ** b)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    n -= 9 ** a\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    n -= 6 ** b\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03338": {
        "s910319218": {
            "code": "X = 6\ni = 2\nL = []\nwhile math.floor(X ** (1 / i)) != 1:\n    L.append(math.floor(X ** (1 / i)) ** 2)\n    i += 1\nprint(max(L))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "i": "2"
                        },
                        {
                            "X": "6"
                        },
                        {
                            "L": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "i": "2"
                        },
                        {
                            "X": "6"
                        },
                        {
                            "L": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "i": "3"
                        },
                        {
                            "X": "6"
                        },
                        {
                            "L": "[4]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "i": "3"
                        },
                        {
                            "X": "6"
                        },
                        {
                            "L": "[4]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "i": "3"
                        },
                        {
                            "X": "6"
                        },
                        {
                            "L": "[4]"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "X = 6",
                    "i=2",
                    "L=[]"
                ],
                "2": [
                    "while math.floor(X**(1/i))!=1:"
                ],
                "3": [
                    "L.append(math.floor(X**(1/i))**2)",
                    "i+=1"
                ],
                "4": [
                    "print(max(L))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 6\n    i=2\n    L=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while math.floor(X**(1/i))!=1:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    L.append(math.floor(X**(1/i))**2)\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(L))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s555672549": {
            "code": "N = 6\nS = 'aabbca'\nans = 0\nfor i in range(1, N):\n    l = S[:i]\n    r = S[i:]\n    lc = collections.Counter(l)\n    rc = collections.Counter(r)\n    ans = max(ans, lc, rc)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'Counter' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "S = 'aabbca'",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, N)"
                ],
                "3": [
                    "l = S[:i]",
                    "r = S[i:]",
                    "lc = collections.Counter(l)",
                    "rc = collections.Counter(r)",
                    "ans = max(ans, lc, rc)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'aabbca'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l = S[:i]\n    r = S[i:]\n    lc = collections.Counter(l)\n    rc = collections.Counter(r)\n    ans = max(ans, lc, rc)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s947858684": {
            "code": "N = 6\nS = 'aabbca'\nm = 0\nfor i in range(N):\n    m = max(set(S[:i]) & set(S[i:]), m)\nprint(m)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'int' and 'set'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "S = 'aabbca'",
                    "m = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "m = max(set(S[:i]) & set(S[i:]), m)"
                ],
                "4": [
                    "print(m)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'aabbca'\n    m = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    m = max(set(S[:i]) & set(S[i:]), m)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(m)\nNext:\n    <END>\n"
        }
    },
    "p03339": {
        "s929779141": {
            "code": "n = 5\ns = 'WEEWW'\ndic = dict(collections.Counter(s))\nleft_w = 0\nright_e = dic['E']\ncnt = [[] for _ in range(n)]\nans = n\nfor i in range(n):\n    if s[i] == 'W':\n        ans = min(ans, left_w + right_e)\n        left_w += 1\n    elif s[i] == 'E':\n        ans = min(ans, left_w + right_e)\n        right_e -= 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                8,
                9,
                12,
                13,
                14,
                8,
                9,
                12,
                13,
                14,
                8,
                9,
                10,
                11,
                8,
                9,
                10,
                11,
                8,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "s = 'WEEWW'",
                    "dic = dict(collections.Counter(s))",
                    "left_w = 0",
                    "right_e = dic[\"E\"]",
                    "cnt = [[] for _ in range(n)]",
                    "ans = n"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(s[i] == 'W')"
                ],
                "4": [
                    "ans = min(ans,left_w+right_e)",
                    "left_w += 1"
                ],
                "5": [
                    "(s[i] == 'E')"
                ],
                "6": [
                    "ans = min(ans,left_w+right_e)",
                    "right_e -= 1"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    s = 'WEEWW'\n    dic = dict(collections.Counter(s))\n    left_w = 0\n    right_e = dic[\"E\"]\n    cnt = [[] for _ in range(n)]\n    ans = n\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (s[i] == 'W')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans = min(ans,left_w+right_e)\n    left_w += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (s[i] == 'E')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    ans = min(ans,left_w+right_e)\n    right_e -= 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03346": {
        "s982800067": {
            "code": "input = sys.stdin.readline\nN = 4\nP = [1, 3, 2, 4]\ncnt = 0\nif P[0] == 1:\n    isFirstNum = 1\nelse:\n    isFirstNum = 0\n    cnt += 1\nif P[-1] == N:\n    isLastNum = 1\nelse:\n    isLastNum = 0\n    cnt += 1\nisBefore = 0\nisAfter = 0\nP.remove(1)\nP.remove(N)\nfor i in range(len(P) - 1):\n    if P[i] > P[i + 1]:\n        cnt += 1\n        if P[i] > N // 2:\n            isAfter = 1\n        else:\n            isBefore = 1\nope = cnt + isBefore * isFirstNum + isAfter * isLastNum\nprint(ope)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        16
                    ]
                },
                "8": {
                    "range": [
                        17,
                        17
                    ]
                },
                "9": {
                    "range": [
                        18,
                        18
                    ]
                },
                "10": {
                    "range": [
                        19,
                        20
                    ]
                },
                "11": {
                    "range": [
                        21,
                        21
                    ]
                },
                "12": {
                    "range": [
                        22,
                        22
                    ]
                },
                "13": {
                    "range": [
                        23,
                        24
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                10,
                11,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                19,
                26,
                27
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "N = 4",
                    "P = [1, 3, 2, 4]",
                    "cnt = 0",
                    "(P[0] == 1)"
                ],
                "2": [
                    "isFirstNum = 1"
                ],
                "3": [
                    "isFirstNum = 0",
                    "cnt +=1"
                ],
                "4": [
                    "(P[-1] == N)"
                ],
                "5": [
                    "isLastNum = 1"
                ],
                "6": [
                    "isLastNum = 0",
                    "cnt +=1"
                ],
                "7": [
                    "isBefore = 0",
                    "isAfter = 0",
                    "P.remove(1)",
                    "P.remove(N)"
                ],
                "8": [
                    "iterator -> i, Iterate Over -> range(len(P) - 1)"
                ],
                "9": [
                    "(P[i] > P[i + 1])"
                ],
                "10": [
                    "cnt += 1",
                    "(P[i] > N // 2)"
                ],
                "11": [
                    "isAfter = 1"
                ],
                "12": [
                    "isBefore = 1"
                ],
                "13": [
                    "ope = cnt+isBefore*isFirstNum+isAfter*isLastNum",
                    "print(ope)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 13
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 8
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    N = 4\n    P = [1, 3, 2, 4]\n    cnt = 0\n    (P[0] == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    isFirstNum = 1\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    isFirstNum = 0\n    cnt +=1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (P[-1] == N)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    isLastNum = 1\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    isLastNum = 0\n    cnt +=1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    isBefore = 0\n    isAfter = 0\n    P.remove(1)\n    P.remove(N)\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    iterator -> i, Iterate Over -> range(len(P) - 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 13\n\nBlock 9:\nStatement:\n    (P[i] > P[i + 1])\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 8\n\nBlock 10:\nStatement:\n    cnt += 1\n    (P[i] > N // 2)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    isAfter = 1\nNext:\n    Go to Block: 8\n\nBlock 12:\nStatement:\n    isBefore = 1\nNext:\n    Go to Block: 8\n\nBlock 13:\nStatement:\n    ope = cnt+isBefore*isFirstNum+isAfter*isLastNum\n    print(ope)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03352": {
        "s853261201": {
            "code": "X = 10\ni = 2\nL = []\nwhile math.floor(X ** (1 / i)) != 1:\n    L.append(math.floor(X ** (1 / i)) ** i)\n    i += 1\nprint(max(L))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "i": "2"
                        },
                        {
                            "X": "10"
                        },
                        {
                            "L": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "i": "2"
                        },
                        {
                            "X": "10"
                        },
                        {
                            "L": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "i": "3"
                        },
                        {
                            "X": "10"
                        },
                        {
                            "L": "[9]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "i": "3"
                        },
                        {
                            "X": "10"
                        },
                        {
                            "L": "[9]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "i": "4"
                        },
                        {
                            "X": "10"
                        },
                        {
                            "L": "[9, 8]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "i": "4"
                        },
                        {
                            "X": "10"
                        },
                        {
                            "L": "[9, 8]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "i": "4"
                        },
                        {
                            "X": "10"
                        },
                        {
                            "L": "[9, 8]"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "X = 10",
                    "i=2",
                    "L=[]"
                ],
                "2": [
                    "while math.floor(X**(1/i))!=1:"
                ],
                "3": [
                    "L.append(math.floor(X**(1/i))**i)",
                    "i+=1"
                ],
                "4": [
                    "print(max(L))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 10\n    i=2\n    L=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while math.floor(X**(1/i))!=1:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    L.append(math.floor(X**(1/i))**i)\n    i+=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(L))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s880731358": {
            "code": "x = 10\nfor i in range(x, 0, -1):\n    if math.sqrt(i) % 1 == 0 or math.ceil(i ** (1 / 3)) ** 3 == i(math.ceil(i ** (1 / 5))) ** 5 == i:\n        print(i)\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = 10"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(x, 0, -1)"
                ],
                "3": [
                    "(math.sqrt(i) % 1 == 0 or math.ceil(i ** (1 / 3)) ** 3 == i(math.ceil(i ** (1 / 5))) ** 5 == i)"
                ],
                "4": [
                    "print(i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 10\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(x, 0, -1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (math.sqrt(i) % 1 == 0 or math.ceil(i ** (1 / 3)) ** 3 == i(math.ceil(i ** (1 / 5))) ** 5 == i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\nNext:\n    <END>\n"
        },
        "s246091627": {
            "code": "x = 10\nans = [1]\nfor i in range(2, x + 1):\n    k = math.floor(math.ceil(x, i))\n    ans.append(i ** k)\nprint(max(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('math.ceil() takes exactly one argument (2 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "x = 10",
                    "ans=[1]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(2, x + 1)"
                ],
                "3": [
                    "k=math.floor(math.ceil(x,i))",
                    "ans.append(i**k)"
                ],
                "4": [
                    "print(max(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 10\n    ans=[1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, x + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    k=math.floor(math.ceil(x,i))\n    ans.append(i**k)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(ans))\nNext:\n    <END>\n"
        }
    },
    "p03353": {
        "s525243961": {
            "code": "s = 'aba'\nK = 4\narray = []\nfor i, j in itertools.combinations(range(len(s) + 1), 2):\n    index = bisect.bisect_left(array, s[i:j])\n    if len(array) <= index:\n        array += [s[i:j]]\n    elif array[index] != s[i:j]:\n        array = array[0:index] + [s[i:j]] + array[index + 1:len(s)]\nprint(array[K - 1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                8,
                4,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'aba'",
                    "K = 4",
                    "array = []"
                ],
                "2": [
                    "i <- index\n    j <- iterator"
                ],
                "3": [
                    "index = bisect.bisect_left(array, s[i:j])",
                    "(len(array) <= index)"
                ],
                "4": [
                    "array += [s[i:j]]"
                ],
                "5": [
                    "(array[index] != s[i:j])"
                ],
                "6": [
                    "array = array[0 : index] + [s[i:j]] + array[index + 1:len(s)]"
                ],
                "7": [
                    "print(array[K - 1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'aba'\n    K = 4\n    array = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    j <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    index = bisect.bisect_left(array, s[i:j])\n    (len(array) <= index)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    array += [s[i:j]]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (array[index] != s[i:j])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    array = array[0 : index] + [s[i:j]] + array[index + 1:len(s)]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(array[K - 1])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03363": {
        "s075383047": {
            "code": "n = 6\na = [1, 3, -4, 2, 2, -2]\nac = [0] + list(accumulate(a))\nc = collections.Counter(ac)\ncnt = 0\nfor v in c.values():\n    if v >= 2:\n        cnt += comb(v, 2, exact=True)\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                6,
                7,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "ac": "[0, 1, 4, 0, 2, 4, 2]"
                        },
                        {
                            "cnt": "1"
                        },
                        {
                            "a": "[1, 3, -4, 2, 2, -2]"
                        },
                        {
                            "c": "Counter({0: 2, 1: 1, 4: 2, 2: 2})"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "ac": "[0, 1, 4, 0, 2, 4, 2]"
                        },
                        {
                            "cnt": "1"
                        },
                        {
                            "a": "[1, 3, -4, 2, 2, -2]"
                        },
                        {
                            "c": "Counter({0: 2, 1: 1, 4: 2, 2: 2})"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "ac": "[0, 1, 4, 0, 2, 4, 2]"
                        },
                        {
                            "cnt": "2"
                        },
                        {
                            "a": "[1, 3, -4, 2, 2, -2]"
                        },
                        {
                            "c": "Counter({0: 2, 1: 1, 4: 2, 2: 2})"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "ac": "[0, 1, 4, 0, 2, 4, 2]"
                        },
                        {
                            "cnt": "2"
                        },
                        {
                            "a": "[1, 3, -4, 2, 2, -2]"
                        },
                        {
                            "c": "Counter({0: 2, 1: 1, 4: 2, 2: 2})"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "ac": "[0, 1, 4, 0, 2, 4, 2]"
                        },
                        {
                            "cnt": "3"
                        },
                        {
                            "a": "[1, 3, -4, 2, 2, -2]"
                        },
                        {
                            "c": "Counter({0: 2, 1: 1, 4: 2, 2: 2})"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "ac": "[0, 1, 4, 0, 2, 4, 2]"
                        },
                        {
                            "cnt": "3"
                        },
                        {
                            "a": "[1, 3, -4, 2, 2, -2]"
                        },
                        {
                            "c": "Counter({0: 2, 1: 1, 4: 2, 2: 2})"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "a = [1, 3, -4, 2, 2, -2]",
                    "ac = [0] + list(accumulate(a))",
                    "c = collections.Counter(ac)",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> v, Iterate Over -> c.values()"
                ],
                "3": [
                    "(v >= 2)"
                ],
                "4": [
                    "cnt += comb(v,2,exact=True)"
                ],
                "5": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [1, 3, -4, 2, 2, -2]\n    ac = [0] + list(accumulate(a))\n    c = collections.Counter(ac)\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> c.values()\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (v >= 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += comb(v,2,exact=True)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03379": {
        "s094379533": {
            "code": "n = 4\na = [2, 4, 4, 3]\nmedian_low = statistics.median_low(a)\nmedian_high = statistics.median_high(a)\nfor i in range(n):\n    if median_high > a[i]:\n        print(median_high)\n    elif median_low < a[i]:\n        print(median_low)\n    elif median_high == a[i]:\n        print(a[i])\n    else:\n        print(a[i - 1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                8,
                9,
                5,
                6,
                8,
                9,
                5,
                6,
                7,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [2, 4, 4, 3]",
                    "median_low = statistics.median_low(a)",
                    "median_high = statistics.median_high(a)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(median_high > a[i])"
                ],
                "4": [
                    "print(median_high)"
                ],
                "5": [
                    "(median_low < a[i])"
                ],
                "6": [
                    "print(median_low)"
                ],
                "7": [
                    "(median_high == a[i])"
                ],
                "8": [
                    "print(a[i])"
                ],
                "9": [
                    "print(a[i-1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2, 4, 4, 3]\n    median_low = statistics.median_low(a)\n    median_high = statistics.median_high(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (median_high > a[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(median_high)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (median_low < a[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(median_low)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (median_high == a[i])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(a[i])\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(a[i-1])\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        },
        "s231953820": {
            "code": "n = 4\nx = [2, 4, 4, 3]\nz = copy.deepcopy(x)\nfor i in range(n):\n    x.pop(i)\n    x.sort()\n    print(x[(n - 2) / 2])\n    x = z",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not float')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "x = [2, 4, 4, 3]",
                    "z = copy.deepcopy(x)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "x.pop(i)",
                    "x.sort()",
                    "print(x[(n - 2) / 2])",
                    "x = z"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    x = [2, 4, 4, 3]\n    z = copy.deepcopy(x)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    x.pop(i)\n    x.sort()\n    print(x[(n - 2) / 2])\n    x = z\nNext:\n    Go to Block: 2\n"
        },
        "s847733029": {
            "code": "n = 4\nx = [2, 4, 4, 3]\nfor i in range(n):\n    tmp = x\n    print(statistics.median(x.pop(i)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "x = [2, 4, 4, 3]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "tmp = x",
                    "print(statistics.median(x.pop(i)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    x = [2, 4, 4, 3]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    tmp = x\n    print(statistics.median(x.pop(i)))\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03380": {
        "s738648320": {
            "code": "n = 5\nA = [6, 9, 4, 2, 11]\nA.sort()\nama = A[-1]\nprint(ama, end=' ')\nama2 = (ama + 1) // 2\nw = bisect.bisect_left(A, ama2)\na = A[w]\nb = A[w + 1]\nif abs(a - ama2) > abs(b - ama2):\n    print(b)\nelse:\n    print(a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        10
                    ]
                },
                "2": {
                    "range": [
                        11,
                        11
                    ]
                },
                "3": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "A = [6, 9, 4, 2, 11]",
                    "A.sort()",
                    "ama = A[-1]",
                    "print(ama, end=' ')",
                    "ama2 = (ama + 1)//2",
                    "w = bisect.bisect_left(A, ama2)",
                    "a = A[w]",
                    "b = A[w+1]",
                    "(abs(a - ama2) > abs(b - ama2))"
                ],
                "2": [
                    "print(b)"
                ],
                "3": [
                    "print(a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    A = [6, 9, 4, 2, 11]\n    A.sort()\n    ama = A[-1]\n    print(ama, end=' ')\n    ama2 = (ama + 1)//2\n    w = bisect.bisect_left(A, ama2)\n    a = A[w]\n    b = A[w+1]\n    (abs(a - ama2) > abs(b - ama2))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(b)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(a)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03386": {
        "s270768238": {
            "code": "inputs = ['3', '8', '2']\nA = int(inputs[0])\nB = int(inputs[1])\nK = int(inputs[2])\ncandidates = np.arange(A, B + 1)\ncandidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]\nprint(candidates)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "inputs = ['3', '8', '2']",
                    "A = int(inputs[0])",
                    "B = int(inputs[1])",
                    "K = int(inputs[2])",
                    "candidates = np.arange(A, B + 1)",
                    "candidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]",
                    "print(candidates)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    inputs = ['3', '8', '2']\n    A = int(inputs[0])\n    B = int(inputs[1])\n    K = int(inputs[2])\n    candidates = np.arange(A, B + 1)\n    candidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]\n    print(candidates)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s049110016": {
            "code": "inputs = ['3', '8', '2']\nA = int(inputs[0])\nB = int(inputs[1])\nK = int(inputs[2])\nif A + K < B - K:\n    candidates = np.concatenate(np.arange(A, A + K), np.arange(B - K, B))\nelse:\n    candidates = np.arange(A, B + 1)\n    candidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]\nfor s in np.sort(candidates):\n    print(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('only integer scalar arrays can be converted to a scalar index')"
            },
            "cfg_block_statements": {
                "1": [
                    "inputs = ['3', '8', '2']",
                    "A = int(inputs[0])",
                    "B = int(inputs[1])",
                    "K = int(inputs[2])",
                    "(A + K < B - K)"
                ],
                "2": [
                    "candidates = np.concatenate(np.arange(A, A + K), np.arange(B - K, B))"
                ],
                "3": [
                    "candidates = np.arange(A, B + 1)",
                    "candidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]"
                ],
                "4": [
                    "iterator -> s, Iterate Over -> np.sort(candidates)"
                ],
                "5": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    inputs = ['3', '8', '2']\n    A = int(inputs[0])\n    B = int(inputs[1])\n    K = int(inputs[2])\n    (A + K < B - K)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    candidates = np.concatenate(np.arange(A, A + K), np.arange(B - K, B))\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    candidates = np.arange(A, B + 1)\n    candidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> s, Iterate Over -> np.sort(candidates)\nNext:\n    If True: Go to Block 5\n    <END>\nBlock 5:\nStatement:\n    print(s)\nNext:\n    Go to Block: 4\n"
        },
        "s319485061": {
            "code": "inputs = ['3', '8', '2']\nA = int(inputs[0])\nB = int(inputs[1])\nK = int(inputs[2])\nif A + K < B - K:\n    candidates = np.concatenate(np.arange(A, A + K + 1), np.arange(B - K, B + 1))\nelse:\n    candidates = np.arange(A, B + 1)\n    candidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]\nfor s in np.sort(candidates):\n    print(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('only integer scalar arrays can be converted to a scalar index')"
            },
            "cfg_block_statements": {
                "1": [
                    "inputs = ['3', '8', '2']",
                    "A = int(inputs[0])",
                    "B = int(inputs[1])",
                    "K = int(inputs[2])",
                    "(A + K < B - K)"
                ],
                "2": [
                    "candidates = np.concatenate(np.arange(A, A + K + 1), np.arange(B - K, B + 1))"
                ],
                "3": [
                    "candidates = np.arange(A, B + 1)",
                    "candidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]"
                ],
                "4": [
                    "iterator -> s, Iterate Over -> np.sort(candidates)"
                ],
                "5": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    inputs = ['3', '8', '2']\n    A = int(inputs[0])\n    B = int(inputs[1])\n    K = int(inputs[2])\n    (A + K < B - K)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    candidates = np.concatenate(np.arange(A, A + K + 1), np.arange(B - K, B + 1))\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    candidates = np.arange(A, B + 1)\n    candidates = candidates[np.logical_or(candidates < A + K, candidates > B - K)]\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> s, Iterate Over -> np.sort(candidates)\nNext:\n    If True: Go to Block 5\n    <END>\nBlock 5:\nStatement:\n    print(s)\nNext:\n    Go to Block: 4\n"
        }
    },
    "p03393": {
        "s527434927": {
            "code": "ABC = list(string.ascii_lowercase)\ns = 'atcoder'\nS = s[::-1]\nif s == 'zyxwvutsrqponmlkjihgfedcba':\n    print(-1)\nelif len(s) == 26:\n    for i in range(len(s)):\n        n = ABC.index(S[i])\n        if not set(ABC[n + 1:]) <= set(S[i + 1:]):\n            j = i\n            break\n    L = list(set(ABC[n + 1]) - set(S[j + 1:]))\n    L.sort()\n    sgyku = L[0:1] + S[j + 1:]\n    print(''.join(sgyku[::-1]))\nelse:\n    L = list(set(ABC) - set(s))\n    L.sort()\n    print(s + L[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        14
                    ]
                },
                "8": {
                    "range": [
                        15,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                18,
                19,
                20
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "ABC=list(string.ascii_lowercase)",
                    "s = 'atcoder'",
                    "S=s[::-1]",
                    "(s == 'zyxwvutsrqponmlkjihgfedcba')"
                ],
                "2": [
                    "print(-1)"
                ],
                "3": [
                    "(len(s) == 26)"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(len(s))"
                ],
                "5": [
                    "n=ABC.index(S[i])",
                    "(not set(ABC[n + 1:]) <= set(S[i + 1:]))"
                ],
                "6": [
                    "j=i"
                ],
                "7": [
                    "L=list(set(ABC[n+1])-set(S[j+1:]))",
                    "L.sort()",
                    "sgyku=L[0:1]+S[j+1:]",
                    "print(\"\".join(sgyku[::-1]))"
                ],
                "8": [
                    "L=list(set(ABC)-set(s))",
                    "L.sort()",
                    "print(s+L[0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 8
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 7
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    ABC=list(string.ascii_lowercase)\n    s = 'atcoder'\n    S=s[::-1]\n    (s == 'zyxwvutsrqponmlkjihgfedcba')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (len(s) == 26)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 8\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    n=ABC.index(S[i])\n    (not set(ABC[n + 1:]) <= set(S[i + 1:]))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    j=i\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    L=list(set(ABC[n+1])-set(S[j+1:]))\n    L.sort()\n    sgyku=L[0:1]+S[j+1:]\n    print(\"\".join(sgyku[::-1]))\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    L=list(set(ABC)-set(s))\n    L.sort()\n    print(s+L[0])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03408": {
        "s495787682": {
            "code": "n = 3\nb = ['apple', 'orange', 'apple']\nm = 1\nr = ['grape']\ndb, dr = [Counter(x) for x in (b, r)]\nprint(max(*(v - dr[k] for k, v in db.items()), 0))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "b = ['apple', 'orange', 'apple']",
                    "m = 1",
                    "r = ['grape']",
                    "db, dr = [Counter(x) for x in (b, r)]",
                    "print(max(*(v-dr[k] for k, v in db.items()), 0))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    b = ['apple', 'orange', 'apple']\n    m = 1\n    r = ['grape']\n    db, dr = [Counter(x) for x in (b, r)]\n    print(max(*(v-dr[k] for k, v in db.items()), 0))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s145873089": {
            "code": "blue = 3\nblue_string = ['apple', 'orange', 'apple']\nblue_type = set(blue_string)\nred = 1\nred_string = ['grape']\nred_type = set(red_string)\nblue_number = len(blue_type)\nresult = [0]\nfor i in range(blue_number):\n    blue_sort = blue_type[i]\n    bulue_sort_count = blue_string.count(blue_sort)\n    red_sort_count = red_string.count(blue_sort)\n    result.append(bulue_sort_count - red_sort_count)\nprint(max(result))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        13
                    ]
                },
                "4": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'set' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "blue = 3",
                    "blue_string = ['apple', 'orange', 'apple']",
                    "blue_type = set(blue_string)",
                    "red = 1",
                    "red_string = ['grape']",
                    "red_type = set(red_string)",
                    "blue_number = len(blue_type)",
                    "result = [0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(blue_number)"
                ],
                "3": [
                    "blue_sort = blue_type[i]",
                    "bulue_sort_count = blue_string.count(blue_sort)",
                    "red_sort_count = red_string.count(blue_sort)",
                    "result.append(bulue_sort_count - red_sort_count )"
                ],
                "4": [
                    "print(max(result))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    blue = 3\n    blue_string = ['apple', 'orange', 'apple']\n    blue_type = set(blue_string)\n    red = 1\n    red_string = ['grape']\n    red_type = set(red_string)\n    blue_number = len(blue_type)\n    result = [0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(blue_number)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    blue_sort = blue_type[i]\n    bulue_sort_count = blue_string.count(blue_sort)\n    red_sort_count = red_string.count(blue_sort)\n    result.append(bulue_sort_count - red_sort_count )\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(result))\nNext:\n    <END>\n"
        }
    },
    "p03425": {
        "s616767269": {
            "code": "read = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 7)\nn = int(readline())\ns = ['M', 'R', 'O', 'H', 'H']\nmemo = list(Counter(s).items())\ncheck = ['M', 'A', 'R', 'C', 'H']\ncnt = 0\nans = 0\nfor x, y in memo:\n    if x in check:\n        ans += y\n        if y > 1:\n            cnt += n - y\nprint(comb(ans, 3, exact=True) - cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        10
                    ]
                },
                "2": {
                    "range": [
                        11,
                        11
                    ]
                },
                "3": {
                    "range": [
                        12,
                        12
                    ]
                },
                "4": {
                    "range": [
                        13,
                        14
                    ]
                },
                "5": {
                    "range": [
                        15,
                        15
                    ]
                },
                "6": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                11,
                12,
                13,
                14,
                11,
                12,
                11,
                12,
                13,
                14,
                15,
                11,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "read = sys.stdin.buffer.read",
                    "readline = sys.stdin.buffer.readline",
                    "readlines = sys.stdin.buffer.readlines",
                    "sys.setrecursionlimit(10 ** 7)",
                    "n = int(readline())",
                    "s = ['M', 'R', 'O', 'H', 'H']",
                    "memo = list(Counter(s).items())",
                    "check = ['M', 'A', 'R', 'C', 'H']",
                    "cnt = 0",
                    "ans = 0"
                ],
                "2": [
                    "x <- index\n    y <- iterator"
                ],
                "3": [
                    "(x in check)"
                ],
                "4": [
                    "ans += y",
                    "(y > 1)"
                ],
                "5": [
                    "cnt += n - y"
                ],
                "6": [
                    "print(comb(ans, 3, exact=True) - cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    read = sys.stdin.buffer.read\n    readline = sys.stdin.buffer.readline\n    readlines = sys.stdin.buffer.readlines\n    sys.setrecursionlimit(10 ** 7)\n    n = int(readline())\n    s = ['M', 'R', 'O', 'H', 'H']\n    memo = list(Counter(s).items())\n    check = ['M', 'A', 'R', 'C', 'H']\n    cnt = 0\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    x <- index\n    y <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (x in check)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += y\n    (y > 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    cnt += n - y\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(comb(ans, 3, exact=True) - cnt)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03427": {
        "s577136086": {
            "code": "n = 100\nln = int(math.log10(n))\nif ln == 0:\n    print(n)\nelif (n + 1) % 10 ** (ln + 1) == 0:\n    print(9 * (ln + 1))\nelse:\n    a = n // 10 ** ln\n    b = a * 10 ** ln - 1\n    c = [int(x) for x in list(str(b))]\n    print(sum(c))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                5,
                8,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 100",
                    "ln = int(math.log10(n))",
                    "(ln == 0)"
                ],
                "2": [
                    "print(n)"
                ],
                "3": [
                    "((n + 1) % 10 ** (ln + 1) == 0)"
                ],
                "4": [
                    "print(9 * (ln + 1))"
                ],
                "5": [
                    "a = n // (10 ** ln)",
                    "b = a * (10 ** ln )- 1",
                    "c = [int(x) for x in list(str(b))]",
                    "print(sum(c))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 100\n    ln = int(math.log10(n))\n    (ln == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ((n + 1) % 10 ** (ln + 1) == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(9 * (ln + 1))\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    a = n // (10 ** ln)\n    b = a * (10 ** ln )- 1\n    c = [int(x) for x in list(str(b))]\n    print(sum(c))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03434": {
        "s108710766": {
            "code": "n = 2\na_list = [3, 1]\na_array = np.array(a_list)\nalice = a_array[::2]\nbob = a_array[1::2]\nprint(sum(alice - bob))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a_list = [3, 1]",
                    "a_array = np.array(a_list)",
                    "alice = a_array[::2]",
                    "bob = a_array[1::2]",
                    "print(sum(alice-bob))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a_list = [3, 1]\n    a_array = np.array(a_list)\n    alice = a_array[::2]\n    bob = a_array[1::2]\n    print(sum(alice-bob))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03438": {
        "s257256652": {
            "code": "sys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nn = 3\na = [1, 2, 3]\nb = [5, 2, 2]\nsa = sum(a)\nsb = sum(b)\nal = sb - sa\nif al < 0:\n    print('No')\n    exit()\ndouble = 0\nsingle = 0\nfor i in range(n):\n    diff = b[i] - a[i]\n    diff_ = -diff\n    if diff > 0:\n        double += diff // 2\n        single += diff % 2\n    if diff < 0:\n        single += diff_\ndnokori = al - double\nsnokori = al - single\nif dnokori < 0 or snokori < 0:\n    print('No')\n    exit()\nif snokori / dnokori == 2:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        9
                    ]
                },
                "2": {
                    "range": [
                        10,
                        11
                    ]
                },
                "3": {
                    "range": [
                        12,
                        13
                    ]
                },
                "4": {
                    "range": [
                        14,
                        14
                    ]
                },
                "5": {
                    "range": [
                        15,
                        17
                    ]
                },
                "6": {
                    "range": [
                        18,
                        19
                    ]
                },
                "7": {
                    "range": [
                        20,
                        20
                    ]
                },
                "8": {
                    "range": [
                        21,
                        21
                    ]
                },
                "9": {
                    "range": [
                        22,
                        24
                    ]
                },
                "10": {
                    "range": [
                        25,
                        26
                    ]
                },
                "11": {
                    "range": [
                        27,
                        27
                    ]
                },
                "12": {
                    "range": [
                        28,
                        28
                    ]
                },
                "13": {
                    "range": [
                        29,
                        29
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                14,
                15,
                16,
                17,
                20,
                14,
                15,
                16,
                17,
                20,
                21,
                14,
                22,
                23,
                24,
                27,
                28
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "sys.setrecursionlimit(10 ** 7)",
                    "input = sys.stdin.readline",
                    "n = 3",
                    "a = [1, 2, 3]",
                    "b = [5, 2, 2]",
                    "sa = sum(a)",
                    "sb = sum(b)",
                    "al = sb-sa",
                    "(al < 0)"
                ],
                "2": [
                    "print('No')",
                    "exit()"
                ],
                "3": [
                    "double = 0",
                    "single = 0"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "5": [
                    "diff = b[i]-a[i]",
                    "diff_ = -diff",
                    "(diff > 0)"
                ],
                "6": [
                    "double += diff//2",
                    "single += diff%2"
                ],
                "7": [
                    "(diff < 0)"
                ],
                "8": [
                    "single += diff_"
                ],
                "9": [
                    "dnokori = al - double",
                    "snokori = al - single",
                    "(dnokori < 0 or snokori < 0)"
                ],
                "10": [
                    "print('No')",
                    "exit()"
                ],
                "11": [
                    "(snokori / dnokori == 2)"
                ],
                "12": [
                    "print('Yes')"
                ],
                "13": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 9
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    sys.setrecursionlimit(10 ** 7)\n    input = sys.stdin.readline\n    n = 3\n    a = [1, 2, 3]\n    b = [5, 2, 2]\n    sa = sum(a)\n    sb = sum(b)\n    al = sb-sa\n    (al < 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    double = 0\n    single = 0\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 9\n\nBlock 5:\nStatement:\n    diff = b[i]-a[i]\n    diff_ = -diff\n    (diff > 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    double += diff//2\n    single += diff%2\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (diff < 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 4\n\nBlock 8:\nStatement:\n    single += diff_\nNext:\n    Go to Block: 4\n\nBlock 9:\nStatement:\n    dnokori = al - double\n    snokori = al - single\n    (dnokori < 0 or snokori < 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('No')\n    exit()\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (snokori / dnokori == 2)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 13:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03449": {
        "s135826144": {
            "code": "N = 5\nupper = (3, 2, 2, 4, 1)\nlower = (1, 2, 2, 2, 1)\nupper_sum = np.cumsum(upper)\nlower_sum = np.cumsum(np.flip(lower, 0))\ns = np.zeros((N,), dtype=np.int32)\nfor i in range(N):\n    s[i] = lower_sum[-1 - i] + upper_sum[i]\nprint(np.max(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                7,
                8,
                7,
                8,
                7,
                8,
                7,
                8,
                7,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "upper = (3, 2, 2, 4, 1)",
                    "lower = (1, 2, 2, 2, 1)",
                    "upper_sum = np.cumsum(upper)",
                    "lower_sum = np.cumsum(np.flip(lower, 0))",
                    "s = np.zeros((N,), dtype=np.int32)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "s[i] = lower_sum[-1-i] + upper_sum[i]"
                ],
                "4": [
                    "print(np.max(s))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    upper = (3, 2, 2, 4, 1)\n    lower = (1, 2, 2, 2, 1)\n    upper_sum = np.cumsum(upper)\n    lower_sum = np.cumsum(np.flip(lower, 0))\n    s = np.zeros((N,), dtype=np.int32)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s[i] = lower_sum[-1-i] + upper_sum[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(np.max(s))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s796885481": {
            "code": "N = 5\nupper = (3, 2, 2, 4, 1)\nlower = (1, 2, 2, 2, 1)\nupper_sum = np.cumsum(upper)\nlower_sum = np.cumsum(np.flip(lower, 0))\ns = np.zeros((N,), dtype=np.int32)\nfor i in range(N):\n    s[i] = lower_sum[-1 - i] + upper_sum[i]\nprint(np.max(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                7,
                8,
                7,
                8,
                7,
                8,
                7,
                8,
                7,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "upper = (3, 2, 2, 4, 1)",
                    "lower = (1, 2, 2, 2, 1)",
                    "upper_sum = np.cumsum(upper)",
                    "lower_sum = np.cumsum(np.flip(lower, 0))",
                    "s = np.zeros((N,), dtype=np.int32)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "s[i] = lower_sum[-1-i] + upper_sum[i]"
                ],
                "4": [
                    "print(np.max(s))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    upper = (3, 2, 2, 4, 1)\n    lower = (1, 2, 2, 2, 1)\n    upper_sum = np.cumsum(upper)\n    lower_sum = np.cumsum(np.flip(lower, 0))\n    s = np.zeros((N,), dtype=np.int32)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s[i] = lower_sum[-1-i] + upper_sum[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(np.max(s))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s318151924": {
            "code": "n = 5\nA = [3, 2, 2, 4, 1]\nB = [1, 2, 2, 2, 1]\nA = list(accumulate(A))\nB = list(accumulate(B[::-1]))[::-1]\nans = 0\nfor i in range(n):\n    ans = max(A[i] + B[i])\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "A": "[3, 5, 7, 11, 12]"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "B": "[8, 7, 5, 3, 1]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "A": "[3, 5, 7, 11, 12]"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "B": "[8, 7, 5, 3, 1]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "A": "[3, 5, 7, 11, 12]"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "B": "[8, 7, 5, 3, 1]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "A = [3, 2, 2, 4, 1]",
                    "B = [1, 2, 2, 2, 1]",
                    "A = list(accumulate(A))",
                    "B = list(accumulate(B[::-1]))[::-1]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "ans = max(A[i]+B[i])"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    A = [3, 2, 2, 4, 1]\n    B = [1, 2, 2, 2, 1]\n    A = list(accumulate(A))\n    B = list(accumulate(B[::-1]))[::-1]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = max(A[i]+B[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03456": {
        "s118217401": {
            "code": "num = 121\nsqureRoot = math.sqrt(num)\nreturn squreRoot == int(squreRoot)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "num = 121",
                    "squreRoot = math.sqrt(num)",
                    "return squreRoot == int(squreRoot)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    num = 121\n    squreRoot = math.sqrt(num)\n    return squreRoot == int(squreRoot)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s998222385": {
            "code": "a = '121'\nroot_a = int(math.sqrt(a))\nif a / root_a == root_a:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('must be real number, not str')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '121'",
                    "root_a = int(math.sqrt(a))",
                    "(a / root_a == root_a)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '121'\n    root_a = int(math.sqrt(a))\n    (a / root_a == root_a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s642628050": {
            "code": "a = '1 21'\na = a.strip()\nif isinstance(math.sqrt(a), int):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('must be real number, not str')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '1 21'",
                    "a = a.strip()",
                    "(isinstance(math.sqrt(a), int))"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '1 21'\n    a = a.strip()\n    (isinstance(math.sqrt(a), int))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p03464": {
        "s533100499": {
            "code": "K = 4\nA_lst = [3, 4, 3, 2]\nassert A_lst[-1] == 2\nstt, end = (2, 4)\nfailed = False\nfor a in A_lst[-2::-1]:\n    stt = a * math.ceil(stt / a)\n    if stt >= end:\n        failed = True\n        break\n    end = a * math.ceil(end / a)\nif failed:\n    print(-1)\nelse:\n    print(stt, end - 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                11,
                6,
                7,
                8,
                11,
                6,
                7,
                8,
                11,
                6,
                12,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "K = 4",
                    "A_lst = [3, 4, 3, 2]",
                    "assert A_lst[-1]==2",
                    "stt, end=2,4",
                    "failed=False"
                ],
                "2": [
                    "iterator -> a, Iterate Over -> A_lst[-2::-1]"
                ],
                "3": [
                    "stt=a*math.ceil(stt/a)",
                    "(stt >= end)"
                ],
                "4": [
                    "failed=True"
                ],
                "5": [
                    "end=a*math.ceil(end/a)"
                ],
                "6": [
                    "(failed)"
                ],
                "7": [
                    "print(-1)"
                ],
                "8": [
                    "print(stt, end-1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = 4\n    A_lst = [3, 4, 3, 2]\n    assert A_lst[-1]==2\n    stt, end=2,4\n    failed=False\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A_lst[-2::-1]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    stt=a*math.ceil(stt/a)\n    (stt >= end)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    failed=True\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    end=a*math.ceil(end/a)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (failed)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(stt, end-1)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s687570691": {
            "code": "K = 4\nA = [3, 4, 3, 2]\nA.reverse()\njmax, jmin = (2, 2)\nif A[0] != 2:\n    print(-1)\n    sys.exit()\nfor i in range(0, K - 1):\n    Round = list(range(jmin, jmax + 1))\n    if not 0 in Round % A[i]:\n        print(-1)\n        sys.exit()\n    jmin = (int(jmin / A[i]) + 1) * A[i]\n    jmax = int(jmax / A[i]) * A[i] + A[i] - 1\njmax = jmax + A[K - 1] - 1\nprint(jmin, jmax)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "K = 4",
                    "A = [3, 4, 3, 2]",
                    "A.reverse()",
                    "jmax, jmin = 2,2",
                    "(A[0] != 2)"
                ],
                "2": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(0, K - 1)"
                ],
                "4": [
                    "Round = list(range(jmin,jmax+1))",
                    "(not 0 in Round % A[i])"
                ],
                "5": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "6": [
                    "jmin = (int(jmin/A[i])+1)*A[i]",
                    "jmax = (int(jmax/A[i]))*A[i] +A[i]-1"
                ],
                "7": [
                    "jmax = jmax + A[K-1] -1",
                    "print(jmin, jmax)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = 4\n    A = [3, 4, 3, 2]\n    A.reverse()\n    jmax, jmin = 2,2\n    (A[0] != 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(0, K - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    Round = list(range(jmin,jmax+1))\n    (not 0 in Round % A[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    jmin = (int(jmin/A[i])+1)*A[i]\n    jmax = (int(jmax/A[i]))*A[i] +A[i]-1\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    jmax = jmax + A[K-1] -1\n    print(jmin, jmax)\nNext:\n    <END>\n"
        }
    },
    "p03469": {
        "s868027586": {
            "code": "S = '2017/01/07'\ndate_format = datetime.datetime.strptime(S, '%Y/%m/%d')\ndate_format = date_format + relativedelta(years=1)\nprint(date_format.strftime('%Y/%m/%d'))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = '2017/01/07'",
                    "date_format = datetime.datetime.strptime(S,'%Y/%m/%d')",
                    "date_format = date_format+ relativedelta(years=1)",
                    "print(date_format.strftime(\"%Y/%m/%d\"))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '2017/01/07'\n    date_format = datetime.datetime.strptime(S,'%Y/%m/%d')\n    date_format = date_format+ relativedelta(years=1)\n    print(date_format.strftime(\"%Y/%m/%d\"))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s925852658": {
            "code": "input_time = '2017/01/07'\nold_date = datetime.datetime.strptime(input_time, '%Y/%m/%d')\nnew_date = old_date + datetime.timedelta(years=1)\nprint(new_date)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'years' is an invalid keyword argument for __new__()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input_time = '2017/01/07'",
                    "old_date = datetime.datetime.strptime(input_time, '%Y/%m/%d')",
                    "new_date = old_date + datetime.timedelta(years=1)",
                    "print(new_date)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input_time = '2017/01/07'\n    old_date = datetime.datetime.strptime(input_time, '%Y/%m/%d')\n    new_date = old_date + datetime.timedelta(years=1)\n    print(new_date)\nNext:\n    <END>\n"
        },
        "s324685206": {
            "code": "input = sys.stdin.readline\nS = '2017/01/07'\nS[3] = '8'\nprint(S)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'2017/01/07'"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f8daaacb510>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "S = '2017/01/07'",
                    "S[3] = \"8\"",
                    "print(S)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    S = '2017/01/07'\n    S[3] = \"8\"\n    print(S)\nNext:\n    <END>\n"
        }
    },
    "p03470": {
        "s086752252": {
            "code": "N = 4\nd = [10, 8, 8, 6]\nprint(len(pd.DataFrame(d)[0].value_counts()))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "d": "[10, 8, 8, 6]"
                        },
                        {
                            "N": "4"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "d = [10, 8, 8, 6]",
                    "print(len(pd.DataFrame(d)[0].value_counts()))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    d = [10, 8, 8, 6]\n    print(len(pd.DataFrame(d)[0].value_counts()))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03471": {
        "s360904161": {
            "code": "L = '9 45000'\ns = ['+', '-']\nt = ['+', '-']\nu = ['+', '-']\nfor a, b, c in itertools.product(s, t, u):\n    f = L[0] + a + L[1] + b + L[2] + c + L[3]\n    if eval(f) == 7:\n        print(f + '=7')\n        exit(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                6,
                7,
                5,
                6,
                7,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "L = '9 45000'",
                    "s = ['+','-']",
                    "t = ['+','-']",
                    "u = ['+','-']"
                ],
                "2": [
                    "a <- index\n    b <- iterator"
                ],
                "3": [
                    "f = L[0] + a + L[1] + b + L[2] + c + L[3]",
                    "(eval(f) == 7)"
                ],
                "4": [
                    "print(f+'=7')",
                    "exit(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    L = '9 45000'\n    s = ['+','-']\n    t = ['+','-']\n    u = ['+','-']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    a <- index\n    b <- iterator\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    f = L[0] + a + L[1] + b + L[2] + c + L[3]\n    (eval(f) == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(f+'=7')\n    exit(0)\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        }
    },
    "p03486": {
        "s756829141": {
            "code": "S = ['y', 'x']\nT = ['a', 'x', 'y']\nL = list(string.ascii_lowercase)\nS = [L.index(s) for s in S]\nT = [L.index(t) for t in T]\nS.sort()\nT.sort()\nT.reverse()\nwhile True:\n    if len(S) == 0:\n        if len(T) > 0:\n            print('Yes')\n            break\n        else:\n            print('No')\n            break\n    s = S[0]\n    t = T[0]\n    if s < t:\n        print('Yes')\n        break\n    elif s == t:\n        del S[0]\n        del T[0]\n    else:\n        print('No')\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        16
                    ]
                },
                "8": {
                    "range": [
                        17,
                        17
                    ]
                },
                "9": {
                    "range": [
                        18,
                        18
                    ]
                },
                "10": {
                    "range": [
                        19,
                        20
                    ]
                },
                "11": {
                    "range": [
                        21,
                        21
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                17,
                18,
                19,
                20,
                21
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = ['y', 'x']",
                    "T = ['a', 'x', 'y']",
                    "L = list(string.ascii_lowercase)",
                    "S = [L.index(s) for s in S]",
                    "T = [L.index(t) for t in T]",
                    "S.sort()",
                    "T.sort()",
                    "T.reverse()"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "(len(S) == 0)"
                ],
                "4": [
                    "(len(T) > 0)"
                ],
                "5": [
                    "print('Yes')"
                ],
                "6": [
                    "print('No')"
                ],
                "7": [
                    "s = S[0]",
                    "t = T[0]",
                    "(s < t)"
                ],
                "8": [
                    "print('Yes')"
                ],
                "9": [
                    "(s == t)"
                ],
                "10": [
                    "del S[0]",
                    "del T[0]"
                ],
                "11": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = ['y', 'x']\n    T = ['a', 'x', 'y']\n    L = list(string.ascii_lowercase)\n    S = [L.index(s) for s in S]\n    T = [L.index(t) for t in T]\n    S.sort()\n    T.sort()\n    T.reverse()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (len(S) == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (len(T) > 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    s = S[0]\n    t = T[0]\n    (s < t)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    (s == t)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    del S[0]\n    del T[0]\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s256723409": {
            "code": "s = 'yx'\nt = 'axy'\ns = sorted(list(s))\nt = sorted(list(t))[::-1]\nsum = 0\nfor i in range(len(s)):\n    if chr(s[i]) < chr(s[t]):\n        print('Yes')\n        sys.exit()\nprint('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "['x', 'y']"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "t": "['y', 'x', 'a']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "['x', 'y']"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "t": "['y', 'x', 'a']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "['x', 'y']"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "t": "['y', 'x', 'a']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'yx'",
                    "t = 'axy'",
                    "s=sorted(list(s))",
                    "t=sorted(list(t))[::-1]",
                    "sum=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s))"
                ],
                "3": [
                    "(chr(s[i]) < chr(s[t]))"
                ],
                "4": [
                    "print(\"Yes\")",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'yx'\n    t = 'axy'\n    s=sorted(list(s))\n    t=sorted(list(t))[::-1]\n    sum=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (chr(s[i]) < chr(s[t]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03487": {
        "s648771683": {
            "code": "n = 4\na = [3, 3, 3, 3]\na.sort()\nv = a[0]\ncount = 1\nresult = 0\nfor i in range(1, n):\n    if v == a[i]:\n        count += 1\n    elif v == count:\n        v = a[i]\n        count = 1\n    elif count > v:\n        result += count - v\n        v = a[i]\n        count = 1\n    else:\n        result += count\n        v = a[i]\n        count = 1\nif v != count:\n    if count > v:\n        result += count - v\n    else:\n        result += count\nprint(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        16
                    ]
                },
                "9": {
                    "range": [
                        17,
                        19
                    ]
                },
                "10": {
                    "range": [
                        20,
                        20
                    ]
                },
                "11": {
                    "range": [
                        21,
                        21
                    ]
                },
                "12": {
                    "range": [
                        22,
                        22
                    ]
                },
                "13": {
                    "range": [
                        23,
                        23
                    ]
                },
                "14": {
                    "range": [
                        24,
                        24
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                7,
                8,
                9,
                7,
                8,
                9,
                7,
                23,
                24,
                25,
                28
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "1"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "1"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "1"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "2"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "2"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "2"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "3"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "3"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "3"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "4"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "4"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 10,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "4"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 11,
                    "state": [
                        {
                            "result": "0"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "4"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 12,
                    "state": [
                        {
                            "result": "1"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "4"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                },
                {
                    "block": 14,
                    "state": [
                        {
                            "result": "1"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "v": "3"
                        },
                        {
                            "count": "4"
                        },
                        {
                            "a": "[3, 3, 3, 3]"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [3, 3, 3, 3]",
                    "a.sort()",
                    "v = a[0]",
                    "count = 1",
                    "result = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "(v == a[i])"
                ],
                "4": [
                    "count += 1"
                ],
                "5": [
                    "(v == count)"
                ],
                "6": [
                    "v = a[i]",
                    "count = 1"
                ],
                "7": [
                    "(count > v)"
                ],
                "8": [
                    "result += count -v",
                    "v = a[i]",
                    "count = 1"
                ],
                "9": [
                    "result += count",
                    "v = a[i]",
                    "count = 1"
                ],
                "10": [
                    "(v != count)"
                ],
                "11": [
                    "(count > v)"
                ],
                "12": [
                    "result += count -v"
                ],
                "13": [
                    "result += count"
                ],
                "14": [
                    "print(result)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 14
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [3, 3, 3, 3]\n    a.sort()\n    v = a[0]\n    count = 1\n    result = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (v == a[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (v == count)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    v = a[i]\n    count = 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (count > v)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    result += count -v\n    v = a[i]\n    count = 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    result += count\n    v = a[i]\n    count = 1\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    (v != count)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 14\n\nBlock 11:\nStatement:\n    (count > v)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    result += count -v\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    result += count\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    print(result)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s920632532": {
            "code": "N = 4\na = [3, 3, 3, 3]\nc = Counter(a)\nans = 0\nfor k, v in c.values():\n    if k > v:\n        ans += v\n    else:\n        ans += v - k\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('cannot unpack non-iterable int object')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "a = [3, 3, 3, 3]",
                    "c = Counter(a)",
                    "ans = 0"
                ],
                "2": [
                    "k <- index\n    v <- iterator"
                ],
                "3": [
                    "(k > v)"
                ],
                "4": [
                    "ans += v"
                ],
                "5": [
                    "ans += (v-k)"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    a = [3, 3, 3, 3]\n    c = Counter(a)\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    k <- index\n    v <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (k > v)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += v\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans += (v-k)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s086451714": {
            "code": "n = 4\na = [3, 3, 3, 3]\nc = list(Counter(a))\nans = 0\nfor k in range(len(c)):\n    i = c[k][0]\n    x = c[k][1]\n    if i > x:\n        ans += x\n    elif i < x:\n        ans += x - i\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [3, 3, 3, 3]",
                    "c=list(Counter(a))",
                    "ans=0"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(len(c))"
                ],
                "3": [
                    "i=c[k][0]",
                    "x=c[k][1]",
                    "(i > x)"
                ],
                "4": [
                    "ans+=x"
                ],
                "5": [
                    "(i < x)"
                ],
                "6": [
                    "ans+=x-i"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [3, 3, 3, 3]\n    c=list(Counter(a))\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(len(c))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    i=c[k][0]\n    x=c[k][1]\n    (i > x)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans+=x\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i < x)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    ans+=x-i\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s085615125": {
            "code": "N = 4\ns = 0\na = [3, 3, 3, 3]\nc = collections.Counter(a)\nfor i in c.keys():\n    if c.values(i) > i:\n        s += c.values(i) - i\n    elif c.values(i) < i:\n        s += c.values(i)\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('Counter.values() takes no arguments (1 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "s=0",
                    "a = [3, 3, 3, 3]",
                    "c=collections.Counter(a)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> c.keys()"
                ],
                "3": [
                    "(c.values(i) > i)"
                ],
                "4": [
                    "s+=c.values(i)-i"
                ],
                "5": [
                    "(c.values(i) < i)"
                ],
                "6": [
                    "s+=c.values(i)"
                ],
                "7": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    s=0\n    a = [3, 3, 3, 3]\n    c=collections.Counter(a)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> c.keys()\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (c.values(i) > i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s+=c.values(i)-i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (c.values(i) < i)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    s+=c.values(i)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(s)\nNext:\n    <END>\n"
        }
    },
    "p03494": {
        "s198342618": {
            "code": "c = [3]\nprint(np.gcd.reduce(c))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "c = [3]",
                    "print(np.gcd.reduce(c))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    c = [3]\n    print(np.gcd.reduce(c))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s119808336": {
            "code": "n = 3\na = [8, 12, 40]\ncnt = 0\nwhile sum(a % 2) == 0:\n    cnt += 1\n    a = a // 2\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [8, 12, 40]",
                    "cnt = 0"
                ],
                "2": [
                    "while sum(a%2) == 0:"
                ],
                "3": [
                    "cnt += 1",
                    "a = a//2"
                ],
                "4": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [8, 12, 40]\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while sum(a%2) == 0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cnt += 1\n    a = a//2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        },
        "s213974121": {
            "code": "a = '3'\nn = [8, 12, 40]\nans = float('inf')\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind('1') - 1)\nprint(round(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '3'",
                    "n = [8, 12, 40]",
                    "ans = float(\"inf\")"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> a"
                ],
                "3": [
                    "ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\")-1)"
                ],
                "4": [
                    "print(round(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '3'\n    n = [8, 12, 40]\n    ans = float(\"inf\")\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\")-1)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(round(ans))\nNext:\n    <END>\n"
        },
        "s570525446": {
            "code": "N = 3\nnums = [8, 12, 40]\nmulti = reduce(mul, nums)\nn = 0\nwhile multi % 2 == 0:\n    nums /= 2\n    multi = reduce(mul, nums)\n    n += 1\nprint(n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /=: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "nums = [8, 12, 40]",
                    "multi = reduce(mul, nums)",
                    "n = 0"
                ],
                "2": [
                    "while multi % 2 == 0:"
                ],
                "3": [
                    "nums /= 2",
                    "multi = reduce(mul, nums)",
                    "n += 1"
                ],
                "4": [
                    "print(n)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    nums = [8, 12, 40]\n    multi = reduce(mul, nums)\n    n = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while multi % 2 == 0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    nums /= 2\n    multi = reduce(mul, nums)\n    n += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(n)\nNext:\n    <END>\n"
        }
    },
    "p03523": {
        "s795896339": {
            "code": "S = ['K', 'I', 'H', 'B', 'R']\nif S.count('K') != 1 and S.count('I') != 1 and (S.count('H') != 1) and (S.count('B') != 1) and (S.count('R') != 1):\n    print('NO')\n    sys.exit()\nk = S.index('K')\ni = S.index('I')\nh = S.index('H')\nb = S.index('B')\nr = S.index('R')\nif 0 <= k <= 1 and i - k == 1 and (h - i == 1) and (0 <= b - h <= 1) and (0 <= r - b <= 1):\n    if k < i < h < b < r:\n        print('YES')\n    else:\n        print('NO')\nelse:\n    print('NO')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = ['K', 'I', 'H', 'B', 'R']",
                    "(S.count('K') != 1 and S.count('I') != 1 and (S.count('H') != 1) and (S.count('B') != 1) and (S.count('R') != 1))"
                ],
                "2": [
                    "print(\"NO\")",
                    "sys.exit()"
                ],
                "3": [
                    "k = S.index(\"K\")",
                    "i = S.index(\"I\")",
                    "h = S.index(\"H\")",
                    "b = S.index(\"B\")",
                    "r = S.index(\"R\")",
                    "(0 <= k <= 1 and i - k == 1 and (h - i == 1) and (0 <= b - h <= 1) and (0 <= r - b <= 1))"
                ],
                "4": [
                    "(k < i < h < b < r)"
                ],
                "5": [
                    "print(\"YES\")"
                ],
                "6": [
                    "print(\"NO\")"
                ],
                "7": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = ['K', 'I', 'H', 'B', 'R']\n    (S.count('K') != 1 and S.count('I') != 1 and (S.count('H') != 1) and (S.count('B') != 1) and (S.count('R') != 1))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"NO\")\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    k = S.index(\"K\")\n    i = S.index(\"I\")\n    h = S.index(\"H\")\n    b = S.index(\"B\")\n    r = S.index(\"R\")\n    (0 <= k <= 1 and i - k == 1 and (h - i == 1) and (0 <= b - h <= 1) and (0 <= r - b <= 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (k < i < h < b < r)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s096508677": {
            "code": "coding: utf - 8\ns = 'KIHBR'\npattern = 'A?KIHA?BARA?$'\nresult = re.match(pattern, s)\nif result:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'KIHBR'",
                    "pattern = 'A?KIHA?BARA?$'",
                    "result = re.match(pattern , s)",
                    "(result)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'KIHBR'\n    pattern = 'A?KIHA?BARA?$'\n    result = re.match(pattern , s)\n    (result)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03524": {
        "s121643215": {
            "code": "S = 'abac'\nCS = Counter(S)\nV = list(CS.values())\nans = 'YES'\nif V.count(0) == 2:\n    ans = 'NO'\nelif V.count(0) <= 1:\n    if V[0] >= 2 * V[1]:\n        ans = 'NO'\nelif V[0] >= 2 * V[1] and V[0] >= 6 * V[2]:\n    ans = 'NO'\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                7,
                8,
                9,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'abac'",
                    "CS = Counter(S)",
                    "V = list(CS.values())",
                    "ans = 'YES'",
                    "(V.count(0) == 2)"
                ],
                "2": [
                    "ans = 'NO'"
                ],
                "3": [
                    "(V.count(0) <= 1)"
                ],
                "4": [
                    "(V[0] >= 2 * V[1])"
                ],
                "5": [
                    "ans = 'NO'"
                ],
                "6": [
                    "(V[0] >= 2 * V[1] and V[0] >= 6 * V[2])"
                ],
                "7": [
                    "ans = 'NO'"
                ],
                "8": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'abac'\n    CS = Counter(S)\n    V = list(CS.values())\n    ans = 'YES'\n    (V.count(0) == 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = 'NO'\nNext:\n    Go to Block: 8\n\nBlock 3:\nStatement:\n    (V.count(0) <= 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (V[0] >= 2 * V[1])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    ans = 'NO'\nNext:\n    Go to Block: 8\n\nBlock 6:\nStatement:\n    (V[0] >= 2 * V[1] and V[0] >= 6 * V[2])\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ans = 'NO'\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03543": {
        "s315175061": {
            "code": "N = 1118\nN2 = list(map(int, str(N)))\nif not 1000 <= N <= 9999:\n    sys.exit()\nif N2[0] == N2[1] == N2[2] or N2[1] == N2[2] == N[3]:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 1118",
                    "N2 = list(map(int,str(N)))",
                    "(not 1000 <= N <= 9999)"
                ],
                "2": [
                    "sys.exit()"
                ],
                "3": [
                    "(N2[0] == N2[1] == N2[2] or N2[1] == N2[2] == N[3])"
                ],
                "4": [
                    "print(\"Yes\")"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 1118\n    N2 = list(map(int,str(N)))\n    (not 1000 <= N <= 9999)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (N2[0] == N2[1] == N2[2] or N2[1] == N2[2] == N[3])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s794610939": {
            "code": "n = ['1', '1', '1', '8']\nc = Counter(n)\nif max(list(c.values)) >= 3:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = ['1', '1', '1', '8']",
                    "c = Counter(n)",
                    "(max(list(c.values)) >= 3)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = ['1', '1', '1', '8']\n    c = Counter(n)\n    (max(list(c.values)) >= 3)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s950574706": {
            "code": "s = '1118'\nc = collections.Counter(s)\nif len(c) == 1:\n    print('Yes')\nelif len(c) == 2:\n    if (c.values()[0] == 1) | (c.values()[0] == 3):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_values' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '1118'",
                    "c = collections.Counter(s)",
                    "(len(c) == 1)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "(len(c) == 2)"
                ],
                "4": [
                    "((c.values()[0] == 1) | (c.values()[0] == 3))"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "print(\"No\")"
                ],
                "7": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1118'\n    c = collections.Counter(s)\n    (len(c) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (len(c) == 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    ((c.values()[0] == 1) | (c.values()[0] == 3))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03544": {
        "s543621626": {
            "code": "N = 5\nL0 = 2\nL1 = 1\nfor i in range(N - 1):\n    temp = L0 + L1\n    L0 = L1\n    L1 = temp\nprint(temp)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "L0=2",
                    "L1=1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "temp=L0+L1",
                    "L0=L1",
                    "L1=temp"
                ],
                "4": [
                    "print(temp)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    L0=2\n    L1=1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    temp=L0+L1\n    L0=L1\n    L1=temp\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(temp)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03555": {
        "s845633683": {
            "code": "c1 = 'pot'\nc2 = 'top'\nc2 = c2[::-1]\nfor a, b in zip(c1, c2):\n    if a != b:\n        print('NO')\n        sys.exit(1)\nprint('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "c2": "'pot'"
                        },
                        {
                            "c1": "'pot'"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "c1 = 'pot'",
                    "c2 = 'top'",
                    "c2 = c2[::-1]"
                ],
                "2": [
                    "a <- index\n    b <- iterator"
                ],
                "3": [
                    "(a != b)"
                ],
                "4": [
                    "print('NO')",
                    "sys.exit(1)"
                ],
                "5": [
                    "print('YES')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    c1 = 'pot'\n    c2 = 'top'\n    c2 = c2[::-1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    a <- index\n    b <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a != b)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print('NO')\n    sys.exit(1)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print('YES')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03556": {
        "s559976058": {
            "code": "N = 10\nlist_N = list(range(1, N + 1))\nmax = -999999999\nsqrt_N = []\nfor i in range(N):\n    if max < int(math.sqrt(list_N[i])):\n        max = int(math.sqrt(list_N[i]))\nprint(max * max)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                5,
                6,
                5,
                6,
                7,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                7,
                5,
                6,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "1"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "1"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "1"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "1"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "2"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "2"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "2"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "2"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "2"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "2"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "2"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "2"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "list_N": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
                        },
                        {
                            "max": "3"
                        },
                        {
                            "N": "10"
                        },
                        {
                            "sqrt_N": "[]"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "list_N = list(range(1,N+1))",
                    "max = -999999999",
                    "sqrt_N = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(max < int(math.sqrt(list_N[i])))"
                ],
                "4": [
                    "max = int(math.sqrt(list_N[i]))"
                ],
                "5": [
                    "print(max*max)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    list_N = list(range(1,N+1))\n    max = -999999999\n    sqrt_N = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (max < int(math.sqrt(list_N[i])))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    max = int(math.sqrt(list_N[i]))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(max*max)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s243416067": {
            "code": "N = 10\nv = int(math.sqrt(N))\nreturn v * v",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 10",
                    "v = int(math.sqrt(N))",
                    "return v*v"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10\n    v = int(math.sqrt(N))\n    return v*v\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s043975621": {
            "code": "n = '10'\nfor i in range(n):\n    a = int(math.sqrt(n - i))\n    b = n - i\n    if a ** 2 == b:\n        print(a)\n        break\n    else:\n        pass",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '10'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "a = int(math.sqrt(n - i))",
                    "b = n - i",
                    "(a ** 2 == b)"
                ],
                "4": [
                    "print(a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '10'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    a = int(math.sqrt(n - i))\n    b = n - i\n    (a ** 2 == b)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(a)\nNext:\n    <END>\n"
        },
        "s091393194": {
            "code": "n = 10\na = 0\nm = int(n ** 0.5)\nfor i in range(np.ceil(m)):\n    if i ** 2 > n:\n        break\n    a += 1\nprint(a ** 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'numpy.float64' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "a = 0",
                    "m = int(n**0.5)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(np.ceil(m))"
                ],
                "3": [
                    "(i ** 2 > n)"
                ],
                "4": [
                    "a += 1"
                ],
                "5": [
                    "print(a**2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 5,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    a = 0\n    m = int(n**0.5)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(np.ceil(m))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i ** 2 > n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    a += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(a**2)\nNext:\n    <END>\n"
        },
        "s541900419": {
            "code": "n = '10'\nfor i in range(n):\n    a = int(np.sqrt(n - i))\n    b = n - i\n    if a ** 2 == b:\n        print(b)\n        break\n    else:\n        pass",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '10'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "a = int(np.sqrt(n - i))",
                    "b = n - i",
                    "(a ** 2 == b)"
                ],
                "4": [
                    "print(b)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '10'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    a = int(np.sqrt(n - i))\n    b = n - i\n    (a ** 2 == b)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(b)\nNext:\n    <END>\n"
        }
    },
    "p03559": {
        "s892412001": {
            "code": "n = 2\na_list = ['1', '5']\na_list = [int(a) for a in a_list]\nb_list = ['2', '4']\nb_list = [int(b) for b in b_list]\nc_list = ['3', '6']\nc_list = [int(c) for c in c_list]\na_ar = np.array(a_list)\nb_ar = np.array(b_list)\nc_ar = np.array(c_list)\nb_count_ar = np.sum(b_ar[:, np.newaxis] < c_ar, axis=1)\nprint(np.sum((a_ar[:, np.newaxis] < b_ar).astype(int) * b_count_ar))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a_list = ['1', '5']",
                    "a_list = [int(a) for a in a_list]",
                    "b_list = ['2', '4']",
                    "b_list = [int(b) for b in b_list]",
                    "c_list = ['3', '6']",
                    "c_list = [int(c) for c in c_list]",
                    "a_ar = np.array(a_list)",
                    "b_ar = np.array(b_list)",
                    "c_ar = np.array(c_list)",
                    "b_count_ar = np.sum(b_ar[:,np.newaxis]<c_ar,axis=1)",
                    "print(np.sum((a_ar[:,np.newaxis]<b_ar).astype(int) * b_count_ar))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a_list = ['1', '5']\n    a_list = [int(a) for a in a_list]\n    b_list = ['2', '4']\n    b_list = [int(b) for b in b_list]\n    c_list = ['3', '6']\n    c_list = [int(c) for c in c_list]\n    a_ar = np.array(a_list)\n    b_ar = np.array(b_list)\n    c_ar = np.array(c_list)\n    b_count_ar = np.sum(b_ar[:,np.newaxis]<c_ar,axis=1)\n    print(np.sum((a_ar[:,np.newaxis]<b_ar).astype(int) * b_count_ar))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s994489471": {
            "code": "n = 2\na = [1, 5]\nb = [2, 4]\nc = [3, 6]\na.sort()\nb.sort()\nc.sort()\nans = 0\nfor i in range(n):\n    x = a[i]\n    y = bisect.bisect_right(x)\n    z = bisect.bisect_right(b[y])\n    ans += n - z\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        13
                    ]
                },
                "4": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"bisect_right() missing required argument 'x' (pos 2)\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a = [1, 5]",
                    "b = [2, 4]",
                    "c = [3, 6]",
                    "a.sort()",
                    "b.sort()",
                    "c.sort()",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "x=a[i]",
                    "y=bisect.bisect_right(x)",
                    "z=bisect.bisect_right(b[y])",
                    "ans+=n-z"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [1, 5]\n    b = [2, 4]\n    c = [3, 6]\n    a.sort()\n    b.sort()\n    c.sort()\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x=a[i]\n    y=bisect.bisect_right(x)\n    z=bisect.bisect_right(b[y])\n    ans+=n-z\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03565": {
        "s697314998": {
            "code": "s = '?tc????'\ns = s.replace('?', '.')\nt = 'coder'\nr = []\nif len(t) > len(s):\n    print('UNRESTORABLE')\nelse:\n    for i in range(len(s) - len(t) + 1):\n        m = re.match(s[i:i + len(t)], t)\n        if m is None:\n            continue\n        r.append((s[:i] + t + s[i + len(t):]).replace('.', 'a'))\n    if not r:\n        print('UNRESTORABLE')\n        quit()\nprint(sorted(r)[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10,
                11,
                8,
                9,
                10,
                11,
                8,
                9,
                10,
                12,
                8,
                13,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = '?tc????'",
                    "s = s.replace('?', '.')",
                    "t = 'coder'",
                    "r = []",
                    "(len(t) > len(s))"
                ],
                "2": [
                    "print(\"UNRESTORABLE\")"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(len(s) - len(t) + 1)"
                ],
                "4": [
                    "m = re.match(s[i:i+len(t)], t)",
                    "(m is None)"
                ],
                "5": [
                    "r.append((s[:i]+t+s[i+len(t):]).replace(\".\",\"a\"))"
                ],
                "6": [
                    "(not r)"
                ],
                "7": [
                    "print('UNRESTORABLE')",
                    "quit()"
                ],
                "8": [
                    "print(sorted(r)[0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '?tc????'\n    s = s.replace('?', '.')\n    t = 'coder'\n    r = []\n    (len(t) > len(s))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"UNRESTORABLE\")\nNext:\n    Go to Block: 8\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s) - len(t) + 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    m = re.match(s[i:i+len(t)], t)\n    (m is None)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 5:\nStatement:\n    r.append((s[:i]+t+s[i+len(t):]).replace(\".\",\"a\"))\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    (not r)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print('UNRESTORABLE')\n    quit()\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(sorted(r)[0])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s934049127": {
            "code": "s = ['?', 't', 'c', '?', '?', '?', '?']\nt = ['c', 'o', 'd', 'e', 'r']\nls = len(s)\nlt = len(t)\nif ls < lt:\n    print('UNRESTORABLE')\nelse:\n    ans = []\n    for i in range(len(s) - len(t) + 1):\n        m = re.match(s[i:i + lt], t)\n        if m is None:\n            continue\n        ans.append((s[:i] + t + s[i + lt:]).replace('?', 'a'))\n    if not ans:\n        print('UNRESTORABLE')\n    else:\n        print(min(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unhashable type: 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['?', 't', 'c', '?', '?', '?', '?']",
                    "t = ['c', 'o', 'd', 'e', 'r']",
                    "ls = len(s)",
                    "lt = len(t)",
                    "(ls < lt)"
                ],
                "2": [
                    "print('UNRESTORABLE')"
                ],
                "3": [
                    "ans = []"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(len(s) - len(t) + 1)"
                ],
                "5": [
                    "m = re.match(s[i:i + lt], t)",
                    "(m is None)"
                ],
                "6": [
                    "ans.append((s[:i]+t+s[i+lt:]).replace('?', 'a'))"
                ],
                "7": [
                    "(not ans)"
                ],
                "8": [
                    "print('UNRESTORABLE')"
                ],
                "9": [
                    "print(min(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 7
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['?', 't', 'c', '?', '?', '?', '?']\n    t = ['c', 'o', 'd', 'e', 'r']\n    ls = len(s)\n    lt = len(t)\n    (ls < lt)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('UNRESTORABLE')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ans = []\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s) - len(t) + 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 5:\nStatement:\n    m = re.match(s[i:i + lt], t)\n    (m is None)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 6:\nStatement:\n    ans.append((s[:i]+t+s[i+lt:]).replace('?', 'a'))\nNext:\n    Go to Block: 4\n\nBlock 7:\nStatement:\n    (not ans)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('UNRESTORABLE')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(min(ans))\nNext:\n    <END>\n"
        }
    },
    "p03569": {
        "s742765835": {
            "code": "s = deque(['x', 'a', 'b', 'x', 'a'])\nle = len(s) - 1\ncnt = 0\nwhile le:\n    if s[0] == s[-1]:\n        s.pop()\n        s.popleft()\n        le -= 2\n    elif s[0] == 'x':\n        s.popleft()\n        cnt += 1\n        le -= 1\n    elif s[-1] == 'x':\n        s.pop()\n        cnt += 1\n        le -= 1\n    else:\n        print(-1)\n        break\nelse:\n    print(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        16
                    ]
                },
                "9": {
                    "range": [
                        17,
                        17
                    ]
                },
                "10": {
                    "range": [
                        18,
                        18
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                9,
                10,
                11,
                12,
                4,
                5,
                6,
                7,
                8,
                4,
                5,
                9,
                13,
                14,
                15,
                16,
                4,
                21
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = deque(['x', 'a', 'b', 'x', 'a'])",
                    "le = len(s)-1",
                    "cnt = 0"
                ],
                "2": [
                    "while le:"
                ],
                "3": [
                    "(s[0] == s[-1])"
                ],
                "4": [
                    "s.pop()",
                    "s.popleft()",
                    "le -= 2"
                ],
                "5": [
                    "(s[0] == 'x')"
                ],
                "6": [
                    "s.popleft()",
                    "cnt += 1",
                    "le -= 1"
                ],
                "7": [
                    "(s[-1] == 'x')"
                ],
                "8": [
                    "s.pop()",
                    "cnt += 1",
                    "le -= 1"
                ],
                "9": [
                    "print(-1)"
                ],
                "10": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = deque(['x', 'a', 'b', 'x', 'a'])\n    le = len(s)-1\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while le:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (s[0] == s[-1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s.pop()\n    s.popleft()\n    le -= 2\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (s[0] == 'x')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    s.popleft()\n    cnt += 1\n    le -= 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (s[-1] == 'x')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    s.pop()\n    cnt += 1\n    le -= 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s896729244": {
            "code": "S = 'xabxa'\ndeque_S = deque(S)\nflag = 0\nans = 0\nwhile True:\n    if deque_S[0] == deque_S[-1]:\n        deque_S.pop()\n        deque_S.popleft()\n    elif deque_S[0] == 'x':\n        ans += 1\n        deque_S.pop()\n    elif deque_S[-1] == 'x':\n        ans += 1\n        deque_S.popleft()\n    else:\n        flag = 1\n        break\n    if len(deque_S) <= 1:\n        break\nif flag == 1:\n    print(-1)\nelse:\n    print(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                },
                "11": {
                    "range": [
                        17,
                        17
                    ]
                },
                "12": {
                    "range": [
                        18,
                        18
                    ]
                },
                "13": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                10,
                11,
                12,
                19,
                5,
                6,
                7,
                8,
                19,
                5,
                6,
                10,
                13,
                17,
                18,
                21,
                22
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'xabxa'",
                    "deque_S=deque(S)",
                    "flag=0",
                    "ans=0"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "(deque_S[0] == deque_S[-1])"
                ],
                "4": [
                    "deque_S.pop()",
                    "deque_S.popleft()"
                ],
                "5": [
                    "(deque_S[0] == 'x')"
                ],
                "6": [
                    "ans+=1",
                    "deque_S.pop()"
                ],
                "7": [
                    "(deque_S[-1] == 'x')"
                ],
                "8": [
                    "ans+=1",
                    "deque_S.popleft()"
                ],
                "9": [
                    "flag=1"
                ],
                "10": [
                    "(len(deque_S) <= 1)"
                ],
                "11": [
                    "(flag == 1)"
                ],
                "12": [
                    "print(-1)"
                ],
                "13": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 11
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'xabxa'\n    deque_S=deque(S)\n    flag=0\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    (deque_S[0] == deque_S[-1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    deque_S.pop()\n    deque_S.popleft()\nNext:\n    Go to Block: 10\n\nBlock 5:\nStatement:\n    (deque_S[0] == 'x')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans+=1\n    deque_S.pop()\nNext:\n    Go to Block: 10\n\nBlock 7:\nStatement:\n    (deque_S[-1] == 'x')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ans+=1\n    deque_S.popleft()\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    flag=1\nNext:\n    Go to Block: 11\n\nBlock 10:\nStatement:\n    (len(deque_S) <= 1)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 2\n\nBlock 11:\nStatement:\n    (flag == 1)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 13:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03578": {
        "s902505126": {
            "code": "n = 5\nd = [3, 1, 4, 1, 5]\nm = 3\nt = [5, 4, 3]\ndd, tt = (collections.Counter(d), collections.Counter(t))\nfor k, v in tt.items():\n    h = dd.get(k) >= v\n    if h == False:\n        print('NO')\n        exit()\nprint('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "d = [3, 1, 4, 1, 5]",
                    "m = 3",
                    "t = [5, 4, 3]",
                    "dd,tt=collections.Counter(d),collections.Counter(t)"
                ],
                "2": [
                    "k <- index\n    v <- iterator"
                ],
                "3": [
                    "h=dd.get(k)>=v",
                    "(h == False)"
                ],
                "4": [
                    "print(\"NO\")",
                    "exit()"
                ],
                "5": [
                    "print(\"YES\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    d = [3, 1, 4, 1, 5]\n    m = 3\n    t = [5, 4, 3]\n    dd,tt=collections.Counter(d),collections.Counter(t)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    k <- index\n    v <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    h=dd.get(k)>=v\n    (h == False)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"NO\")\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s413883316": {
            "code": "n = 5\nd = [3, 1, 4, 1, 5]\nm = 3\nt = [5, 4, 3]\ndd, tt = (collections.Counter(d), collections.Counter(t))\nfor k, v in tt.items():\n    h = dd.get(k) >= v\n    if h == False or h == None:\n        print('NO')\n        exit()\nprint('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "d = [3, 1, 4, 1, 5]",
                    "m = 3",
                    "t = [5, 4, 3]",
                    "dd,tt=collections.Counter(d),collections.Counter(t)"
                ],
                "2": [
                    "k <- index\n    v <- iterator"
                ],
                "3": [
                    "h=dd.get(k)>=v",
                    "(h == False or h == None)"
                ],
                "4": [
                    "print(\"NO\")",
                    "exit()"
                ],
                "5": [
                    "print(\"YES\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    d = [3, 1, 4, 1, 5]\n    m = 3\n    t = [5, 4, 3]\n    dd,tt=collections.Counter(d),collections.Counter(t)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    k <- index\n    v <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    h=dd.get(k)>=v\n    (h == False or h == None)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"NO\")\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s836885774": {
            "code": "N = 5\nD = [3, 1, 4, 1, 5]\nM = 3\nT = [5, 4, 3]\nif N < T:\n    print('NO')\n    exit()\nd_count = Counter(D)\nt_count = Counter(T)\nfor k, v in t_count.items():\n    if k not in d_count:\n        print('NO')\n        exit()\n    if d_count[k] < v:\n        print('NO')\n        exit()\nprint('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                },
                "8": {
                    "range": [
                        15,
                        16
                    ]
                },
                "9": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "M": "3"
                        },
                        {
                            "T": "[5, 4, 3]"
                        },
                        {
                            "D": "[3, 1, 4, 1, 5]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "D = [3, 1, 4, 1, 5]",
                    "M = 3",
                    "T = [5, 4, 3]",
                    "(N < T)"
                ],
                "2": [
                    "print('NO')",
                    "exit()"
                ],
                "3": [
                    "d_count = Counter(D)",
                    "t_count = Counter(T)"
                ],
                "4": [
                    "k <- index\n    v <- iterator"
                ],
                "5": [
                    "(k not in d_count)"
                ],
                "6": [
                    "print('NO')",
                    "exit()"
                ],
                "7": [
                    "(d_count[k] < v)"
                ],
                "8": [
                    "print('NO')",
                    "exit()"
                ],
                "9": [
                    "print('YES')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 9
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    D = [3, 1, 4, 1, 5]\n    M = 3\n    T = [5, 4, 3]\n    (N < T)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('NO')\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    d_count = Counter(D)\n    t_count = Counter(T)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    k <- index\n    v <- iterator\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 9\n\nBlock 5:\nStatement:\n    (k not in d_count)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('NO')\n    exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (d_count[k] < v)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 4\n\nBlock 8:\nStatement:\n    print('NO')\n    exit()\nNext:\n    Go to Block: 4\n\nBlock 9:\nStatement:\n    print('YES')\nNext:\n    <END>\n"
        },
        "s663248163": {
            "code": "s = '5'\ns = ['3', '1', '4', '1', '5']\nt = '3'\nt = ['5', '4', '3']\ns.sort()\nt.sort()\nf = False\nfor c in t:\n    i = bisect.bisect_left(s, c)\n    if s[i] != c:\n        print('NO')\n        f = True\n        break\n    else:\n        s.pop[i]\nif not f:\n    print('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        12
                    ]
                },
                "5": {
                    "range": [
                        13,
                        13
                    ]
                },
                "6": {
                    "range": [
                        14,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '5'",
                    "s = ['3', '1', '4', '1', '5']",
                    "t = '3'",
                    "t = ['5', '4', '3']",
                    "s.sort()",
                    "t.sort()",
                    "f=False"
                ],
                "2": [
                    "iterator -> c, Iterate Over -> t"
                ],
                "3": [
                    "i=bisect.bisect_left(s,c)",
                    "(s[i] != c)"
                ],
                "4": [
                    "print(\"NO\")",
                    "f=True"
                ],
                "5": [
                    "s.pop[i]"
                ],
                "6": [
                    "(not f)"
                ],
                "7": [
                    "print(\"YES\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '5'\n    s = ['3', '1', '4', '1', '5']\n    t = '3'\n    t = ['5', '4', '3']\n    s.sort()\n    t.sort()\n    f=False\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> c, Iterate Over -> t\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    i=bisect.bisect_left(s,c)\n    (s[i] != c)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"NO\")\n    f=True\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    s.pop[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (not f)\nNext:\n    If True: Go to Block 7\n    <END>\nBlock 7:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n"
        }
    },
    "p03583": {
        "s219884253": {
            "code": "n = 2\nif n % 2 == 0:\n    print(n, n, n // 2)\nelse:\n    for h, l in product(range(2, 3501), repeat=2):\n        m = n * h * l\n        c = 4 * h * l - n * (h + l)\n        if c >= 0 and m % c == 0:\n            w = m // c\n            break\n    print(h, l, w)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "(n % 2 == 0)"
                ],
                "2": [
                    "print(n,n,n//2)"
                ],
                "3": [
                    "h <- index\n    l <- iterator"
                ],
                "4": [
                    "m = n*h*l",
                    "c = 4*h*l - n*(h+l)",
                    "(c >= 0 and m % c == 0)"
                ],
                "5": [
                    "w = m//c"
                ],
                "6": [
                    "print(h,l,w)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n,n,n//2)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    h <- index\n    l <- iterator\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    m = n*h*l\n    c = 4*h*l - n*(h+l)\n    (c >= 0 and m % c == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    w = m//c\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(h,l,w)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03591": {
        "s814507717": {
            "code": "st = 'YAKINIKU'\nif len(st) < 3:\n    print('No')\n    sys.exit()\nif st[0] == 'Y':\n    if st[1] == 'A':\n        if st[2] == 'K':\n            if st[3] == 'I':\n                print('Yes')\n            else:\n                print('No')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        11,
                        11
                    ]
                },
                "10": {
                    "range": [
                        12,
                        12
                    ]
                },
                "11": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "st = 'YAKINIKU'",
                    "(len(st) < 3)"
                ],
                "2": [
                    "print('No')",
                    "sys.exit()"
                ],
                "3": [
                    "(st[0] == 'Y')"
                ],
                "4": [
                    "(st[1] == 'A')"
                ],
                "5": [
                    "(st[2] == 'K')"
                ],
                "6": [
                    "(st[3] == 'I')"
                ],
                "7": [
                    "print('Yes')"
                ],
                "8": [
                    "print('No')"
                ],
                "9": [
                    "print('No')"
                ],
                "10": [
                    "print('No')"
                ],
                "11": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 11
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 10
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    st = 'YAKINIKU'\n    (len(st) < 3)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (st[0] == 'Y')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 11\n\nBlock 4:\nStatement:\n    (st[1] == 'A')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 10\n\nBlock 5:\nStatement:\n    (st[2] == 'K')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 9\n\nBlock 6:\nStatement:\n    (st[3] == 'I')\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03598": {
        "s499883325": {
            "code": "n = 1\nk = 10\nxs = [2]\nprint(2 * sum([min([x, k - x]) for x in xs]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 1",
                    "k = 10",
                    "xs = [2]",
                    "print(2*sum([min([x, k - x]) for x in xs]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 1\n    k = 10\n    xs = [2]\n    print(2*sum([min([x, k - x]) for x in xs]))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03607": {
        "s341604956": {
            "code": "n = 3\na = map(int, sys.stdin.read().split('\\n'))\nd = dict()\nfor a_i in a:\n    if a_i not in d:\n        d[a_i] = 0\n    d[a_i] = (d[a_i] + 1) % 2\nprint(sum(d.values()))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                7,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = map(int, sys.stdin.read().split(\"\\n\"))",
                    "d = dict()"
                ],
                "2": [
                    "iterator -> a_i, Iterate Over -> a"
                ],
                "3": [
                    "(a_i not in d)"
                ],
                "4": [
                    "d[a_i] = 0"
                ],
                "5": [
                    "d[a_i] = (d[a_i]+1) % 2"
                ],
                "6": [
                    "print(sum(d.values()))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = map(int, sys.stdin.read().split(\"\\n\"))\n    d = dict()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a_i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (a_i not in d)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    d[a_i] = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    d[a_i] = (d[a_i]+1) % 2\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum(d.values()))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s123827347": {
            "code": "n = 3\na = [6, 2, 6]\nb = collections.Counter(a)\nset_a = set(a)\ncnt = 0\nfor i in range(len(set_a)):\n    if b[set_a[i]] % 2 == 1:\n        cnt += 1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "set_a": "{2, 6}"
                        },
                        {
                            "b": "Counter({6: 2, 2: 1})"
                        },
                        {
                            "a": "[6, 2, 6]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "set_a": "{2, 6}"
                        },
                        {
                            "b": "Counter({6: 2, 2: 1})"
                        },
                        {
                            "a": "[6, 2, 6]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "set_a": "{2, 6}"
                        },
                        {
                            "b": "Counter({6: 2, 2: 1})"
                        },
                        {
                            "a": "[6, 2, 6]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'set' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [6, 2, 6]",
                    "b = collections.Counter(a)",
                    "set_a = set(a)",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(set_a))"
                ],
                "3": [
                    "(b[set_a[i]] % 2 == 1)"
                ],
                "4": [
                    "cnt += 1"
                ],
                "5": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [6, 2, 6]\n    b = collections.Counter(a)\n    set_a = set(a)\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(set_a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (b[set_a[i]] % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        },
        "s022182439": {
            "code": "n = 3\na = map(int, sys.stdin.read().split('\\n'))\nd = dict()\nfor a_i in a:\n    if a_i not in d:\n        d[a_i] = 0\n    d[a_i] = (d[a_i] + 1) % 2\nprint(sum(d.values))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                7,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = map(int, sys.stdin.read().split(\"\\n\"))",
                    "d = dict()"
                ],
                "2": [
                    "iterator -> a_i, Iterate Over -> a"
                ],
                "3": [
                    "(a_i not in d)"
                ],
                "4": [
                    "d[a_i] = 0"
                ],
                "5": [
                    "d[a_i] = (d[a_i]+1) % 2"
                ],
                "6": [
                    "print(sum(d.values))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = map(int, sys.stdin.read().split(\"\\n\"))\n    d = dict()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a_i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (a_i not in d)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    d[a_i] = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    d[a_i] = (d[a_i]+1) % 2\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum(d.values))\nNext:\n    <END>\n"
        }
    },
    "p03611": {
        "s625073730": {
            "code": "n = 7\na = [3, 1, 4, 1, 5, 9, 2]\nif n == 1:\n    print(1)\n    sys.exit()\nif n == 2:\n    if abs(a[1] - a[0]) < 2:\n        print(2)\n        sys.exit()\n    else:\n        print(1)\n        sys.exit()\nA = collections.Counter(a)\nb = list(A.items())\nb.sort()\ncnt = 0\nfor i in range(len(b) - 2):\n    if int(b[i + 2][0]) - int(b[i + 1][0]) == 1 and int(b[i + 1][0]) - int(b[i][0]) == 1:\n        cnt = max(cnt, b[i][1] + b[i + 1][1] + b[i + 2][1])\n    elif int(b[i + 1][0]) - int(b[i][0]) == 1:\n        cnt = max(cnt, b[i + 1][1] + b[i][1])\n    else:\n        cnt = max(cnt, b[i])\nif int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1 and int(b[len(b) - 2][0]) - int(b[len(b) - 3][0]) != 1:\n    cnt = cnt\nelif int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1:\n    cnt = max(cnt, b[len(b) - 1][1] - b[len(b) - 2][1])\nelse:\n    cnt = max(cnt, max(b[len(b) - 1][1], b[len(b) - 2][1]))\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        15
                    ]
                },
                "8": {
                    "range": [
                        16,
                        16
                    ]
                },
                "9": {
                    "range": [
                        17,
                        17
                    ]
                },
                "10": {
                    "range": [
                        18,
                        18
                    ]
                },
                "11": {
                    "range": [
                        19,
                        19
                    ]
                },
                "12": {
                    "range": [
                        20,
                        20
                    ]
                },
                "13": {
                    "range": [
                        21,
                        21
                    ]
                },
                "14": {
                    "range": [
                        22,
                        22
                    ]
                },
                "15": {
                    "range": [
                        23,
                        23
                    ]
                },
                "16": {
                    "range": [
                        24,
                        24
                    ]
                },
                "17": {
                    "range": [
                        25,
                        25
                    ]
                },
                "18": {
                    "range": [
                        26,
                        26
                    ]
                },
                "19": {
                    "range": [
                        27,
                        27
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                17,
                18,
                19,
                17,
                18,
                19,
                17,
                18,
                20,
                21,
                17,
                24,
                26,
                29,
                30
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                },
                {
                    "block": 16,
                    "state": []
                },
                {
                    "block": 18,
                    "state": []
                },
                {
                    "block": 19,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 7",
                    "a = [3, 1, 4, 1, 5, 9, 2]",
                    "(n == 1)"
                ],
                "2": [
                    "print(1)",
                    "sys.exit()"
                ],
                "3": [
                    "(n == 2)"
                ],
                "4": [
                    "(abs(a[1] - a[0]) < 2)"
                ],
                "5": [
                    "print(2)",
                    "sys.exit()"
                ],
                "6": [
                    "print(1)",
                    "sys.exit()"
                ],
                "7": [
                    "A=collections.Counter(a)",
                    "b=list(A.items())",
                    "b.sort()",
                    "cnt=0"
                ],
                "8": [
                    "iterator -> i, Iterate Over -> range(len(b) - 2)"
                ],
                "9": [
                    "(int(b[i + 2][0]) - int(b[i + 1][0]) == 1 and int(b[i + 1][0]) - int(b[i][0]) == 1)"
                ],
                "10": [
                    "cnt=max(cnt,b[i][1]+b[i+1][1]+b[i+2][1])"
                ],
                "11": [
                    "(int(b[i + 1][0]) - int(b[i][0]) == 1)"
                ],
                "12": [
                    "cnt=max(cnt,b[i+1][1]+b[i][1])"
                ],
                "13": [
                    "cnt=max(cnt,b[i])"
                ],
                "14": [
                    "(int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1 and int(b[len(b) - 2][0]) - int(b[len(b) - 3][0]) != 1)"
                ],
                "15": [
                    "cnt=cnt"
                ],
                "16": [
                    "(int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1)"
                ],
                "17": [
                    "cnt=max(cnt,b[len(b)-1][1]-b[len(b)-2][1])"
                ],
                "18": [
                    "cnt=max(cnt,max(b[len(b)-1][1],b[len(b)-2][1]))"
                ],
                "19": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 14
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "14": {
                    "with_condition": {
                        "true": 15,
                        "false": 16
                    },
                    "no_condition": null
                },
                "15": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 19
                },
                "16": {
                    "with_condition": {
                        "true": 17,
                        "false": 18
                    },
                    "no_condition": null
                },
                "17": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 19
                },
                "18": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 19
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 7\n    a = [3, 1, 4, 1, 5, 9, 2]\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (n == 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (abs(a[1] - a[0]) < 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(2)\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    print(1)\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    A=collections.Counter(a)\n    b=list(A.items())\n    b.sort()\n    cnt=0\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    iterator -> i, Iterate Over -> range(len(b) - 2)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 14\n\nBlock 9:\nStatement:\n    (int(b[i + 2][0]) - int(b[i + 1][0]) == 1 and int(b[i + 1][0]) - int(b[i][0]) == 1)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    cnt=max(cnt,b[i][1]+b[i+1][1]+b[i+2][1])\nNext:\n    Go to Block: 8\n\nBlock 11:\nStatement:\n    (int(b[i + 1][0]) - int(b[i][0]) == 1)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    cnt=max(cnt,b[i+1][1]+b[i][1])\nNext:\n    Go to Block: 8\n\nBlock 13:\nStatement:\n    cnt=max(cnt,b[i])\nNext:\n    Go to Block: 8\n\nBlock 14:\nStatement:\n    (int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1 and int(b[len(b) - 2][0]) - int(b[len(b) - 3][0]) != 1)\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 16\n\nBlock 15:\nStatement:\n    cnt=cnt\nNext:\n    Go to Block: 19\n\nBlock 16:\nStatement:\n    (int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1)\nNext:\n    If True: Go to Block 17\n    If False: Go to Block 18\n\nBlock 17:\nStatement:\n    cnt=max(cnt,b[len(b)-1][1]-b[len(b)-2][1])\nNext:\n    Go to Block: 19\n\nBlock 18:\nStatement:\n    cnt=max(cnt,max(b[len(b)-1][1],b[len(b)-2][1]))\nNext:\n    Go to Block: 19\n\nBlock 19:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s292775456": {
            "code": "n = 7\na = [3, 1, 4, 1, 5, 9, 2]\nif n == 1:\n    print(1)\n    sys.exit()\nif n == 2:\n    if abs(a[1] - a[0]) < 2:\n        print(2)\n        sys.exit()\n    else:\n        print(1)\n        sys.exit()\nA = collections.Counter(a)\nb = list(A.items())\nb.sort()\ncnt = 0\nfor i in range(len(b) - 2):\n    if int(b[i + 2][0]) - int(b[i + 1][0]) == 1 and int(b[i + 1][0]) - int(b[i][0]) == 1:\n        cnt = max(cnt, b[i][1] + b[i + 1][1] + b[i + 2][1])\n    elif int(b[i + 1][0]) - int(b[i][0]) == 1:\n        cnt = max(cnt, b[i + 1][1] + b[i][1])\n    else:\n        cnt = max(cnt, b[i])\nif int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1:\n    cnt = max(cnt, b[len(b) - 1][1] - b[len(b) - 2][1])\nelse:\n    cnt = max(cnt, max(b[len(b) - 1][1], b[len(b) - 2][1]))\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        15
                    ]
                },
                "8": {
                    "range": [
                        16,
                        16
                    ]
                },
                "9": {
                    "range": [
                        17,
                        17
                    ]
                },
                "10": {
                    "range": [
                        18,
                        18
                    ]
                },
                "11": {
                    "range": [
                        19,
                        19
                    ]
                },
                "12": {
                    "range": [
                        20,
                        20
                    ]
                },
                "13": {
                    "range": [
                        21,
                        21
                    ]
                },
                "14": {
                    "range": [
                        22,
                        22
                    ]
                },
                "15": {
                    "range": [
                        23,
                        23
                    ]
                },
                "16": {
                    "range": [
                        24,
                        24
                    ]
                },
                "17": {
                    "range": [
                        25,
                        25
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                17,
                18,
                19,
                17,
                18,
                19,
                17,
                18,
                20,
                21,
                17,
                24,
                27,
                28
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                },
                {
                    "block": 16,
                    "state": []
                },
                {
                    "block": 17,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 7",
                    "a = [3, 1, 4, 1, 5, 9, 2]",
                    "(n == 1)"
                ],
                "2": [
                    "print(1)",
                    "sys.exit()"
                ],
                "3": [
                    "(n == 2)"
                ],
                "4": [
                    "(abs(a[1] - a[0]) < 2)"
                ],
                "5": [
                    "print(2)",
                    "sys.exit()"
                ],
                "6": [
                    "print(1)",
                    "sys.exit()"
                ],
                "7": [
                    "A=collections.Counter(a)",
                    "b=list(A.items())",
                    "b.sort()",
                    "cnt=0"
                ],
                "8": [
                    "iterator -> i, Iterate Over -> range(len(b) - 2)"
                ],
                "9": [
                    "(int(b[i + 2][0]) - int(b[i + 1][0]) == 1 and int(b[i + 1][0]) - int(b[i][0]) == 1)"
                ],
                "10": [
                    "cnt=max(cnt,b[i][1]+b[i+1][1]+b[i+2][1])"
                ],
                "11": [
                    "(int(b[i + 1][0]) - int(b[i][0]) == 1)"
                ],
                "12": [
                    "cnt=max(cnt,b[i+1][1]+b[i][1])"
                ],
                "13": [
                    "cnt=max(cnt,b[i])"
                ],
                "14": [
                    "(int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1)"
                ],
                "15": [
                    "cnt=max(cnt,b[len(b)-1][1]-b[len(b)-2][1])"
                ],
                "16": [
                    "cnt=max(cnt,max(b[len(b)-1][1],b[len(b)-2][1]))"
                ],
                "17": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 14
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "14": {
                    "with_condition": {
                        "true": 15,
                        "false": 16
                    },
                    "no_condition": null
                },
                "15": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                },
                "16": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 17
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 7\n    a = [3, 1, 4, 1, 5, 9, 2]\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (n == 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (abs(a[1] - a[0]) < 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(2)\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    print(1)\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    A=collections.Counter(a)\n    b=list(A.items())\n    b.sort()\n    cnt=0\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    iterator -> i, Iterate Over -> range(len(b) - 2)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 14\n\nBlock 9:\nStatement:\n    (int(b[i + 2][0]) - int(b[i + 1][0]) == 1 and int(b[i + 1][0]) - int(b[i][0]) == 1)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    cnt=max(cnt,b[i][1]+b[i+1][1]+b[i+2][1])\nNext:\n    Go to Block: 8\n\nBlock 11:\nStatement:\n    (int(b[i + 1][0]) - int(b[i][0]) == 1)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    cnt=max(cnt,b[i+1][1]+b[i][1])\nNext:\n    Go to Block: 8\n\nBlock 13:\nStatement:\n    cnt=max(cnt,b[i])\nNext:\n    Go to Block: 8\n\nBlock 14:\nStatement:\n    (int(b[len(b) - 1][0]) - int(b[len(b) - 2][0]) == 1)\nNext:\n    If True: Go to Block 15\n    If False: Go to Block 16\n\nBlock 15:\nStatement:\n    cnt=max(cnt,b[len(b)-1][1]-b[len(b)-2][1])\nNext:\n    Go to Block: 17\n\nBlock 16:\nStatement:\n    cnt=max(cnt,max(b[len(b)-1][1],b[len(b)-2][1]))\nNext:\n    Go to Block: 17\n\nBlock 17:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s230298110": {
            "code": "N = 7\nA = Counter({3: 1, 1: 2, 4: 1, 5: 1, 9: 1, 2: 1})\nAns = 0\nB = A.most_common()\nfor n, c in B:\n    Ans = max(Ans, B[n] + B[n - 1] + B[n + 1])\nprint(Ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'tuple' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 7",
                    "A = Counter({3: 1, 1: 2, 4: 1, 5: 1, 9: 1, 2: 1})",
                    "Ans = 0",
                    "B = A.most_common()"
                ],
                "2": [
                    "n <- index\n    c <- iterator"
                ],
                "3": [
                    "Ans = max(Ans,B[n]+B[n-1]+B[n+1])"
                ],
                "4": [
                    "print(Ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    A = Counter({3: 1, 1: 2, 4: 1, 5: 1, 9: 1, 2: 1})\n    Ans = 0\n    B = A.most_common()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    n <- index\n    c <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    Ans = max(Ans,B[n]+B[n-1]+B[n+1])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(Ans)\nNext:\n    <END>\n"
        },
        "s508674870": {
            "code": "n = 7\na = [3, 1, 4, 1, 5, 9, 2]\ncnt = [0] * 100000\na.sort()\nfor i in range(a):\n    cnt[i] += 1\n    cnt[i + 1] += 1\n    cnt[i + 2] += 2\nprint(max(cnt))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 7",
                    "a = [3, 1, 4, 1, 5, 9, 2]",
                    "cnt = [0] * 100000",
                    "a.sort()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(a)"
                ],
                "3": [
                    "cnt[i] += 1",
                    "cnt[i+1] += 1",
                    "cnt[i+2] += 2"
                ],
                "4": [
                    "print(max(cnt))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 7\n    a = [3, 1, 4, 1, 5, 9, 2]\n    cnt = [0] * 100000\n    a.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cnt[i] += 1\n    cnt[i+1] += 1\n    cnt[i+2] += 2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(cnt))\nNext:\n    <END>\n"
        }
    },
    "p03612": {
        "s382909269": {
            "code": "n = 5\na = [1, 4, 3, 5, 2]\ncount = 0\nfor i in range(n):\n    if a[i] is i + 1:\n        a[i], a[i + 1] = (a[i + 1], a[i])\n        count += 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                4,
                5,
                6,
                7,
                4,
                5,
                4,
                5,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "[4, 1, 3, 5, 2]"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "count": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "[4, 1, 3, 5, 2]"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "count": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "[4, 1, 5, 3, 2]"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "count": "2"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "[4, 1, 5, 3, 2]"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "count": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "[4, 1, 5, 3, 2]"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "count": "2"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [1, 4, 3, 5, 2]",
                    "count = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(a[i] is i + 1)"
                ],
                "4": [
                    "a[i], a[i + 1] = a[i + 1], a[i]",
                    "count += 1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [1, 4, 3, 5, 2]\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a[i] is i + 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a[i], a[i + 1] = a[i + 1], a[i]\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03624": {
        "s069575691": {
            "code": "s = ['u', 'n', 'c', 'a', 'l', 's', 'e', 't', 'o', 'd', 'g', 'r']\ns.sort()\ncomp = string.ascii_lowercase\nif len(s) == len(comp):\n    ans = 'None'\nelse:\n    for i, j in zip(s, string.ascii_lowercase):\n        if i != j:\n            ans = j\n            break\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                7,
                8,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = ['u', 'n', 'c', 'a', 'l', 's', 'e', 't', 'o', 'd', 'g', 'r']",
                    "s.sort()",
                    "comp = string.ascii_lowercase",
                    "(len(s) == len(comp))"
                ],
                "2": [
                    "ans = 'None'"
                ],
                "3": [
                    "i <- index\n    j <- iterator"
                ],
                "4": [
                    "(i != j)"
                ],
                "5": [
                    "ans = j"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['u', 'n', 'c', 'a', 'l', 's', 'e', 't', 'o', 'd', 'g', 'r']\n    s.sort()\n    comp = string.ascii_lowercase\n    (len(s) == len(comp))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = 'None'\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    i <- index\n    j <- iterator\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (i != j)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    ans = j\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s518004620": {
            "code": "alphabet = [chr(i) for i in range(97, 97 + 26)]\ns = {'g', 'a', 'd', 'c', 't', 'l', 'u', 's', 'r', 'e', 'n', 'o'}\nresult = set(alphabet) - s\nresult = sorted(list(result))\nprint(result[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "alphabet = [chr(i) for i in range(97, 97+26)]",
                    "s = {'g', 'a', 'd', 'c', 't', 'l', 'u', 's', 'r', 'e', 'n', 'o'}",
                    "result = set(alphabet) - s",
                    "result = sorted(list(result))",
                    "print(result[0])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    alphabet = [chr(i) for i in range(97, 97+26)]\n    s = {'g', 'a', 'd', 'c', 't', 'l', 'u', 's', 'r', 'e', 'n', 'o'}\n    result = set(alphabet) - s\n    result = sorted(list(result))\n    print(result[0])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s619870783": {
            "code": "n = 'atcoderregularcontest'\ns = string.ascii_lowercase - set(n)\nif len(s) == 0:\n    print('None')\nelse:\n    print(min(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'set'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 'atcoderregularcontest'",
                    "s = string.ascii_lowercase - set(n)",
                    "(len(s) == 0)"
                ],
                "2": [
                    "print('None')"
                ],
                "3": [
                    "print(min(s))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 'atcoderregularcontest'\n    s = string.ascii_lowercase - set(n)\n    (len(s) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('None')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(min(s))\nNext:\n    <END>\n"
        },
        "s029288813": {
            "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r', 'r', 'e', 'g', 'u', 'l', 'a', 'r', 'c', 'o', 'n', 't', 'e', 's', 't']\nfor i in range(0, 26):\n    if not chr(97 + i) in s:\n        print(chr + i)\n        sys.exit()\nprint('None')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'builtin_function_or_method' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['a', 't', 'c', 'o', 'd', 'e', 'r', 'r', 'e', 'g', 'u', 'l', 'a', 'r', 'c', 'o', 'n', 't', 'e', 's', 't']"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, 26)"
                ],
                "3": [
                    "(not chr(97 + i) in s)"
                ],
                "4": [
                    "print(chr+i)",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"None\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['a', 't', 'c', 'o', 'd', 'e', 'r', 'r', 'e', 'g', 'u', 'l', 'a', 'r', 'c', 'o', 'n', 't', 'e', 's', 't']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, 26)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (not chr(97 + i) in s)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(chr+i)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"None\")\nNext:\n    <END>\n"
        }
    },
    "p03625": {
        "s927730955": {
            "code": "N = 6\nL = [3, 1, 2, 4, 2, 1]\nc = collections.Counter(L)\nA = list(c.keys())\nB = list(c.values())\nR = list()\nfor i in range(len(A)):\n    if B[i] >= 2:\n        R.append([A[i], B[i]])\nR = sorted(R, reverse=True)\nif R[0][1] >= 4:\n    print(R[0][0] ** 2)\nelif len(R) < 2:\n    print(0)\nelse:\n    print(R[0][0] * R[1][0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                7,
                8,
                9,
                7,
                8,
                9,
                7,
                8,
                7,
                10,
                11,
                13,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "L = [3, 1, 2, 4, 2, 1]",
                    "c = collections.Counter(L)",
                    "A=list(c.keys())",
                    "B=list(c.values())",
                    "R=list()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(A))"
                ],
                "3": [
                    "(B[i] >= 2)"
                ],
                "4": [
                    "R.append([A[i],B[i]])"
                ],
                "5": [
                    "R=sorted(R,reverse=True)",
                    "(R[0][1] >= 4)"
                ],
                "6": [
                    "print(R[0][0]**2)"
                ],
                "7": [
                    "(len(R) < 2)"
                ],
                "8": [
                    "print(0)"
                ],
                "9": [
                    "print(R[0][0]*R[1][0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    L = [3, 1, 2, 4, 2, 1]\n    c = collections.Counter(L)\n    A=list(c.keys())\n    B=list(c.values())\n    R=list()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(A))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (B[i] >= 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    R.append([A[i],B[i]])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    R=sorted(R,reverse=True)\n    (R[0][1] >= 4)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(R[0][0]**2)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (len(R) < 2)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(R[0][0]*R[1][0])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s022896267": {
            "code": "N = 6\nA = [3, 1, 2, 4, 2, 1]\ncount = Counter(A)\nsides = [k for k, v in count.items() if v >= 2]\nsides.sort(reverse=True)\nprint(sides[0] * sides[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "A = [3, 1, 2, 4, 2, 1]",
                    "count = Counter(A)",
                    "sides = [k for k, v in count.items() if v >= 2]",
                    "sides.sort(reverse = True)",
                    "print(sides[0] * sides[1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    A = [3, 1, 2, 4, 2, 1]\n    count = Counter(A)\n    sides = [k for k, v in count.items() if v >= 2]\n    sides.sort(reverse = True)\n    print(sides[0] * sides[1])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s412173171": {
            "code": "N = 6\nc = []\na = [3, 1, 2, 4, 2, 1]\ns = sorted(set(a), reverse=True)\nfor i, cnt in Counter(a).items:\n    if cnt >= 2 and i > w:\n        if i > h:\n            if cnt >= 4:\n                h = i\n                w = i\n            else:\n                w = h\n                h = i\n        else:\n            w = i\nprint(w * h)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "c=[]",
                    "a = [3, 1, 2, 4, 2, 1]",
                    "s=sorted(set(a), reverse=True)"
                ],
                "2": [
                    "i <- index\n    cnt <- iterator"
                ],
                "3": [
                    "(cnt >= 2 and i > w)"
                ],
                "4": [
                    "(i > h)"
                ],
                "5": [
                    "(cnt >= 4)"
                ],
                "6": [
                    "h = i",
                    "w = i"
                ],
                "7": [
                    "w = h",
                    "h = i"
                ],
                "8": [
                    "w = i"
                ],
                "9": [
                    "print(w * h)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    c=[]\n    a = [3, 1, 2, 4, 2, 1]\n    s=sorted(set(a), reverse=True)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    cnt <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (cnt >= 2 and i > w)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (i > h)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (cnt >= 4)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    h = i\n    w = i\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    w = h\n    h = i\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    w = i\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(w * h)\nNext:\n    <END>\n"
        },
        "s670034169": {
            "code": "n = 6\na = [3, 1, 2, 4, 2, 1]\nb = list(Counter(a).values())\nlst = []\nfor i in range(len(b)):\n    if b[i] > 1:\n        lst.append(int(Counter(a).keys()[i]))\nlst.sort(reverse=True)\nif len(lst) < 2:\n    print(0)\nelse:\n    print(lst[0] * lst[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_keys' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "a = [3, 1, 2, 4, 2, 1]",
                    "b=list(Counter(a).values())",
                    "lst=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(b))"
                ],
                "3": [
                    "(b[i] > 1)"
                ],
                "4": [
                    "lst.append(int(Counter(a).keys()[i]))"
                ],
                "5": [
                    "lst.sort(reverse=True)",
                    "(len(lst) < 2)"
                ],
                "6": [
                    "print(0)"
                ],
                "7": [
                    "print(lst[0]*lst[1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [3, 1, 2, 4, 2, 1]\n    b=list(Counter(a).values())\n    lst=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(b))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (b[i] > 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    lst.append(int(Counter(a).keys()[i]))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    lst.sort(reverse=True)\n    (len(lst) < 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(lst[0]*lst[1])\nNext:\n    <END>\n"
        },
        "s622955904": {
            "code": "n = 6\na = [3, 1, 2, 4, 2, 1]\nb = list(Counter(a).values())\nlst = []\nfor i in range(len(b)):\n    if b[i] > 1:\n        c = Counter(a).keys()\n        lst.append(int(c[i]))\nLst = list(set(lst.sort(reverse=True)))\nif len(Lst) < 2:\n    print(0)\nelse:\n    print(Lst[0] * Lst[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_keys' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "a = [3, 1, 2, 4, 2, 1]",
                    "b=list(Counter(a).values())",
                    "lst=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(b))"
                ],
                "3": [
                    "(b[i] > 1)"
                ],
                "4": [
                    "c=Counter(a).keys()",
                    "lst.append(int(c[i]))"
                ],
                "5": [
                    "Lst=list(set(lst.sort(reverse=True)))",
                    "(len(Lst) < 2)"
                ],
                "6": [
                    "print(0)"
                ],
                "7": [
                    "print(Lst[0]*Lst[1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [3, 1, 2, 4, 2, 1]\n    b=list(Counter(a).values())\n    lst=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(b))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (b[i] > 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    c=Counter(a).keys()\n    lst.append(int(c[i]))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    Lst=list(set(lst.sort(reverse=True)))\n    (len(Lst) < 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(Lst[0]*Lst[1])\nNext:\n    <END>\n"
        },
        "s382313958": {
            "code": "input = sys.stdin.readline\nn = 6\nA = [3, 1, 2, 4, 2, 1]\na = reversed(list(set(A)))\nB = []\nfor k in range(len(a)):\n    i = a[k]\n    if A.count(i) >= 4:\n        if len(B) == 0:\n            print(i ** 2)\n            exit()\n        else:\n            B.append(i)\n            if len(B) >= 2:\n                print(B[0] * B[1])\n                exit()\n    if A.count(i) >= 2:\n        B.append(i)\n        if len(B) >= 2:\n            print(B[0] * B[1])\n            exit()\nif len(B) <= 1:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        15
                    ]
                },
                "8": {
                    "range": [
                        16,
                        16
                    ]
                },
                "9": {
                    "range": [
                        17,
                        18
                    ]
                },
                "10": {
                    "range": [
                        19,
                        20
                    ]
                },
                "11": {
                    "range": [
                        21,
                        21
                    ]
                },
                "12": {
                    "range": [
                        22,
                        22
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "<list_reverseiterator object at 0x7f10d8f31540>"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f10d9493510>"
                        },
                        {
                            "A": "[3, 1, 2, 4, 2, 1]"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "B": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "<list_reverseiterator object at 0x7f10d8f31540>"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f10d9493510>"
                        },
                        {
                            "A": "[3, 1, 2, 4, 2, 1]"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "B": "[]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'list_reverseiterator' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "n = 6",
                    "A = [3, 1, 2, 4, 2, 1]",
                    "a = reversed(list(set(A)))",
                    "B = []"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(len(a))"
                ],
                "3": [
                    "i = a[k]",
                    "(A.count(i) >= 4)"
                ],
                "4": [
                    "(len(B) == 0)"
                ],
                "5": [
                    "print(i**2)",
                    "exit()"
                ],
                "6": [
                    "B.append(i)",
                    "(len(B) >= 2)"
                ],
                "7": [
                    "print(B[0]*B[1])",
                    "exit()"
                ],
                "8": [
                    "(A.count(i) >= 2)"
                ],
                "9": [
                    "B.append(i)",
                    "(len(B) >= 2)"
                ],
                "10": [
                    "print(B[0]*B[1])",
                    "exit()"
                ],
                "11": [
                    "(len(B) <= 1)"
                ],
                "12": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 11
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 8
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 2
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    n = 6\n    A = [3, 1, 2, 4, 2, 1]\n    a = reversed(list(set(A)))\n    B = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(len(a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    i = a[k]\n    (A.count(i) >= 4)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 8\n\nBlock 4:\nStatement:\n    (len(B) == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(i**2)\n    exit()\nNext:\n    Go to Block: 8\n\nBlock 6:\nStatement:\n    B.append(i)\n    (len(B) >= 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(B[0]*B[1])\n    exit()\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    (A.count(i) >= 2)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 2\n\nBlock 9:\nStatement:\n    B.append(i)\n    (len(B) >= 2)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 2\n\nBlock 10:\nStatement:\n    print(B[0]*B[1])\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (len(B) <= 1)\nNext:\n    If True: Go to Block 12\n    <END>\nBlock 12:\nStatement:\n    print(0)\nNext:\n    <END>\n"
        }
    },
    "p03633": {
        "s048098265": {
            "code": "N = 2\nT = [2, 3]\nans = 1\nfor i in range(N):\n    ans = ans * T[i] // math.gcd(ans, T[i])\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "T = [2, 3]",
                    "ans = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "ans = ans * T[i] // math.gcd(ans, T[i])"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    T = [2, 3]\n    ans = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = ans * T[i] // math.gcd(ans, T[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s584284723": {
            "code": "N = 2\nT = [2, 3]\na = 1\nfor i in T[:-1]:\n    a *= i\nprint(a * T[-1] // math.gcd(a, T[-1]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "T = [2, 3]",
                    "a = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> T[:-1]"
                ],
                "3": [
                    "print((a * T[-1]) // math.gcd(a, T[-1]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    T = [2, 3]\n    a = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> T[:-1]\nNext:\n    Go to Block: 2\n\nBlock 3:\nStatement:\n    print((a * T[-1]) // math.gcd(a, T[-1]))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s524248864": {
            "code": "n = 2\nt = [2, 3]\nx = reduce(gcd, t)\nlcm = t[0] * t[1] // x\nfor i in range(2, n):\n    lcm = lcm * t[i] // gcd(lcm, t[i])\nprint(lcm)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "t = [2, 3]",
                    "x=reduce(gcd,t)",
                    "lcm=t[0]*t[1]//x"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(2, n)"
                ],
                "3": [
                    "lcm=lcm*t[i]//gcd(lcm,t[i])"
                ],
                "4": [
                    "print(lcm)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    t = [2, 3]\n    x=reduce(gcd,t)\n    lcm=t[0]*t[1]//x\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    lcm=lcm*t[i]//gcd(lcm,t[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(lcm)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s511736864": {
            "code": "N = 2\nT = [2, 3]\nLCM = 1\nfor i in range(N):\n    lcm = T[i] * LCM // math.gcd(T[i], LCM)\n    LCM = lcm\nprint(LCM)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "T = [2, 3]",
                    "LCM = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "lcm = (T[i] * LCM) // (math.gcd(T[i], LCM))",
                    "LCM = lcm"
                ],
                "4": [
                    "print(LCM)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    T = [2, 3]\n    LCM = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    lcm = (T[i] * LCM) // (math.gcd(T[i], LCM))\n    LCM = lcm\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(LCM)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s470791028": {
            "code": "N = 2\nA = [2, 3]\nans = A[0]\nfor x in A[1:]:\n    ans = ans * x // math.gcd(ans, x)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "A = [2, 3]",
                    "ans = A[0]"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> A[1:]"
                ],
                "3": [
                    "ans = ans * x // math.gcd(ans, x)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    A = [2, 3]\n    ans = A[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> A[1:]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans = ans * x // math.gcd(ans, x)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s810655553": {
            "code": "N = 2\nT = [2, 3]\nans = T[0]\nfor i in range(N):\n    ans = ans * T[i] // math.gcd(ans, T[i])\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "T = [2, 3]",
                    "ans=T[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "ans=ans*T[i]//(math.gcd(ans,T[i]))"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    T = [2, 3]\n    ans=T[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans=ans*T[i]//(math.gcd(ans,T[i]))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03644": {
        "s471734391": {
            "code": "N = 7\na = [1, 2, 4, 8, 16, 32, 64]\nb = []\nfor i in range(len(a)):\n    if a[i] <= N:\n        b.append(a[i])\nprint(max(b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 7",
                    "a = [1, 2, 4, 8, 16, 32, 64]",
                    "b = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(a))"
                ],
                "3": [
                    "(a[i] <= N)"
                ],
                "4": [
                    "b.append(a[i])"
                ],
                "5": [
                    "print(max(b))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    a = [1, 2, 4, 8, 16, 32, 64]\n    b = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a[i] <= N)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    b.append(a[i])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(max(b))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03646": {
        "s518227304": {
            "code": "input = sys.stdin.readline\nN = 0\nif N > 1:\n    print(N)\n    res = [N] * N\n    print(*res)\nelif N == 0:\n    print(2)\n    print(1, 1)\nelif N == 1:\n    print(2)\n    print(2, 0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "N = 0",
                    "(N > 1)"
                ],
                "2": [
                    "print(N)",
                    "res = [N] * N",
                    "print(*res)"
                ],
                "3": [
                    "(N == 0)"
                ],
                "4": [
                    "print(2)",
                    "print(1, 1)"
                ],
                "5": [
                    "(N == 1)"
                ],
                "6": [
                    "print(2)",
                    "print(2, 0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    N = 0\n    (N > 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N)\n    res = [N] * N\n    print(*res)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (N == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(2)\n    print(1, 1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (N == 1)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(2)\n    print(2, 0)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s777684234": {
            "code": "k = 0\noffset = math.ceil(k / 50)\nnums = [i + offset for i in range(50)]\nfor i in range(k % 50):\n    nums[-i] -= 50\nprint(50)\nprint(' '.join(nums))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "nums": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
                        },
                        {
                            "offset": "0"
                        },
                        {
                            "k": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "nums": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
                        },
                        {
                            "offset": "0"
                        },
                        {
                            "k": "0"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "nums": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
                        },
                        {
                            "offset": "0"
                        },
                        {
                            "k": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "k = 0",
                    "offset = math.ceil(k/50)",
                    "nums = [i+offset for i in range(50)]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(k % 50)"
                ],
                "3": [
                    "nums[-i] -= 50"
                ],
                "4": [
                    "print(50)",
                    "print(\" \".join(nums))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = 0\n    offset = math.ceil(k/50)\n    nums = [i+offset for i in range(50)]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(k % 50)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    nums[-i] -= 50\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(50)\n    print(\" \".join(nums))\nNext:\n    <END>\n"
        },
        "s449040163": {
            "code": "k = 0\noffset = math.ceil(k / 50)\nnums = [i + offset for i in range(50)]\nfor i in range(k % 50):\n    nums[-i] -= 50\nprint(50)\nprint(' '.join(list(map(int, nums))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "nums": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
                        },
                        {
                            "offset": "0"
                        },
                        {
                            "k": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "nums": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
                        },
                        {
                            "offset": "0"
                        },
                        {
                            "k": "0"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "nums": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
                        },
                        {
                            "offset": "0"
                        },
                        {
                            "k": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "k = 0",
                    "offset = math.ceil(k/50)",
                    "nums = [i+offset for i in range(50)]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(k % 50)"
                ],
                "3": [
                    "nums[-i] -= 50"
                ],
                "4": [
                    "print(50)",
                    "print(\" \".join(list(map(int,nums))))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = 0\n    offset = math.ceil(k/50)\n    nums = [i+offset for i in range(50)]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(k % 50)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    nums[-i] -= 50\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(50)\n    print(\" \".join(list(map(int,nums))))\nNext:\n    <END>\n"
        }
    },
    "p03659": {
        "s875155774": {
            "code": "N = 6\na = [1, 2, 3, 4, 5, 6]\nvalue = []\nfor i in range(2, N):\n    x = sum(a[0:i])\n    y = sum(a[i:N])\n    value.append(abs(x - y))\nprint(min(value))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "a = [1, 2, 3, 4, 5, 6]",
                    "value = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(2, N)"
                ],
                "3": [
                    "x = sum(a[0:i])",
                    "y = sum(a[i:N])",
                    "value.append(abs(x-y))"
                ],
                "4": [
                    "print(min(value))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    a = [1, 2, 3, 4, 5, 6]\n    value = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x = sum(a[0:i])\n    y = sum(a[i:N])\n    value.append(abs(x-y))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(value))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s962111941": {
            "code": "N = 6\nA = [1, 2, 3, 4, 5, 6]\nsumA = np.cumsum(A)\nans = float('inf')\nfor i in range(0, N - 1):\n    x = sumA[i]\n    y = sumA[-1] - x\n    ans = min(abs(x - y), ans)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                5,
                6,
                7,
                8,
                5,
                6,
                7,
                8,
                5,
                6,
                7,
                8,
                5,
                6,
                7,
                8,
                5,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "inf"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "inf"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e090>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f8734404e70>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e090>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f8734404e70>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277e090>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e030>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f873277e0f0>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277e090>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e030>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f873277e0f0>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277e0f0>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f8734404e70>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277e0f0>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f8734404e70>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e030>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f873277e090>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e030>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f873277e090>"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e0f0>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f8734404e70>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e0f0>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f8734404e70>"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "ans": "<numpy.int64 object at 0x7f873277d550>"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "A": "[1, 2, 3, 4, 5, 6]"
                        },
                        {
                            "sumA": "<numpy.ndarray object at 0x7f8734480570>"
                        },
                        {
                            "y": "<numpy.int64 object at 0x7f873277e0f0>"
                        },
                        {
                            "x": "<numpy.int64 object at 0x7f8734404e70>"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "A = [1, 2, 3, 4, 5, 6]",
                    "sumA = np.cumsum(A)",
                    "ans = float('inf')"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, N - 1)"
                ],
                "3": [
                    "x = sumA[i]",
                    "y = sumA[-1] - x",
                    "ans = min(abs(x-y), ans)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    A = [1, 2, 3, 4, 5, 6]\n    sumA = np.cumsum(A)\n    ans = float('inf')\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x = sumA[i]\n    y = sumA[-1] - x\n    ans = min(abs(x-y), ans)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03673": {
        "s258942694": {
            "code": "N = 4\nA = [1, 2, 3, 4]\nANS = deque()\nfor i in range(N):\n    if i % 2 == 0:\n        ANS.append(A[i])\n    else:\n        ANS.appendleft(A[i])\nif N % 2 == 1:\n    ANS = ANS[::-1]\nprint(''.join(map(str, ANS)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                9,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [1, 2, 3, 4]",
                    "ANS = deque()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(i % 2 == 0)"
                ],
                "4": [
                    "ANS.append(A[i])"
                ],
                "5": [
                    "ANS.appendleft(A[i])"
                ],
                "6": [
                    "(N % 2 == 1)"
                ],
                "7": [
                    "ANS = ANS[::-1]"
                ],
                "8": [
                    "print(\"\".join(map(str,ANS)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [1, 2, 3, 4]\n    ANS = deque()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ANS.append(A[i])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ANS.appendleft(A[i])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (N % 2 == 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    ANS = ANS[::-1]\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    print(\"\".join(map(str,ANS)))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s178131175": {
            "code": "n = 4\na = deque([1, 2, 3, 4])\nb = deque()\nfor i in range(n):\n    if i % 2 == 0:\n        b.append(a.popleft())\n    else:\n        b.appendleft(a.popleft())\nif n % 2 == 0:\n    print(*b)\nelse:\n    print(*b[::-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = deque([1, 2, 3, 4])",
                    "b=deque()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i % 2 == 0)"
                ],
                "4": [
                    "b.append(a.popleft())"
                ],
                "5": [
                    "b.appendleft(a.popleft())"
                ],
                "6": [
                    "(n % 2 == 0)"
                ],
                "7": [
                    "print(*b)"
                ],
                "8": [
                    "print(*b[::-1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = deque([1, 2, 3, 4])\n    b=deque()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b.append(a.popleft())\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    b.appendleft(a.popleft())\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(*b)\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(*b[::-1])\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s804090386": {
            "code": "n = 4\na = [1, 2, 3, 4]\ns = deque([])\nfor i in range(n):\n    if i % 2 == 1:\n        s.insert(0, a[i])\n    else:\n        s.append(a[i])\nprint(*s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                5,
                8,
                4,
                5,
                6,
                4,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [1, 2, 3, 4]",
                    "s = deque([])"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i % 2 == 1)"
                ],
                "4": [
                    "s.insert(0, a[i])"
                ],
                "5": [
                    "s.append(a[i])"
                ],
                "6": [
                    "print(*s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [1, 2, 3, 4]\n    s = deque([])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s.insert(0, a[i])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    s.append(a[i])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(*s)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s922521295": {
            "code": "n = 4\na = [1, 2, 3, 4]\norder = n % 2\nans = deque([])\nfor i in range(n):\n    if i % 2 == order:\n        ans.append(a[i])\n    else:\n        ans.appendleft(a[i])\nprint(' '.join(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                9,
                5,
                6,
                7,
                5,
                6,
                9,
                5,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [1, 2, 3, 4]",
                    "order = n%2",
                    "ans = deque([])"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i % 2 == order)"
                ],
                "4": [
                    "ans.append(a[i])"
                ],
                "5": [
                    "ans.appendleft(a[i])"
                ],
                "6": [
                    "print(' '.join(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [1, 2, 3, 4]\n    order = n%2\n    ans = deque([])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == order)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans.append(a[i])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans.appendleft(a[i])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(' '.join(ans))\nNext:\n    <END>\n"
        },
        "s631911612": {
            "code": "n = 4\na = [1, 2, 3, 4]\norder = n % 2\nans = deque([])\nfor i in range(n):\n    if i & 1 == order:\n        ans.append(a[i])\n    else:\n        ans.appendleft(a[i])\nprint(' '.join(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                5,
                6,
                9,
                5,
                6,
                7,
                5,
                6,
                9,
                5,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [1, 2, 3, 4]",
                    "order = n%2",
                    "ans = deque([])"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i & 1 == order)"
                ],
                "4": [
                    "ans.append(a[i])"
                ],
                "5": [
                    "ans.appendleft(a[i])"
                ],
                "6": [
                    "print(' '.join(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [1, 2, 3, 4]\n    order = n%2\n    ans = deque([])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i & 1 == order)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans.append(a[i])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans.appendleft(a[i])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(' '.join(ans))\nNext:\n    <END>\n"
        }
    },
    "p03681": {
        "s613947859": {
            "code": "a = [2, 2]\nans = 0\nif max(a) - min(a) >= 2:\n    print(0)\nelse:\n    if a[0] == a[1]:\n        ans = math.factorial(max(a))\n        ans = ans % 1000000007 * (ans % 1000000007) * 2\n    else:\n        ans = math.factorial(max(a))\n        ans = ans % 1000000007 * (ans / max(a) % 1000000007)\n    print(int(ans % 1000000007))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7,
                8,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "a = [2, 2]",
                    "ans=0",
                    "(max(a) - min(a) >= 2)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "(a[0] == a[1])"
                ],
                "4": [
                    "ans=math.factorial(max(a))",
                    "ans=(ans%1000000007)*(ans%1000000007)*2"
                ],
                "5": [
                    "ans=math.factorial(max(a))",
                    "ans=(ans%1000000007)*((ans/max(a))%1000000007)"
                ],
                "6": [
                    "print(int(ans%1000000007 ))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [2, 2]\n    ans=0\n    (max(a) - min(a) >= 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (a[0] == a[1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans=math.factorial(max(a))\n    ans=(ans%1000000007)*(ans%1000000007)*2\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    ans=math.factorial(max(a))\n    ans=(ans%1000000007)*((ans/max(a))%1000000007)\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(int(ans%1000000007 ))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03687": {
        "s846543027": {
            "code": "l = ['s', 'e', 'r', 'v', 'a', 'l']\nmode = statistics.mode(l)\nmode = l.count(mode)\ncheck = 0\nfor i in range(len(l)):\n    if mode * 2 ** i >= len(l) - i:\n        ans = i\n        break\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "check": "0"
                        },
                        {
                            "l": "['s', 'e', 'r', 'v', 'a', 'l']"
                        },
                        {
                            "mode": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "check": "0"
                        },
                        {
                            "l": "['s', 'e', 'r', 'v', 'a', 'l']"
                        },
                        {
                            "mode": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "check": "0"
                        },
                        {
                            "l": "['s', 'e', 'r', 'v', 'a', 'l']"
                        },
                        {
                            "mode": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "check": "0"
                        },
                        {
                            "l": "['s', 'e', 'r', 'v', 'a', 'l']"
                        },
                        {
                            "mode": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "l = ['s', 'e', 'r', 'v', 'a', 'l']",
                    "mode = statistics.mode(l)",
                    "mode = l.count(mode)",
                    "check = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(l))"
                ],
                "3": [
                    "(mode * 2 ** i >= len(l) - i)"
                ],
                "4": [
                    "ans = i"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    l = ['s', 'e', 'r', 'v', 'a', 'l']\n    mode = statistics.mode(l)\n    mode = l.count(mode)\n    check = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(l))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (mode * 2 ** i >= len(l) - i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans = i\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03695": {
        "s586253864": {
            "code": "n = 4\na = [2100, 2500, 2700, 2700]\nw = np.zeros(9, dtype=int)\ncount = 0\nfor i in range(n):\n    if a[i] < 3200 and w[a[i] // 400] == 0:\n        count += 1\n    w[a[i] // 400] += 1\nif count == 0 and w[8] <= 8:\n    print(1, w[8])\nelif count == 0:\n    print(1, 8)\nelif w[7] == 0:\n    print(count, count)\nelif count + w[8] <= 8:\n    print(count, count + w[8])\nelse:\n    print(count, count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        13
                    ]
                },
                "11": {
                    "range": [
                        14,
                        14
                    ]
                },
                "12": {
                    "range": [
                        15,
                        15
                    ]
                },
                "13": {
                    "range": [
                        16,
                        16
                    ]
                },
                "14": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                5,
                6,
                7,
                8,
                5,
                6,
                8,
                5,
                6,
                8,
                5,
                9,
                11,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = [2100, 2500, 2700, 2700]",
                    "w = np.zeros(9,dtype=int)",
                    "count = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(a[i] < 3200 and w[a[i] // 400] == 0)"
                ],
                "4": [
                    "count+=1"
                ],
                "5": [
                    "w[a[i]//400]+=1"
                ],
                "6": [
                    "(count == 0 and w[8] <= 8)"
                ],
                "7": [
                    "print(1,w[8])"
                ],
                "8": [
                    "(count == 0)"
                ],
                "9": [
                    "print(1,8)"
                ],
                "10": [
                    "(w[7] == 0)"
                ],
                "11": [
                    "print(count,count)"
                ],
                "12": [
                    "(count + w[8] <= 8)"
                ],
                "13": [
                    "print(count,count+w[8])"
                ],
                "14": [
                    "print(count,count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = [2100, 2500, 2700, 2700]\n    w = np.zeros(9,dtype=int)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (a[i] < 3200 and w[a[i] // 400] == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count+=1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    w[a[i]//400]+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (count == 0 and w[8] <= 8)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(1,w[8])\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    (count == 0)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    print(1,8)\nNext:\n    <END>\n\nBlock 10:\nStatement:\n    (w[7] == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    print(count,count)\nNext:\n    <END>\n\nBlock 12:\nStatement:\n    (count + w[8] <= 8)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(count,count+w[8])\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print(count,count)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s477835536": {
            "code": "N = 4\nA = [2100, 2500, 2700, 2700]\nA.sort()\nrank = [0, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 3200, 3200, 3200, 3200, 3200]\nn_rank = []\nfor i in range(1, len(rank)):\n    var = bisect.bisect_left(A, rank[i]) - bisect.bisect_left(A, rank[i - 1])\n    n_rank.append(var)\nelse:\n    n_rank.append(len(A) - bisect.bisect_left(A, rank[-1]))\nn_color = sum((n_rank[i] != 0 for i in range(len(n_rank) - 1)))\nmin_color = max(n_color, 1)\nmax_color = min(n_color + n_rank[-1])\nprint(str(min_color) + ' ' + str(max_color))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                10,
                11,
                12,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [2100, 2500, 2700, 2700]",
                    "A.sort()",
                    "rank = [0, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 3200, 3200, 3200, 3200, 3200]",
                    "n_rank = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, len(rank))"
                ],
                "3": [
                    "var = bisect.bisect_left(A, rank[i]) - bisect.bisect_left(A, rank[i-1])",
                    "n_rank.append(var)"
                ],
                "4": [
                    "n_rank.append(len(A) - bisect.bisect_left(A, rank[-1]))",
                    "n_color = sum(n_rank[i] != 0 for i in range(len(n_rank)-1))",
                    "min_color = max(n_color, 1)",
                    "max_color = min(n_color + n_rank[-1])",
                    "print(str(min_color) +' '+ str(max_color))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2100, 2500, 2700, 2700]\n    A.sort()\n    rank = [0, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 3200, 3200, 3200, 3200, 3200]\n    n_rank = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, len(rank))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    var = bisect.bisect_left(A, rank[i]) - bisect.bisect_left(A, rank[i-1])\n    n_rank.append(var)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    n_rank.append(len(A) - bisect.bisect_left(A, rank[-1]))\n    n_color = sum(n_rank[i] != 0 for i in range(len(n_rank)-1))\n    min_color = max(n_color, 1)\n    max_color = min(n_color + n_rank[-1])\n    print(str(min_color) +' '+ str(max_color))\nNext:\n    <END>\n"
        },
        "s839998602": {
            "code": "N = 4\nA = [2100, 2500, 2700, 2700]\nA.sort()\nrank = [0, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 3200, 3200, 3200, 3200, 3200]\nn_rank = []\nfor i in range(1, len(rank)):\n    var = bisect.bisect_left(A, rank[i]) - bisect.bisect_left(A, rank[i - 1])\n    n_rank.append(var)\nelse:\n    n_rank.append(len(A) - bisect.bisect_left(A, rank[-1]))\nn_color = sum((n_rank[i] != 0 for i in range(len(n_rank) - 1)))\nmin_color = max(n_color, 1)\nmax_color = min(n_color + n_rank[-1])\nprint(str(min_color) + ' ' + str(max_color))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                7,
                8,
                6,
                10,
                11,
                12,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [2100, 2500, 2700, 2700]",
                    "A.sort()",
                    "rank = [0, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 3200, 3200, 3200, 3200, 3200]",
                    "n_rank = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, len(rank))"
                ],
                "3": [
                    "var = bisect.bisect_left(A, rank[i]) - bisect.bisect_left(A, rank[i-1])",
                    "n_rank.append(var)"
                ],
                "4": [
                    "n_rank.append(len(A) - bisect.bisect_left(A, rank[-1]))",
                    "n_color = sum(n_rank[i] != 0 for i in range(len(n_rank)-1))",
                    "min_color = max(n_color, 1)",
                    "max_color = min(n_color + n_rank[-1])",
                    "print(str(min_color) +' '+ str(max_color))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2100, 2500, 2700, 2700]\n    A.sort()\n    rank = [0, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 3200, 3200, 3200, 3200, 3200]\n    n_rank = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, len(rank))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    var = bisect.bisect_left(A, rank[i]) - bisect.bisect_left(A, rank[i-1])\n    n_rank.append(var)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    n_rank.append(len(A) - bisect.bisect_left(A, rank[-1]))\n    n_color = sum(n_rank[i] != 0 for i in range(len(n_rank)-1))\n    min_color = max(n_color, 1)\n    max_color = min(n_color + n_rank[-1])\n    print(str(min_color) +' '+ str(max_color))\nNext:\n    <END>\n"
        }
    },
    "p03696": {
        "s491070526": {
            "code": "N = 3\nS = '())'\nans = deque(S)\nind = 0\nfor _ in range(N - 1):\n    if S[ind] == '(' and S[ind + 1] == ')':\n        ind += 2\n        continue\n    elif S[ind] == ')':\n        ans.appendleft('(')\n    elif S[ind] == '(':\n        ans.append(')')\n    ind += 1\nprint(''.join(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                5,
                6,
                9,
                10,
                13,
                5,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "S = '())'",
                    "ans = deque(S)",
                    "ind = 0"
                ],
                "2": [
                    "iterator -> _, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "(S[ind] == '(' and S[ind + 1] == ')')"
                ],
                "4": [
                    "ind += 2"
                ],
                "5": [
                    "(S[ind] == ')')"
                ],
                "6": [
                    "ans.appendleft(\"(\")"
                ],
                "7": [
                    "(S[ind] == '(')"
                ],
                "8": [
                    "ans.append(\")\")"
                ],
                "9": [
                    "ind += 1"
                ],
                "10": [
                    "print(\"\".join(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    S = '())'\n    ans = deque(S)\n    ind = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> _, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    (S[ind] == '(' and S[ind + 1] == ')')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ind += 2\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (S[ind] == ')')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans.appendleft(\"(\")\nNext:\n    Go to Block: 9\n\nBlock 7:\nStatement:\n    (S[ind] == '(')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ans.append(\")\")\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    ind += 1\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(\"\".join(ans))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03705": {
        "s496800068": {
            "code": "N = ['4', '4', '6']\nN[0] = int(N[0])\nN[1] = int(N[1])\nN[2] = int(N[2])\nif N[0] == 1:\n    print('0')\n    sys.exit(1)\nif N[1] > N[2]:\n    print('0')\n    sys.exit(1)\nprint(N[2] * (N[0] - 1) + N[1] - (N[1] * (N[0] - 1) + N[2]) + 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = ['4', '4', '6']",
                    "N[0] = int(N[0])",
                    "N[1] = int(N[1])",
                    "N[2] = int(N[2])",
                    "(N[0] == 1)"
                ],
                "2": [
                    "print(\"0\")",
                    "sys.exit(1)"
                ],
                "3": [
                    "(N[1] > N[2])"
                ],
                "4": [
                    "print(\"0\")",
                    "sys.exit(1)"
                ],
                "5": [
                    "print((N[2] * (N[0] -1) + N[1]) - (N[1] * (N[0] - 1) + N[2]) + 1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = ['4', '4', '6']\n    N[0] = int(N[0])\n    N[1] = int(N[1])\n    N[2] = int(N[2])\n    (N[0] == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"0\")\n    sys.exit(1)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (N[1] > N[2])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"0\")\n    sys.exit(1)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print((N[2] * (N[0] -1) + N[1]) - (N[1] * (N[0] - 1) + N[2]) + 1)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03730": {
        "s464605511": {
            "code": "C = 1\nprint(['NO', 'YES'][C % math.gcd(*S) == 0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "C = 1",
                    "print([\"NO\", \"YES\"][C % math.gcd(*S) == 0])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    C = 1\n    print([\"NO\", \"YES\"][C % math.gcd(*S) == 0])\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03738": {
        "s403049418": {
            "code": "input = sys.stdin.readline\nAstr = '36\\n'\nBstr = '24'\nif len(Astr) > len(Bstr):\n    print('GREATER')\nelif len(Astr) < len(Bstr):\n    print('LESS')\nelse:\n    ise = True\n    for i in range(len(Astr)):\n        if int(Astr[i]) > int(Bstr[i]):\n            ise = False\n            print('GREATER')\n            break\n        elif int(Astr[i]) < int(Bstr[i]):\n            ise = False\n            print('LESS')\n            break\n    if ise:\n        print('EQUAL')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                },
                "10": {
                    "range": [
                        14,
                        15
                    ]
                },
                "11": {
                    "range": [
                        16,
                        16
                    ]
                },
                "12": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "Astr = '36\\n'",
                    "Bstr = '24'",
                    "(len(Astr) > len(Bstr))"
                ],
                "2": [
                    "print(\"GREATER\")"
                ],
                "3": [
                    "(len(Astr) < len(Bstr))"
                ],
                "4": [
                    "print(\"LESS\")"
                ],
                "5": [
                    "ise = True"
                ],
                "6": [
                    "iterator -> i, Iterate Over -> range(len(Astr))"
                ],
                "7": [
                    "(int(Astr[i]) > int(Bstr[i]))"
                ],
                "8": [
                    "ise = False",
                    "print(\"GREATER\")"
                ],
                "9": [
                    "(int(Astr[i]) < int(Bstr[i]))"
                ],
                "10": [
                    "ise = False",
                    "print(\"LESS\")"
                ],
                "11": [
                    "(ise)"
                ],
                "12": [
                    "print(\"EQUAL\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 11
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 6
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    Astr = '36\\n'\n    Bstr = '24'\n    (len(Astr) > len(Bstr))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"GREATER\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (len(Astr) < len(Bstr))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"LESS\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    ise = True\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    iterator -> i, Iterate Over -> range(len(Astr))\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 11\n\nBlock 7:\nStatement:\n    (int(Astr[i]) > int(Bstr[i]))\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    ise = False\n    print(\"GREATER\")\nNext:\n    Go to Block: 11\n\nBlock 9:\nStatement:\n    (int(Astr[i]) < int(Bstr[i]))\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 6\n\nBlock 10:\nStatement:\n    ise = False\n    print(\"LESS\")\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (ise)\nNext:\n    If True: Go to Block 12\n    <END>\nBlock 12:\nStatement:\n    print(\"EQUAL\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s360705775": {
            "code": "A = 36\nB = 24\nif len(str(A)) > len(str(B)):\n    print('GREATER')\n    sys.exit()\nelif len(str(A)) < len(str(B)):\n    print('LESS')\n    sys.exit()\nelse:\n    for a, b in zip(A, B):\n        if a > b:\n            print('GREATER')\n            sys.exit()\n        elif a < b:\n            print('LESS')\n            sys.exit()\nprint('EQUAL')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "B": "24"
                        },
                        {
                            "A": "36"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "B": "24"
                        },
                        {
                            "A": "36"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "B": "24"
                        },
                        {
                            "A": "36"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "A = 36",
                    "B = 24",
                    "(len(str(A)) > len(str(B)))"
                ],
                "2": [
                    "print('GREATER')",
                    "sys.exit()"
                ],
                "3": [
                    "(len(str(A)) < len(str(B)))"
                ],
                "4": [
                    "print('LESS')",
                    "sys.exit()"
                ],
                "5": [
                    "a <- index\n    b <- iterator"
                ],
                "6": [
                    "(a > b)"
                ],
                "7": [
                    "print('GREATER')",
                    "sys.exit()"
                ],
                "8": [
                    "(a < b)"
                ],
                "9": [
                    "print('LESS')",
                    "sys.exit()"
                ],
                "10": [
                    "print('EQUAL')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 10
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 5
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    A = 36\n    B = 24\n    (len(str(A)) > len(str(B)))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('GREATER')\n    sys.exit()\nNext:\n    Go to Block: 10\n\nBlock 3:\nStatement:\n    (len(str(A)) < len(str(B)))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('LESS')\n    sys.exit()\nNext:\n    Go to Block: 10\n\nBlock 5:\nStatement:\n    a <- index\n    b <- iterator\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 10\n\nBlock 6:\nStatement:\n    (a > b)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print('GREATER')\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 8:\nStatement:\n    (a < b)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 5\n\nBlock 9:\nStatement:\n    print('LESS')\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 10:\nStatement:\n    print('EQUAL')\nNext:\n    <END>\n"
        }
    },
    "p03739": {
        "s567314346": {
            "code": "N = 4\nl = [1, -3, 1, 0]\ncp = copy.copy(l)\nfor k in range(N - 1):\n    if sum(l[:k + 1]) == 0:\n        if l[k + 1] > 0:\n            l[k + 1] = l[k + 1] + 1\n        else:\n            l[k + 1] = l[k + 1] - 1\n    if sum(l[:k]) * sum(l[:k + 1]) > 0:\n        if sum(l[:k + 1]) > 0:\n            l[k] = l[k] - (sum(l[:k + 1]) - -1)\n        else:\n            l[k] = l[k] + (1 - sum(l[:k + 1]))\nif sum(l) == 0:\n    c = c + 1\n    l[-1] = l[-1] + 1\nprint(sum([abs(l[n] - cp[n]) for n in range(N)]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        11,
                        11
                    ]
                },
                "10": {
                    "range": [
                        12,
                        12
                    ]
                },
                "11": {
                    "range": [
                        13,
                        13
                    ]
                },
                "12": {
                    "range": [
                        14,
                        15
                    ]
                },
                "13": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                10,
                4,
                5,
                10,
                4,
                5,
                10,
                11,
                14,
                4,
                15,
                18
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "l = [1, -3, 1, 0]",
                    "cp = copy.copy(l)"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "(sum(l[:k + 1]) == 0)"
                ],
                "4": [
                    "(l[k + 1] > 0)"
                ],
                "5": [
                    "l[k+1]=l[k+1]+1"
                ],
                "6": [
                    "l[k+1]=l[k+1]-1"
                ],
                "7": [
                    "(sum(l[:k]) * sum(l[:k + 1]) > 0)"
                ],
                "8": [
                    "(sum(l[:k + 1]) > 0)"
                ],
                "9": [
                    "l[k]=l[k]-(sum(l[:k+1])-(-1))"
                ],
                "10": [
                    "l[k]=l[k]+(1-sum(l[:k+1]))"
                ],
                "11": [
                    "(sum(l) == 0)"
                ],
                "12": [
                    "c=c+1",
                    "l[-1]=l[-1]+1"
                ],
                "13": [
                    "print(sum([abs(l[n]-cp[n]) for n in range(N)]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 11
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    l = [1, -3, 1, 0]\n    cp = copy.copy(l)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    (sum(l[:k + 1]) == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    (l[k + 1] > 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    l[k+1]=l[k+1]+1\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    l[k+1]=l[k+1]-1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (sum(l[:k]) * sum(l[:k + 1]) > 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    (sum(l[:k + 1]) > 0)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    l[k]=l[k]-(sum(l[:k+1])-(-1))\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    l[k]=l[k]+(1-sum(l[:k+1]))\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (sum(l) == 0)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    c=c+1\n    l[-1]=l[-1]+1\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    print(sum([abs(l[n]-cp[n]) for n in range(N)]))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03745": {
        "s232873811": {
            "code": "n = 6\na = [1, 2, 3, 2, 2, 1]\nflg = np.sign(a[1] - a[0])\nskp = 1\ncnt = 1\ntemp = a[0]\nfor i in range(1, n):\n    dif = a[i] - temp\n    direct = np.sign(dif)\n    if dif != 0:\n        if skp:\n            flg = direct\n            skp = 0\n            continue\n        elif direct != flg:\n            flg = direct\n            cnt += 1\n            skp = 1\n    temp = a[i]\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        13
                    ]
                },
                "6": {
                    "range": [
                        14,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        17
                    ]
                },
                "8": {
                    "range": [
                        18,
                        18
                    ]
                },
                "9": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                7,
                8,
                9,
                10,
                11,
                15,
                19,
                7,
                8,
                9,
                10,
                11,
                15,
                16,
                17,
                18,
                19,
                7,
                8,
                9,
                10,
                19,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                7,
                20
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "a = [1, 2, 3, 2, 2, 1]",
                    "flg = np.sign(a[1] - a[0])",
                    "skp = 1",
                    "cnt = 1",
                    "temp = a[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "dif = a[i] - temp",
                    "direct = np.sign(dif)",
                    "(dif != 0)"
                ],
                "4": [
                    "(skp)"
                ],
                "5": [
                    "flg = direct",
                    "skp = 0"
                ],
                "6": [
                    "(direct != flg)"
                ],
                "7": [
                    "flg = direct",
                    "cnt+=1",
                    "skp = 1"
                ],
                "8": [
                    "temp = a[i]"
                ],
                "9": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 8
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [1, 2, 3, 2, 2, 1]\n    flg = np.sign(a[1] - a[0])\n    skp = 1\n    cnt = 1\n    temp = a[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    dif = a[i] - temp\n    direct = np.sign(dif)\n    (dif != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 8\n\nBlock 4:\nStatement:\n    (skp)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    flg = direct\n    skp = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (direct != flg)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    flg = direct\n    cnt+=1\n    skp = 1\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    temp = a[i]\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03760": {
        "s616667652": {
            "code": "sys.setrecursionlimit(1000000000)\nMOD = 10 ** 9 + 7\no = 'xyz'\ne = 'abc'\nans = ''\nfor i in range(len(o)):\n    ans += o[i] + e[i]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                6,
                7,
                6,
                7,
                6,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "sys.setrecursionlimit(1000000000)",
                    "MOD = 10**9+7",
                    "o = 'xyz'",
                    "e = 'abc'",
                    "ans = \"\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(o))"
                ],
                "3": [
                    "ans += o[i]+e[i]"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    sys.setrecursionlimit(1000000000)\n    MOD = 10**9+7\n    o = 'xyz'\n    e = 'abc'\n    ans = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(o))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += o[i]+e[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03761": {
        "s909609806": {
            "code": "n = 3\nA = Counter({'c': 1, 'b': 1, 'a': 2})\nB = Counter({'d': 1, 'a': 2, 'c': 2})\nC = Counter({'a': 3, 'c': 3})\nD = A & B\nE = D & C\nprint(''.join(sorted(E.elements())))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "A = Counter({'c': 1, 'b': 1, 'a': 2})",
                    "B = Counter({'d': 1, 'a': 2, 'c': 2})",
                    "C = Counter({'a': 3, 'c': 3})",
                    "D = A & B",
                    "E = D & C",
                    "print(\"\".join(sorted(E.elements())))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    A = Counter({'c': 1, 'b': 1, 'a': 2})\n    B = Counter({'d': 1, 'a': 2, 'c': 2})\n    C = Counter({'a': 3, 'c': 3})\n    D = A & B\n    E = D & C\n    print(\"\".join(sorted(E.elements())))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03767": {
        "s144718765": {
            "code": "input = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nn = 2\na = [5, 2, 8, 5, 1, 5]\na.sort()\nres = 0\nfor i in range(n, 3 * n, 2):\n    res += a[i]\nprint(res)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                7,
                8,
                7,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f214d2cb510>"
                        },
                        {
                            "res": "0"
                        },
                        {
                            "a": "[1, 2, 5, 5, 5, 8]"
                        },
                        {
                            "n": "2"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f214d2cb510>"
                        },
                        {
                            "res": "5"
                        },
                        {
                            "a": "[1, 2, 5, 5, 5, 8]"
                        },
                        {
                            "n": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f214d2cb510>"
                        },
                        {
                            "res": "5"
                        },
                        {
                            "a": "[1, 2, 5, 5, 5, 8]"
                        },
                        {
                            "n": "2"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "sys.setrecursionlimit(10**7)",
                    "n = 2",
                    "a = [5, 2, 8, 5, 1, 5]",
                    "a.sort()",
                    "res = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n, 3 * n, 2)"
                ],
                "3": [
                    "res += a[i]"
                ],
                "4": [
                    "print(res)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    n = 2\n    a = [5, 2, 8, 5, 1, 5]\n    a.sort()\n    res = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n, 3 * n, 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    res += a[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(res)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03775": {
        "s071601508": {
            "code": "n = 10000\nk = int(math.sqrt(n))\nfor i in range(k + 2, 1, -1):\n    if n % i == 0:\n        a = n // i\n        break\ns = len(str(a))\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 10000",
                    "k = int(math.sqrt(n))"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(k + 2, 1, -1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "a = n//i"
                ],
                "5": [
                    "s = len(str(a))",
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10000\n    k = int(math.sqrt(n))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(k + 2, 1, -1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a = n//i\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    s = len(str(a))\n    print(s)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s331130017": {
            "code": "N = 10000\nif N == 1:\n    print(1)\nelse:\n    for a in reversed(range(1, int(math.sqrt(N)) + 1)):\n        if N % a == 0:\n            b = N / a\n            ans = max(len(str(int(a))), len(str(int(b))))\n            break\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "10000"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "10000"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "10000"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "N": "10000"
                        },
                        {
                            "b": "100.0"
                        },
                        {
                            "ans": "3"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "N": "10000"
                        },
                        {
                            "b": "100.0"
                        },
                        {
                            "ans": "3"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 10000",
                    "(N == 1)"
                ],
                "2": [
                    "print(1)"
                ],
                "3": [
                    "iterator -> a, Iterate Over -> reversed(range(1, int(math.sqrt(N)) + 1))"
                ],
                "4": [
                    "(N % a == 0)"
                ],
                "5": [
                    "b = N/a",
                    "ans=max(len(str(int(a))), len(str(int(b))))"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10000\n    (N == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1)\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    iterator -> a, Iterate Over -> reversed(range(1, int(math.sqrt(N)) + 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (N % a == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    b = N/a\n    ans=max(len(str(int(a))), len(str(int(b))))\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s579170792": {
            "code": "n = 10000\nfor i in range(math.sqrt(n), 0, -1):\n    if n % i == 0:\n        print(max(len(str(i)), len(str(n // i))))\n        quit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "10000"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "10000"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10000"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(math.sqrt(n), 0, -1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "print(max(len(str(i)),len(str(n//i))))",
                    "quit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10000\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(math.sqrt(n), 0, -1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(max(len(str(i)),len(str(n//i))))\n    quit()\nNext:\n    Go to Block: 2\n"
        },
        "s440687378": {
            "code": "N = 10000\nmin_f = 10\nfor n in range(1, math.sqrt(N)):\n    a = n\n    if N % n != 0:\n        continue\n    b = N / n\n    f = max(len(str(a)), len(str(b)))\n    min_f = min(min_f, f)\nprint(min_f)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10000",
                    "min_f = 10"
                ],
                "2": [
                    "iterator -> n, Iterate Over -> range(1, math.sqrt(N))"
                ],
                "3": [
                    "a = n",
                    "(N % n != 0)"
                ],
                "4": [
                    "b = N / n",
                    "f = max(len(str(a)), len(str(b)))",
                    "min_f = min(min_f, f)"
                ],
                "5": [
                    "print(min_f)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10000\n    min_f = 10\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> range(1, math.sqrt(N))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    a = n\n    (N % n != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    b = N / n\n    f = max(len(str(a)), len(str(b)))\n    min_f = min(min_f, f)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(min_f)\nNext:\n    <END>\n"
        },
        "s747123595": {
            "code": "N = 10000\nans = len(str(N))\nfor a in range(2, math.sqrt(N ** 0.5) + 1):\n    if N % a == 0:\n        b = N // a\n        ans = min(ans, len(str(b)))\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10000",
                    "ans=len(str(N))"
                ],
                "2": [
                    "iterator -> a, Iterate Over -> range(2, math.sqrt(N ** 0.5) + 1)"
                ],
                "3": [
                    "(N % a == 0)"
                ],
                "4": [
                    "b=N//a",
                    "ans=min(ans,len(str(b)))"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10000\n    ans=len(str(N))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> range(2, math.sqrt(N ** 0.5) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N % a == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    b=N//a\n    ans=min(ans,len(str(b)))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s473374398": {
            "code": "N = 10000\nans = len(str(N))\nfor a in range(2, math.sqrt(N) + 1):\n    if N % a == 0:\n        b = N // a\n        ans = min(ans, len(str(b)))\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 10000",
                    "ans=len(str(N))"
                ],
                "2": [
                    "iterator -> a, Iterate Over -> range(2, math.sqrt(N) + 1)"
                ],
                "3": [
                    "(N % a == 0)"
                ],
                "4": [
                    "b=N//a",
                    "ans=min(ans,len(str(b)))"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 10000\n    ans=len(str(N))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> range(2, math.sqrt(N) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N % a == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    b=N//a\n    ans=min(ans,len(str(b)))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03779": {
        "s970959938": {
            "code": "X = 6\ndp = np.zeros(X + 1, dtype=int)\ndp[0] = 1\nfor t in range(1, X + 1):\n    if dp[X - t] == 1:\n        print(t)\n        break\n    else:\n        dp[t:] = dp[:X + 1 - t]\n    print(dp)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                9,
                10,
                4,
                5,
                9,
                10,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "dp": "<numpy.ndarray object at 0x7f675c9523d0>"
                        },
                        {
                            "X": "6"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "X = 6",
                    "dp = np.zeros(X+1, dtype = int)",
                    "dp[0] = 1"
                ],
                "2": [
                    "iterator -> t, Iterate Over -> range(1, X + 1)"
                ],
                "3": [
                    "(dp[X - t] == 1)"
                ],
                "4": [
                    "print(t)"
                ],
                "5": [
                    "dp[t:] = dp[:X+1-t]",
                    "print(dp)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 6\n    dp = np.zeros(X+1, dtype = int)\n    dp[0] = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> t, Iterate Over -> range(1, X + 1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (dp[X - t] == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(t)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    dp[t:] = dp[:X+1-t]\n    print(dp)\nNext:\n    Go to Block: 2\n",
            "exception_info": null
        }
    },
    "p03786": {
        "s008551122": {
            "code": "N = 3\nA = [3, 1, 4]\nA = sorted(A)\nB = np.cumsum(A)\nmem = N\nfor i in range(N - 1):\n    if 2 * B[i] >= A[i + 1]:\n        mem = min(i, mem)\n    else:\n        mem = N\nprint(N - mem)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                6,
                7,
                8,
                6,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "3"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "3"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "1"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "B": "<numpy.ndarray object at 0x7feaa06f8390>"
                        },
                        {
                            "A": "[1, 3, 4]"
                        },
                        {
                            "mem": "1"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [3, 1, 4]",
                    "A = sorted(A)",
                    "B = np.cumsum(A)",
                    "mem = N"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "(2 * B[i] >= A[i + 1])"
                ],
                "4": [
                    "mem = min(i, mem)"
                ],
                "5": [
                    "mem = N"
                ],
                "6": [
                    "print(N-mem)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [3, 1, 4]\n    A = sorted(A)\n    B = np.cumsum(A)\n    mem = N\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (2 * B[i] >= A[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    mem = min(i, mem)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    mem = N\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(N-mem)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03796": {
        "s125784903": {
            "code": "N = 3\nprint(math.factorial(N) % (7 + 1000000000.0))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "print(math.factorial(N)%(7+1e9))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    print(math.factorial(N)%(7+1e9))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03828": {
        "s849193861": {
            "code": "n = 3\nmod = 10 ** 9 + 7\nans = math.factorial(n)\nx = 0\nk = ans\nfor i in range(1, int(k ** 0.5) + 1):\n    if k % i == 0:\n        x += 1\n        if i != n // i:\n            x += 1\nprint(x % mod)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                8,
                9,
                10,
                6,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "0"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "1"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "2"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "2"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "3"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "4"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "4"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "ans": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "k": "6"
                        },
                        {
                            "mod": "1000000007"
                        },
                        {
                            "x": "4"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "mod=10**9+7",
                    "ans = math.factorial(n)",
                    "x=0",
                    "k = ans"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, int(k ** 0.5) + 1)"
                ],
                "3": [
                    "(k % i == 0)"
                ],
                "4": [
                    "x+=1",
                    "(i != n // i)"
                ],
                "5": [
                    "x+=1"
                ],
                "6": [
                    "print(x%mod)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    mod=10**9+7\n    ans = math.factorial(n)\n    x=0\n    k = ans\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, int(k ** 0.5) + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (k % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    x+=1\n    (i != n // i)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    x+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(x%mod)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s501157839": {
            "code": "n = 3\nmod = 10 ** 9 + 7\nv = math.factorial(n)\nprint(sympy.divisor_count(v) % mod)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "v": "6"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "mod": "1000000007"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "mod=10**9+7",
                    "v=math.factorial(n)",
                    "print(sympy.divisor_count(v)%mod)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    mod=10**9+7\n    v=math.factorial(n)\n    print(sympy.divisor_count(v)%mod)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03846": {
        "s253868293": {
            "code": "n = 5\na = [2, 4, 4, 0, 2]\nm = n // 2\nca = Counter(a)\nif n % 2 == 0 and all((ca[i * 2 + 1] == 2 for i in range(m))):\n    ans = 2 ** m % (1000000000.0 + 7)\n    print(int(ans))\nelif n % 2 == 1 and ca[0] == 1 and all((ca[(i + 1) * 2] == 2 for i in range(m))):\n    ans = 2 ** m % (1000000000.0 + 7)\n    print(int(ans))\nelse:\n    print(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [2, 4, 4, 0, 2]",
                    "m = n//2",
                    "ca = Counter(a)",
                    "(n % 2 == 0 and all((ca[i * 2 + 1] == 2 for i in range(m))))"
                ],
                "2": [
                    "ans = (2 ** m) % (1e9 + 7)",
                    "print(int(ans))"
                ],
                "3": [
                    "(n % 2 == 1 and ca[0] == 1 and all((ca[(i + 1) * 2] == 2 for i in range(m))))"
                ],
                "4": [
                    "ans = (2 ** m) % (1e9 + 7)",
                    "print(int(ans))"
                ],
                "5": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [2, 4, 4, 0, 2]\n    m = n//2\n    ca = Counter(a)\n    (n % 2 == 0 and all((ca[i * 2 + 1] == 2 for i in range(m))))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = (2 ** m) % (1e9 + 7)\n    print(int(ans))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n % 2 == 1 and ca[0] == 1 and all((ca[(i + 1) * 2] == 2 for i in range(m))))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans = (2 ** m) % (1e9 + 7)\n    print(int(ans))\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(0)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s941087143": {
            "code": "n = 5\nl = None\nfor i, x in enumerate(l):\n    if n % 2 and x != int((i + 1) / 2):\n        print(0)\n    elif i % 2 and i + 1 != x:\n        print(0)\n    elif i != x:\n        print(0)\nelse:\n    print((n / 2) ** 2 % 10 ** 9 + 7)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        9
                    ]
                },
                "9": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "l = None"
                ],
                "2": [
                    "i <- index\n    x <- iterator"
                ],
                "3": [
                    "(n % 2 and x != int((i + 1) / 2))"
                ],
                "4": [
                    "print(0)"
                ],
                "5": [
                    "(i % 2 and i + 1 != x)"
                ],
                "6": [
                    "print(0)"
                ],
                "7": [
                    "(i != x)"
                ],
                "8": [
                    "print(0)"
                ],
                "9": [
                    "print(((n/2)**2)%10**9+7)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 2
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    l = None\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    x <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (n % 2 and x != int((i + 1) / 2))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i % 2 and i + 1 != x)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (i != x)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(((n/2)**2)%10**9+7)\nNext:\n    <END>\n"
        },
        "s293511503": {
            "code": "N = 5\nA = [0, 2, 2, 4, 4]\namari = 10 ** 9 + 7\nif N % 2 == 0:\n    ans = list((int(i) for i in range(1, N, 2) * 2))\nelse:\n    ans = list((int(i) for i in range(0, N, 2) * 2))\n    A.insert(0, 0)\nif ans == A:\n    print(2 ** (N // 2) % amari)\nelse:\n    print('0')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for *: 'range' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "A = [0, 2, 2, 4, 4]",
                    "amari = 10**9 + 7",
                    "(N % 2 == 0)"
                ],
                "2": [
                    "ans = list(int(i) for i in range(1,N,2)*2)"
                ],
                "3": [
                    "ans = list(int(i) for i in range(0,N,2)*2)",
                    "A.insert(0,0)"
                ],
                "4": [
                    "(ans == A)"
                ],
                "5": [
                    "print(2**(N//2) % amari)"
                ],
                "6": [
                    "print(\"0\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [0, 2, 2, 4, 4]\n    amari = 10**9 + 7\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = list(int(i) for i in range(1,N,2)*2)\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    ans = list(int(i) for i in range(0,N,2)*2)\n    A.insert(0,0)\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (ans == A)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(2**(N//2) % amari)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"0\")\nNext:\n    <END>\n"
        }
    },
    "p03854": {
        "s412306343": {
            "code": "S = 'erasedream'\ni = 0\nwhile i < len(S):\n    if S[i:i + 5] == 'dream':\n        print('dream')\n        if S[i + 5:i + 7] == 'er':\n            print('er')\n            if S[i + 7:i + 10] == 'ase':\n                print('ase')\n                if S[i + 10] == 'r':\n                    print('r')\n                    i += 11\n                else:\n                    i += 10\n            else:\n                i += 7\n        else:\n            i += 5\n    elif S[i:i + 5] == 'erase':\n        print('erase')\n        if S[i + 5] == 'r':\n            print('r')\n            i += 6\n        else:\n            i += 5\n    else:\n        print('NO')\n        sys.exit()\nprint('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                },
                "10": {
                    "range": [
                        15,
                        15
                    ]
                },
                "11": {
                    "range": [
                        16,
                        16
                    ]
                },
                "12": {
                    "range": [
                        17,
                        18
                    ]
                },
                "13": {
                    "range": [
                        19,
                        20
                    ]
                },
                "14": {
                    "range": [
                        21,
                        21
                    ]
                },
                "15": {
                    "range": [
                        22,
                        23
                    ]
                },
                "16": {
                    "range": [
                        24,
                        24
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                20,
                21,
                22,
                26,
                3,
                4,
                5,
                6,
                18,
                3,
                30
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 16,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "S = 'erasedream'",
                    "i = 0"
                ],
                "2": [
                    "while i < len(S):"
                ],
                "3": [
                    "(S[i:i + 5] == 'dream')"
                ],
                "4": [
                    "print(\"dream\")",
                    "(S[i + 5:i + 7] == 'er')"
                ],
                "5": [
                    "print(\"er\")",
                    "(S[i + 7:i + 10] == 'ase')"
                ],
                "6": [
                    "print(\"ase\")",
                    "(S[i + 10] == 'r')"
                ],
                "7": [
                    "print(\"r\")",
                    "i += 11"
                ],
                "8": [
                    "i += 10"
                ],
                "9": [
                    "i += 7"
                ],
                "10": [
                    "i += 5"
                ],
                "11": [
                    "(S[i:i + 5] == 'erase')"
                ],
                "12": [
                    "print(\"erase\")",
                    "(S[i + 5] == 'r')"
                ],
                "13": [
                    "print(\"r\")",
                    "i += 6"
                ],
                "14": [
                    "i += 5"
                ],
                "15": [
                    "print(\"NO\")",
                    "sys.exit()"
                ],
                "16": [
                    "print(\"YES\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 16
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 11
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 10
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 15
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "15": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'erasedream'\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i < len(S):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 16\n\nBlock 3:\nStatement:\n    (S[i:i + 5] == 'dream')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 11\n\nBlock 4:\nStatement:\n    print(\"dream\")\n    (S[i + 5:i + 7] == 'er')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 10\n\nBlock 5:\nStatement:\n    print(\"er\")\n    (S[i + 7:i + 10] == 'ase')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 9\n\nBlock 6:\nStatement:\n    print(\"ase\")\n    (S[i + 10] == 'r')\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(\"r\")\n    i += 11\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    i += 10\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    i += 7\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    i += 5\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (S[i:i + 5] == 'erase')\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 15\n\nBlock 12:\nStatement:\n    print(\"erase\")\n    (S[i + 5] == 'r')\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(\"r\")\n    i += 6\nNext:\n    Go to Block: 2\n\nBlock 14:\nStatement:\n    i += 5\nNext:\n    Go to Block: 2\n\nBlock 15:\nStatement:\n    print(\"NO\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 16:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s572103303": {
            "code": "s = 'erasedream'\ni = 0\nwhile i < len(s):\n    if i + 5 <= len(s) and s[i:i + 5] == 'dream':\n        if i + 6 <= len(s) and s[i + 5] == 'e' and (s[i + 6] == 'r'):\n            if s[i + 7] == 'a':\n                i += 5\n            else:\n                i += 7\n        else:\n            i += 5\n    elif i + 5 <= len(s) and s[i:i + 5] == 'erase':\n        if i + 5 <= len(s) and s[i + 5] == 'r':\n            i += 6\n        else:\n            i += 5\n    else:\n        print('NO')\n        sys.exit()\nprint('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        9
                    ]
                },
                "9": {
                    "range": [
                        10,
                        10
                    ]
                },
                "10": {
                    "range": [
                        11,
                        11
                    ]
                },
                "11": {
                    "range": [
                        12,
                        12
                    ]
                },
                "12": {
                    "range": [
                        13,
                        13
                    ]
                },
                "13": {
                    "range": [
                        14,
                        15
                    ]
                },
                "14": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                12,
                13,
                16,
                3,
                4,
                5,
                11,
                3,
                20
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                },
                {
                    "block": 12,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 14,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'erasedream'",
                    "i = 0"
                ],
                "2": [
                    "while i < len(s):"
                ],
                "3": [
                    "(i + 5 <= len(s) and s[i:i + 5] == 'dream')"
                ],
                "4": [
                    "(i + 6 <= len(s) and s[i + 5] == 'e' and (s[i + 6] == 'r'))"
                ],
                "5": [
                    "(s[i + 7] == 'a')"
                ],
                "6": [
                    "i += 5"
                ],
                "7": [
                    "i += 7"
                ],
                "8": [
                    "i += 5"
                ],
                "9": [
                    "(i + 5 <= len(s) and s[i:i + 5] == 'erase')"
                ],
                "10": [
                    "(i + 5 <= len(s) and s[i + 5] == 'r')"
                ],
                "11": [
                    "i += 6"
                ],
                "12": [
                    "i += 5"
                ],
                "13": [
                    "print('NO')",
                    "sys.exit()"
                ],
                "14": [
                    "print('YES')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 14
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 9
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'erasedream'\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i < len(s):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 14\n\nBlock 3:\nStatement:\n    (i + 5 <= len(s) and s[i:i + 5] == 'dream')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 9\n\nBlock 4:\nStatement:\n    (i + 6 <= len(s) and s[i + 5] == 'e' and (s[i + 6] == 'r'))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (s[i + 7] == 'a')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    i += 5\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    i += 7\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    i += 5\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (i + 5 <= len(s) and s[i:i + 5] == 'erase')\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 13\n\nBlock 10:\nStatement:\n    (i + 5 <= len(s) and s[i + 5] == 'r')\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    i += 6\nNext:\n    Go to Block: 2\n\nBlock 12:\nStatement:\n    i += 5\nNext:\n    Go to Block: 2\n\nBlock 13:\nStatement:\n    print('NO')\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 14:\nStatement:\n    print('YES')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s358572367": {
            "code": "A = deque(['e', 'r', 'a', 's', 'e', 'd', 'r', 'e', 'a', 'm'])\nwhile A != [] and A != [0]:\n    if A[:7] == list('dreamer') and A[5:10] != list('erase'):\n        A = A[7:]\n    elif A[:5] == list('dream'):\n        A = A[5:]\n    elif A[:6] == list('eraser'):\n        A = A[6:]\n    elif A[:5] == list('erase'):\n        A = A[5:]\n    else:\n        A = [0]\nif A == []:\n    print('YES')\nelse:\n    print('NO')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                },
                "5": {
                    "range": [
                        5,
                        5
                    ]
                },
                "6": {
                    "range": [
                        6,
                        6
                    ]
                },
                "7": {
                    "range": [
                        7,
                        7
                    ]
                },
                "8": {
                    "range": [
                        8,
                        8
                    ]
                },
                "9": {
                    "range": [
                        9,
                        9
                    ]
                },
                "10": {
                    "range": [
                        10,
                        10
                    ]
                },
                "11": {
                    "range": [
                        11,
                        11
                    ]
                },
                "12": {
                    "range": [
                        12,
                        12
                    ]
                },
                "13": {
                    "range": [
                        13,
                        13
                    ]
                },
                "14": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"sequence index must be integer, not 'slice'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "A = deque(['e', 'r', 'a', 's', 'e', 'd', 'r', 'e', 'a', 'm'])"
                ],
                "2": [
                    "while A != [] and A != [0]:"
                ],
                "3": [
                    "(A[:7] == list('dreamer') and A[5:10] != list('erase'))"
                ],
                "4": [
                    "A = A[7:]"
                ],
                "5": [
                    "(A[:5] == list('dream'))"
                ],
                "6": [
                    "A = A[5:]"
                ],
                "7": [
                    "(A[:6] == list('eraser'))"
                ],
                "8": [
                    "A = A[6:]"
                ],
                "9": [
                    "(A[:5] == list('erase'))"
                ],
                "10": [
                    "A = A[5:]"
                ],
                "11": [
                    "A = [0]"
                ],
                "12": [
                    "(A == [])"
                ],
                "13": [
                    "print(\"YES\")"
                ],
                "14": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 12
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    A = deque(['e', 'r', 'a', 's', 'e', 'd', 'r', 'e', 'a', 'm'])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while A != [] and A != [0]:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 12\n\nBlock 3:\nStatement:\n    (A[:7] == list('dreamer') and A[5:10] != list('erase'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    A = A[7:]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (A[:5] == list('dream'))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    A = A[5:]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (A[:6] == list('eraser'))\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    A = A[6:]\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (A[:5] == list('erase'))\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    A = A[5:]\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    A = [0]\nNext:\n    Go to Block: 2\n\nBlock 12:\nStatement:\n    (A == [])\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
        }
    },
    "p03860": {
        "s804357120": {
            "code": "s = 'AtCoder Beginner Contest'\nx = s[8:-8]\nprint('{}{}{}'.format('A', *re.findall('[A-Z]', x), 'C'))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'AtCoder Beginner Contest'",
                    "x = s[8:-8]",
                    "print('{}''{}''{}'.format('A', *re.findall('[A-Z]', x), 'C'))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'AtCoder Beginner Contest'\n    x = s[8:-8]\n    print('{}''{}''{}'.format('A', *re.findall('[A-Z]', x), 'C'))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03910": {
        "s102339571": {
            "code": "N = 4\nn = round((N // 2) ** 0.5)\na, b = (n + 2, n + 3)\nif a * (a + 1) // 2 > abs(a * (a + 1) // 2 - N):\n    number = abs(a * (a + 1) // 2 - N)\n    n = a\nelif b * (b + 1) // 2 >= abs(b * (b + 1) // 2 - N):\n    number = abs(b * (b + 1) // 2 - N)\n    n = b\nfor i in range(1, n + 1):\n    if i == number:\n        continue\n    print(i)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                10,
                11,
                12,
                10,
                11,
                10,
                11,
                12,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "n = round((N//2) ** 0.5)",
                    "a,b = n+2, n+3",
                    "(a * (a + 1) // 2 > abs(a * (a + 1) // 2 - N))"
                ],
                "2": [
                    "number = abs(a*(a+1)//2 - N)",
                    "n = a"
                ],
                "3": [
                    "(b * (b + 1) // 2 >= abs(b * (b + 1) // 2 - N))"
                ],
                "4": [
                    "number = abs(b*(b+1)//2 - N)",
                    "n = b"
                ],
                "5": [
                    "iterator -> i, Iterate Over -> range(1, n + 1)"
                ],
                "6": [
                    "(i == number)"
                ],
                "7": [
                    "print(i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": 5,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    n = round((N//2) ** 0.5)\n    a,b = n+2, n+3\n    (a * (a + 1) // 2 > abs(a * (a + 1) // 2 - N))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    number = abs(a*(a+1)//2 - N)\n    n = a\nNext:\n    Go to Block: 5\n\nBlock 3:\nStatement:\n    (b * (b + 1) // 2 >= abs(b * (b + 1) // 2 - N))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    number = abs(b*(b+1)//2 - N)\n    n = b\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n + 1)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    (i == number)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 7\n\nBlock 7:\nStatement:\n    print(i)\nNext:\n    Go to Block: 5\n",
            "exception_info": null
        }
    },
    "p03945": {
        "s329649174": {
            "code": "s = 'BBBWW'\ncnt = 0\nwhile True:\n    print(s)\n    if s.count('W') == len(s):\n        break\n    if s[len(s) - 1] == 'B':\n        s = s[::-1]\n    if s[0] == 'B':\n        s = re.sub('[B]+', '', s, 1)\n        cnt += 1\n    elif s[0] == 'W':\n        s = re.sub('[W]+', '', s, 1)\n        cnt += 1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        12,
                        13
                    ]
                },
                "10": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                7,
                9,
                10,
                11,
                3,
                4,
                5,
                6,
                15
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'BBBWW'",
                    "cnt = 0"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "print(s)",
                    "(s.count('W') == len(s))"
                ],
                "4": [
                    "(s[len(s) - 1] == 'B')"
                ],
                "5": [
                    "s = s[::-1]"
                ],
                "6": [
                    "(s[0] == 'B')"
                ],
                "7": [
                    "s = re.sub(r'[B]+', \"\", s,1)",
                    "cnt +=1"
                ],
                "8": [
                    "(s[0] == 'W')"
                ],
                "9": [
                    "s = re.sub(r'[W]+', \"\", s,1)",
                    "cnt +=1"
                ],
                "10": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 10,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 2
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'BBBWW'\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    print(s)\n    (s.count('W') == len(s))\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (s[len(s) - 1] == 'B')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    s = s[::-1]\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    (s[0] == 'B')\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    s = re.sub(r'[B]+', \"\", s,1)\n    cnt +=1\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    (s[0] == 'W')\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 2\n\nBlock 9:\nStatement:\n    s = re.sub(r'[W]+', \"\", s,1)\n    cnt +=1\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(cnt)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s446758648": {
            "code": "s = 'BBBWW'\nprint(len(gb(s)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'BBBWW'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'itertools.groupby' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'BBBWW'",
                    "print(len(gb(s)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'BBBWW'\n    print(len(gb(s)))\nNext:\n    <END>\n"
        }
    },
    "p03964": {
        "s255489824": {
            "code": "N = 3\nratio = [(2, 3), (1, 1), (3, 2)]\nt, a = (1, 1)\nfor nt, na in ratio:\n    r = 1\n    if nt < t:\n        r *= ceil(t / nt)\n    if na < a:\n        r *= ceil(a / na)\n    na = r * na\n    nt = r * nt\n    t, a = (nt, na)\nprint(t + a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                8,
                10,
                11,
                12,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                4,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "ratio = [(2, 3), (1, 1), (3, 2)]",
                    "t,a = 1,1"
                ],
                "2": [
                    "nt <- index\n    na <- iterator"
                ],
                "3": [
                    "r = 1",
                    "(nt < t)"
                ],
                "4": [
                    "r *= ceil(t/nt)"
                ],
                "5": [
                    "(na < a)"
                ],
                "6": [
                    "r *= ceil(a/na)"
                ],
                "7": [
                    "na = r*na",
                    "nt = r*nt",
                    "t,a = nt,na"
                ],
                "8": [
                    "print(t+a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    ratio = [(2, 3), (1, 1), (3, 2)]\n    t,a = 1,1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    nt <- index\n    na <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    r = 1\n    (nt < t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    r *= ceil(t/nt)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (na < a)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    r *= ceil(a/na)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    na = r*na\n    nt = r*nt\n    t,a = nt,na\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(t+a)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03986": {
        "s087133213": {
            "code": "s = 'TSTTSS'\nl = s.find('S')\nr = s.rfind('T')\nif l == -1 or r == -1:\n    print(len(s))\nelse:\n    rest = l + len(s) - r - 1\n    s = s[l:r + 1]\n    s = list(Counter(s).values())\n    print(rest + abs(s[0] - s[1]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'TSTTSS'"
                        },
                        {
                            "l": "1"
                        },
                        {
                            "r": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "[1, 2]"
                        },
                        {
                            "rest": "3"
                        },
                        {
                            "l": "1"
                        },
                        {
                            "r": "3"
                        }
                    ]
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = 'TSTTSS'",
                    "l=s.find(\"S\")",
                    "r=s.rfind(\"T\")",
                    "(l == -1 or r == -1)"
                ],
                "2": [
                    "print(len(s))"
                ],
                "3": [
                    "rest=l+len(s)-r-1",
                    "s=s[l:r+1]",
                    "s=list(Counter(s).values())",
                    "print(rest+abs(s[0]-s[1]))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'TSTTSS'\n    l=s.find(\"S\")\n    r=s.rfind(\"T\")\n    (l == -1 or r == -1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(len(s))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    rest=l+len(s)-r-1\n    s=s[l:r+1]\n    s=list(Counter(s).values())\n    print(rest+abs(s[0]-s[1]))\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03994": {
        "s038273890": {
            "code": "alp = {s: i for i, s in enumerate('abcdefghijklmnopqrstuvwxyz')}\nN = len(alp)\nS = 'xyz'\nK = 4\nans = ''\nfor s in S:\n    i = alp[s]\n    if K >= N - i:\n        ans += 'a'\n        K -= N - i\n    else:\n        ans += s\nif K == 0:\n    print(ans)\nelse:\n    K = K % N\n    last_s = alp[(S.find(ans[-1]) + K) % N]\n    print(ans[:-1] + last_s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                6,
                7,
                8,
                12,
                6,
                7,
                8,
                9,
                10,
                6,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "alp = {s:i for i, s in enumerate('abcdefghijklmnopqrstuvwxyz')}",
                    "N = len(alp)",
                    "S = 'xyz'",
                    "K = 4",
                    "ans = ''"
                ],
                "2": [
                    "iterator -> s, Iterate Over -> S"
                ],
                "3": [
                    "i = alp[s]",
                    "(K >= N - i)"
                ],
                "4": [
                    "ans += 'a'",
                    "K -= N-i"
                ],
                "5": [
                    "ans += s"
                ],
                "6": [
                    "(K == 0)"
                ],
                "7": [
                    "print(ans)"
                ],
                "8": [
                    "K = K%N",
                    "last_s = alp[(S.find(ans[-1])+K)%N]",
                    "print(ans[:-1] + last_s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    alp = {s:i for i, s in enumerate('abcdefghijklmnopqrstuvwxyz')}\n    N = len(alp)\n    S = 'xyz'\n    K = 4\n    ans = ''\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    i = alp[s]\n    (K >= N - i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += 'a'\n    K -= N-i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans += s\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (K == 0)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    K = K%N\n    last_s = alp[(S.find(ans[-1])+K)%N]\n    print(ans[:-1] + last_s)\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p03998": {
        "s787941198": {
            "code": "sys.setrecursionlimit(10000)\nA = ['a', 'c', 'a']\nB = ['a', 'c', 'c', 'c']\nC = ['c', 'a']\nt = 'a'\nd = 1\nwhile d == 1:\n    if t == 'a':\n        t = A.pop(0)\n    if t == 'b':\n        t = B.pop(0)\n    if t == 'c':\n        t = C.pop(0)\n    if t == 'a' and A == []:\n        print('A')\n        break\n    elif t == 'b' and B == []:\n        print('B')\n        break\n    elif t == 'c' and C == []:\n        print('C')\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                },
                "10": {
                    "range": [
                        15,
                        15
                    ]
                },
                "11": {
                    "range": [
                        16,
                        16
                    ]
                },
                "12": {
                    "range": [
                        17,
                        17
                    ]
                },
                "13": {
                    "range": [
                        18,
                        18
                    ]
                },
                "14": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                12,
                14,
                17,
                20,
                7,
                8,
                9,
                10,
                12,
                13,
                14,
                17,
                20,
                7,
                8,
                10,
                12,
                13,
                14,
                17,
                20,
                7,
                8,
                9,
                10,
                12,
                14,
                15,
                16
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 8,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 11,
                    "state": []
                },
                {
                    "block": 13,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 7,
                    "state": []
                },
                {
                    "block": 9,
                    "state": []
                },
                {
                    "block": 10,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "sys.setrecursionlimit(10000)",
                    "A = ['a', 'c', 'a']",
                    "B = ['a', 'c', 'c', 'c']",
                    "C = ['c', 'a']",
                    "t='a'",
                    "d=1"
                ],
                "2": [
                    "while d==1:"
                ],
                "3": [
                    "(t == 'a')"
                ],
                "4": [
                    "t=A.pop(0)"
                ],
                "5": [
                    "(t == 'b')"
                ],
                "6": [
                    "t=B.pop(0)"
                ],
                "7": [
                    "(t == 'c')"
                ],
                "8": [
                    "t=C.pop(0)"
                ],
                "9": [
                    "(t == 'a' and A == [])"
                ],
                "10": [
                    "print('A')"
                ],
                "11": [
                    "(t == 'b' and B == [])"
                ],
                "12": [
                    "print('B')"
                ],
                "13": [
                    "(t == 'c' and C == [])"
                ],
                "14": [
                    "print('C')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    sys.setrecursionlimit(10000)\n    A = ['a', 'c', 'a']\n    B = ['a', 'c', 'c', 'c']\n    C = ['c', 'a']\n    t='a'\n    d=1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while d==1:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (t == 'a')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    t=A.pop(0)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (t == 'b')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    t=B.pop(0)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (t == 'c')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    t=C.pop(0)\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (t == 'a' and A == [])\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('A')\nNext:\n    <END>\n\nBlock 11:\nStatement:\n    (t == 'b' and B == [])\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print('B')\nNext:\n    <END>\n\nBlock 13:\nStatement:\n    (t == 'c' and C == [])\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 2\n\nBlock 14:\nStatement:\n    print('C')\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p04012": {
        "s680170043": {
            "code": "w = 'abaccaba'\nindex, count = np.unique(list(w), return_counts=True)\nif all(count % 2 == 0):\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "w = 'abaccaba'",
                    "index, count = np.unique(list(w), return_counts=True)",
                    "(all(count % 2 == 0))"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    w = 'abaccaba'\n    index, count = np.unique(list(w), return_counts=True)\n    (all(count % 2 == 0))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s813065337": {
            "code": "s = 'abaccaba'\ncount = ca(s)\ncount = list(ca.values())\nans = 'Yes'\nfor i in count:\n    if i % 2 != 0:\n        ans = 'No'\n        break\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('unbound method dict.values() needs an argument')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'abaccaba'",
                    "count = ca(s)",
                    "count = list(ca.values())",
                    "ans = 'Yes'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> count"
                ],
                "3": [
                    "(i % 2 != 0)"
                ],
                "4": [
                    "ans = 'No'"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'abaccaba'\n    count = ca(s)\n    count = list(ca.values())\n    ans = 'Yes'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> count\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i % 2 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans = 'No'\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s166564940": {
            "code": "s = 'abaccaba'\nc = Counter(s)\nflag = 0\na = c.values()\nfor i in range(len(a)):\n    if a[i] % 2 == 1:\n        flag = 1\n        break\nif flag == 0:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_values' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'abaccaba'",
                    "c=Counter(s)",
                    "flag=0",
                    "a=c.values()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(a))"
                ],
                "3": [
                    "(a[i] % 2 == 1)"
                ],
                "4": [
                    "flag=1"
                ],
                "5": [
                    "(flag == 0)"
                ],
                "6": [
                    "print(\"Yes\")"
                ],
                "7": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'abaccaba'\n    c=Counter(s)\n    flag=0\n    a=c.values()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(a))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a[i] % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    flag=1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (flag == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s987934613": {
            "code": "a = 'abaccaba'\nb = Counter(a)\nc = 0\nfor i in b.values:\n    if i % 2 != 0:\n        c = 1\n        break\nelse:\n    if c == 0:\n        print('Yes')\n    else:\n        print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 'abaccaba'",
                    "b = Counter(a)",
                    "c = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> b.values"
                ],
                "3": [
                    "(i % 2 != 0)"
                ],
                "4": [
                    "c = 1"
                ],
                "5": [
                    "(c == 0)"
                ],
                "6": [
                    "print(\"Yes\")"
                ],
                "7": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 'abaccaba'\n    b = Counter(a)\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> b.values\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i % 2 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    c = 1\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (c == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s590732286": {
            "code": "s = 'abaccaba'\nc = Counter(s)\nfor i in c:\n    if i % 2 != 0:\n        print('No')\n        exit()\nprint('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'abaccaba'",
                    "c = Counter(s)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> c"
                ],
                "3": [
                    "(i % 2 != 0)"
                ],
                "4": [
                    "print(\"No\")",
                    "exit()"
                ],
                "5": [
                    "print(\"Yes\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'abaccaba'\n    c = Counter(s)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> c\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i % 2 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"No\")\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n"
        }
    },
    "p04019": {
        "s082990921": {
            "code": "c = Counter({'S': 1, 'E': 1, 'N': 1, 'W': 1})\nprint('Yes' if (c['N'] > 0 and c['S'] > 0 or c['N'] == s['S']) and (c['E'] > 0 and c['W'] > 0 or c['E'] == s['W']) else 'No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "c = Counter({'S': 1, 'E': 1, 'N': 1, 'W': 1})",
                    "print(\"Yes\" if ((c[\"N\"] > 0 and c[\"S\"] > 0) or c[\"N\"] == s[\"S\"]) \\"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    c = Counter({'S': 1, 'E': 1, 'N': 1, 'W': 1})\n    print(\"Yes\" if ((c[\"N\"] > 0 and c[\"S\"] > 0) or c[\"N\"] == s[\"S\"]) \\\nNext:\n    <END>\n",
            "exception_info": null
        }
    },
    "p04030": {
        "s931457697": {
            "code": "s = '01B0'\na = deque()\nfor i in s:\n    if i == 'B':\n        a.pop()\n    else:\n        a.append(i)\nprint(''.join(a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                3,
                4,
                7,
                3,
                4,
                5,
                3,
                4,
                7,
                3,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "s = '01B0'",
                    "a = deque()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> s"
                ],
                "3": [
                    "(i == 'B')"
                ],
                "4": [
                    "a.pop()"
                ],
                "5": [
                    "a.append(i)"
                ],
                "6": [
                    "print(''.join(a))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '01B0'\n    a = deque()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i == 'B')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a.pop()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    a.append(i)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(''.join(a))\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s258122402": {
            "code": "text = '01B0'\nb_length = re.sub('B', '', text)\nfor _ in range(b_length):\n    text = re.sub('(0|1)??B', '', text, 1)\nprint(text)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "text = '01B0'",
                    "b_length = re.sub('B', '', text)"
                ],
                "2": [
                    "iterator -> _, Iterate Over -> range(b_length)"
                ],
                "3": [
                    "text = re.sub('(0|1)??B', '', text, 1)"
                ],
                "4": [
                    "print(text)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    text = '01B0'\n    b_length = re.sub('B', '', text)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> _, Iterate Over -> range(b_length)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    text = re.sub('(0|1)??B', '', text, 1)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(text)\nNext:\n    <END>\n"
        }
    },
    "p04031": {
        "s664758582": {
            "code": "N = 2\na = [4, 8]\ntarget = round(mean(a))\ncost = 0\nfor num in a:\n    cost += (num - target) ** 2\nprint(cost)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "a = [4, 8]",
                    "target = round(mean(a))",
                    "cost = 0"
                ],
                "2": [
                    "iterator -> num, Iterate Over -> a"
                ],
                "3": [
                    "cost += (num - target)**2"
                ],
                "4": [
                    "print(cost)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    a = [4, 8]\n    target = round(mean(a))\n    cost = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> num, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    cost += (num - target)**2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(cost)\nNext:\n    <END>\n",
            "exception_info": null
        },
        "s158004777": {
            "code": "N = 2\nA = [4, 8]\nave = sum(A) / N\ncan1 = math.floor(ave)\ncan2 = math.ceil(ave)\ncost1 = sum([(a - can1) ** 2 for a in A])\ncost2 = sum([(a - can2) ** 2 for a in A])\nprint(min[cost1, cost2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "A = [4, 8]",
                    "ave = sum(A) / N",
                    "can1 = math.floor(ave)",
                    "can2 = math.ceil(ave)",
                    "cost1 = sum([(a - can1) ** 2 for a in A])",
                    "cost2 = sum([(a - can2) ** 2 for a in A])",
                    "print(min[cost1, cost2])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    A = [4, 8]\n    ave = sum(A) / N\n    can1 = math.floor(ave)\n    can2 = math.ceil(ave)\n    cost1 = sum([(a - can1) ** 2 for a in A])\n    cost2 = sum([(a - can2) ** 2 for a in A])\n    print(min[cost1, cost2])\nNext:\n    <END>\n"
        }
    },
    "p00007": {
        "s183798433": {
            "code": "r = 100\nn = '5'\nfor i in range(n):\n    r = math.ceil(r * 1.05)\nprint(r * 1000)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = 100",
                    "n = '5'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "r = math.ceil(r * 1.05)"
                ],
                "4": [
                    "print(r * 1000)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    r = 100\n    n = '5'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    r = math.ceil(r * 1.05)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(r * 1000)\nNext:\n    <END>\n"
        }
    },
    "p02388": {
        "s187112865": {
            "code": "N = '2'\nprint(N ** 3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "print(N**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    print(N**3)\nNext:\n    <END>\n"
        },
        "s976071500": {
            "code": "x = '2'\nprint(x ** 3)\nprint('\\n')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x**3)",
                    "print(\"\\n\")"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\n    print(\"\\n\")\nNext:\n    <END>\n"
        },
        "s128416558": {
            "code": "x = '2'\nprint(x ** 3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
        }
    },
    "p02390": {
        "s072273325": {
            "code": "S = '46979'\nhour = math.floor(S / 3600)\nmin = math.floor((S - hour * 3600) / 60)\nsec = S - h * 3600 - m * 60\nprint(str(hour) + ':' + str(min) + ':' + str(sec))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'46979'"
                        },
                        {
                            "min": "<built-in function min>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '46979'",
                    "hour = math.floor(S/3600)",
                    "min = math.floor((S-hour*3600)/60)",
                    "sec =  S - h*3600 - m*60",
                    "print(str(hour)+\":\"+str(min)+\":\"+str(sec))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '46979'\n    hour = math.floor(S/3600)\n    min = math.floor((S-hour*3600)/60)\n    sec =  S - h*3600 - m*60\n    print(str(hour)+\":\"+str(min)+\":\"+str(sec))\nNext:\n    <END>\n"
        },
        "s861746956": {
            "code": "S = '46979'\nhour = int(math.floor(S / 3600))\nmin = int(math.floor((S - hour * 3600) / 60))\nsec = int(S - h * 3600 - m * 60)\nprint(str(hour) + ':' + str(min) + ':' + str(sec))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'46979'"
                        },
                        {
                            "min": "<built-in function min>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '46979'",
                    "hour = int(math.floor(S/3600))",
                    "min = int(math.floor((S-hour*3600)/60))",
                    "sec =  int(S - h*3600 - m*60)",
                    "print(str(hour)+\":\"+str(min)+\":\"+str(sec))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '46979'\n    hour = int(math.floor(S/3600))\n    min = int(math.floor((S-hour*3600)/60))\n    sec =  int(S - h*3600 - m*60)\n    print(str(hour)+\":\"+str(min)+\":\"+str(sec))\nNext:\n    <END>\n"
        },
        "s541541324": {
            "code": "a = datetime.timedelta(seconds=46979)\nprint((a + d).hour, (a + d).minute, (a + d).second, sep=':')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'datetime.timedelta' and 'module'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = datetime.timedelta(seconds=46979)",
                    "print((a+d).hour, (a+d).minute, (a+d).second, sep=':')"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = datetime.timedelta(seconds=46979)\n    print((a+d).hour, (a+d).minute, (a+d).second, sep=':')\nNext:\n    <END>\n"
        },
        "s524233895": {
            "code": "S = '46979'\nhour = math.floor(S / 3600)\nmin = math.floor((S - hour * 3600) / 60)\nsec = S - h * 3600 - m * 60\nprint(str(hour) + ':' + str(min) + ':' + str(sec))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'46979'"
                        },
                        {
                            "min": "<built-in function min>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '46979'",
                    "hour = math.floor(S/3600)",
                    "min = math.floor((S-hour*3600)/60)",
                    "sec =  S - h*3600 - m*60",
                    "print(str(hour)+\":\"+str(min)+\":\"+str(sec))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '46979'\n    hour = math.floor(S/3600)\n    min = math.floor((S-hour*3600)/60)\n    sec =  S - h*3600 - m*60\n    print(str(hour)+\":\"+str(min)+\":\"+str(sec))\nNext:\n    <END>\n"
        }
    },
    "p02553": {
        "s175348477": {
            "code": "a = [1, 2, 1, 1]\nmax_a = -10 ** 30\nfor i in itertools.combinations(a, 2):\n    if i[0] * i[1] > max_a:\n        max_a = i[0] * i[i]\nprint(max_a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "max_a": "-1000000000000000000000000000000"
                        },
                        {
                            "a": "[1, 2, 1, 1]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "max_a": "-1000000000000000000000000000000"
                        },
                        {
                            "a": "[1, 2, 1, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "max_a": "-1000000000000000000000000000000"
                        },
                        {
                            "a": "[1, 2, 1, 1]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "max_a": "-1000000000000000000000000000000"
                        },
                        {
                            "a": "[1, 2, 1, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('tuple indices must be integers or slices, not tuple')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = [1, 2, 1, 1]",
                    "max_a = -10**30"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> itertools.combinations(a, 2)"
                ],
                "3": [
                    "(i[0] * i[1] > max_a)"
                ],
                "4": [
                    "max_a = i[0]*i[i]"
                ],
                "5": [
                    "print(max_a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [1, 2, 1, 1]\n    max_a = -10**30\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> itertools.combinations(a, 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i[0] * i[1] > max_a)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    max_a = i[0]*i[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(max_a)\nNext:\n    <END>\n"
        }
    },
    "p02576": {
        "s623076725": {
            "code": "a = [20, 12, 6]\nprint(math.ceil(a[0] / a[1]) * math[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'module' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = [20, 12, 6]",
                    "print(math.ceil(a[0]/a[1]) * math[2])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [20, 12, 6]\n    print(math.ceil(a[0]/a[1]) * math[2])\nNext:\n    <END>\n"
        }
    },
    "p02594": {
        "s792060969": {
            "code": "x = '25'\nif x >= 30:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '25'",
                    "(x >= 30)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '25'\n    (x >= 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02606": {
        "s072948376": {
            "code": "a = ['5', '10', '2']\nL = a[0]\nR = a[1]\nd = a[2]\nN = R / d\nprint(math.floor(N))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['5', '10', '2']",
                    "L = a[0]",
                    "R = a[1]",
                    "d = a[2]",
                    "N = R/d",
                    "print(math.floor(N))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['5', '10', '2']\n    L = a[0]\n    R = a[1]\n    d = a[2]\n    N = R/d\n    print(math.floor(N))\nNext:\n    <END>\n"
        },
        "s140255983": {
            "code": "a = ['5', '10', '2']\nL = a(0)\nR = a(1)\nd = a(2)\nN = R / d\nprint(math.floor(N))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['5', '10', '2']",
                    "L = a(0)",
                    "R = a(1)",
                    "d = a(2)",
                    "N = R/d",
                    "print(math.floor(N))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['5', '10', '2']\n    L = a(0)\n    R = a(1)\n    d = a(2)\n    N = R/d\n    print(math.floor(N))\nNext:\n    <END>\n"
        }
    },
    "p02628": {
        "s090342159": {
            "code": "s = [5, 3]\nprint(s)\np = [50, 100, 80, 120, 80]\nprint(p)\na = []\np.sort()\nprint(p)\nfor i in range(0, s[1]):\n    a = p[i]\nb = [int(b) for b in a]\nprint(sum(b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = [5, 3]",
                    "print(s)",
                    "p = [50, 100, 80, 120, 80]",
                    "print(p)",
                    "a = []",
                    "p.sort()",
                    "print(p)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, s[1])"
                ],
                "3": [
                    "a = p[i]"
                ],
                "4": [
                    "b = [int(b) for b in a]",
                    "print(sum(b))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = [5, 3]\n    print(s)\n    p = [50, 100, 80, 120, 80]\n    print(p)\n    a = []\n    p.sort()\n    print(p)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, s[1])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a = p[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    b = [int(b) for b in a]\n    print(sum(b))\nNext:\n    <END>\n"
        },
        "s311884923": {
            "code": "S = [5, 3]\nN = S[0]\nK = S[1]\np = [50, 100, 80, 120, 80]\nlists = [1000000000000]\nx = list(itertools.combinations(p, K))\ncounts = len(list(x))\nfor l in range(1, x + 1):\n    sums = sum(list(x[counts - 1]))\n    if int(sums) <= int(lists[l - 1]):\n        lists.append(sums)\n    else:\n        continue\nprint(min(lists))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate list (not \"int\") to list')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = [5, 3]",
                    "N = S[0]",
                    "K = S[1]",
                    "p = [50, 100, 80, 120, 80]",
                    "lists = [1000000000000]",
                    "x = list(itertools.combinations(p, K))",
                    "counts = len(list(x))"
                ],
                "2": [
                    "iterator -> l, Iterate Over -> range(1, x + 1)"
                ],
                "3": [
                    "sums = sum(list(x[counts - 1]))",
                    "(int(sums) <= int(lists[l - 1]))"
                ],
                "4": [
                    "lists.append(sums)"
                ],
                "5": [
                    "print(min(lists))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = [5, 3]\n    N = S[0]\n    K = S[1]\n    p = [50, 100, 80, 120, 80]\n    lists = [1000000000000]\n    x = list(itertools.combinations(p, K))\n    counts = len(list(x))\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> l, Iterate Over -> range(1, x + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    sums = sum(list(x[counts - 1]))\n    (int(sums) <= int(lists[l - 1]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    lists.append(sums)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(min(lists))\nNext:\n    <END>\n"
        }
    },
    "p02639": {
        "s485739288": {
            "code": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\ninput = sys.stdin.readline\nx = [0, 2, 3, 4, 5]\nfor i in range(x):\n    if x[i] == 0:\n        print(i + 1)\n        exit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "alphabet": "'abcdefghijklmnopqrstuvwxyz'"
                        },
                        {
                            "x": "[0, 2, 3, 4, 5]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f9a24ccb510>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "alphabet": "'abcdefghijklmnopqrstuvwxyz'"
                        },
                        {
                            "x": "[0, 2, 3, 4, 5]"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f9a24ccb510>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "alphabet = \"abcdefghijklmnopqrstuvwxyz\"",
                    "input = sys.stdin.readline",
                    "x = [0, 2, 3, 4, 5]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(x)"
                ],
                "3": [
                    "(x[i] == 0)"
                ],
                "4": [
                    "print(i+1)",
                    "exit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    input = sys.stdin.readline\n    x = [0, 2, 3, 4, 5]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(x)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x[i] == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i+1)\n    exit()\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02693": {
        "s158888708": {
            "code": "K = '7'\ndistance = [500, 600]\nfor i in range(distance[1] - distance[0] + 1):\n    if (distance[0] + i) % K == 0:\n        print('OK')\nprint('NG')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "K = '7'",
                    "distance = [500, 600]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(distance[1] - distance[0] + 1)"
                ],
                "3": [
                    "((distance[0] + i) % K == 0)"
                ],
                "4": [
                    "print(\"OK\")"
                ],
                "5": [
                    "print(\"NG\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = '7'\n    distance = [500, 600]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(distance[1] - distance[0] + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ((distance[0] + i) % K == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"OK\")\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"NG\")\nNext:\n    <END>\n"
        },
        "s988414315": {
            "code": "K = '7'\ndistance = [500, 600]\nfor i in range(len(distance)):\n    if distance[i] % K == 0:\n        print('OK')\nprint('NG')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "K = '7'",
                    "distance = [500, 600]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(distance))"
                ],
                "3": [
                    "(distance[i] % K == 0)"
                ],
                "4": [
                    "print(\"OK\")"
                ],
                "5": [
                    "print(\"NG\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = '7'\n    distance = [500, 600]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(distance))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (distance[i] % K == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"OK\")\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"NG\")\nNext:\n    <END>\n"
        }
    },
    "p02706": {
        "s648022697": {
            "code": "a = ['41', '2']\nn, m = (int(a[0]), int(a[1]))\nf = [5, 6]\ns = 0\nfl = 0\ns = sum(a)\nif s >= n:\n    print(s - n)\nelse:\n    print('-1')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['41', '2']",
                    "n,m=int(a[0]),int(a[1])",
                    "f = [5, 6]",
                    "s=0",
                    "fl=0",
                    "s=sum(a)",
                    "(s >= n)"
                ],
                "2": [
                    "print(s-n)"
                ],
                "3": [
                    "print(\"-1\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['41', '2']\n    n,m=int(a[0]),int(a[1])\n    f = [5, 6]\n    s=0\n    fl=0\n    s=sum(a)\n    (s >= n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s-n)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"-1\")\nNext:\n    <END>\n"
        }
    },
    "p02724": {
        "s938916310": {
            "code": "test = '1024'\nfive_hundred = math.floor(test / 500) * 1000\nfive_happy = math.floor((test - five_hundred * 500) / 5) * 5\nprint(five_hundred + five_happy)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "test = '1024'",
                    "five_hundred = math.floor(test / 500) * 1000",
                    "five_happy = math.floor((test - five_hundred*500)/5) * 5",
                    "print(five_hundred + five_happy)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    test = '1024'\n    five_hundred = math.floor(test / 500) * 1000\n    five_happy = math.floor((test - five_hundred*500)/5) * 5\n    print(five_hundred + five_happy)\nNext:\n    <END>\n"
        },
        "s947628839": {
            "code": "test = '1024'\nfive_hundred = math.floor(test / 500) * 1000\nfive_happy = math.floor((test - five_hundred * 500) / 5) * 5",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "test = '1024'",
                    "five_hundred = math.floor(test / 500) * 1000",
                    "five_happy = math.floor((test - five_hundred*500)/5) * 5"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    test = '1024'\n    five_hundred = math.floor(test / 500) * 1000\n    five_happy = math.floor((test - five_hundred*500)/5) * 5\nNext:\n    <END>\n"
        }
    },
    "p02742": {
        "s533487982": {
            "code": "field = [4, 5]\nfield_num = field[0] * field[1]\nif field_num[0] == 1 or field_num[1] == 1:\n    print(1)\nelse:\n    canFillBlock = 0\n    canFillBlock += math.ceil(field[1] / 2) * math.ceil(field[0] / 2)\n    canFillBlock += math.floor(field[1] / 2) * math.floor(field[0] / 2)\n    print(canFillBlock)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "field = [4, 5]",
                    "field_num = field[0] * field[1]",
                    "(field_num[0] == 1 or field_num[1] == 1)"
                ],
                "2": [
                    "print(1)"
                ],
                "3": [
                    "canFillBlock = 0",
                    "canFillBlock += math.ceil(field[1]/2) * math.ceil(field[0]/2)",
                    "canFillBlock += math.floor(field[1]/2) * math.floor(field[0]/2)",
                    "print(canFillBlock)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    field = [4, 5]\n    field_num = field[0] * field[1]\n    (field_num[0] == 1 or field_num[1] == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    canFillBlock = 0\n    canFillBlock += math.ceil(field[1]/2) * math.ceil(field[0]/2)\n    canFillBlock += math.floor(field[1]/2) * math.floor(field[0]/2)\n    print(canFillBlock)\nNext:\n    <END>\n"
        }
    },
    "p02755": {
        "s512128932": {
            "code": "l1 = ['2', '2']\nt80 = int(l1[0])\nt100 = int(l1[1])\nt80_min = t80 // 0.08\nt80_max = (t80 + 1) // 0.08\nt100_min = t100 // 0.1\nt100_max = (t100 + 1) // 0.1\nf = 0\nfor i in range(min(t80_min, t100_min), max(t100_max, t100_max)):\n    if int(i * 0.08) == a and int(i * 0.1) == b:\n        print(i)\n        sys.exit()\nprint(-1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        12
                    ]
                },
                "5": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "l1 = ['2', '2']",
                    "t80=int(l1[0])",
                    "t100=int(l1[1])",
                    "t80_min=(t80//0.08)",
                    "t80_max=((t80+1)//0.08)",
                    "t100_min=(t100//0.1)",
                    "t100_max=((t100+1)//0.1)",
                    "f=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(min(t80_min, t100_min), max(t100_max, t100_max))"
                ],
                "3": [
                    "(int(i * 0.08) == a and int(i * 0.1) == b)"
                ],
                "4": [
                    "print(i)",
                    "sys.exit()"
                ],
                "5": [
                    "print(-1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    l1 = ['2', '2']\n    t80=int(l1[0])\n    t100=int(l1[1])\n    t80_min=(t80//0.08)\n    t80_max=((t80+1)//0.08)\n    t100_min=(t100//0.1)\n    t100_max=((t100+1)//0.1)\n    f=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(min(t80_min, t100_min), max(t100_max, t100_max))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (int(i * 0.08) == a and int(i * 0.1) == b)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(-1)\nNext:\n    <END>\n"
        }
    },
    "p02778": {
        "s345857927": {
            "code": "s = 'sardine'\nprint(re.sub('[a-z]', 'x'))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"sub() missing 1 required positional argument: 'string'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'sardine'",
                    "print(re.sub(\"[a-z]\", \"x\"))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'sardine'\n    print(re.sub(\"[a-z]\", \"x\"))\nNext:\n    <END>\n"
        }
    },
    "p02783": {
        "s526915361": {
            "code": "l = ['10', '4']\nprint(math.ceil(l[0] / l[1]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "l = ['10', '4']",
                    "print(math.ceil(l[0]/l[1]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    l = ['10', '4']\n    print(math.ceil(l[0]/l[1]))\nNext:\n    <END>\n"
        },
        "s312090090": {
            "code": "input_line = ['10', '4']\nH, A = map(int, input_line())\nprint(math.ceil(H / A))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input_line = ['10', '4']",
                    "H, A = map(int, input_line())",
                    "print(math.ceil(H/A))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input_line = ['10', '4']\n    H, A = map(int, input_line())\n    print(math.ceil(H/A))\nNext:\n    <END>\n"
        }
    },
    "p02795": {
        "s418740204": {
            "code": "H = '3'\nW = '7'\nN = '10'\nm = max(H, W)\nprint(math.ceil(N / m))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "H = '3'",
                    "W = '7'",
                    "N = '10'",
                    "m=max(H,W)",
                    "print(math.ceil(N/m))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    H = '3'\n    W = '7'\n    N = '10'\n    m=max(H,W)\n    print(math.ceil(N/m))\nNext:\n    <END>\n"
        }
    },
    "p02859": {
        "s456744792": {
            "code": "r = '2'\nc = 1 * np.pi ** 2\nc2 = r * np.pi ** 2\nprint(int(c2 / c))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "c = 1*(np.pi**2)",
                    "c2 = r*(np.pi**2)",
                    "print(int(c2/c))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    c = 1*(np.pi**2)\n    c2 = r*(np.pi**2)\n    print(int(c2/c))\nNext:\n    <END>\n"
        },
        "s825758435": {
            "code": "radius = '2'\nprint(radius * radius)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "radius = '2'",
                    "print (radius * radius)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    radius = '2'\n    print (radius * radius)\nNext:\n    <END>\n"
        }
    },
    "p02951": {
        "s824138483": {
            "code": "param = ['6', '4', '3']\nA = param[0]\nB = param[1]\nC = param[2]\nhituyou = A - B\nif hituyou <= C:\n    nokori = C - hituyou\nelif hituyou > C:\n    nokori = 0\nprint(nokori)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "param = ['6', '4', '3']",
                    "A=param[0]",
                    "B=param[1]",
                    "C=param[2]",
                    "hituyou=A-B",
                    "(hituyou <= C)"
                ],
                "2": [
                    "nokori = C-hituyou"
                ],
                "3": [
                    "(hituyou > C)"
                ],
                "4": [
                    "nokori = 0"
                ],
                "5": [
                    "print(nokori)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    param = ['6', '4', '3']\n    A=param[0]\n    B=param[1]\n    C=param[2]\n    hituyou=A-B\n    (hituyou <= C)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    nokori = C-hituyou\nNext:\n    Go to Block: 5\n\nBlock 3:\nStatement:\n    (hituyou > C)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    nokori = 0\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(nokori)\nNext:\n    <END>\n"
        }
    },
    "p02993": {
        "s290148251": {
            "code": "i = 3776\ni = list(i)\nfor k in range(3):\n    if i[k] == i[k + 1]:\n        print('Bad')\n        sys.exit()\nprint('Good')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "i = 3776",
                    "i = list(i)"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(3)"
                ],
                "3": [
                    "(i[k] == i[k + 1])"
                ],
                "4": [
                    "print(\"Bad\")",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"Good\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    i = 3776\n    i = list(i)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i[k] == i[k + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"Bad\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"Good\")\nNext:\n    <END>\n"
        },
        "s998755466": {
            "code": "N = 3776\nif len(N) <= 1:\n    print('Good')\n    sys.exit()\nfor i in range(1, len(N)):\n    if N[i] == N[i - 1]:\n        print('Bad')\n        sys.exit()\nprint('Good')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3776",
                    "(len(N) <= 1)"
                ],
                "2": [
                    "print('Good')",
                    "sys.exit()"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(1, len(N))"
                ],
                "4": [
                    "(N[i] == N[i - 1])"
                ],
                "5": [
                    "print('Bad')",
                    "sys.exit()"
                ],
                "6": [
                    "print('Good')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3776\n    (len(N) <= 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Good')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, len(N))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (N[i] == N[i - 1])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    print('Bad')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    print('Good')\nNext:\n    <END>\n"
        },
        "s696902635": {
            "code": "S = 3776\nfor i in range(3):\n    if S[i] == S[i + 1]:\n        print('Bad')\n        sys.exit()\nprint('Good')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 3776"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(3)"
                ],
                "3": [
                    "(S[i] == S[i + 1])"
                ],
                "4": [
                    "print(\"Bad\")",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"Good\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 3776\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] == S[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"Bad\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"Good\")\nNext:\n    <END>\n"
        },
        "s255199372": {
            "code": "S = ['3', '7', '7', '6']\nc = collections.Counter(S)\nif max(c.values) >= 2:\n    print('Bad')\nelse:\n    print('Good')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = ['3', '7', '7', '6']",
                    "c = collections.Counter(S)",
                    "(max(c.values) >= 2)"
                ],
                "2": [
                    "print(\"Bad\")"
                ],
                "3": [
                    "print(\"Good\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = ['3', '7', '7', '6']\n    c = collections.Counter(S)\n    (max(c.values) >= 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Bad\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Good\")\nNext:\n    <END>\n"
        }
    },
    "p03011": {
        "s438252784": {
            "code": "lst = ['1', '3', '4']\nnum = len(lst)\nA = lst[0] + lst[1]\nB = lst[1] + lst[2]\nC = lst[0] + lst[2]\nprint(min(np.array(A, B, C)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('array() takes from 1 to 2 positional arguments but 3 were given')"
            },
            "cfg_block_statements": {
                "1": [
                    "lst = ['1', '3', '4']",
                    "num = len(lst)",
                    "A = lst[0] + lst[1]",
                    "B = lst[1] + lst[2]",
                    "C = lst[0] + lst[2]",
                    "print(min(np.array(A,B,C)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    lst = ['1', '3', '4']\n    num = len(lst)\n    A = lst[0] + lst[1]\n    B = lst[1] + lst[2]\n    C = lst[0] + lst[2]\n    print(min(np.array(A,B,C)))\nNext:\n    <END>\n"
        },
        "s357720357": {
            "code": "lst = ['1', '3', '4']\nnum = len(lst)\nA = lst[0] + lst[1]\nB = lst[1] + lst[2]\nC = lst[0] + lst[2]\nprint(np.min(np.array(A, B, C)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('array() takes from 1 to 2 positional arguments but 3 were given')"
            },
            "cfg_block_statements": {
                "1": [
                    "lst = ['1', '3', '4']",
                    "num = len(lst)",
                    "A = lst[0] + lst[1]",
                    "B = lst[1] + lst[2]",
                    "C = lst[0] + lst[2]",
                    "print(np.min(np.array(A,B,C)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    lst = ['1', '3', '4']\n    num = len(lst)\n    A = lst[0] + lst[1]\n    B = lst[1] + lst[2]\n    C = lst[0] + lst[2]\n    print(np.min(np.array(A,B,C)))\nNext:\n    <END>\n"
        }
    },
    "p03043": {
        "s605350158": {
            "code": "s = ['3', '10']\nn = s[0]\nk = s[1]\nproba = 0\nfor i in range(1, k):\n    n_coin = int(math.log(k / i, 2)) + 1\n    print(i, n_coin)\n    proba += float(1) / n * 0.5 ** n_coin\nif n >= k:\n    proba += float(n - k + 1) / n",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['3', '10']",
                    "n = s[0]",
                    "k = s[1]",
                    "proba = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, k)"
                ],
                "3": [
                    "n_coin = int(math.log(k/i,2)) + 1",
                    "print(i, n_coin)",
                    "proba += float(1)/n*((0.5)**n_coin)"
                ],
                "4": [
                    "(n >= k)"
                ],
                "5": [
                    "proba += float(n-k+1)/n"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['3', '10']\n    n = s[0]\n    k = s[1]\n    proba = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, k)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n_coin = int(math.log(k/i,2)) + 1\n    print(i, n_coin)\n    proba += float(1)/n*((0.5)**n_coin)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (n >= k)\nNext:\n    If True: Go to Block 5\n    <END>\nBlock 5:\nStatement:\n    proba += float(n-k+1)/n\nNext:\n    <END>\n"
        },
        "s769095657": {
            "code": "s = ['3', '10']\nn = s[0]\nk = s[1]\nproba = 0\nfor i in range(1, k):\n    n_coin = int(math.log(k / i, 2)) + 1\n    print(i, n_coin)\n    proba += float(1) / n * 0.5 ** n_coin\nif n >= k:\n    proba += float(n - k + 1) / n\nprint(proba)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['3', '10']",
                    "n = s[0]",
                    "k = s[1]",
                    "proba = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, k)"
                ],
                "3": [
                    "n_coin = int(math.log(k/i,2)) + 1",
                    "print(i, n_coin)",
                    "proba += float(1)/n*((0.5)**n_coin)"
                ],
                "4": [
                    "(n >= k)"
                ],
                "5": [
                    "proba += float(n-k+1)/n"
                ],
                "6": [
                    "print(proba)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['3', '10']\n    n = s[0]\n    k = s[1]\n    proba = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, k)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n_coin = int(math.log(k/i,2)) + 1\n    print(i, n_coin)\n    proba += float(1)/n*((0.5)**n_coin)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (n >= k)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    proba += float(n-k+1)/n\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(proba)\nNext:\n    <END>\n"
        },
        "s570938119": {
            "code": "inp = ['3', '10']\nn = inp[0]\nk = inp[1]\nproba = 0\nfor i in range(1, k):\n    n_coin = int(math.log(k / i, 2)) + 1\n    print(i, n_coin)\n    proba += float(1) / n * 0.5 ** n_coin\nif n >= k:\n    proba += float(n - k + 1) / n",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "inp = ['3', '10']",
                    "n = inp[0]",
                    "k = inp[1]",
                    "proba = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, k)"
                ],
                "3": [
                    "n_coin = int(math.log(k/i,2)) + 1",
                    "print(i, n_coin)",
                    "proba += float(1)/n*((0.5)**n_coin)"
                ],
                "4": [
                    "(n >= k)"
                ],
                "5": [
                    "proba += float(n-k+1)/n"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    inp = ['3', '10']\n    n = inp[0]\n    k = inp[1]\n    proba = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, k)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n_coin = int(math.log(k/i,2)) + 1\n    print(i, n_coin)\n    proba += float(1)/n*((0.5)**n_coin)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (n >= k)\nNext:\n    If True: Go to Block 5\n    <END>\nBlock 5:\nStatement:\n    proba += float(n-k+1)/n\nNext:\n    <END>\n"
        }
    },
    "p03110": {
        "s432112955": {
            "code": "N = 2\nsum = 0\nfor i in N:\n    x, u = stdin.readline().rstrip().split()\n    if u == 'JPY':\n        sum += int(x)\n    else:\n        sum += float(x) * 380000\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "sum = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> N"
                ],
                "3": [
                    "x,u = stdin.readline().rstrip().split()",
                    "(u == 'JPY')"
                ],
                "4": [
                    "sum += int(x)"
                ],
                "5": [
                    "sum += float(x)*380000"
                ],
                "6": [
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> N\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    x,u = stdin.readline().rstrip().split()\n    (u == 'JPY')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    sum += int(x)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    sum += float(x)*380000\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum)\nNext:\n    <END>\n"
        },
        "s348541904": {
            "code": "N = 2\nsum = 0\nfor i in N:\n    x, u = stdin.readline().rstrip().split()\n    if u == 'JPY':\n        sum += int(x)\n    else:\n        sum += float(x) * 38000\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "sum = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> N"
                ],
                "3": [
                    "x,u = stdin.readline().rstrip().split()",
                    "(u == 'JPY')"
                ],
                "4": [
                    "sum += int(x)"
                ],
                "5": [
                    "sum += float(x)*38000"
                ],
                "6": [
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> N\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    x,u = stdin.readline().rstrip().split()\n    (u == 'JPY')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    sum += int(x)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    sum += float(x)*38000\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum)\nNext:\n    <END>\n"
        }
    },
    "p03136": {
        "s385342413": {
            "code": "n = 4\nl = [3, 8, 5, 1]\na = max(l)\nb = l.remove(a)\nc = np.sum(b)\nif a < c:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'int' and 'NoneType'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "l = [3, 8, 5, 1]",
                    "a = max(l)",
                    "b = l.remove(a)",
                    "c = np.sum(b)",
                    "(a < c)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    l = [3, 8, 5, 1]\n    a = max(l)\n    b = l.remove(a)\n    c = np.sum(b)\n    (a < c)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p03146": {
        "s759393756": {
            "code": "s = 8\ncount = 1\nans = s\nprev = 0\ncounter = collections.defaultdict(int)\ncounter[ans] = 1\nwhile 1:\n    count += 1\n    if ans % 2 == 0:\n        ans = ans / 2\n    else:\n        ans = 3 * n + 1\n    if ans not in counter.keys:\n        counter[ans] = count\n    else:\n        print(counter[ans])\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                13
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 6,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"argument of type 'builtin_function_or_method' is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 8",
                    "count=1",
                    "ans=s",
                    "prev=0",
                    "counter = collections.defaultdict(int)",
                    "counter[ans]=1"
                ],
                "2": [
                    "while(1):"
                ],
                "3": [
                    "count+=1",
                    "(ans % 2 == 0)"
                ],
                "4": [
                    "ans = ans / 2"
                ],
                "5": [
                    "ans = 3*n+1"
                ],
                "6": [
                    "(ans not in counter.keys)"
                ],
                "7": [
                    "counter[ans]=count"
                ],
                "8": [
                    "print(counter[ans])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 8\n    count=1\n    ans=s\n    prev=0\n    counter = collections.defaultdict(int)\n    counter[ans]=1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while(1):\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    count+=1\n    (ans % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans = ans / 2\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    ans = 3*n+1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    (ans not in counter.keys)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    counter[ans]=count\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(counter[ans])\nNext:\n    <END>\n"
        }
    },
    "p03212": {
        "s426619018": {
            "code": "N = 575\nans = 0\nfor p in product(['0', '3', '5', '7'], repeat=9):\n    s = ''.join(p)\n    if '3' in s and '5' in s and (7 in 's') and (int(s) <= N):\n        ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'in <string>' requires string as left operand, not int\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 575",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> p, Iterate Over -> product(['0', '3', '5', '7'], repeat=9)"
                ],
                "3": [
                    "s = ''.join(p)",
                    "('3' in s and '5' in s and (7 in 's') and (int(s) <= N))"
                ],
                "4": [
                    "ans += 1"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 575\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> p, Iterate Over -> product(['0', '3', '5', '7'], repeat=9)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    s = ''.join(p)\n    ('3' in s and '5' in s and (7 in 's') and (int(s) <= N))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s378951214": {
            "code": "x = 575\nl = [3, 5, 7]\nh = itertools.combinations_with_replacement(l, 4)\ncnt = 0\nfor v in itertools.combinations_with_replacement(l, 4):\n    if 3 in v and 5 in v and (7 in v):\n        if v < x:\n            cnt += 1\nh_list = list(itertools.combinations_with_replacement(l, 4))\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'tuple' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = 575",
                    "l = [3, 5, 7]",
                    "h = itertools.combinations_with_replacement(l, 4)",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> v, Iterate Over -> itertools.combinations_with_replacement(l, 4)"
                ],
                "3": [
                    "(3 in v and 5 in v and (7 in v))"
                ],
                "4": [
                    "(v < x)"
                ],
                "5": [
                    "cnt += 1"
                ],
                "6": [
                    "h_list = list(itertools.combinations_with_replacement(l, 4))",
                    "print (cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 575\n    l = [3, 5, 7]\n    h = itertools.combinations_with_replacement(l, 4)\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> itertools.combinations_with_replacement(l, 4)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (3 in v and 5 in v and (7 in v))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    (v < x)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    h_list = list(itertools.combinations_with_replacement(l, 4))\n    print (cnt)\nNext:\n    <END>\n"
        }
    },
    "p03220": {
        "s155348015": {
            "code": "N = '2'\nTA = '12 5'\nT, A = TA.split()\nHinp = '1000 2000'\nH = Hinp.split()\nans = None\nfor x in range(H):\n    _ans = T - x * 0.006\n    if _ans == ans:\n        print(ans)\n        sys.exit()\n    if not ans or abs(A - _ans) < abs(A - ans):\n        ans = _ans\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "TA = '12 5'",
                    "T, A = TA.split()",
                    "Hinp = '1000 2000'",
                    "H = Hinp.split()",
                    "ans = None"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> range(H)"
                ],
                "3": [
                    "_ans = T - x * 0.006",
                    "(_ans == ans)"
                ],
                "4": [
                    "print(ans)",
                    "sys.exit()"
                ],
                "5": [
                    "(not ans or abs(A - _ans) < abs(A - ans))"
                ],
                "6": [
                    "ans = _ans"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    TA = '12 5'\n    T, A = TA.split()\n    Hinp = '1000 2000'\n    H = Hinp.split()\n    ans = None\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> range(H)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    _ans = T - x * 0.006\n    (_ans == ans)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(ans)\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (not ans or abs(A - _ans) < abs(A - ans))\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    ans = _ans\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03260": {
        "s759704112": {
            "code": "num = '3 1'\na, b = int(num.split())\nif a != 2 and b != 2:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "num = '3 1'",
                    "a,b=int(num.split())",
                    "(a != 2 and b != 2)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = '3 1'\n    a,b=int(num.split())\n    (a != 2 and b != 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03264": {
        "s127183724": {
            "code": "K = '3'\nall_number = K * K\neven_number = math.floor(K / 2) * math.floor(K / 2)\nodd_number = math.ceil(K / 2) * math.ceil(K / 2)\nanswer = (all_number - even_number - odd_number) / 2\nprint(answer)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "K = '3'",
                    "all_number =  K * K",
                    "even_number =  math.floor(K/2) * math.floor(K/2)",
                    "odd_number = math.ceil(K/2) * math.ceil(K/2)",
                    "answer = (all_number - even_number - odd_number)/2",
                    "print(answer)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    K = '3'\n    all_number =  K * K\n    even_number =  math.floor(K/2) * math.floor(K/2)\n    odd_number = math.ceil(K/2) * math.ceil(K/2)\n    answer = (all_number - even_number - odd_number)/2\n    print(answer)\nNext:\n    <END>\n"
        },
        "s533244506": {
            "code": "s = '3'\nreturn math.floor(s / 2) * math.ceil(s / 2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '3'",
                    "return math.floor(s/2)*math.ceil(s/2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '3'\n    return math.floor(s/2)*math.ceil(s/2)\nNext:\n    <END>\n"
        },
        "s903451819": {
            "code": "n = 3\nif n % 2 == 0:\n    print((n % 2) ** 2)\nelse:\n    print((n + 1) % 2) * ((n + 1) % 2 - 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for *: 'NoneType' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "(n % 2 == 0)"
                ],
                "2": [
                    "print((n%2)**2)"
                ],
                "3": [
                    "print((n+1)%2)*((n+1)%2-1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print((n%2)**2)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print((n+1)%2)*((n+1)%2-1)\nNext:\n    <END>\n"
        },
        "s933596689": {
            "code": "s = '3'\nprint(math.ceil(s / 2) * math.floor(s / 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '3'",
                    "print(math.ceil(s/2)*math.floor(s/2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '3'\n    print(math.ceil(s/2)*math.floor(s/2))\nNext:\n    <END>\n"
        }
    },
    "p03378": {
        "s287709971": {
            "code": "a = ['5', '3', '3']\nA = ['1', '2', '4']\ncount = 0\nfor i in range(0, a[2]):\n    if A[i] < a[2]:\n        count = count + 1\nif count > A.shape[0] - count:\n    count = A.shape[0] - count\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['5', '3', '3']",
                    "A = ['1', '2', '4']",
                    "count = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, a[2])"
                ],
                "3": [
                    "(A[i] < a[2])"
                ],
                "4": [
                    "count = count + 1"
                ],
                "5": [
                    "(count > A.shape[0] - count)"
                ],
                "6": [
                    "count = A.shape[0] -  count"
                ],
                "7": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['5', '3', '3']\n    A = ['1', '2', '4']\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, a[2])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (A[i] < a[2])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count = count + 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (count > A.shape[0] - count)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    count = A.shape[0] -  count\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p03385": {
        "s342603390": {
            "code": "S = 'bac'\nfind_a = re.findall('a')\nfind_b = re.findall('b')\nfind_c = re.findall('c')\nif find_a and find_b and find_c:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"findall() missing 1 required positional argument: 'string'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'bac'",
                    "find_a= re.findall(\"a\")",
                    "find_b = re.findall(\"b\")",
                    "find_c = re.findall(\"c\")",
                    "(find_a and find_b and find_c)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'bac'\n    find_a= re.findall(\"a\")\n    find_b = re.findall(\"b\")\n    find_c = re.findall(\"c\")\n    (find_a and find_b and find_c)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03424": {
        "s190929874": {
            "code": "input = sys.stdin.readline\nN = 6\nS = ['G', 'W', 'Y', 'P', 'Y', 'W']\nc = Counter(S)\nif len(c.keys) == 4:\n    print('Four')\nelse:\n    print('Three')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "c": "Counter({'G': 1, 'W': 2, 'Y': 2, 'P': 1})"
                        },
                        {
                            "N": "6"
                        },
                        {
                            "input": "<built-in method readline of _io.TextIOWrapper object at 0x7f7a0c31f510>"
                        },
                        {
                            "S": "['G', 'W', 'Y', 'P', 'Y', 'W']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'builtin_function_or_method' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input = sys.stdin.readline",
                    "N = 6",
                    "S = ['G', 'W', 'Y', 'P', 'Y', 'W']",
                    "c = Counter(S)",
                    "(len(c.keys) == 4)"
                ],
                "2": [
                    "print(\"Four\")"
                ],
                "3": [
                    "print(\"Three\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input = sys.stdin.readline\n    N = 6\n    S = ['G', 'W', 'Y', 'P', 'Y', 'W']\n    c = Counter(S)\n    (len(c.keys) == 4)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Four\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Three\")\nNext:\n    <END>\n"
        }
    },
    "p03455": {
        "s978488152": {
            "code": "num = [3, 4]\nprint(num)\nif sum % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'builtin_function_or_method' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "num = [3, 4]",
                    "print(num)",
                    "(sum % 2 == 0)"
                ],
                "2": [
                    "print(\"Even\")"
                ],
                "3": [
                    "print(\"Odd\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = [3, 4]\n    print(num)\n    (sum % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Even\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Odd\")\nNext:\n    <END>\n"
        }
    },
    "p03457": {
        "s239916888": {
            "code": "n = 2\nX = 0\nY = 0\nT = 0\nfor i in range(n):\n    t, x, y = map(int, sys.stdin.readline().split())\n    d = abs(X - x) + abs(Y - y)\n    if sum < T - t and (d - (T - t)) % 2 == 0:\n        X = x\n        Y = y\n        T = t\n    else:\n        print('No')\nprint('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'builtin_function_or_method' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "X = 0",
                    "Y = 0",
                    "T = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "t,x,y = map(int, sys.stdin.readline().split())",
                    "d = abs(X-x)+abs(Y-y)",
                    "(sum < T - t and (d - (T - t)) % 2 == 0)"
                ],
                "4": [
                    "X = x",
                    "Y = y",
                    "T = t"
                ],
                "5": [
                    "print('No')"
                ],
                "6": [
                    "print('Yes')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    X = 0\n    Y = 0\n    T = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    t,x,y = map(int, sys.stdin.readline().split())\n    d = abs(X-x)+abs(Y-y)\n    (sum < T - t and (d - (T - t)) % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    X = x\n    Y = y\n    T = t\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print('No')\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print('Yes')\nNext:\n    <END>\n"
        }
    },
    "p03485": {
        "s557422225": {
            "code": "numbers = ['1', '3']\nnumber1 = numbers[0]\nnumber2 = numbers[1]\nmean = (number1 + number2) / 2\nprint(math.ceil(mean))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "numbers = ['1', '3']",
                    "number1 = numbers[0]",
                    "number2 = numbers[1]",
                    "mean = (number1+number2) / 2",
                    "print(math.ceil(mean))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    numbers = ['1', '3']\n    number1 = numbers[0]\n    number2 = numbers[1]\n    mean = (number1+number2) / 2\n    print(math.ceil(mean))\nNext:\n    <END>\n"
        }
    },
    "p03545": {
        "s112815795": {
            "code": "s = '1222'\nfor b in list(product['+', '-'], repeat=3):\n    ans = s[0] + b[0] + s[1] + b[1] + s[2] + b[2] + s[3]\n    if evel(ans) == 7:\n        print(ans + '7')\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"type 'itertools.product' is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '1222'"
                ],
                "2": [
                    "iterator -> b, Iterate Over -> list(product['+', '-'], repeat=3)"
                ],
                "3": [
                    "ans=s[0]+b[0]+s[1]+b[1]+s[2]+b[2]+s[3]",
                    "(evel(ans) == 7)"
                ],
                "4": [
                    "print(ans+\"7\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1222'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> b, Iterate Over -> list(product['+', '-'], repeat=3)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    ans=s[0]+b[0]+s[1]+b[1]+s[2]+b[2]+s[3]\n    (evel(ans) == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(ans+\"7\")\nNext:\n    <END>\n"
        },
        "s685584537": {
            "code": "s = '1222'\na, b, c, d = (s[0], s[1], s[2], s[3])\nif a + b + c + d == 7:\n    print('a+b+c+d=7')\n    sys.exit()\nif a + b + c - d == 7:\n    print('a+b+c-d=7')\n    sys.exit()\nif a + b - c + d == 7:\n    print('a+b-c+d=7')\n    sys.exit()\nif a - b + c + d == 7:\n    print('a-b+c+d=7')\n    sys.exit()\nif a + b - c - d == 7:\n    print('a+b-c-d=7')\n    sys.exit()\nif a - b - c + d == 7:\n    print('a-b-c+d=7')\n    sys.exit()\nif a - b + c - d == 7:\n    print('a-b+c-d=7')\n    sys.exit()\nif a - b - c - d == 7:\n    print('a-b-c-d=7')\n    sys.exit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                },
                "10": {
                    "range": [
                        16,
                        17
                    ]
                },
                "11": {
                    "range": [
                        18,
                        18
                    ]
                },
                "12": {
                    "range": [
                        19,
                        20
                    ]
                },
                "13": {
                    "range": [
                        21,
                        21
                    ]
                },
                "14": {
                    "range": [
                        22,
                        23
                    ]
                },
                "15": {
                    "range": [
                        24,
                        24
                    ]
                },
                "16": {
                    "range": [
                        25,
                        26
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '1222'",
                    "a,b,c,d=s[0],s[1],s[2],s[3]",
                    "(a + b + c + d == 7)"
                ],
                "2": [
                    "print('a+b+c+d=7')",
                    "sys.exit()"
                ],
                "3": [
                    "(a + b + c - d == 7)"
                ],
                "4": [
                    "print('a+b+c-d=7')",
                    "sys.exit()"
                ],
                "5": [
                    "(a + b - c + d == 7)"
                ],
                "6": [
                    "print('a+b-c+d=7')",
                    "sys.exit()"
                ],
                "7": [
                    "(a - b + c + d == 7)"
                ],
                "8": [
                    "print('a-b+c+d=7')",
                    "sys.exit()"
                ],
                "9": [
                    "(a + b - c - d == 7)"
                ],
                "10": [
                    "print('a+b-c-d=7')",
                    "sys.exit()"
                ],
                "11": [
                    "(a - b - c + d == 7)"
                ],
                "12": [
                    "print('a-b-c+d=7')",
                    "sys.exit()"
                ],
                "13": [
                    "(a - b + c - d == 7)"
                ],
                "14": [
                    "print('a-b+c-d=7')",
                    "sys.exit()"
                ],
                "15": [
                    "(a - b - c - d == 7)"
                ],
                "16": [
                    "print('a-b-c-d=7')",
                    "sys.exit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1222'\n    a,b,c,d=s[0],s[1],s[2],s[3]\n    (a + b + c + d == 7)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('a+b+c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (a + b + c - d == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('a+b+c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a + b - c + d == 7)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('a+b-c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (a - b + c + d == 7)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('a-b+c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (a + b - c - d == 7)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('a+b-c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (a - b - c + d == 7)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print('a-b-c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (a - b + c - d == 7)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print('a-b+c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (a - b - c - d == 7)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print('a-b-c-d=7')\n    sys.exit()\nNext:\n    <END>\n"
        }
    },
    "p03610": {
        "s492889353": {
            "code": "n = 'atcoder'\na = []\nfor i in range(0, math.ceil(n / 2), 2):\n    a.append(a[i])\nprint(*a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'atcoder'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'atcoder'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 'atcoder'",
                    "a = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, math.ceil(n / 2), 2)"
                ],
                "3": [
                    "a.append(a[i])"
                ],
                "4": [
                    "print(*a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 'atcoder'\n    a = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, math.ceil(n / 2), 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a.append(a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(*a)\nNext:\n    <END>\n"
        },
        "s798439196": {
            "code": "n = 'atcoder'\na = []\nfor i in range(0, math.ceil(n / 2), 2):\n    a.append(str(a[i]))\nprint(*a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'atcoder'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'atcoder'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 'atcoder'",
                    "a = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, math.ceil(n / 2), 2)"
                ],
                "3": [
                    "a.append(str(a[i]))"
                ],
                "4": [
                    "print(*a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 'atcoder'\n    a = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, math.ceil(n / 2), 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a.append(str(a[i]))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(*a)\nNext:\n    <END>\n"
        }
    },
    "p03672": {
        "s431333695": {
            "code": "s = ['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']\nt = s.copy()\nfor i in range(len(t)):\n    if len(s) % 2 == 0 and s[:len(s) / 2] == s[len(s) / 2:]:\n        print(len(s))\n        exit()\n    else:\n        s.pop(-1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']"
                        },
                        {
                            "t": "['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']"
                        },
                        {
                            "t": "['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']"
                        },
                        {
                            "t": "['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']",
                    "t=s.copy()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(t))"
                ],
                "3": [
                    "(len(s) % 2 == 0 and s[:len(s) / 2] == s[len(s) / 2:])"
                ],
                "4": [
                    "print(len(s))",
                    "exit()"
                ],
                "5": [
                    "s.pop(-1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['a', 'b', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'b']\n    t=s.copy()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(t))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (len(s) % 2 == 0 and s[:len(s) / 2] == s[len(s) / 2:])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(len(s))\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    s.pop(-1)\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03694": {
        "s844118056": {
            "code": "N = '4'\nan = '2 3 7 9'\ns = sorted(set(int(an.split())))\nprint(sum(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '4'",
                    "an = '2 3 7 9'",
                    "s = sorted(set(int(an.split())))",
                    "print(sum(s))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    an = '2 3 7 9'\n    s = sorted(set(int(an.split())))\n    print(sum(s))\nNext:\n    <END>\n"
        },
        "s135547019": {
            "code": "N = '4'\nan = '2 3 7 9'\ns = set(sorted(an.split()))\nprint(sum(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '4'",
                    "an = '2 3 7 9'",
                    "s = set(sorted(an.split()))",
                    "print(sum(s))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    an = '2 3 7 9'\n    s = set(sorted(an.split()))\n    print(sum(s))\nNext:\n    <END>\n"
        },
        "s726530605": {
            "code": "N = '4'\nan = '2 3 7 9'\ns = sorted(set(an.split()))\nprint(sum(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '4'",
                    "an = '2 3 7 9'",
                    "s = sorted(set(an.split()))",
                    "print(sum(s))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    an = '2 3 7 9'\n    s = sorted(set(an.split()))\n    print(sum(s))\nNext:\n    <END>\n"
        }
    },
    "p03698": {
        "s771343588": {
            "code": "l = ['u', 'n', 'c', 'o', 'p', 'y', 'r', 'i', 'g', 'h', 't', 'a', 'b', 'l', 'e']\nc = Counter(l)\nif max(c) >= 2:\n    print('yes')\nelse:\n    print('no')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "l = ['u', 'n', 'c', 'o', 'p', 'y', 'r', 'i', 'g', 'h', 't', 'a', 'b', 'l', 'e']",
                    "c = Counter(l)",
                    "(max(c) >= 2)"
                ],
                "2": [
                    "print('yes')"
                ],
                "3": [
                    "print('no')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    l = ['u', 'n', 'c', 'o', 'p', 'y', 'r', 'i', 'g', 'h', 't', 'a', 'b', 'l', 'e']\n    c = Counter(l)\n    (max(c) >= 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('no')\nNext:\n    <END>\n"
        }
    },
    "p03699": {
        "s624985660": {
            "code": "N = 3\nS = [5, 10, 15]\nS.sort()\nt = sum(S)\nif t % 10 != 0:\n    print(t)\n    sys.exit()\nfor s in range(S):\n    if (t - s) % 10 != 0:\n        print(t - s)\n        sys.exit()\nprint(0)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "S = [5, 10, 15]",
                    "S.sort()",
                    "t = sum(S)",
                    "(t % 10 != 0)"
                ],
                "2": [
                    "print(t)",
                    "sys.exit()"
                ],
                "3": [
                    "iterator -> s, Iterate Over -> range(S)"
                ],
                "4": [
                    "((t - s) % 10 != 0)"
                ],
                "5": [
                    "print(t - s)",
                    "sys.exit()"
                ],
                "6": [
                    "print(0)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    S = [5, 10, 15]\n    S.sort()\n    t = sum(S)\n    (t % 10 != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(t)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> s, Iterate Over -> range(S)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    ((t - s) % 10 != 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    print(t - s)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    <END>\n"
        }
    },
    "p03861": {
        "s340528250": {
            "code": "s = '4 8 2'\nprint('A%sC' % re.match('AtCoder (.).* Contest', s)[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '4 8 2'",
                    "print(\"A%sC\" % re.match('AtCoder (.).* Contest', s)[1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '4 8 2'\n    print(\"A%sC\" % re.match('AtCoder (.).* Contest', s)[1])\nNext:\n    <END>\n"
        }
    },
    "p04001": {
        "s507392584": {
            "code": "S = '125'\nans = 0\nfor string in product(['', '+'], repeat=len(S) - 1):\n    string = list(string)\n    string.append('')\n    sum_ = [a + b for a, b in zip(S, string)]\n    ans += sum_\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '125'",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> string, Iterate Over -> product(['', '+'], repeat=len(S) - 1)"
                ],
                "3": [
                    "string = list(string)",
                    "string.append(\"\")",
                    "sum_ = [a + b for a,b in zip(S,string)]",
                    "ans += sum_"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '125'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> string, Iterate Over -> product(['', '+'], repeat=len(S) - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    string = list(string)\n    string.append(\"\")\n    sum_ = [a + b for a,b in zip(S,string)]\n    ans += sum_\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p04029": {
        "s328496599": {
            "code": "n = 3\nprint(reduce(mul, map(range(1, n + 1))))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('map() must have at least two arguments.')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "print(reduce(mul, map(range(1,n+1))))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    print(reduce(mul, map(range(1,n+1))))\nNext:\n    <END>\n"
        }
    }
}