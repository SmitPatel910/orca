{
    "p02258": {
        "s217117243": {
            "code": "n = 6\na = ['5', '3', '1', '3', '4', '3']\nmargin = max(a) - min(a)\nprint(margin)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "a": "['5', '3', '1', '3', '4', '3']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "a = ['5', '3', '1', '3', '4', '3']",
                    "margin = max(a) - min(a)",
                    "print(margin)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = ['5', '3', '1', '3', '4', '3']\n    margin = max(a) - min(a)\n    print(margin)\nNext:\n    <END>\n"
        }
    },
    "p02388": {
        "s314503322": {
            "code": "x = '2'\nprint(x**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
        },
        "s108961858": {
            "code": "x = '2'\nPow = x*x*x\nprint (Pow)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "Pow = x*x*x",
                    "print (Pow)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    Pow = x*x*x\n    print (Pow)\nNext:\n    <END>\n"
        },
        "s810257670": {
            "code": "x = '2'\nprint(x ** 3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x ** 3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x ** 3)\nNext:\n    <END>\n"
        },
        "s370521374": {
            "code": "x = '2'\ny = x**3\nprint(y)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "y = x**3",
                    "print(y)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    y = x**3\n    print(y)\nNext:\n    <END>\n"
        },
        "s239141185": {
            "code": "x = '2'\nprint(x**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
        },
        "s611762447": {
            "code": "x = '2'\nans = x ** 3\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "ans = x ** 3",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    ans = x ** 3\n    print(ans)\nNext:\n    <END>\n"
        },
        "s469622184": {
            "code": "x = '2'\nprint(x ** 3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x ** 3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x ** 3)\nNext:\n    <END>\n"
        },
        "s544248408": {
            "code": "N = '2'\nprint(N**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "print(N**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    print(N**3)\nNext:\n    <END>\n"
        },
        "s957393869": {
            "code": "x = '2'\nprint(x**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
        },
        "s405362471": {
            "code": "x = '2'\nprint(x ** 3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x ** 3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x ** 3)\nNext:\n    <END>\n"
        },
        "s573206827": {
            "code": "s = '2'\na=s**3\nprint(a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '2'",
                    "a=s**3",
                    "print(a)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '2'\n    a=s**3\n    print(a)\nNext:\n    <END>\n"
        },
        "s088793197": {
            "code": "x = '2'\nprint(x**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
        },
        "s195807802": {
            "code": "hoge = '2'\nprint(hoge ** 3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "hoge": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "hoge = '2'",
                    "print(hoge ** 3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    hoge = '2'\n    print(hoge ** 3)\nNext:\n    <END>\n"
        },
        "s537567275": {
            "code": "x = '2'\nprint(x**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "print(x**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    print(x**3)\nNext:\n    <END>\n"
        },
        "s189145088": {
            "code": "x = '2'\nx = pow(x, 3)\nprint(x + \"\\n\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '2'",
                    "x = pow(x, 3)",
                    "print(x + \"\\n\")"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '2'\n    x = pow(x, 3)\n    print(x + \"\\n\")\nNext:\n    <END>\n"
        }
    },
    "p02389": {
        "s361298096": {
            "code": "str = '3 5'\na = str[0]\nb = str[2]\nprint(a*b, end='')\nprint((a+b)*2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "str": "'3 5'"
                        },
                        {
                            "b": "'5'"
                        },
                        {
                            "a": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "str = '3 5'",
                    "a = str[0]",
                    "b = str[2]",
                    "print(a*b, end='')",
                    "print((a+b)*2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    str = '3 5'\n    a = str[0]\n    b = str[2]\n    print(a*b, end='')\n    print((a+b)*2)\nNext:\n    <END>\n"
        },
        "s255812565": {
            "code": "nums = [3, 5]\narea = nums[0] * nums[1]\nperimeter = nums[0] * 2 + nums[1] * 2\nprint(area + \" \" + perimeter)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "perimeter": "16"
                        },
                        {
                            "nums": "[3, 5]"
                        },
                        {
                            "area": "15"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "nums = [3, 5]",
                    "area = nums[0] * nums[1]",
                    "perimeter = nums[0] * 2 + nums[1] * 2",
                    "print(area + \" \" + perimeter)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    nums = [3, 5]\n    area = nums[0] * nums[1]\n    perimeter = nums[0] * 2 + nums[1] * 2\n    print(area + \" \" + perimeter)\nNext:\n    <END>\n"
        },
        "s292404723": {
            "code": "ab = '3 5'\nprint(ab.split(' ')[0]*ab.split(' ')[1]+\" \"+(ab.split(' ')[0]+ab.split(' ')[1])*2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ab": "'3 5'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "ab = '3 5'",
                    "print(ab.split(' ')[0]*ab.split(' ')[1]+\" \"+(ab.split(' ')[0]+ab.split(' ')[1])*2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    ab = '3 5'\n    print(ab.split(' ')[0]*ab.split(' ')[1]+\" \"+(ab.split(' ')[0]+ab.split(' ')[1])*2)\nNext:\n    <END>\n"
        }
    },
    "p02390": {
        "s241764583": {
            "code": "s = 46979\nm = s // 60\nh = m // 60\ns = s % 60\noutput=\"\"\nif(h!=0):\n   output+=int(h)\noutput+=\":\"\nif(m!=0):\n   output+=int(m)\noutput+=\":\"\nif(s!=0):\n   output+=int(s)\nprint(output)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "output": "''"
                        },
                        {
                            "h": "13"
                        },
                        {
                            "s": "59"
                        },
                        {
                            "m": "782"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "output": "''"
                        },
                        {
                            "h": "13"
                        },
                        {
                            "s": "59"
                        },
                        {
                            "m": "782"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 46979",
                    "m = s // 60",
                    "h = m // 60",
                    "s = s % 60",
                    "output=\"\"",
                    "(h != 0)"
                ],
                "2": [
                    "output+=int(h)"
                ],
                "3": [
                    "output+=\":\"",
                    "(m != 0)"
                ],
                "4": [
                    "output+=int(m)"
                ],
                "5": [
                    "output+=\":\"",
                    "(s != 0)"
                ],
                "6": [
                    "output+=int(s)"
                ],
                "7": [
                    "print(output)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 46979\n    m = s // 60\n    h = m // 60\n    s = s % 60\n    output=\"\"\n    (h != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    output+=int(h)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    output+=\":\"\n    (m != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    output+=int(m)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    output+=\":\"\n    (s != 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    output+=int(s)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(output)\nNext:\n    <END>\n"
        },
        "s202243147": {
            "code": "s = '46979'\na, b = divmod(s, 60)\nh, m = divmod(a, 60)\nprint(\"{02d}:{02d}:{02d}\".format(h, m, b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'46979'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for divmod(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '46979'",
                    "a, b = divmod(s, 60)",
                    "h, m = divmod(a, 60)",
                    "print(\"{02d}:{02d}:{02d}\".format(h, m, b))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '46979'\n    a, b = divmod(s, 60)\n    h, m = divmod(a, 60)\n    print(\"{02d}:{02d}:{02d}\".format(h, m, b))\nNext:\n    <END>\n"
        },
        "s043122407": {
            "code": "sec_time = 46979\nhour = sec_time // 3600\nminutes = sec_time % 3600 // 60\nseconds = sec_time % 3600 % 60\ntime = ':'.join(hour, minutes, seconds)\nprint(time)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "sec_time": "46979"
                        },
                        {
                            "hour": "13"
                        },
                        {
                            "seconds": "59"
                        },
                        {
                            "minutes": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('str.join() takes exactly one argument (3 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "sec_time = 46979",
                    "hour = sec_time // 3600",
                    "minutes = sec_time % 3600 // 60",
                    "seconds = sec_time % 3600 % 60",
                    "time = ':'.join(hour, minutes, seconds)",
                    "print(time)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    sec_time = 46979\n    hour = sec_time // 3600\n    minutes = sec_time % 3600 // 60\n    seconds = sec_time % 3600 % 60\n    time = ':'.join(hour, minutes, seconds)\n    print(time)\nNext:\n    <END>\n"
        },
        "s883250214": {
            "code": "S = '46979'\nprint(':'.join(map(str,[S/3600,S%3600/60,S%60])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'46979'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '46979'",
                    "print(':'.join(map(str,[S/3600,S%3600/60,S%60])))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '46979'\n    print(':'.join(map(str,[S/3600,S%3600/60,S%60])))\nNext:\n    <END>\n"
        },
        "s577104297": {
            "code": "S = 46979\nko = \":\"\nprint(\"S[0:2]\" + ko + S[2:3] + ko + S[3:5])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ko": "':'"
                        },
                        {
                            "S": "46979"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 46979",
                    "ko = \":\"",
                    "print(\"S[0:2]\" + ko + S[2:3] + ko + S[3:5])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 46979\n    ko = \":\"\n    print(\"S[0:2]\" + ko + S[2:3] + ko + S[3:5])\nNext:\n    <END>\n"
        },
        "s660801065": {
            "code": "S = '46979'\ns = S % 60\nm = int(S / 60) % 60\nh = int(int(S / 60) / 60)\nprint('%d:%d:%d' % (h,m,s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'46979'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '46979'",
                    "s = S % 60",
                    "m = int(S / 60) % 60",
                    "h = int(int(S / 60) / 60)",
                    "print('%d:%d:%d' % (h,m,s))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '46979'\n    s = S % 60\n    m = int(S / 60) % 60\n    h = int(int(S / 60) / 60)\n    print('%d:%d:%d' % (h,m,s))\nNext:\n    <END>\n"
        }
    },
    "p02393": {
        "s429159591": {
            "code": "inp = [3, 8, 1]\nl=inp.sort()\nprint(l[0],l[1],l[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "None"
                        },
                        {
                            "inp": "[1, 3, 8]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "inp = [3, 8, 1]",
                    "l=inp.sort()",
                    "print(l[0],l[1],l[2])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    inp = [3, 8, 1]\n    l=inp.sort()\n    print(l[0],l[1],l[2])\nNext:\n    <END>\n"
        },
        "s925834274": {
            "code": "z = '3 8 1'\nl = z.split()\nl.sort()\nprint(\"%s %s %s\" % l[0],l[1],l[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "z": "'3 8 1'"
                        },
                        {
                            "l": "['1', '3', '8']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not enough arguments for format string')"
            },
            "cfg_block_statements": {
                "1": [
                    "z = '3 8 1'",
                    "l = z.split()",
                    "l.sort()",
                    "print(\"%s %s %s\" % l[0],l[1],l[2])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    z = '3 8 1'\n    l = z.split()\n    l.sort()\n    print(\"%s %s %s\" % l[0],l[1],l[2])\nNext:\n    <END>\n"
        },
        "s157478426": {
            "code": "x = ['3', '8', '1']\ni = list(map(int(x)))\na = i[0]\nb = i[1]\nc = i[2]\nprint('{} {} {}'.format(c,b,a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "['3', '8', '1']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = ['3', '8', '1']",
                    "i = list(map(int(x)))",
                    "a = i[0]",
                    "b = i[1]",
                    "c = i[2]",
                    "print('{} {} {}'.format(c,b,a))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = ['3', '8', '1']\n    i = list(map(int(x)))\n    a = i[0]\n    b = i[1]\n    c = i[2]\n    print('{} {} {}'.format(c,b,a))\nNext:\n    <END>\n"
        }
    },
    "p02400": {
        "s418353071": {
            "code": "N = '2'\npi = 3.141592653589\nS = round(N**2*pi, 6)\nR = round(2*pi*N, 6)\nprint(S, R)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "pi": "3.141592653589"
                        },
                        {
                            "N": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "pi = 3.141592653589",
                    "S = round(N**2*pi, 6)",
                    "R = round(2*pi*N, 6)",
                    "print(S, R)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    pi = 3.141592653589\n    S = round(N**2*pi, 6)\n    R = round(2*pi*N, 6)\n    print(S, R)\nNext:\n    <END>\n"
        },
        "s649586826": {
            "code": "r = '2'\nimport math\nprint(\"{:.6f} {:.6f}\".format(r ** 2 * math.pi, 2 * r * math.pi))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "r": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "import math",
                    "print(\"{:.6f} {:.6f}\".format(r ** 2 * math.pi, 2 * r * math.pi))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    import math\n    print(\"{:.6f} {:.6f}\".format(r ** 2 * math.pi, 2 * r * math.pi))\nNext:\n    <END>\n"
        }
    },
    "p02534": {
        "s494164215": {
            "code": "k = '3'\ntext = \"ACL\"*k\nprint(k)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "k = '3'",
                    "text = \"ACL\"*k",
                    "print(k)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    k = '3'\n    text = \"ACL\"*k\n    print(k)\nNext:\n    <END>\n"
        }
    },
    "p02577": {
        "s734585332": {
            "code": "n = '123456789'\nn=str(n)\nSum=0\nfor i in range(len(n)):\n    Sum=Sum+n[i]-\"0\"\nif Sum%9==0:\n    print(\"yes\")\nelse:\n    print(\"no\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'123456789'"
                        },
                        {
                            "Sum": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'123456789'"
                        },
                        {
                            "Sum": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "'123456789'"
                        },
                        {
                            "Sum": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '123456789'",
                    "n=str(n)",
                    "Sum=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(n))"
                ],
                "3": [
                    "Sum=Sum+n[i]-\"0\""
                ],
                "4": [
                    "(Sum % 9 == 0)"
                ],
                "5": [
                    "print(\"yes\")"
                ],
                "6": [
                    "print(\"no\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '123456789'\n    n=str(n)\n    Sum=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(n))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    Sum=Sum+n[i]-\"0\"\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (Sum % 9 == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"no\")\nNext:\n    <END>\n"
        },
        "s392787295": {
            "code": "N = '123456789'\nif N % 9 == 0:\n    print(\"Yes\")\nelse :\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'123456789'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '123456789'",
                    "(N % 9 == 0)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '123456789'\n    (N % 9 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s045624846": {
            "code": "n = '123456789'\nif(n % 9 == 0): print(\"Yes\")\nelse : print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'123456789'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '123456789'",
                    "(n % 9 == 0)"
                ],
                "2": [
                    "(n % 9 == 0)"
                ],
                "3": [
                    "else : print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '123456789'\n    (n % 9 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    (n % 9 == 0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    else : print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02594": {
        "s820142711": {
            "code": "T = '25'\nif T >= 30:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "T": "'25'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "T = '25'",
                    "(T >= 30)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    T = '25'\n    (T >= 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s644368757": {
            "code": "X = '25'\nif 30 <= X  :\n\tprint(\"Yes\")\nelse :\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "X": "'25'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "X = '25'",
                    "(30 <= X)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = '25'\n    (30 <= X)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s931733229": {
            "code": "x = '25'\nif x>= 30:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'25'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '25'",
                    "(x >= 30)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '25'\n    (x >= 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s937151322": {
            "code": "n = '25'\nif n >= 30:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'25'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '25'",
                    "(n >= 30)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '25'\n    (n >= 30)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02612": {
        "s438310795": {
            "code": "N = '1900'\nx=N/1000\nx=int(x)\ny=1000*x\nprint(y-N)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'1900'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '1900'",
                    "x=N/1000",
                    "x=int(x)",
                    "y=1000*x",
                    "print(y-N)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '1900'\n    x=N/1000\n    x=int(x)\n    y=1000*x\n    print(y-N)\nNext:\n    <END>\n"
        },
        "s918187571": {
            "code": "n = 1900\nif n%1000!=0:\n    print(min(1000-(n%1000)))\nelse:\n    print(\"0\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "1900"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "1900"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 1900",
                    "(n % 1000 != 0)"
                ],
                "2": [
                    "print(min(1000-(n%1000)))"
                ],
                "3": [
                    "print(\"0\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 1900\n    (n % 1000 != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(min(1000-(n%1000)))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"0\")\nNext:\n    <END>\n"
        },
        "s502700417": {
            "code": "N = '1900'\nprint(1+N/1000)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'1900'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '1900'",
                    "print(1+N/1000)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '1900'\n    print(1+N/1000)\nNext:\n    <END>\n"
        }
    },
    "p02621": {
        "s116920726": {
            "code": "a = '2'\nprint(a+a**2+a**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '2'",
                    "print(a+a**2+a**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(a+a**2+a**3)\nNext:\n    <END>\n"
        },
        "s397859671": {
            "code": "a = '2'\nprint(pow(a,1)+pow(a,2)+pow(a,3))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '2'",
                    "print(pow(a,1)+pow(a,2)+pow(a,3))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(pow(a,1)+pow(a,2)+pow(a,3))\nNext:\n    <END>\n"
        },
        "s104150927": {
            "code": "a = 2\nprint(a*(1+a(1+a)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 2",
                    "print(a*(1+a(1+a)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 2\n    print(a*(1+a(1+a)))\nNext:\n    <END>\n"
        },
        "s715378999": {
            "code": "a = '2'\nprint(a+a**2+a**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '2'",
                    "print(a+a**2+a**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(a+a**2+a**3)\nNext:\n    <END>\n"
        }
    },
    "p02622": {
        "s410300949": {
            "code": "S = 'cupofcoffee'\nT = 'cupofhottea'\ncount = 0\nfor i in len(S):\n    if S[i] != T[i]:\n        count+= 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'cupofcoffee'"
                        },
                        {
                            "T": "'cupofhottea'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "'cupofcoffee'"
                        },
                        {
                            "T": "'cupofhottea'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'cupofcoffee'",
                    "T = 'cupofhottea'",
                    "count = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> len(S)"
                ],
                "3": [
                    "(S[i] != T[i])"
                ],
                "4": [
                    "count+= 1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'cupofcoffee'\n    T = 'cupofhottea'\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(S)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] != T[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count+= 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        },
        "s437251718": {
            "code": "S = 'cupofcoffee'\nT = 'cupofhottea'\ncount = 0\nfor (s,t) in map(S,T):\n  if s != t:\n    count += 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'cupofcoffee'"
                        },
                        {
                            "T": "'cupofhottea'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "'cupofcoffee'"
                        },
                        {
                            "T": "'cupofhottea'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'cupofcoffee'",
                    "T = 'cupofhottea'",
                    "count = 0"
                ],
                "2": [
                    "s <- index\n    t <- iterator"
                ],
                "3": [
                    "(s != t)"
                ],
                "4": [
                    "count += 1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'cupofcoffee'\n    T = 'cupofhottea'\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    s <- index\n    t <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s != t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p02639": {
        "s939531515": {
            "code": "x = [0, 2, 3, 4, 5]\nfor i in range(len(x)):\n  if x[i] == 0:\n    print(x + 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "[0, 2, 3, 4, 5]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "[0, 2, 3, 4, 5]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "x": "[0, 2, 3, 4, 5]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "x": "[0, 2, 3, 4, 5]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate list (not \"int\") to list')"
            },
            "cfg_block_statements": {
                "1": [
                    "x = [0, 2, 3, 4, 5]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(x))"
                ],
                "3": [
                    "(x[i] == 0)"
                ],
                "4": [
                    "print(x + 1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = [0, 2, 3, 4, 5]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(x))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x[i] == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(x + 1)\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02658": {
        "s067213358": {
            "code": "n = 2\na = [1000000000, 1000000000]\nlimit=10**18\nif 0 in a:\n    print(0)\n    exit()\nfor i in range(a):\n  ans *= a[i]\n  if sum>limit:\n    ans = -1\n    break\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "limit": "1000000000000000000"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "a": "[1000000000, 1000000000]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "limit": "1000000000000000000"
                        },
                        {
                            "n": "2"
                        },
                        {
                            "a": "[1000000000, 1000000000]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "a = [1000000000, 1000000000]",
                    "limit=10**18",
                    "(0 in a)"
                ],
                "2": [
                    "print(0)",
                    "exit()"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(a)"
                ],
                "4": [
                    "ans *= a[i]",
                    "(sum > limit)"
                ],
                "5": [
                    "ans = -1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    a = [1000000000, 1000000000]\n    limit=10**18\n    (0 in a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    ans *= a[i]\n    (sum > limit)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    ans = -1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s603625975": {
            "code": "import sys\nn = 2\na = [1000000000, 1000000000]\na.sort()\nif 0 in a:\n    print(0)\nelse:\n    cur = 1\n    for x in a:\n        cur *= a\n        if cur > 10 ** 18:\n            print(-1)\n            sys.exit()\n        print(cur)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import sys",
                    "n = 2",
                    "a = [1000000000, 1000000000]",
                    "a.sort()",
                    "(0 in a)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "cur = 1"
                ],
                "4": [
                    "iterator -> x, Iterate Over -> a"
                ],
                "5": [
                    "cur *= a",
                    "(cur > 10 ** 18)"
                ],
                "6": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "7": [
                    "print(cur)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    n = 2\n    a = [1000000000, 1000000000]\n    a.sort()\n    (0 in a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    cur = 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> x, Iterate Over -> a\nNext:\n    If True: Go to Block 5\n    <END>\nBlock 5:\nStatement:\n    cur *= a\n    (cur > 10 ** 18)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(cur)\nNext:\n    Go to Block: 4\n"
        },
        "s201181797": {
            "code": "N = 2\nA = ['1000000000', '1000000000']\nA = sorted(A)\nresult = 1\nmax = 10**18\nfor a in A:\n    result *= a\n    if result > max:\n        print(-1)\n        break\n    else:\n        print(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "max": "1000000000000000000"
                        },
                        {
                            "A": "['1000000000', '1000000000']"
                        },
                        {
                            "result": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "max": "1000000000000000000"
                        },
                        {
                            "A": "['1000000000', '1000000000']"
                        },
                        {
                            "result": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "result": "'1000000000'"
                        },
                        {
                            "max": "1000000000000000000"
                        },
                        {
                            "A": "['1000000000', '1000000000']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "A = ['1000000000', '1000000000']",
                    "A = sorted(A)",
                    "result = 1",
                    "max = 10**18"
                ],
                "2": [
                    "iterator -> a, Iterate Over -> A"
                ],
                "3": [
                    "result *= a",
                    "(result > max)"
                ],
                "4": [
                    "print(-1)"
                ],
                "5": [
                    "print(result)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    A = ['1000000000', '1000000000']\n    A = sorted(A)\n    result = 1\n    max = 10**18\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    result *= a\n    (result > max)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(result)\nNext:\n    Go to Block: 2\n"
        },
        "s230610507": {
            "code": "count = '2'\nlist = ['1000000000', '1000000000']\ni = 0\nnum = int(list[i])\ni += 1\nwhile i>= count:\n  num = num * int(list[i])\n  if num > 10**18:\n    print(-1)\n    break\n  i += 1",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "count": "'2'"
                        },
                        {
                            "list": "['1000000000', '1000000000']"
                        },
                        {
                            "num": "1000000000"
                        },
                        {
                            "i": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "count": "'2'"
                        },
                        {
                            "list": "['1000000000', '1000000000']"
                        },
                        {
                            "num": "1000000000"
                        },
                        {
                            "i": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "count = '2'",
                    "list = ['1000000000', '1000000000']",
                    "i = 0",
                    "num = int(list[i])",
                    "i += 1"
                ],
                "2": [
                    "while i>= count:"
                ],
                "3": [
                    "num = num * int(list[i])",
                    "(num > 10 ** 18)"
                ],
                "4": [
                    "print(-1)"
                ],
                "5": [
                    "i += 1"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    count = '2'\n    list = ['1000000000', '1000000000']\n    i = 0\n    num = int(list[i])\n    i += 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while i>= count:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    num = num * int(list[i])\n    (num > 10 ** 18)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    i += 1\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02675": {
        "s888621945": {
            "code": "n = '16'\nn %= 10\nhon = [2,4,5,7,9]\npon = [0,1,6,8]\nbon = [3]\nif n in hon:\n    print(\"hon\")\nelif n in pon:\n    print(\"pon\")\nelse:\n    print(\"bon\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'16'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '16'",
                    "n %= 10",
                    "hon = [2,4,5,7,9]",
                    "pon = [0,1,6,8]",
                    "bon = [3]",
                    "(n in hon)"
                ],
                "2": [
                    "print(\"hon\")"
                ],
                "3": [
                    "(n in pon)"
                ],
                "4": [
                    "print(\"pon\")"
                ],
                "5": [
                    "print(\"bon\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '16'\n    n %= 10\n    hon = [2,4,5,7,9]\n    pon = [0,1,6,8]\n    bon = [3]\n    (n in hon)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n in pon)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
        },
        "s514627776": {
            "code": "N = 16\nif N[-1] == 2 or 4 or 5 or 7 or 9:\n    print(\"hon\")\nif N[-1] == 0 or 1 or 6 or 8:\n    print(\"pon\")\nif N[-1] == 3:\n    print(\"bon\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "16"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 16",
                    "(N[-1] == 2 or 4 or 5 or 7 or 9)"
                ],
                "2": [
                    "print(\"hon\")"
                ],
                "3": [
                    "(N[-1] == 0 or 1 or 6 or 8)"
                ],
                "4": [
                    "print(\"pon\")"
                ],
                "5": [
                    "(N[-1] == 3)"
                ],
                "6": [
                    "print(\"bon\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 16\n    (N[-1] == 2 or 4 or 5 or 7 or 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (N[-1] == 0 or 1 or 6 or 8)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (N[-1] == 3)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
        },
        "s610458639": {
            "code": "N = 16\nif N[-1] == 2 or 4 or 5 or 7 or 9:\n    print(\"hon\")\nelif N[-1] == 0 or 1 or 6 or 8:\n    print(\"pon\")\nelif N[-1] == 3:\n    print(\"bon\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "16"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 16",
                    "(N[-1] == 2 or 4 or 5 or 7 or 9)"
                ],
                "2": [
                    "print(\"hon\")"
                ],
                "3": [
                    "(N[-1] == 0 or 1 or 6 or 8)"
                ],
                "4": [
                    "print(\"pon\")"
                ],
                "5": [
                    "(N[-1] == 3)"
                ],
                "6": [
                    "print(\"bon\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 16\n    (N[-1] == 2 or 4 or 5 or 7 or 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (N[-1] == 0 or 1 or 6 or 8)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (N[-1] == 3)\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
        },
        "s865056842": {
            "code": "N = ['1', '6']\nn=reversed(N)\nif n[0]==\"2\" or n[0]==\"4\" or n[0]==\"5\" or n[0]==\"7\" or n[0]==\"9\":\n    print(\"hon\")\nif n[0]==\"0\" or n[0]==\"1\" or n[0]==\"6\" or n[0]==\"8\":\n    print(\"pon\")\nif n[0]==\"3\":\n    print(\"bon\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "['1', '6']"
                        },
                        {
                            "n": "<list_reverseiterator object at 0x7f394e066a70>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list_reverseiterator' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = ['1', '6']",
                    "n=reversed(N)",
                    "(n[0] == '2' or n[0] == '4' or n[0] == '5' or (n[0] == '7') or (n[0] == '9'))"
                ],
                "2": [
                    "print(\"hon\")"
                ],
                "3": [
                    "(n[0] == '0' or n[0] == '1' or n[0] == '6' or (n[0] == '8'))"
                ],
                "4": [
                    "print(\"pon\")"
                ],
                "5": [
                    "(n[0] == '3')"
                ],
                "6": [
                    "print(\"bon\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = ['1', '6']\n    n=reversed(N)\n    (n[0] == '2' or n[0] == '4' or n[0] == '5' or (n[0] == '7') or (n[0] == '9'))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (n[0] == '0' or n[0] == '1' or n[0] == '6' or (n[0] == '8'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (n[0] == '3')\nNext:\n    If True: Go to Block 6\n    <END>\nBlock 6:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
        },
        "s679532540": {
            "code": "m = 0\nm = '16'\nm = m % 10\nif(m == 2,4,5,7,9):\n    print(\"hon\") \nelif(m == 0,1,6,8):\n    print(\"pon\") \nelse:\n    print(\"bon\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "m": "'16'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "m = 0",
                    "m = '16'",
                    "m = m % 10",
                    "((m == 2, 4, 5, 7, 9))"
                ],
                "2": [
                    "print(\"hon\")"
                ],
                "3": [
                    "((m == 0, 1, 6, 8))"
                ],
                "4": [
                    "print(\"pon\")"
                ],
                "5": [
                    "print(\"bon\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    m = 0\n    m = '16'\n    m = m % 10\n    ((m == 2, 4, 5, 7, 9))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"hon\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ((m == 0, 1, 6, 8))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"pon\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"bon\")\nNext:\n    <END>\n"
        },
        "s722242521": {
            "code": "n = '16'\nl=[2,4,5,7,9]\nl2=[0,1,6,8]\nl3=[3]\nif (n%10) in l:\n  print('hon')\nelif (n%10) in l2:\n  print('pon')\nelse:\n  print('bon')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'16'"
                        },
                        {
                            "l": "[2, 4, 5, 7, 9]"
                        },
                        {
                            "l2": "[0, 1, 6, 8]"
                        },
                        {
                            "l3": "[3]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '16'",
                    "l=[2,4,5,7,9]",
                    "l2=[0,1,6,8]",
                    "l3=[3]",
                    "(n % 10 in l)"
                ],
                "2": [
                    "print('hon')"
                ],
                "3": [
                    "(n % 10 in l2)"
                ],
                "4": [
                    "print('pon')"
                ],
                "5": [
                    "print('bon')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '16'\n    l=[2,4,5,7,9]\n    l2=[0,1,6,8]\n    l3=[3]\n    (n % 10 in l)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('hon')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n % 10 in l2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('pon')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('bon')\nNext:\n    <END>\n"
        }
    },
    "p02676": {
        "s113826419": {
            "code": "k = 7\ns = 'nikoandsolstice'\nslist = list(s)\nif len(slist) > k:\n  l = ''\n  for i in range(k):\n    k += slist[i]\n  print('...' + l)\nelse:\n  print(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "7"
                        },
                        {
                            "slist": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
                        },
                        {
                            "s": "'nikoandsolstice'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "k": "7"
                        },
                        {
                            "l": "''"
                        },
                        {
                            "slist": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
                        },
                        {
                            "s": "'nikoandsolstice'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "k": "7"
                        },
                        {
                            "l": "''"
                        },
                        {
                            "slist": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
                        },
                        {
                            "s": "'nikoandsolstice'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "k": "7"
                        },
                        {
                            "l": "''"
                        },
                        {
                            "slist": "['n', 'i', 'k', 'o', 'a', 'n', 'd', 's', 'o', 'l', 's', 't', 'i', 'c', 'e']"
                        },
                        {
                            "s": "'nikoandsolstice'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "k = 7",
                    "s = 'nikoandsolstice'",
                    "slist = list(s)",
                    "(len(slist) > k)"
                ],
                "2": [
                    "l = ''"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(k)"
                ],
                "4": [
                    "k += slist[i]"
                ],
                "5": [
                    "print('...' + l)"
                ],
                "6": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = 7\n    s = 'nikoandsolstice'\n    slist = list(s)\n    (len(slist) > k)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 6\n\nBlock 2:\nStatement:\n    l = ''\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(k)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    k += slist[i]\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    print('...' + l)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(s)\nNext:\n    <END>\n"
        },
        "s083449925": {
            "code": "S = 7\nK = 'nikoandsolstice'\nif len(S) < K:\n    print(S)\nelse:\n    print(S[:K]+'...')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "7"
                        },
                        {
                            "K": "'nikoandsolstice'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 7",
                    "K = 'nikoandsolstice'",
                    "(len(S) < K)"
                ],
                "2": [
                    "print(S)"
                ],
                "3": [
                    "print(S[:K]+'...')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 7\n    K = 'nikoandsolstice'\n    (len(S) < K)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(S[:K]+'...')\nNext:\n    <END>\n"
        },
        "s415407334": {
            "code": "k = '7'\nw = 'nikoandsolstice'\nl = len(w)\nif l <= k:\n    print(w)\nelse:\n   \t print(w[:k])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "15"
                        },
                        {
                            "w": "'nikoandsolstice'"
                        },
                        {
                            "k": "'7'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "k = '7'",
                    "w = 'nikoandsolstice'",
                    "l = len(w)",
                    "(l <= k)"
                ],
                "2": [
                    "print(w)"
                ],
                "3": [
                    "print(w[:k])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = '7'\n    w = 'nikoandsolstice'\n    l = len(w)\n    (l <= k)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(w)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(w[:k])\nNext:\n    <END>\n"
        },
        "s388733211": {
            "code": "K = '7'\nS = 'nikoandsolstice'\nlen_S=len(S)\nif K<=len_S:\n  print(S)\nelse:\n  print(S[K:], \"...\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "len_S": "15"
                        },
                        {
                            "S": "'nikoandsolstice'"
                        },
                        {
                            "K": "'7'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "K = '7'",
                    "S = 'nikoandsolstice'",
                    "len_S=len(S)",
                    "(K <= len_S)"
                ],
                "2": [
                    "print(S)"
                ],
                "3": [
                    "print(S[K:], \"...\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    K = '7'\n    S = 'nikoandsolstice'\n    len_S=len(S)\n    (K <= len_S)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(S[K:], \"...\")\nNext:\n    <END>\n"
        }
    },
    "p02681": {
        "s193528874": {
            "code": "S = 'chokudai'\nT = 'chokudaiz'\nif S+1 in T:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "T": "'chokudaiz'"
                        },
                        {
                            "S": "'chokudai'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'chokudai'",
                    "T = 'chokudaiz'",
                    "(S + 1 in T)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'chokudai'\n    T = 'chokudaiz'\n    (S + 1 in T)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02705": {
        "s783168711": {
            "code": "R = '1'\nprint(R*2*3.141)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "R": "'1'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = '1'",
                    "print(R*2*3.141)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '1'\n    print(R*2*3.141)\nNext:\n    <END>\n"
        },
        "s240055709": {
            "code": "import math\nR = '1'\nprint(2 * math.pi * R)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import math",
                    "R = '1'",
                    "print(2 * math.pi * R)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    R = '1'\n    print(2 * math.pi * R)\nNext:\n    <END>\n"
        },
        "s554789090": {
            "code": "a = '1'\nprint(6.28318530717958623200*a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'1'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '1'",
                    "print(6.28318530717958623200*a)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '1'\n    print(6.28318530717958623200*a)\nNext:\n    <END>\n"
        },
        "s953920800": {
            "code": "import math\nR = '1'\nprint(2*math.pi*R)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import math",
                    "R = '1'",
                    "print(2*math.pi*R)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    R = '1'\n    print(2*math.pi*R)\nNext:\n    <END>\n"
        }
    },
    "p02711": {
        "s899458484": {
            "code": "N = 117\nif '7'in N:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "117"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"argument of type 'int' is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 117",
                    "('7' in N)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 117\n    ('7' in N)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s519091295": {
            "code": "N = '117'\njudge = \"No\"\nfor i in 3:\n  if N[i] == 7:\n    judge = \"Yes\"\n    break\nprint(judge)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'117'"
                        },
                        {
                            "judge": "'No'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "'117'"
                        },
                        {
                            "judge": "'No'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '117'",
                    "judge = \"No\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> 3"
                ],
                "3": [
                    "(N[i] == 7)"
                ],
                "4": [
                    "judge = \"Yes\""
                ],
                "5": [
                    "print(judge)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '117'\n    judge = \"No\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> 3\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (N[i] == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    judge = \"Yes\"\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    print(judge)\nNext:\n    <END>\n"
        },
        "s895660656": {
            "code": "N = '117'\nif 7 in N:\n  print('Yes')\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'117'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'in <string>' requires string as left operand, not int\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '117'",
                    "(7 in N)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '117'\n    (7 in N)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s992378972": {
            "code": "N = '117'\nif N in 7:\n  print('Yes')\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'117'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"argument of type 'int' is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '117'",
                    "(N in 7)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '117'\n    (N in 7)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s593003245": {
            "code": "S = '117'\nif S.count(7):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'117'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('must be str, not int')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '117'",
                    "(S.count(7))"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '117'\n    (S.count(7))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s690458129": {
            "code": "n = '117'\nif n.count(7) == 0:\n    print(\"No\")\nelse:\n    print(\"Yes\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'117'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('must be str, not int')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '117'",
                    "(n.count(7) == 0)"
                ],
                "2": [
                    "print(\"No\")"
                ],
                "3": [
                    "print(\"Yes\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '117'\n    (n.count(7) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n"
        }
    },
    "p02712": {
        "s539095908": {
            "code": "N = '15'\nSum = 0\nfor k in range(N):\n    i = k+1\n    if i % 3 != 0 and i % 5 != 0:\n        Sum = Sum + i\nprint(Sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'15'"
                        },
                        {
                            "Sum": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "'15'"
                        },
                        {
                            "Sum": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '15'",
                    "Sum = 0"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(N)"
                ],
                "3": [
                    "i = k+1",
                    "(i % 3 != 0 and i % 5 != 0)"
                ],
                "4": [
                    "Sum = Sum + i"
                ],
                "5": [
                    "print(Sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '15'\n    Sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    i = k+1\n    (i % 3 != 0 and i % 5 != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    Sum = Sum + i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(Sum)\nNext:\n    <END>\n"
        },
        "s464292547": {
            "code": "N = 15\nprint (N*(N+1)//2 - 3*(N//3)((N//3)+1)//2 - 5*(N//5)((N//5)+1)//2 + 15*(N//15)((N//15)+1)//2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "15"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 15",
                    "print (N*(N+1)//2 - 3*(N//3)((N//3)+1)//2 - 5*(N//5)((N//5)+1)//2 + 15*(N//15)((N//15)+1)//2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 15\n    print (N*(N+1)//2 - 3*(N//3)((N//3)+1)//2 - 5*(N//5)((N//5)+1)//2 + 15*(N//15)((N//15)+1)//2)\nNext:\n    <END>\n"
        },
        "s553526295": {
            "code": "n = '15'\nsum1=0\nfor i in range(n):\n    if not(i%3==0 or i%5==0):\n        sum1=sum1+i\n    else:\n        sum1=sum1\nprint(sum1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'15'"
                        },
                        {
                            "sum1": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'15'"
                        },
                        {
                            "sum1": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '15'",
                    "sum1=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(not (i % 3 == 0 or i % 5 == 0))"
                ],
                "4": [
                    "sum1=sum1+i"
                ],
                "5": [
                    "sum1=sum1"
                ],
                "6": [
                    "print(sum1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '15'\n    sum1=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (not (i % 3 == 0 or i % 5 == 0))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    sum1=sum1+i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    sum1=sum1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum1)\nNext:\n    <END>\n"
        }
    },
    "p02724": {
        "s485021256": {
            "code": "X = 1024\nA=0\nG=0\nN=0\nM=0\nZ=0\nN=X/500\nM=int(X%500)\nZ=M/5\nN=N+Z\nfor i in range(0,N):\n    if X-500:\n        X=X-500\n        G=G+1000\n    elif X-5:\n        X=X-5\n        G=G+5\n    else:\n        break\nprint(G)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        10
                    ]
                },
                "2": {
                    "range": [
                        11,
                        11
                    ]
                },
                "3": {
                    "range": [
                        12,
                        12
                    ]
                },
                "4": {
                    "range": [
                        13,
                        14
                    ]
                },
                "5": {
                    "range": [
                        15,
                        15
                    ]
                },
                "6": {
                    "range": [
                        16,
                        17
                    ]
                },
                "7": {
                    "range": [
                        20,
                        20
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "6.848"
                        },
                        {
                            "M": "24"
                        },
                        {
                            "Z": "4.8"
                        },
                        {
                            "G": "0"
                        },
                        {
                            "A": "0"
                        },
                        {
                            "X": "1024"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "6.848"
                        },
                        {
                            "M": "24"
                        },
                        {
                            "Z": "4.8"
                        },
                        {
                            "G": "0"
                        },
                        {
                            "A": "0"
                        },
                        {
                            "X": "1024"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "X = 1024",
                    "A=0",
                    "G=0",
                    "N=0",
                    "M=0",
                    "Z=0",
                    "N=X/500",
                    "M=int(X%500)",
                    "Z=M/5",
                    "N=N+Z"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, N)"
                ],
                "3": [
                    "(X - 500)"
                ],
                "4": [
                    "X=X-500",
                    "G=G+1000"
                ],
                "5": [
                    "(X - 5)"
                ],
                "6": [
                    "X=X-5",
                    "G=G+5"
                ],
                "7": [
                    "print(G)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 1024\n    A=0\n    G=0\n    N=0\n    M=0\n    Z=0\n    N=X/500\n    M=int(X%500)\n    Z=M/5\n    N=N+Z\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (X - 500)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    X=X-500\n    G=G+1000\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (X - 5)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    X=X-5\n    G=G+5\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(G)\nNext:\n    <END>\n"
        },
        "s017981363": {
            "code": "x = '1024'\nprint(((x//500)*1000)+((x%500//5)*5))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'1024'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '1024'",
                    "print(((x//500)*1000)+((x%500//5)*5))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '1024'\n    print(((x//500)*1000)+((x%500//5)*5))\nNext:\n    <END>\n"
        }
    },
    "p02730": {
        "s092653973": {
            "code": "s = 'akasaka'\nn=len(s)\nif s[:(n-1)/2-1]==s[:(n-1)/2-1][::-1] and s==s[::-1]:\n  print('Yes')\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "7"
                        },
                        {
                            "s": "'akasaka'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'akasaka'",
                    "n=len(s)",
                    "(s[:(n - 1) / 2 - 1] == s[:(n - 1) / 2 - 1][::-1] and s == s[::-1])"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'akasaka'\n    n=len(s)\n    (s[:(n - 1) / 2 - 1] == s[:(n - 1) / 2 - 1][::-1] and s == s[::-1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s997166113": {
            "code": "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\nn = len(s)\nif n==n[::-1] and n[0:int((n-1)/2)]==n[0:int((n-1)/2)][::-1] and n[int((n+3)/2-1):n]==n[int((n+3)/2-1):n][::-1]:\n  print('Yes')\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "['a', 'k', 'a', 's', 'a', 'k', 'a']"
                        },
                        {
                            "n": "7"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['a', 'k', 'a', 's', 'a', 'k', 'a']",
                    "n = len(s)",
                    "(n == n[::-1] and n[0:int((n - 1) / 2)] == n[0:int((n - 1) / 2)][::-1] and (n[int((n + 3) / 2 - 1):n] == n[int((n + 3) / 2 - 1):n][::-1]))"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['a', 'k', 'a', 's', 'a', 'k', 'a']\n    n = len(s)\n    (n == n[::-1] and n[0:int((n - 1) / 2)] == n[0:int((n - 1) / 2)][::-1] and (n[int((n + 3) / 2 - 1):n] == n[int((n + 3) / 2 - 1):n][::-1]))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p02731": {
        "s086678059": {
            "code": "L = '3'\nx = int(L/3)\nprint(x**3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "L": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "L = '3'",
                    "x = int(L/3)",
                    "print(x**3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    L = '3'\n    x = int(L/3)\n    print(x**3)\nNext:\n    <END>\n"
        }
    },
    "p02741": {
        "s233683862": {
            "code": "alist=[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\nk = '6'\nprint(alist[k-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "alist": "[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]"
                        },
                        {
                            "k": "'6'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "alist=[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]",
                    "k = '6'",
                    "print(alist[k-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    alist=[1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\n    k = '6'\n    print(alist[k-1])\nNext:\n    <END>\n"
        },
        "s912958979": {
            "code": "k = 6\nalist = list(1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51)\nprint(alist[k-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "6"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list expected at most 1 argument, got 32')"
            },
            "cfg_block_statements": {
                "1": [
                    "k = 6",
                    "alist = list(1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51)",
                    "print(alist[k-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    k = 6\n    alist = list(1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51)\n    print(alist[k-1])\nNext:\n    <END>\n"
        }
    },
    "p02759": {
        "s017377951": {
            "code": "n = '5'\nprint(n // 2  + (n % 2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'5'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "print(n // 2  + (n % 2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    print(n // 2  + (n % 2))\nNext:\n    <END>\n"
        },
        "s844287143": {
            "code": "n = '5'\nif n%2==0:\n  print(n/2)\nif n%2==1:\n  print((n+1)/2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'5'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "(n % 2 == 0)"
                ],
                "2": [
                    "print(n/2)"
                ],
                "3": [
                    "(n % 2 == 1)"
                ],
                "4": [
                    "print((n+1)/2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    (n % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(n/2)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    print((n+1)/2)\nNext:\n    <END>\n"
        },
        "s305118421": {
            "code": "N = '5'\nx = int(N/2)\nprint(x)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'5'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "x = int(N/2)",
                    "print(x)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    x = int(N/2)\n    print(x)\nNext:\n    <END>\n"
        },
        "s720984966": {
            "code": "N = '5'\nif N%2 ==0:\n  ans = N%2\n  print(ans)\nelse :\n  ans = N%2 + 0.5\n  print(int(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'5'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "(N % 2 == 0)"
                ],
                "2": [
                    "ans = N%2",
                    "print(ans)"
                ],
                "3": [
                    "ans = N%2 + 0.5",
                    "print(int(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = N%2\n    print(ans)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    ans = N%2 + 0.5\n    print(int(ans))\nNext:\n    <END>\n"
        },
        "s416320099": {
            "code": "N = '5'\nif N%2==0 :\n    print(N/2)\nelse :\n    print(N//2+1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'5'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "(N % 2 == 0)"
                ],
                "2": [
                    "print(N/2)"
                ],
                "3": [
                    "print(N//2+1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N/2)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(N//2+1)\nNext:\n    <END>\n"
        }
    },
    "p02772": {
        "s093434533": {
            "code": "import sys\nn = 5\na = [6, 7, 9, 10, 31]\nfor i in a:\n  if a % 2 == 0 and (a % 3 != 0 and a % 5 != 0):\n    print(\"DENIED\")\n    sys.exit()\nprint(\"APPROVED\")    ",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import sys",
                    "n = 5",
                    "a = [6, 7, 9, 10, 31]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> a"
                ],
                "3": [
                    "(a % 2 == 0 and (a % 3 != 0 and a % 5 != 0))"
                ],
                "4": [
                    "print(\"DENIED\")",
                    "sys.exit()"
                ],
                "5": [
                    "print(\"APPROVED\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    n = 5\n    a = [6, 7, 9, 10, 31]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (a % 2 == 0 and (a % 3 != 0 and a % 5 != 0))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"DENIED\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"APPROVED\")\nNext:\n    <END>\n"
        }
    },
    "p02778": {
        "s055599375": {
            "code": "S = 'sardine'\nprint(S.replace(\"x\"))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'sardine'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('replace expected at least 2 arguments, got 1')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'sardine'",
                    "print(S.replace(\"x\"))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'sardine'\n    print(S.replace(\"x\"))\nNext:\n    <END>\n"
        },
        "s685614745": {
            "code": "S = 'sardine'\nfor _ in len(S):\n  print('x')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'sardine'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "'sardine'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'sardine'"
                ],
                "2": [
                    "iterator -> _, Iterate Over -> len(S)"
                ],
                "3": [
                    "print('x')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'sardine'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> _, Iterate Over -> len(S)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print('x')\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02791": {
        "s173665866": {
            "code": "n = 5\nli = [4, 2, 5, 1, 3]\ntmpMinIndex = li.index(1)\ncount = 0\nwhile True:\n    count += 1\n    tmpMinIndex = li[0:tmpMinIndex]\n    if tmpMinIndex == 0:\n        break\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "li": "[4, 2, 5, 1, 3]"
                        },
                        {
                            "tmpMinIndex": "3"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "li": "[4, 2, 5, 1, 3]"
                        },
                        {
                            "tmpMinIndex": "3"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "li": "[4, 2, 5, 1, 3]"
                        },
                        {
                            "count": "1"
                        },
                        {
                            "tmpMinIndex": "[4, 2, 5]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "li": "[4, 2, 5, 1, 3]"
                        },
                        {
                            "count": "1"
                        },
                        {
                            "tmpMinIndex": "[4, 2, 5]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "li": "[4, 2, 5, 1, 3]"
                        },
                        {
                            "tmpMinIndex": "[4, 2, 5]"
                        },
                        {
                            "count": "2"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "li = [4, 2, 5, 1, 3]",
                    "tmpMinIndex = li.index(1)",
                    "count = 0"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "count += 1",
                    "tmpMinIndex = li[0:tmpMinIndex]",
                    "(tmpMinIndex == 0)"
                ],
                "4": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    li = [4, 2, 5, 1, 3]\n    tmpMinIndex = li.index(1)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    count += 1\n    tmpMinIndex = li[0:tmpMinIndex]\n    (tmpMinIndex == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p02801": {
        "s517853078": {
            "code": "c = 'a'\nprint(c+1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "c": "'a'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "c = 'a'",
                    "print(c+1)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    c = 'a'\n    print(c+1)\nNext:\n    <END>\n"
        }
    },
    "p02829": {
        "s644682405": {
            "code": "a = 3\nb = '1'\nprint(6 - (a+b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "b": "'1'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 3",
                    "b = '1'",
                    "print(6 - (a+b))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 3\n    b = '1'\n    print(6 - (a+b))\nNext:\n    <END>\n"
        },
        "s451495331": {
            "code": "a = '3'\nb = '1'\nprint(6-a-b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "b": "'1'"
                        },
                        {
                            "a": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '3'",
                    "b = '1'",
                    "print(6-a-b)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '3'\n    b = '1'\n    print(6-a-b)\nNext:\n    <END>\n"
        }
    },
    "p02835": {
        "s793852728": {
            "code": "a = ['5', '7', '9']\nif (a[0]+a[1]+a[2]) >= 22:\n  print(\"bust\")\nelse:\n  print(\"win\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "['5', '7', '9']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['5', '7', '9']",
                    "(a[0] + a[1] + a[2] >= 22)"
                ],
                "2": [
                    "print(\"bust\")"
                ],
                "3": [
                    "print(\"win\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['5', '7', '9']\n    (a[0] + a[1] + a[2] >= 22)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"bust\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"win\")\nNext:\n    <END>\n"
        }
    },
    "p02836": {
        "s067380241": {
            "code": "S = 'redcoder'\nnum = 0\nfor i in range(len(S)):\n  if not(S[i] == S[-(1+i)]):\n    S[i] = S[-1+i]\n    num +=1\nprint(num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                4,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "S": "'redcoder'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'redcoder'",
                    "num = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(S))"
                ],
                "3": [
                    "(not S[i] == S[-(1 + i)])"
                ],
                "4": [
                    "S[i] = S[-1+i]",
                    "num +=1"
                ],
                "5": [
                    "print(num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'redcoder'\n    num = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(S))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (not S[i] == S[-(1 + i)])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    S[i] = S[-1+i]\n    num +=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(num)\nNext:\n    <END>\n"
        },
        "s123650070": {
            "code": "r=0\ns = 'redcoder'\nfor n in len(s):\n  if s[n]!=s[-n]:\n    r+=1\nprint(r/2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "r": "0"
                        },
                        {
                            "s": "'redcoder'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "r": "0"
                        },
                        {
                            "s": "'redcoder'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r=0",
                    "s = 'redcoder'"
                ],
                "2": [
                    "iterator -> n, Iterate Over -> len(s)"
                ],
                "3": [
                    "(s[n] != s[-n])"
                ],
                "4": [
                    "r+=1"
                ],
                "5": [
                    "print(r/2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    r=0\n    s = 'redcoder'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> len(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[n] != s[-n])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    r+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(r/2)\nNext:\n    <END>\n"
        }
    },
    "p02847": {
        "s463322222": {
            "code": "S = 'SAT'\na={\"SUN\":7,\"MON\":6,\"TUE\":5,\"WED\":4,\"THU\":3,\"FRI\":2,\"SAT\":1}\nprint(a(S))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'SAT'"
                        },
                        {
                            "a": "{'SUN': 7, 'MON': 6, 'TUE': 5, 'WED': 4, 'THU': 3, 'FRI': 2, 'SAT': 1}"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'SAT'",
                    "a={\"SUN\":7,\"MON\":6,\"TUE\":5,\"WED\":4,\"THU\":3,\"FRI\":2,\"SAT\":1}",
                    "print(a(S))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'SAT'\n    a={\"SUN\":7,\"MON\":6,\"TUE\":5,\"WED\":4,\"THU\":3,\"FRI\":2,\"SAT\":1}\n    print(a(S))\nNext:\n    <END>\n"
        }
    },
    "p02848": {
        "s259059489": {
            "code": "input_number = 2\ninput_str = 'ABCXYZ'\nabc_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nabc_list = abc_list + abc_list\nfor i in len(input_str):\n    output_str += abc_list[abc_list.index(input_str[i]) + input_number]",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "abc_list": "'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        },
                        {
                            "input_str": "'ABCXYZ'"
                        },
                        {
                            "input_number": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "abc_list": "'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'"
                        },
                        {
                            "input_str": "'ABCXYZ'"
                        },
                        {
                            "input_number": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input_number = 2",
                    "input_str = 'ABCXYZ'",
                    "abc_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
                    "abc_list = abc_list + abc_list"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> len(input_str)"
                ],
                "3": [
                    "output_str += abc_list[abc_list.index(input_str[i]) + input_number]"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input_number = 2\n    input_str = 'ABCXYZ'\n    abc_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    abc_list = abc_list + abc_list\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(input_str)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    output_str += abc_list[abc_list.index(input_str[i]) + input_number]\nNext:\n    Go to Block: 2\n"
        },
        "s176807303": {
            "code": "N = 2\nS = 'ABCXYZ'\nans = \"\"\nfor s in S:\n  ans += chr((ord(S) + N - 65)%26 + 65)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "S": "'ABCXYZ'"
                        },
                        {
                            "ans": "''"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "S": "'ABCXYZ'"
                        },
                        {
                            "ans": "''"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "S": "'ABCXYZ'"
                        },
                        {
                            "ans": "''"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('ord() expected a character, but string of length 6 found')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "S = 'ABCXYZ'",
                    "ans = \"\""
                ],
                "2": [
                    "iterator -> s, Iterate Over -> S"
                ],
                "3": [
                    "ans += chr((ord(S) + N - 65)%26 + 65)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    S = 'ABCXYZ'\n    ans = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += chr((ord(S) + N - 65)%26 + 65)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02859": {
        "s158223517": {
            "code": "r = '2'\nprint(r^2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "r": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ^: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "print(r^2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    print(r^2)\nNext:\n    <END>\n"
        },
        "s044719801": {
            "code": "a = '2'\nprint(int(a * a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '2'",
                    "print(int(a * a))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '2'\n    print(int(a * a))\nNext:\n    <END>\n"
        },
        "s544327326": {
            "code": "r = '2'\nprint(r*r)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "r": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "print(r*r)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    print(r*r)\nNext:\n    <END>\n"
        },
        "s334248196": {
            "code": "r = '2'\nprint(r**2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "r": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '2'",
                    "print(r**2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '2'\n    print(r**2)\nNext:\n    <END>\n"
        }
    },
    "p02860": {
        "s462057999": {
            "code": "a = 6\nb = ['a', 'b', 'c', 'a', 'b', 'c']\ncount=0\nif(a%2==1):\n  print('No')\nelse:\n  for i in range(a/2):\n    if(b[i]==b[i+a/2]):\n      count+=1\n  if(count==a/2):\n    print('Yes')\n  else:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "b": "['a', 'b', 'c', 'a', 'b', 'c']"
                        },
                        {
                            "a": "6"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "b": "['a', 'b', 'c', 'a', 'b', 'c']"
                        },
                        {
                            "a": "6"
                        },
                        {
                            "count": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 6",
                    "b = ['a', 'b', 'c', 'a', 'b', 'c']",
                    "count=0",
                    "(a % 2 == 1)"
                ],
                "2": [
                    "print('No')"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(a / 2)"
                ],
                "4": [
                    "(b[i] == b[i + a / 2])"
                ],
                "5": [
                    "count+=1"
                ],
                "6": [
                    "(count == a / 2)"
                ],
                "7": [
                    "print('Yes')"
                ],
                "8": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 6
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 3
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 6\n    b = ['a', 'b', 'c', 'a', 'b', 'c']\n    count=0\n    (a % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(a / 2)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 6\n\nBlock 4:\nStatement:\n    (b[i] == b[i + a / 2])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 3\n\nBlock 5:\nStatement:\n    count+=1\nNext:\n    Go to Block: 3\n\nBlock 6:\nStatement:\n    (count == a / 2)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s434283937": {
            "code": "N = 6\nS = 'abcabc'\nif N % 2 != 0:\n    print(\"No\")\nif S[0:N/2] * 2 == S:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "6"
                        },
                        {
                            "S": "'abcabc'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "6"
                        },
                        {
                            "S": "'abcabc'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "S = 'abcabc'",
                    "(N % 2 != 0)"
                ],
                "2": [
                    "print(\"No\")"
                ],
                "3": [
                    "(S[0:N / 2] * 2 == S)"
                ],
                "4": [
                    "print(\"Yes\")"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    (N % 2 != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (S[0:N / 2] * 2 == S)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s002239399": {
            "code": "N = 6\nS = 'abcabc'\nif N%2 == 1: print(\"No\")\nelif S[:N/2] == S[N/2:]:print(\"Yes\")\nelse: print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "6"
                        },
                        {
                            "S": "'abcabc'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "6"
                        },
                        {
                            "S": "'abcabc'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "S = 'abcabc'",
                    "(N % 2 == 1)"
                ],
                "2": [
                    "(N % 2 == 1)"
                ],
                "3": [
                    "(S[:N / 2] == S[N / 2:])"
                ],
                "4": [
                    "else: print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    (N % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    (N % 2 == 1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (S[:N / 2] == S[N / 2:])\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    else: print(\"No\")\nNext:\n    <END>\n"
        },
        "s319830782": {
            "code": "n = 6\ns = 'abcabc'\nn /= 2\nif s[:n] == s[n:]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'abcabc'"
                        },
                        {
                            "n": "3.0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "s = 'abcabc'",
                    "n /= 2",
                    "(s[:n] == s[n:])"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    s = 'abcabc'\n    n /= 2\n    (s[:n] == s[n:])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s753917723": {
            "code": "n = 6\ns = 'abcabc'\nif n % 2 == 1:\n  print(\"No\")\nelse:\n  d = n/2\n  if s[:d] == s[d:]:\n    print(\"Yes\")\n  else:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'abcabc'"
                        },
                        {
                            "n": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "'abcabc'"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "d": "3.0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "s = 'abcabc'",
                    "(n % 2 == 1)"
                ],
                "2": [
                    "print(\"No\")"
                ],
                "3": [
                    "d = n/2",
                    "(s[:d] == s[d:])"
                ],
                "4": [
                    "print(\"Yes\")"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    s = 'abcabc'\n    (n % 2 == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    d = n/2\n    (s[:d] == s[d:])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s402844391": {
            "code": "import sys\nn = 6\ns = 'abcabc'\nif n == 1:\n  print(\"No\")\n  sys.exit()\nn = n / 2\nif s[:n]  == s[n:]:\n    print(\"Yes\")\nelse:\n    print (\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "import sys",
                    "n = 6",
                    "s = 'abcabc'",
                    "(n == 1)"
                ],
                "2": [
                    "print(\"No\")",
                    "sys.exit()"
                ],
                "3": [
                    "n = n / 2",
                    "(s[:n] == s[n:])"
                ],
                "4": [
                    "print(\"Yes\")"
                ],
                "5": [
                    "print (\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    n = 6\n    s = 'abcabc'\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    n = n / 2\n    (s[:n] == s[n:])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print (\"No\")\nNext:\n    <END>\n"
        },
        "s124080396": {
            "code": "N = 6\nS = 'abcabc'\nif (N%2!=0):\n    print('No')\nelse:\n    a1=S[:N/2]\n    a2=S[N/2:]\n    if (a1==a2):\n        print('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "6"
                        },
                        {
                            "S": "'abcabc'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "6"
                        },
                        {
                            "S": "'abcabc'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('slice indices must be integers or None or have an __index__ method')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 6",
                    "S = 'abcabc'",
                    "(N % 2 != 0)"
                ],
                "2": [
                    "print('No')"
                ],
                "3": [
                    "a1=S[:N/2]",
                    "a2=S[N/2:]",
                    "(a1 == a2)"
                ],
                "4": [
                    "print('Yes')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 6\n    S = 'abcabc'\n    (N % 2 != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    a1=S[:N/2]\n    a2=S[N/2:]\n    (a1 == a2)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    print('Yes')\nNext:\n    <END>\n"
        }
    },
    "p02881": {
        "s011420046": {
            "code": "import sys\nn = 10\nans = 10**12\nfor k in range(1,(n+1)**0.5):\n    if n%k == 0 :\n        m = n//k + k - 2\n        if ans > m:\n            ans = m\n        else:\n            print(ans)\n            sys.exit()\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import sys",
                    "n = 10",
                    "ans = 10**12"
                ],
                "2": [
                    "iterator -> k, Iterate Over -> range(1, (n + 1) ** 0.5)"
                ],
                "3": [
                    "(n % k == 0)"
                ],
                "4": [
                    "m = n//k + k - 2",
                    "(ans > m)"
                ],
                "5": [
                    "ans = m"
                ],
                "6": [
                    "print(ans)",
                    "sys.exit()"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    n = 10\n    ans = 10**12\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> k, Iterate Over -> range(1, (n + 1) ** 0.5)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (n % k == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    m = n//k + k - 2\n    (ans > m)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    ans = m\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s388198554": {
            "code": "import numpy as np\nn = 10\nm=np.floor(np.sqrt(n))\nl=[]\nfor i in range(1,m+1,1):\n    if n%i==0:\n        a=i+(n/i)\n        l.append(a)\nc=int(min(l))\nprint(c-2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'numpy.float64' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import numpy as np",
                    "n = 10",
                    "m=np.floor(np.sqrt(n))",
                    "l=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, m + 1, 1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "a=i+(n/i)",
                    "l.append(a)"
                ],
                "5": [
                    "c=int(min(l))",
                    "print(c-2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    n = 10\n    m=np.floor(np.sqrt(n))\n    l=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, m + 1, 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a=i+(n/i)\n    l.append(a)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    c=int(min(l))\n    print(c-2)\nNext:\n    <END>\n"
        }
    },
    "p02897": {
        "s294131667": {
            "code": "N = '4'\nprint((N + 1) // 2 / N)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'4'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '4'",
                    "print((N + 1) // 2 / N)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    print((N + 1) // 2 / N)\nNext:\n    <END>\n"
        },
        "s764180731": {
            "code": "n = '4'\nns = n % 2\nif n == 1:\n    print(1)\nelif ns == 0:\n    print(0.5)\nelse:\n    print(((n//2)+1)/n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'4'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '4'",
                    "ns = n % 2",
                    "(n == 1)"
                ],
                "2": [
                    "print(1)"
                ],
                "3": [
                    "(ns == 0)"
                ],
                "4": [
                    "print(0.5)"
                ],
                "5": [
                    "print(((n//2)+1)/n)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '4'\n    ns = n % 2\n    (n == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (ns == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(0.5)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(((n//2)+1)/n)\nNext:\n    <END>\n"
        },
        "s363085754": {
            "code": "a = '4'\nb = ((a-a/2)/a)\nprint(b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'4'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '4'",
                    "b = ((a-a/2)/a)",
                    "print(b)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '4'\n    b = ((a-a/2)/a)\n    print(b)\nNext:\n    <END>\n"
        }
    },
    "p02899": {
        "s963626225": {
            "code": "N = 3\nA = [2, 3, 1]\nfor i in range(1,N+1):\n    B.append(A.index(i)+1)\nprint(' '.join(map(int,B)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        },
                        {
                            "A": "[2, 3, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [2, 3, 1]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, N + 1)"
                ],
                "3": [
                    "B.append(A.index(i)+1)"
                ],
                "4": [
                    "print(' '.join(map(int,B)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [2, 3, 1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    B.append(A.index(i)+1)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(' '.join(map(int,B)))\nNext:\n    <END>\n"
        }
    },
    "p02910": {
        "s458514432": {
            "code": "s = 'RUDLUDR'\nfor i in range(s):\n  if s[i] % 2 == 0 and s[i] == 'R':\n    s = False\n    break\n  elif s[i] % 2 == 1 and s[i] == 'L':\n    s = False\n    break\nif s:\n  print('Yes')\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'RUDLUDR'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'RUDLUDR'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'RUDLUDR'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(s)"
                ],
                "3": [
                    "(s[i] % 2 == 0 and s[i] == 'R')"
                ],
                "4": [
                    "s = False"
                ],
                "5": [
                    "(s[i] % 2 == 1 and s[i] == 'L')"
                ],
                "6": [
                    "s = False"
                ],
                "7": [
                    "(s)"
                ],
                "8": [
                    "print('Yes')"
                ],
                "9": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'RUDLUDR'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (s[i] % 2 == 0 and s[i] == 'R')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s = False\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (s[i] % 2 == 1 and s[i] == 'L')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    s = False\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (s)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p02921": {
        "s079569065": {
            "code": "s = 'CSS'\nt = 'CSR'\nc=0\nfor i in (2):\n  if s[i]==t[i]:\n    c+=1\nprint(c)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "c": "0"
                        },
                        {
                            "t": "'CSR'"
                        },
                        {
                            "s": "'CSS'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "c": "0"
                        },
                        {
                            "t": "'CSR'"
                        },
                        {
                            "s": "'CSS'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'CSS'",
                    "t = 'CSR'",
                    "c=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> 2"
                ],
                "3": [
                    "(s[i] == t[i])"
                ],
                "4": [
                    "c+=1"
                ],
                "5": [
                    "print(c)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'CSS'\n    t = 'CSR'\n    c=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> 2\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] == t[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    c+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(c)\nNext:\n    <END>\n"
        }
    },
    "p02924": {
        "s605900646": {
            "code": "N = '2'\nprint(N * (N - 1)/2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "print(N * (N - 1)/2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    print(N * (N - 1)/2)\nNext:\n    <END>\n"
        }
    },
    "p02933": {
        "s099738094": {
            "code": "a = ['3200']\ns = 'pink'\nif a >= 3200:\n\tprint(s)\nelse:\n\tprint('Red')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "['3200']"
                        },
                        {
                            "s": "'pink'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['3200']",
                    "s = 'pink'",
                    "(a >= 3200)"
                ],
                "2": [
                    "print(s)"
                ],
                "3": [
                    "print('Red')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['3200']\n    s = 'pink'\n    (a >= 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Red')\nNext:\n    <END>\n"
        },
        "s680614153": {
            "code": "a = '3200'\ns = 'pink'\nif a < 3200:\n    print(s)\nelif a >= 3200:\n    print(\"red\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'3200'"
                        },
                        {
                            "s": "'pink'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '3200'",
                    "s = 'pink'",
                    "(a < 3200)"
                ],
                "2": [
                    "print(s)"
                ],
                "3": [
                    "(a >= 3200)"
                ],
                "4": [
                    "print(\"red\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '3200'\n    s = 'pink'\n    (a < 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(s)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (a >= 3200)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    print(\"red\")\nNext:\n    <END>\n"
        },
        "s869800649": {
            "code": "a = '3200'\ns = 'pink'\nif a >= 3200 :\n  print( s )\nelse:\n  print( 'red' )",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'3200'"
                        },
                        {
                            "s": "'pink'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '3200'",
                    "s = 'pink'",
                    "(a >= 3200)"
                ],
                "2": [
                    "print( s )"
                ],
                "3": [
                    "print( 'red' )"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '3200'\n    s = 'pink'\n    (a >= 3200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print( s )\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print( 'red' )\nNext:\n    <END>\n"
        }
    },
    "p02934": {
        "s761018129": {
            "code": "a = ['2']\nr = 0\nfor i in a:\n    r += 1 / i\nprint(1/r)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "['2']"
                        },
                        {
                            "r": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "['2']"
                        },
                        {
                            "r": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "['2']"
                        },
                        {
                            "r": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['2']",
                    "r = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> a"
                ],
                "3": [
                    "r += 1 / i"
                ],
                "4": [
                    "print(1/r)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['2']\n    r = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    r += 1 / i\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(1/r)\nNext:\n    <END>\n"
        }
    },
    "p02935": {
        "s869093452": {
            "code": "n = 2\nvn = None\nsumV = vn[0]\nfor v in vn[1:]:\n    sumV = (sumV + v)/2\nprint(sumV)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "vn": "None"
                        },
                        {
                            "n": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "vn = None",
                    "sumV = vn[0]"
                ],
                "2": [
                    "iterator -> v, Iterate Over -> vn[1:]"
                ],
                "3": [
                    "sumV = (sumV + v)/2"
                ],
                "4": [
                    "print(sumV)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    vn = None\n    sumV = vn[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> v, Iterate Over -> vn[1:]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sumV = (sumV + v)/2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(sumV)\nNext:\n    <END>\n"
        }
    },
    "p02952": {
        "s726206765": {
            "code": "N = 11\ncnt = 0\nfor i in range(N):\n  if len(i)%2 == 1:\n    cnt += 0\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "N": "11"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "N": "11"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "N": "11"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 11",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(len(i) % 2 == 1)"
                ],
                "4": [
                    "cnt += 0"
                ],
                "5": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 11\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(i) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += 0\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        },
        "s692211350": {
            "code": "n = 11\nre=0\nfor i in range(1,n):\n  if len(str(i)%2==1):\n    re+=1\nprint(re)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "re": "0"
                        },
                        {
                            "n": "11"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "re": "0"
                        },
                        {
                            "n": "11"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "re": "0"
                        },
                        {
                            "n": "11"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 11",
                    "re=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "(len(str(i) % 2 == 1))"
                ],
                "4": [
                    "re+=1"
                ],
                "5": [
                    "print(re)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 11\n    re=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(str(i) % 2 == 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    re+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(re)\nNext:\n    <END>\n"
        },
        "s655827477": {
            "code": "n = 11\ncnt=0\nfor i in range(1,n+1):\n  if len(i)%2==1:\n    cnt+=1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "n": "11"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "n": "11"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "n": "11"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 11",
                    "cnt=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n + 1)"
                ],
                "3": [
                    "(len(i) % 2 == 1)"
                ],
                "4": [
                    "cnt+=1"
                ],
                "5": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 11\n    cnt=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(i) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        }
    },
    "p02958": {
        "s936041126": {
            "code": "n = '5'\nli = [5, 2, 3, 4, 1]\nfalse = 0\nfor i in range(n):\n    if i != li[i]:\n        false += 1\nif false == 0 or false == 2:\n    print('YES')\nelse:\n    print('N0')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'5'"
                        },
                        {
                            "false": "0"
                        },
                        {
                            "li": "[5, 2, 3, 4, 1]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'5'"
                        },
                        {
                            "false": "0"
                        },
                        {
                            "li": "[5, 2, 3, 4, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "li = [5, 2, 3, 4, 1]",
                    "false = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i != li[i])"
                ],
                "4": [
                    "false += 1"
                ],
                "5": [
                    "(false == 0 or false == 2)"
                ],
                "6": [
                    "print('YES')"
                ],
                "7": [
                    "print('N0')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    li = [5, 2, 3, 4, 1]\n    false = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i != li[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    false += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (false == 0 or false == 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('N0')\nNext:\n    <END>\n"
        }
    },
    "p02971": {
        "s533603662": {
            "code": "n = 3\nlist = [1, 4, 3]\nfor i in range(n):\n  listA=list.remove[i]\n  print(max(listA))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "list": "[1, 4, 3]"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "list": "[1, 4, 3]"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "list": "[1, 4, 3]"
                        },
                        {
                            "n": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "list = [1, 4, 3]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "listA=list.remove[i]",
                    "print(max(listA))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    list = [1, 4, 3]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    listA=list.remove[i]\n    print(max(listA))\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02987": {
        "s465066480": {
            "code": "from collections import defaultdict as dedict\ncounter = dedict(int)\na = 'ASSA'\nfor i in list(a):\n  counter[i] += 1\nif ( len(counter) == 2) and (  counter [counter.keys()[0]] == 2):\n  print (\"Yes\")\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict_keys' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "from collections import defaultdict as dedict",
                    "counter = dedict(int)",
                    "a = 'ASSA'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> list(a)"
                ],
                "3": [
                    "counter[i] += 1"
                ],
                "4": [
                    "(len(counter) == 2 and counter[counter.keys()[0]] == 2)"
                ],
                "5": [
                    "print (\"Yes\")"
                ],
                "6": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    from collections import defaultdict as dedict\n    counter = dedict(int)\n    a = 'ASSA'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> list(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    counter[i] += 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (len(counter) == 2 and counter[counter.keys()[0]] == 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print (\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p02988": {
        "s820937944": {
            "code": "n = 5\np = [1, 3, 5, 4, 2]\nt=0\nfor i in range(n):\n  if i!=0 or i!=n-1:\n    l=list(p[i-1], p[i], p[i+1])\n    l.sort()\n    if l[1]==p[i]:\n      t+=1\nprint(t)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "p": "[1, 3, 5, 4, 2]"
                        },
                        {
                            "t": "0"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "p": "[1, 3, 5, 4, 2]"
                        },
                        {
                            "t": "0"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "p": "[1, 3, 5, 4, 2]"
                        },
                        {
                            "t": "0"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "p": "[1, 3, 5, 4, 2]"
                        },
                        {
                            "t": "0"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list expected at most 1 argument, got 3')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "p = [1, 3, 5, 4, 2]",
                    "t=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i != 0 or i != n - 1)"
                ],
                "4": [
                    "l=list(p[i-1], p[i], p[i+1])",
                    "l.sort()",
                    "(l[1] == p[i])"
                ],
                "5": [
                    "t+=1"
                ],
                "6": [
                    "print(t)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    p = [1, 3, 5, 4, 2]\n    t=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i != 0 or i != n - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    l=list(p[i-1], p[i], p[i+1])\n    l.sort()\n    (l[1] == p[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    t+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(t)\nNext:\n    <END>\n"
        }
    },
    "p02989": {
        "s952876389": {
            "code": "n = '6'\nl = [9, 1, 4, 4, 6, 7]\nans=0\nfor i in range(n-2):\n    a=l[i:i+3]\n    b=a[1]\n    c=sorted(a)\n    if b==c[1]:\n        ans+=1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "l": "[9, 1, 4, 4, 6, 7]"
                        },
                        {
                            "n": "'6'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "l": "[9, 1, 4, 4, 6, 7]"
                        },
                        {
                            "n": "'6'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '6'",
                    "l = [9, 1, 4, 4, 6, 7]",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n - 2)"
                ],
                "3": [
                    "a=l[i:i+3]",
                    "b=a[1]",
                    "c=sorted(a)",
                    "(b == c[1])"
                ],
                "4": [
                    "ans+=1"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '6'\n    l = [9, 1, 4, 4, 6, 7]\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    a=l[i:i+3]\n    b=a[1]\n    c=sorted(a)\n    (b == c[1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s700444152": {
            "code": "n = 6\nl = [9, 1, 4, 4, 6, 7]\nc_idx = n / 2 - 1\nl.sort()\nprint(l[c_idx + 1] - l[c_idx])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "[1, 4, 4, 6, 7, 9]"
                        },
                        {
                            "n": "6"
                        },
                        {
                            "c_idx": "2.0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not float')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "l = [9, 1, 4, 4, 6, 7]",
                    "c_idx = n / 2 - 1",
                    "l.sort()",
                    "print(l[c_idx + 1] - l[c_idx])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    l = [9, 1, 4, 4, 6, 7]\n    c_idx = n / 2 - 1\n    l.sort()\n    print(l[c_idx + 1] - l[c_idx])\nNext:\n    <END>\n"
        },
        "s481360386": {
            "code": "n = 6\nd = [1, 4, 4, 6, 7, 9]\nprint(d[n/2]-d[n/2-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "d": "[1, 4, 4, 6, 7, 9]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not float')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "d = [1, 4, 4, 6, 7, 9]",
                    "print(d[n/2]-d[n/2-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    d = [1, 4, 4, 6, 7, 9]\n    print(d[n/2]-d[n/2-1])\nNext:\n    <END>\n"
        }
    },
    "p02993": {
        "s128367746": {
            "code": "n = 3776\nflag = 0\nfor i in range(3):\n  if(n[i] == n[i+1]):\n    flag = 1\n  if(flag == 1):\n    print(\"Bad\")\n    break\nif(flag == 0):\n  print(\"Good\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "3776"
                        },
                        {
                            "flag": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "3776"
                        },
                        {
                            "flag": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "3776"
                        },
                        {
                            "flag": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3776",
                    "flag = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(3)"
                ],
                "3": [
                    "(n[i] == n[i + 1])"
                ],
                "4": [
                    "flag = 1"
                ],
                "5": [
                    "(flag == 1)"
                ],
                "6": [
                    "print(\"Bad\")"
                ],
                "7": [
                    "(flag == 0)"
                ],
                "8": [
                    "print(\"Good\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3776\n    flag = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (n[i] == n[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    flag = 1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (flag == 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"Bad\")\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (flag == 0)\nNext:\n    If True: Go to Block 8\n    <END>\nBlock 8:\nStatement:\n    print(\"Good\")\nNext:\n    <END>\n"
        },
        "s255199372": {
            "code": "import collections\nS = ['3', '7', '7', '6']\nc = collections.Counter(S)\nif max(c.values) >= 2:\n  print(\"Bad\")\nelse:\n  print(\"Good\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import collections",
                    "S = ['3', '7', '7', '6']",
                    "c = collections.Counter(S)",
                    "(max(c.values) >= 2)"
                ],
                "2": [
                    "print(\"Bad\")"
                ],
                "3": [
                    "print(\"Good\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import collections\n    S = ['3', '7', '7', '6']\n    c = collections.Counter(S)\n    (max(c.values) >= 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Bad\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Good\")\nNext:\n    <END>\n"
        },
        "s982073432": {
            "code": "s = 3776\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "3776"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 3776",
                    "(s[0] == s[1] or s[1] == s[2] or s[2] == s[3])"
                ],
                "2": [
                    "print('Bad')"
                ],
                "3": [
                    "print('Good')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 3776\n    (s[0] == s[1] or s[1] == s[2] or s[2] == s[3])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Bad')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Good')\nNext:\n    <END>\n"
        }
    },
    "p03012": {
        "s744953209": {
            "code": "N = 3\nL = [1, 2, 3]\nv=[]\nfor i in range(N-1):\n  v.append(abs(sum(L[:i+1]-L[i+1:])))\nans=min(v)\nprint(v)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "L": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "v": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "L": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "v": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "L": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        },
                        {
                            "v": "[]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "L = [1, 2, 3]",
                    "v=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "v.append(abs(sum(L[:i+1]-L[i+1:])))"
                ],
                "4": [
                    "ans=min(v)",
                    "print(v)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    L = [1, 2, 3]\n    v=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    v.append(abs(sum(L[:i+1]-L[i+1:])))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    ans=min(v)\n    print(v)\nNext:\n    <END>\n"
        },
        "s857082134": {
            "code": "n = 3\nmlist = [1, 2, 3]\nnlist =[]\nfor i in range(n):\n  nlist.append(abs(mlist[:i]-mlist[i:]))\nprint(min(nlist))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "nlist": "[]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "mlist": "[1, 2, 3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "nlist": "[]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "mlist": "[1, 2, 3]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "nlist": "[]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "mlist": "[1, 2, 3]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "mlist = [1, 2, 3]",
                    "nlist =[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "nlist.append(abs(mlist[:i]-mlist[i:]))"
                ],
                "4": [
                    "print(min(nlist))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    mlist = [1, 2, 3]\n    nlist =[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    nlist.append(abs(mlist[:i]-mlist[i:]))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(nlist))\nNext:\n    <END>\n"
        }
    },
    "p03042": {
        "s156522193": {
            "code": "lst = ['1', '9', '0', '5']\nlst1 = []\nlst1.append(lst[0]+lst[1])\nlst1.append(lst[2]+lst[3])\nif (int(lst1[0]) >=13 and int(lst1[1]) >=13) or (int(lst1[0]) >=13 and lst1[1] ==\"00\") or (lst1[0] ==\"00\" and lst1[1] >=13):\n  print(\"NA\")\nelif (0<int(lst1[0])<=12 and 0<int(lst1[1])<=12):\n      print(\"AMBIGUOUS\")\nelif 0<lst1[0] <=12:\n      print(\"MMYY\")\nelif 0<lst1[1]<=12:\n      print(\"YYMM\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                7,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "lst1": "['19', '05']"
                        },
                        {
                            "lst": "['1', '9', '0', '5']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "lst1": "['19', '05']"
                        },
                        {
                            "lst": "['1', '9', '0', '5']"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "lst1": "['19', '05']"
                        },
                        {
                            "lst": "['1', '9', '0', '5']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "lst = ['1', '9', '0', '5']",
                    "lst1 = []",
                    "lst1.append(lst[0]+lst[1])",
                    "lst1.append(lst[2]+lst[3])",
                    "(int(lst1[0]) >= 13 and int(lst1[1]) >= 13 or (int(lst1[0]) >= 13 and lst1[1] == '00') or (lst1[0] == '00' and lst1[1] >= 13))"
                ],
                "2": [
                    "print(\"NA\")"
                ],
                "3": [
                    "(0 < int(lst1[0]) <= 12 and 0 < int(lst1[1]) <= 12)"
                ],
                "4": [
                    "print(\"AMBIGUOUS\")"
                ],
                "5": [
                    "(0 < lst1[0] <= 12)"
                ],
                "6": [
                    "print(\"MMYY\")"
                ],
                "7": [
                    "(0 < lst1[1] <= 12)"
                ],
                "8": [
                    "print(\"YYMM\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": "<END>"
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    lst = ['1', '9', '0', '5']\n    lst1 = []\n    lst1.append(lst[0]+lst[1])\n    lst1.append(lst[2]+lst[3])\n    (int(lst1[0]) >= 13 and int(lst1[1]) >= 13 or (int(lst1[0]) >= 13 and lst1[1] == '00') or (lst1[0] == '00' and lst1[1] >= 13))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"NA\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (0 < int(lst1[0]) <= 12 and 0 < int(lst1[1]) <= 12)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"AMBIGUOUS\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (0 < lst1[0] <= 12)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"MMYY\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (0 < lst1[1] <= 12)\nNext:\n    If True: Go to Block 8\n    <END>\nBlock 8:\nStatement:\n    print(\"YYMM\")\nNext:\n    <END>\n"
        }
    },
    "p03060": {
        "s122534982": {
            "code": "Number = '3'\ntresure_value = [10, 2, 5]\ncost = [6, 3, 4]\ncount = 0\nfor i in range(Number):\n  benefit = int(tresure_value[i] - cost[i])\n  if benefit  > 0:\n    count += benefit \nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "Number": "'3'"
                        },
                        {
                            "cost": "[6, 3, 4]"
                        },
                        {
                            "tresure_value": "[10, 2, 5]"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "Number": "'3'"
                        },
                        {
                            "cost": "[6, 3, 4]"
                        },
                        {
                            "tresure_value": "[10, 2, 5]"
                        },
                        {
                            "count": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "Number = '3'",
                    "tresure_value = [10, 2, 5]",
                    "cost = [6, 3, 4]",
                    "count = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(Number)"
                ],
                "3": [
                    "benefit = int(tresure_value[i] - cost[i])",
                    "(benefit > 0)"
                ],
                "4": [
                    "count += benefit"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    Number = '3'\n    tresure_value = [10, 2, 5]\n    cost = [6, 3, 4]\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(Number)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    benefit = int(tresure_value[i] - cost[i])\n    (benefit > 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count += benefit\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p03068": {
        "s795431373": {
            "code": "n = 5\ns = 'error'\nk = 2\nc = s[k-1]\ni = s.find(c)\ns2 = \"*\"*n\ns2[i] = c\nprint(s2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "2"
                        },
                        {
                            "c": "'r'"
                        },
                        {
                            "i": "1"
                        },
                        {
                            "s": "'error'"
                        },
                        {
                            "s2": "'*****'"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "s = 'error'",
                    "k = 2",
                    "c = s[k-1]",
                    "i = s.find(c)",
                    "s2 = \"*\"*n",
                    "s2[i] = c",
                    "print(s2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    s = 'error'\n    k = 2\n    c = s[k-1]\n    i = s.find(c)\n    s2 = \"*\"*n\n    s2[i] = c\n    print(s2)\nNext:\n    <END>\n"
        },
        "s798103067": {
            "code": "n = 5\ns = 'error'\nk = 2\nc = s[k-1]\ni = s.find(c)\ns2 = \"*\"*n\nfor n in i:\n\ts2[n] = c\nprint(s2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "2"
                        },
                        {
                            "c": "'r'"
                        },
                        {
                            "i": "1"
                        },
                        {
                            "s": "'error'"
                        },
                        {
                            "s2": "'*****'"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "k": "2"
                        },
                        {
                            "c": "'r'"
                        },
                        {
                            "i": "1"
                        },
                        {
                            "s": "'error'"
                        },
                        {
                            "s2": "'*****'"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "s = 'error'",
                    "k = 2",
                    "c = s[k-1]",
                    "i = s.find(c)",
                    "s2 = \"*\"*n"
                ],
                "2": [
                    "iterator -> n, Iterate Over -> i"
                ],
                "3": [
                    "s2[n] = c"
                ],
                "4": [
                    "print(s2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    s = 'error'\n    k = 2\n    c = s[k-1]\n    i = s.find(c)\n    s2 = \"*\"*n\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> n, Iterate Over -> i\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s2[n] = c\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(s2)\nNext:\n    <END>\n"
        }
    },
    "p03075": {
        "s815157740": {
            "code": "import numpy as np\na = 1\nb = 2\nc = 4\nd = 8\ne = 9\nA = a % 10\nB = b % 10\nC = c % 10\nD = d % 10\nE = e % 10\nS = []\nsum = 0\nif A != 0:\n  S.append(A)\nif B != 0:\n  S.append(B)\nif C != 0:\n  S.append(C)\nif D != 0:\n  S.append(D)\nif E != 0:\n  S.append(E)\nif len(S) == 0:\n  sum = a + b + c + d + e\nelse:\n  sum = (a //10 + b //10 + c //10 + d //10 + e //10)*10 + 10*(len(A) - 1) +min(S)\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        14
                    ]
                },
                "2": {
                    "range": [
                        15,
                        15
                    ]
                },
                "3": {
                    "range": [
                        16,
                        16
                    ]
                },
                "4": {
                    "range": [
                        17,
                        17
                    ]
                },
                "5": {
                    "range": [
                        18,
                        18
                    ]
                },
                "6": {
                    "range": [
                        19,
                        19
                    ]
                },
                "7": {
                    "range": [
                        20,
                        20
                    ]
                },
                "8": {
                    "range": [
                        21,
                        21
                    ]
                },
                "9": {
                    "range": [
                        22,
                        22
                    ]
                },
                "10": {
                    "range": [
                        23,
                        23
                    ]
                },
                "11": {
                    "range": [
                        24,
                        24
                    ]
                },
                "12": {
                    "range": [
                        25,
                        25
                    ]
                },
                "13": {
                    "range": [
                        27,
                        27
                    ]
                },
                "14": {
                    "range": [
                        28,
                        28
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                27
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "S": "[]"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "S": "[1]"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "S": "[1]"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2]"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2]"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2, 4]"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2, 4]"
                        }
                    ]
                },
                {
                    "block": 8,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8]"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8]"
                        }
                    ]
                },
                {
                    "block": 10,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8, 9]"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 11,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8, 9]"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                },
                {
                    "block": 13,
                    "state": [
                        {
                            "D": "8"
                        },
                        {
                            "S": "[1, 2, 4, 8, 9]"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "e": "9"
                        },
                        {
                            "E": "9"
                        },
                        {
                            "B": "2"
                        },
                        {
                            "A": "1"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "C": "4"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "c": "4"
                        },
                        {
                            "d": "8"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import numpy as np",
                    "a = 1",
                    "b = 2",
                    "c = 4",
                    "d = 8",
                    "e = 9",
                    "A = a % 10",
                    "B = b % 10",
                    "C = c % 10",
                    "D = d % 10",
                    "E = e % 10",
                    "S = []",
                    "sum = 0",
                    "(A != 0)"
                ],
                "2": [
                    "S.append(A)"
                ],
                "3": [
                    "(B != 0)"
                ],
                "4": [
                    "S.append(B)"
                ],
                "5": [
                    "(C != 0)"
                ],
                "6": [
                    "S.append(C)"
                ],
                "7": [
                    "(D != 0)"
                ],
                "8": [
                    "S.append(D)"
                ],
                "9": [
                    "(E != 0)"
                ],
                "10": [
                    "S.append(E)"
                ],
                "11": [
                    "(len(S) == 0)"
                ],
                "12": [
                    "sum = a + b + c + d + e"
                ],
                "13": [
                    "sum = (a //10 + b //10 + c //10 + d //10 + e //10)*10 + 10*(len(A) - 1) +min(S)"
                ],
                "14": [
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                },
                "13": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 14
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    a = 1\n    b = 2\n    c = 4\n    d = 8\n    e = 9\n    A = a % 10\n    B = b % 10\n    C = c % 10\n    D = d % 10\n    E = e % 10\n    S = []\n    sum = 0\n    (A != 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    S.append(A)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (B != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    S.append(B)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (C != 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    S.append(C)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (D != 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    S.append(D)\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (E != 0)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    S.append(E)\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (len(S) == 0)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    sum = a + b + c + d + e\nNext:\n    Go to Block: 14\n\nBlock 13:\nStatement:\n    sum = (a //10 + b //10 + c //10 + d //10 + e //10)*10 + 10*(len(A) - 1) +min(S)\nNext:\n    Go to Block: 14\n\nBlock 14:\nStatement:\n    print(sum)\nNext:\n    <END>\n"
        },
        "s729740470": {
            "code": "a = '1'\nb = '2'\nc = '4'\nd = '8'\ne = '9'\nk = '15'\nf=[b-a,c-b,d-c,e-d]\nif((f[0]>k) or (f[1]>k) or (f[2]>k)or (f[3]>k)):\n  print(':(')\nelif(((f[0]+f[1])>k)or ((f[1]+f[2])>k)or ((f[2]+f[3])>k)):\n  print(':(')\nelif(((f[0]+f[1]+f[2])>k) or((f[1]+f[2]+f[3])>k)):\n  print(':(')\nelif((e-a)>k):\n  print(':(')\nelse:\n  print('Yay!')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                },
                "8": {
                    "range": [
                        15,
                        15
                    ]
                },
                "9": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "e": "'9'"
                        },
                        {
                            "c": "'4'"
                        },
                        {
                            "d": "'8'"
                        },
                        {
                            "k": "'15'"
                        },
                        {
                            "b": "'2'"
                        },
                        {
                            "a": "'1'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '1'",
                    "b = '2'",
                    "c = '4'",
                    "d = '8'",
                    "e = '9'",
                    "k = '15'",
                    "f=[b-a,c-b,d-c,e-d]",
                    "(f[0] > k or f[1] > k or f[2] > k or (f[3] > k))"
                ],
                "2": [
                    "print(':(')"
                ],
                "3": [
                    "(f[0] + f[1] > k or f[1] + f[2] > k or f[2] + f[3] > k)"
                ],
                "4": [
                    "print(':(')"
                ],
                "5": [
                    "(f[0] + f[1] + f[2] > k or f[1] + f[2] + f[3] > k)"
                ],
                "6": [
                    "print(':(')"
                ],
                "7": [
                    "(e - a > k)"
                ],
                "8": [
                    "print(':(')"
                ],
                "9": [
                    "print('Yay!')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '1'\n    b = '2'\n    c = '4'\n    d = '8'\n    e = '9'\n    k = '15'\n    f=[b-a,c-b,d-c,e-d]\n    (f[0] > k or f[1] > k or f[2] > k or (f[3] > k))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (f[0] + f[1] > k or f[1] + f[2] > k or f[2] + f[3] > k)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (f[0] + f[1] + f[2] > k or f[1] + f[2] + f[3] > k)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (e - a > k)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(':(')\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print('Yay!')\nNext:\n    <END>\n"
        }
    },
    "p03076": {
        "s593709966": {
            "code": "import numpy as np\na = 29\nb = 20\nc = 7\nd = 35\ne = 120\nA = list(str(a))\nB = list(str(b))\nC = list(str(c))\nD = list(str(d))\nE = list(str(e))\nk = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])\nsum = 0\nif A[-1] == 0:\n  sum += a\nelse:\n  sum += a + (10 - int(A[-1]))\nif B[-1] == 0:\n  sum += b\nelse:\n  sum += b + (10 - int(B[-1]))\nif C[-1] == 0:\n  sum += c\nelse:\n  sum += c + (10 - int(C[-1]))\nif D[-1] == 0:\n  sum += d\nelse:\n  sum += d + (10 - int(D[-1]))\nif E[-1] == 0:\n  sum += e\nelse:\n  sum += e + (10 - int(E[-1]))\nsum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        14
                    ]
                },
                "2": {
                    "range": [
                        15,
                        15
                    ]
                },
                "3": {
                    "range": [
                        17,
                        17
                    ]
                },
                "4": {
                    "range": [
                        18,
                        18
                    ]
                },
                "5": {
                    "range": [
                        19,
                        19
                    ]
                },
                "6": {
                    "range": [
                        21,
                        21
                    ]
                },
                "7": {
                    "range": [
                        22,
                        22
                    ]
                },
                "8": {
                    "range": [
                        23,
                        23
                    ]
                },
                "9": {
                    "range": [
                        25,
                        25
                    ]
                },
                "10": {
                    "range": [
                        26,
                        26
                    ]
                },
                "11": {
                    "range": [
                        27,
                        27
                    ]
                },
                "12": {
                    "range": [
                        29,
                        29
                    ]
                },
                "13": {
                    "range": [
                        30,
                        30
                    ]
                },
                "14": {
                    "range": [
                        31,
                        31
                    ]
                },
                "15": {
                    "range": [
                        33,
                        33
                    ]
                },
                "16": {
                    "range": [
                        34,
                        35
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                17,
                18,
                21,
                22,
                25,
                26,
                29,
                30,
                33,
                34
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "sum": "30"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "sum": "30"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "sum": "60"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "sum": "60"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "sum": "70"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 10,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "sum": "70"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 12,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "sum": "110"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 13,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "sum": "110"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 15,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "sum": "240"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                },
                {
                    "block": 16,
                    "state": [
                        {
                            "k": "<numpy.int64 object at 0x7f71a2289530>"
                        },
                        {
                            "E": "['1', '2', '0']"
                        },
                        {
                            "c": "7"
                        },
                        {
                            "B": "['2', '0']"
                        },
                        {
                            "b": "20"
                        },
                        {
                            "D": "['3', '5']"
                        },
                        {
                            "sum": "240"
                        },
                        {
                            "a": "29"
                        },
                        {
                            "d": "35"
                        },
                        {
                            "e": "120"
                        },
                        {
                            "C": "['7']"
                        },
                        {
                            "A": "['2', '9']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import numpy as np",
                    "a = 29",
                    "b = 20",
                    "c = 7",
                    "d = 35",
                    "e = 120",
                    "A = list(str(a))",
                    "B = list(str(b))",
                    "C = list(str(c))",
                    "D = list(str(d))",
                    "E = list(str(e))",
                    "k = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])",
                    "sum = 0",
                    "(A[-1] == 0)"
                ],
                "2": [
                    "sum += a"
                ],
                "3": [
                    "sum += a + (10 - int(A[-1]))"
                ],
                "4": [
                    "(B[-1] == 0)"
                ],
                "5": [
                    "sum += b"
                ],
                "6": [
                    "sum += b + (10 - int(B[-1]))"
                ],
                "7": [
                    "(C[-1] == 0)"
                ],
                "8": [
                    "sum += c"
                ],
                "9": [
                    "sum += c + (10 - int(C[-1]))"
                ],
                "10": [
                    "(D[-1] == 0)"
                ],
                "11": [
                    "sum += d"
                ],
                "12": [
                    "sum += d + (10 - int(D[-1]))"
                ],
                "13": [
                    "(E[-1] == 0)"
                ],
                "14": [
                    "sum += e"
                ],
                "15": [
                    "sum += e + (10 - int(E[-1]))"
                ],
                "16": [
                    "sum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]",
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 16
                },
                "15": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 16
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import numpy as np\n    a = 29\n    b = 20\n    c = 7\n    d = 35\n    e = 120\n    A = list(str(a))\n    B = list(str(b))\n    C = list(str(c))\n    D = list(str(d))\n    E = list(str(e))\n    k = np.argmin([A[-1], B[-1], C[-1], D[-1], E[-1]])\n    sum = 0\n    (A[-1] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    sum += a\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    sum += a + (10 - int(A[-1]))\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (B[-1] == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    sum += b\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    sum += b + (10 - int(B[-1]))\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (C[-1] == 0)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    sum += c\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    sum += c + (10 - int(C[-1]))\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    (D[-1] == 0)\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    sum += d\nNext:\n    Go to Block: 13\n\nBlock 12:\nStatement:\n    sum += d + (10 - int(D[-1]))\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (E[-1] == 0)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    sum += e\nNext:\n    Go to Block: 16\n\nBlock 15:\nStatement:\n    sum += e + (10 - int(E[-1]))\nNext:\n    Go to Block: 16\n\nBlock 16:\nStatement:\n    sum -= 10 - [A[-1], B[-1], C[-1], D[-1], E[-1]][k]\n    print(sum)\nNext:\n    <END>\n"
        }
    },
    "p03077": {
        "s176228774": {
            "code": "import math\nn = 5\na = 3\nb = 2\nc = 4\nd = 3\ne = 5\nmiti=[a,b,c,d,e]\nmini=min(miti)\nretu=n//miti\nif n<=mini:\n  print(5)\nelse:\n  print(4+retu)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        11
                    ]
                },
                "2": {
                    "range": [
                        12,
                        12
                    ]
                },
                "3": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import math",
                    "n = 5",
                    "a = 3",
                    "b = 2",
                    "c = 4",
                    "d = 3",
                    "e = 5",
                    "miti=[a,b,c,d,e]",
                    "mini=min(miti)",
                    "retu=n//miti",
                    "(n <= mini)"
                ],
                "2": [
                    "print(5)"
                ],
                "3": [
                    "print(4+retu)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 5\n    a = 3\n    b = 2\n    c = 4\n    d = 3\n    e = 5\n    miti=[a,b,c,d,e]\n    mini=min(miti)\n    retu=n//miti\n    (n <= mini)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(5)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(4+retu)\nNext:\n    <END>\n"
        }
    },
    "p03086": {
        "s012163745": {
            "code": "s = 'ATCODER'\nans=0\ncur=0\nACGT=set(\"A\",\"C\",\"G\",\"T\")\nfor ss in s:\n  if ss in ACGT:\n    cur+=1\n  else:\n    ans=max(cur,ans)\n    cur=0\nprint(max(ans,cur))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        9,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'ATCODER'"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "cur": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('set expected at most 1 argument, got 4')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'ATCODER'",
                    "ans=0",
                    "cur=0",
                    "ACGT=set(\"A\",\"C\",\"G\",\"T\")"
                ],
                "2": [
                    "iterator -> ss, Iterate Over -> s"
                ],
                "3": [
                    "(ss in ACGT)"
                ],
                "4": [
                    "cur+=1"
                ],
                "5": [
                    "ans=max(cur,ans)",
                    "cur=0"
                ],
                "6": [
                    "print(max(ans,cur))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ATCODER'\n    ans=0\n    cur=0\n    ACGT=set(\"A\",\"C\",\"G\",\"T\")\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> ss, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (ss in ACGT)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    cur+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans=max(cur,ans)\n    cur=0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(max(ans,cur))\nNext:\n    <END>\n"
        },
        "s669241807": {
            "code": "S = 'ATCODER'\nmax = 0\ncount = 0\nfor x in S :\n    if x in \"ATGC\" :\n        count += 1\n    else :\n        max = max(max, count)\n        count = 0\nmax = max(max, count)\nprint(max)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                6,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "count": "1"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "count": "1"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "count": "1"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        },
                        {
                            "count": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        },
                        {
                            "count": "2"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        },
                        {
                            "count": "2"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "count": "3"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "count": "3"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "count": "3"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "count": "3"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "S": "'ATCODER'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'ATCODER'",
                    "max = 0",
                    "count = 0"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> S"
                ],
                "3": [
                    "(x in 'ATGC')"
                ],
                "4": [
                    "count += 1"
                ],
                "5": [
                    "max = max(max, count)",
                    "count = 0"
                ],
                "6": [
                    "max = max(max, count)",
                    "print(max)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'ATCODER'\n    max = 0\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> S\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (x in 'ATGC')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    max = max(max, count)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    max = max(max, count)\n    print(max)\nNext:\n    <END>\n"
        }
    },
    "p03109": {
        "s878259472": {
            "code": "S = '2019/04/30'\nwk = S[:4]+S[5:7]+S[8:10]\nif wk<20190430:\n    print(\"Heisei\")\nelse:\n    print(\"TBD\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "wk": "'20190430'"
                        },
                        {
                            "S": "'2019/04/30'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '2019/04/30'",
                    "wk = S[:4]+S[5:7]+S[8:10]",
                    "(wk < 20190430)"
                ],
                "2": [
                    "print(\"Heisei\")"
                ],
                "3": [
                    "print(\"TBD\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '2019/04/30'\n    wk = S[:4]+S[5:7]+S[8:10]\n    (wk < 20190430)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Heisei\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"TBD\")\nNext:\n    <END>\n"
        },
        "s761068407": {
            "code": "s = '2019/04/30'\nif s[:3] < 2019 or s[:3] == 2019 and s[5] ==0 and s[6] <= 4:\n  print(\"Heisei\")\nelse:\n  print(\"TBD\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'2019/04/30'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '2019/04/30'",
                    "(s[:3] < 2019 or (s[:3] == 2019 and s[5] == 0 and (s[6] <= 4)))"
                ],
                "2": [
                    "print(\"Heisei\")"
                ],
                "3": [
                    "print(\"TBD\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '2019/04/30'\n    (s[:3] < 2019 or (s[:3] == 2019 and s[5] == 0 and (s[6] <= 4)))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Heisei\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"TBD\")\nNext:\n    <END>\n"
        },
        "s013970525": {
            "code": "s = '2019/04/30'\nif s[5] == '1':\n  print('TBD')\nelse:\n  if s[6] > 4:\n    print('TBD')\n  else:\n    print('Heisei')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'2019/04/30'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "'2019/04/30'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '2019/04/30'",
                    "(s[5] == '1')"
                ],
                "2": [
                    "print('TBD')"
                ],
                "3": [
                    "(s[6] > 4)"
                ],
                "4": [
                    "print('TBD')"
                ],
                "5": [
                    "print('Heisei')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '2019/04/30'\n    (s[5] == '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('TBD')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (s[6] > 4)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('TBD')\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print('Heisei')\nNext:\n    <END>\n"
        }
    },
    "p03136": {
        "s048770143": {
            "code": "N = 4\nL = [3, 8, 5, 1]\nif L[:-1] > L[-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "L": "[3, 8, 5, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "L = [3, 8, 5, 1]",
                    "(L[:-1] > L[-1])"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    L = [3, 8, 5, 1]\n    (L[:-1] > L[-1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03207": {
        "s400050915": {
            "code": "N = 3\nlist = [4980, 7980, 6980]\nprint(sum(list)-(max(N)//2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "list": "[4980, 7980, 6980]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "list = [4980, 7980, 6980]",
                    "print(sum(list)-(max(N)//2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    list = [4980, 7980, 6980]\n    print(sum(list)-(max(N)//2))\nNext:\n    <END>\n"
        }
    },
    "p03211": {
        "s916410505": {
            "code": "s = '1234567876'\na = []\nfor i in range(len(str(s))-2):\n  a.extend(abs(s[i]*100+s[i+1]*10+s[i+2]-753))\nprint(min(a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'1234567876'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'1234567876'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "'1234567876'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '1234567876'",
                    "a = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(str(s)) - 2)"
                ],
                "3": [
                    "a.extend(abs(s[i]*100+s[i+1]*10+s[i+2]-753))"
                ],
                "4": [
                    "print(min(a))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1234567876'\n    a = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(str(s)) - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a.extend(abs(s[i]*100+s[i+1]*10+s[i+2]-753))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(a))\nNext:\n    <END>\n"
        },
        "s708948944": {
            "code": "s = '1234567876'\na = []\nfor i in range(len(s)-2):\n  a.append(abs(s[i]*100+s[i+1]*10+s[i+2]-753))\nprint(min(a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'1234567876'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'1234567876'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "'1234567876'"
                        },
                        {
                            "a": "[]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '1234567876'",
                    "a = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s) - 2)"
                ],
                "3": [
                    "a.append(abs(s[i]*100+s[i+1]*10+s[i+2]-753))"
                ],
                "4": [
                    "print(min(a))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '1234567876'\n    a = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s) - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a.append(abs(s[i]*100+s[i+1]*10+s[i+2]-753))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(a))\nNext:\n    <END>\n"
        }
    },
    "p03242": {
        "s992740087": {
            "code": "s = '119'\nif s[0] == '1':\n  s[0] = '9'\nelse:\n  s[0] = '1'\nif s[1] == '1':\n  s[1] = '9'\nelse:\n  s[1] = '1'\nif s[2] == '1':\n  s[2] = '9'\nelse:\n  s[2] = '1'\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                },
                "10": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'119'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'119'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '119'",
                    "(s[0] == '1')"
                ],
                "2": [
                    "s[0] = '9'"
                ],
                "3": [
                    "s[0] = '1'"
                ],
                "4": [
                    "(s[1] == '1')"
                ],
                "5": [
                    "s[1] = '9'"
                ],
                "6": [
                    "s[1] = '1'"
                ],
                "7": [
                    "(s[2] == '1')"
                ],
                "8": [
                    "s[2] = '9'"
                ],
                "9": [
                    "s[2] = '1'"
                ],
                "10": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '119'\n    (s[0] == '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    s[0] = '9'\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    s[0] = '1'\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (s[1] == '1')\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    s[1] = '9'\nNext:\n    Go to Block: 7\n\nBlock 6:\nStatement:\n    s[1] = '1'\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (s[2] == '1')\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    s[2] = '9'\nNext:\n    Go to Block: 10\n\nBlock 9:\nStatement:\n    s[2] = '1'\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    print(s)\nNext:\n    <END>\n"
        },
        "s823937841": {
            "code": "a = '119'\nb=a.replace(1,9)\nc=b.replace(9,1)\nprint(b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'119'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('replace() argument 1 must be str, not int')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '119'",
                    "b=a.replace(1,9)",
                    "c=b.replace(9,1)",
                    "print(b)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '119'\n    b=a.replace(1,9)\n    c=b.replace(9,1)\n    print(b)\nNext:\n    <END>\n"
        },
        "s446721533": {
            "code": "n = '119'\nfor i in range(n):\n\tif n[i] == '9':\n\t\tn[i] = '1'\n\telse:\n\t\tn[i] = '9'\nprint(n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'119'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'119'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '119'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(n[i] == '9')"
                ],
                "4": [
                    "n[i] = '1'"
                ],
                "5": [
                    "n[i] = '9'"
                ],
                "6": [
                    "print(n)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '119'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (n[i] == '9')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    n[i] = '1'\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    n[i] = '9'\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(n)\nNext:\n    <END>\n"
        },
        "s418217784": {
            "code": "n = '119'\nans = \"\"\nfor i in range(n):\n    if n[i] == 1:\n        ans += \"9\"\n    else:\n        ans += \"1\"\nprint(int(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "''"
                        },
                        {
                            "n": "'119'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "''"
                        },
                        {
                            "n": "'119'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '119'",
                    "ans = \"\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(n[i] == 1)"
                ],
                "4": [
                    "ans += \"9\""
                ],
                "5": [
                    "ans += \"1\""
                ],
                "6": [
                    "print(int(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '119'\n    ans = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (n[i] == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += \"9\"\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ans += \"1\"\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(int(ans))\nNext:\n    <END>\n"
        },
        "s222599440": {
            "code": "n = '119'\nfor i in range(len(n)):\n  if n[i] == '1':\n    n[i] = '9'\n  elif n[i] == '9':\n    n[i] = '1'\nprint(n)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                },
                "5": {
                    "range": [
                        5,
                        5
                    ]
                },
                "6": {
                    "range": [
                        6,
                        6
                    ]
                },
                "7": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'119'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'119'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "'119'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "n": "'119'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '119'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(n))"
                ],
                "3": [
                    "(n[i] == '1')"
                ],
                "4": [
                    "n[i] = '9'"
                ],
                "5": [
                    "(n[i] == '9')"
                ],
                "6": [
                    "n[i] = '1'"
                ],
                "7": [
                    "print(n)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '119'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(n))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (n[i] == '1')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    n[i] = '9'\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (n[i] == '9')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    n[i] = '1'\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(n)\nNext:\n    <END>\n"
        }
    },
    "p03243": {
        "s424809724": {
            "code": "n = '111'\nl = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nfor i in l:\n    if n<=i:\n        print(i)\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'111'"
                        },
                        {
                            "l": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'111'"
                        },
                        {
                            "l": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "'111'"
                        },
                        {
                            "l": "[111, 222, 333, 444, 555, 666, 777, 888, 999]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '111'",
                    "l = [111, 222, 333, 444, 555, 666, 777, 888, 999]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> l"
                ],
                "3": [
                    "(n <= i)"
                ],
                "4": [
                    "print(i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '111'\n    l = [111, 222, 333, 444, 555, 666, 777, 888, 999]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> l\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n <= i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\nNext:\n    <END>\n"
        }
    },
    "p03244": {
        "s065293773": {
            "code": "from collections import Counter\nn = 4\nv = [3, 1, 3, 2]\na=Counter(v[::2]).most_common() \nb=Counter(v[1::2]).most_common()\nif len(a)==1:\n    a.append([0,0])\nif len(b)==1:\n    b.append([0,0])\nif a[0,0]==b[0,0]:\n    print(min(n-a[1,1]-b[0,1],n-a[0,1]-b[1,1]))\nelse:\n    print(n-a[0,1]-b[0,1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 5,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not tuple')"
            },
            "cfg_block_statements": {
                "1": [
                    "from collections import Counter",
                    "n = 4",
                    "v = [3, 1, 3, 2]",
                    "a=Counter(v[::2]).most_common()",
                    "b=Counter(v[1::2]).most_common()",
                    "(len(a) == 1)"
                ],
                "2": [
                    "a.append([0,0])"
                ],
                "3": [
                    "(len(b) == 1)"
                ],
                "4": [
                    "b.append([0,0])"
                ],
                "5": [
                    "(a[0, 0] == b[0, 0])"
                ],
                "6": [
                    "print(min(n-a[1,1]-b[0,1],n-a[0,1]-b[1,1]))"
                ],
                "7": [
                    "print(n-a[0,1]-b[0,1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    from collections import Counter\n    n = 4\n    v = [3, 1, 3, 2]\n    a=Counter(v[::2]).most_common()\n    b=Counter(v[1::2]).most_common()\n    (len(a) == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a.append([0,0])\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (len(b) == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    b.append([0,0])\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a[0, 0] == b[0, 0])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(min(n-a[1,1]-b[0,1],n-a[0,1]-b[1,1]))\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(n-a[0,1]-b[0,1])\nNext:\n    <END>\n"
        }
    },
    "p03250": {
        "s603202552": {
            "code": "n = [1, 5, 2]\nn.reverse()\nprint('n[0]n[1]' +[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "[2, 5, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"list\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = [1, 5, 2]",
                    "n.reverse()",
                    "print('n[0]n[1]' +[2])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = [1, 5, 2]\n    n.reverse()\n    print('n[0]n[1]' +[2])\nNext:\n    <END>\n"
        }
    },
    "p03264": {
        "s179612777": {
            "code": "k = '3'\nif k%2 ==0:\n    print((k/2)*(k/2))\nelse:\n    print(((k-1)/2)*((k+1)/2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "k = '3'",
                    "(k % 2 == 0)"
                ],
                "2": [
                    "print((k/2)*(k/2))"
                ],
                "3": [
                    "print(((k-1)/2)*((k+1)/2))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = '3'\n    (k % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print((k/2)*(k/2))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(((k-1)/2)*((k+1)/2))\nNext:\n    <END>\n"
        },
        "s512580293": {
            "code": "N = 3\nif N % 2 == 0:\n  print((N/2)**2)\nelse:\n  print((N // 2)((N // 2) + 1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "(N % 2 == 0)"
                ],
                "2": [
                    "print((N/2)**2)"
                ],
                "3": [
                    "print((N // 2)((N // 2) + 1))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    (N % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print((N/2)**2)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print((N // 2)((N // 2) + 1))\nNext:\n    <END>\n"
        }
    },
    "p03282": {
        "s846249185": {
            "code": "S = ['1', '2', '1', '4']\nK = 4\nfor i in range(len(K)):\n    if S[i] != 1:\n        print(S[i])\n        exit()\nprint(1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "K": "4"
                        },
                        {
                            "S": "['1', '2', '1', '4']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "K": "4"
                        },
                        {
                            "S": "['1', '2', '1', '4']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = ['1', '2', '1', '4']",
                    "K = 4"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(K))"
                ],
                "3": [
                    "(S[i] != 1)"
                ],
                "4": [
                    "print(S[i])",
                    "exit()"
                ],
                "5": [
                    "print(1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = ['1', '2', '1', '4']\n    K = 4\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(K))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i] != 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(S[i])\n    exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(1)\nNext:\n    <END>\n"
        },
        "s008848975": {
            "code": "S = 1214\nK = 4\nif S[0]!=\"1\":\n  print(S[0])\nelse:\n  print(S[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "1214"
                        },
                        {
                            "K": "4"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 1214",
                    "K = 4",
                    "(S[0] != '1')"
                ],
                "2": [
                    "print(S[0])"
                ],
                "3": [
                    "print(S[1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 1214\n    K = 4\n    (S[0] != '1')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(S[0])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(S[1])\nNext:\n    <END>\n"
        }
    },
    "p03288": {
        "s775334930": {
            "code": "r = '1199'\nif r < 1200:\n  print(ABC)\nif 1200 <= r < 2800:\n  print(ARC)\nelse:\n  print(AGC)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "r": "'1199'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '1199'",
                    "(r < 1200)"
                ],
                "2": [
                    "print(ABC)"
                ],
                "3": [
                    "(1200 <= r < 2800)"
                ],
                "4": [
                    "print(ARC)"
                ],
                "5": [
                    "print(AGC)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '1199'\n    (r < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(ABC)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (1200 <= r < 2800)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(ARC)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(AGC)\nNext:\n    <END>\n"
        },
        "s283403627": {
            "code": "r = '1199'\nif r<1200:\n    print(\"ABC\")\nelif 1200<r<2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "r": "'1199'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "r = '1199'",
                    "(r < 1200)"
                ],
                "2": [
                    "print(\"ABC\")"
                ],
                "3": [
                    "(1200 < r < 2800)"
                ],
                "4": [
                    "print(\"ARC\")"
                ],
                "5": [
                    "print(\"AGC\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    r = '1199'\n    (r < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"ABC\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (1200 < r < 2800)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"ARC\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    print(\"AGC\")\nNext:\n    <END>\n"
        }
    },
    "p03289": {
        "s635002220": {
            "code": "str = 'AtCoder'\nflag=True\nif str[0]!='A':\n    flag=False\n    str[0]='a'\ncnt=0\nfor i in range(2,len(str)-2):\n    if str[i]=='C':\n        cnt+=1\n        if cnt==1:\n            str[i]='c'\nif cnt!=1:\n    flag=False\nif str.islower():\n    flag=False\nif flag==True:\n    print(\"AC\")\nelse:\n    print(\"WA\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                },
                "10": {
                    "range": [
                        14,
                        14
                    ]
                },
                "11": {
                    "range": [
                        15,
                        15
                    ]
                },
                "12": {
                    "range": [
                        16,
                        16
                    ]
                },
                "13": {
                    "range": [
                        17,
                        17
                    ]
                },
                "14": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7,
                8,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "str": "'AtCoder'"
                        },
                        {
                            "flag": "True"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "str": "'AtCoder'"
                        },
                        {
                            "flag": "True"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "str": "'AtCoder'"
                        },
                        {
                            "flag": "True"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "str": "'AtCoder'"
                        },
                        {
                            "flag": "True"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "str": "'AtCoder'"
                        },
                        {
                            "cnt": "1"
                        },
                        {
                            "flag": "True"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "str": "'AtCoder'"
                        },
                        {
                            "cnt": "1"
                        },
                        {
                            "flag": "True"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "str = 'AtCoder'",
                    "flag=True",
                    "(str[0] != 'A')"
                ],
                "2": [
                    "flag=False",
                    "str[0]='a'"
                ],
                "3": [
                    "cnt=0"
                ],
                "4": [
                    "iterator -> i, Iterate Over -> range(2, len(str) - 2)"
                ],
                "5": [
                    "(str[i] == 'C')"
                ],
                "6": [
                    "cnt+=1",
                    "(cnt == 1)"
                ],
                "7": [
                    "str[i]='c'"
                ],
                "8": [
                    "(cnt != 1)"
                ],
                "9": [
                    "flag=False"
                ],
                "10": [
                    "(str.islower())"
                ],
                "11": [
                    "flag=False"
                ],
                "12": [
                    "(flag == True)"
                ],
                "13": [
                    "print(\"AC\")"
                ],
                "14": [
                    "print(\"WA\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 4
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 4
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": 11,
                        "false": 12
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 10
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                },
                "11": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 12
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    str = 'AtCoder'\n    flag=True\n    (str[0] != 'A')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    flag=False\n    str[0]='a'\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    cnt=0\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    iterator -> i, Iterate Over -> range(2, len(str) - 2)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    (str[i] == 'C')\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 4\n\nBlock 6:\nStatement:\n    cnt+=1\n    (cnt == 1)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 4\n\nBlock 7:\nStatement:\n    str[i]='c'\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    (cnt != 1)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    flag=False\nNext:\n    Go to Block: 10\n\nBlock 10:\nStatement:\n    (str.islower())\nNext:\n    If True: Go to Block 11\n    If False: Go to Block 12\n\nBlock 11:\nStatement:\n    flag=False\nNext:\n    Go to Block: 12\n\nBlock 12:\nStatement:\n    (flag == True)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(\"AC\")\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print(\"WA\")\nNext:\n    <END>\n"
        }
    },
    "p03292": {
        "s123371855": {
            "code": "a = [1, 6, 3]\nA = a.sort()\nprint(A[2]-A[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "A": "None"
                        },
                        {
                            "a": "[1, 3, 6]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = [1, 6, 3]",
                    "A = a.sort()",
                    "print(A[2]-A[0])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [1, 6, 3]\n    A = a.sort()\n    print(A[2]-A[0])\nNext:\n    <END>\n"
        }
    },
    "p03307": {
        "s156026908": {
            "code": "a = '3'\nb=a/2",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '3'",
                    "b=a/2"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '3'\n    b=a/2\nNext:\n    <END>\n"
        }
    },
    "p03327": {
        "s396712348": {
            "code": "n = '999'\nif n >= 1000:\n    ans = \"ABD\"\nelse:\n    ans = \"ABC\"\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'999'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '999'",
                    "(n >= 1000)"
                ],
                "2": [
                    "ans = \"ABD\""
                ],
                "3": [
                    "ans = \"ABC\""
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '999'\n    (n >= 1000)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    ans = \"ABD\"\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    ans = \"ABC\"\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s428336524": {
            "code": "number = '999'\nif(number < 1000):\n    print('ABC');\nelse:\n    print('ABD');",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "number": "'999'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "number = '999'",
                    "(number < 1000)"
                ],
                "2": [
                    "print('ABC');"
                ],
                "3": [
                    "print('ABD');"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    number = '999'\n    (number < 1000)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('ABC');\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('ABD');\nNext:\n    <END>\n"
        }
    },
    "p03338": {
        "s547405473": {
            "code": "n = 6\ns = 'aabbca'\nprint(max(len(s[:i]&s[i:]) for i in range(n)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "6"
                        },
                        {
                            "s": "'aabbca'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for &: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "s = 'aabbca'",
                    "print(max(len(s[:i]&s[i:]) for i in range(n)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    s = 'aabbca'\n    print(max(len(s[:i]&s[i:]) for i in range(n)))\nNext:\n    <END>\n"
        }
    },
    "p03369": {
        "s271860796": {
            "code": "S = 'oxo'\no=100\nx=0\nT = 700 + S\nprint(T)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "o": "100"
                        },
                        {
                            "x": "0"
                        },
                        {
                            "S": "'oxo'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'oxo'",
                    "o=100",
                    "x=0",
                    "T = 700 + S",
                    "print(T)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'oxo'\n    o=100\n    x=0\n    T = 700 + S\n    print(T)\nNext:\n    <END>\n"
        }
    },
    "p03399": {
        "s188006521": {
            "code": "train1 = 600\ntrain2 = 300\nbus1 = 220\nbus2 = 420\nprint(min(train1,train2)+min(bus1+bus2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "train2": "300"
                        },
                        {
                            "train1": "600"
                        },
                        {
                            "bus2": "420"
                        },
                        {
                            "bus1": "220"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "train1 = 600",
                    "train2 = 300",
                    "bus1 = 220",
                    "bus2 = 420",
                    "print(min(train1,train2)+min(bus1+bus2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    train1 = 600\n    train2 = 300\n    bus1 = 220\n    bus2 = 420\n    print(min(train1,train2)+min(bus1+bus2))\nNext:\n    <END>\n"
        }
    },
    "p03408": {
        "s211300193": {
            "code": "n = 3\ns = ['apple', 'orange', 'apple']\nm = 1\nt = ['grape']\nS=set(s[i] for i in range(n))\nL=len(S)\na=[0]*(L+1)\nfor i in range(L):\n    a[i]=s.count(S[i])-t.count(S[i])\nprint(max(a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "t": "['grape']"
                        },
                        {
                            "L": "2"
                        },
                        {
                            "a": "[0, 0, 0]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "s": "['apple', 'orange', 'apple']"
                        },
                        {
                            "S": "{'apple', 'orange'}"
                        },
                        {
                            "m": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "t": "['grape']"
                        },
                        {
                            "L": "2"
                        },
                        {
                            "a": "[0, 0, 0]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "s": "['apple', 'orange', 'apple']"
                        },
                        {
                            "S": "{'apple', 'orange'}"
                        },
                        {
                            "m": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "t": "['grape']"
                        },
                        {
                            "L": "2"
                        },
                        {
                            "a": "[0, 0, 0]"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "s": "['apple', 'orange', 'apple']"
                        },
                        {
                            "S": "{'apple', 'orange'}"
                        },
                        {
                            "m": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'set' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "s = ['apple', 'orange', 'apple']",
                    "m = 1",
                    "t = ['grape']",
                    "S=set(s[i] for i in range(n))",
                    "L=len(S)",
                    "a=[0]*(L+1)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(L)"
                ],
                "3": [
                    "a[i]=s.count(S[i])-t.count(S[i])"
                ],
                "4": [
                    "print(max(a))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    s = ['apple', 'orange', 'apple']\n    m = 1\n    t = ['grape']\n    S=set(s[i] for i in range(n))\n    L=len(S)\n    a=[0]*(L+1)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(L)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a[i]=s.count(S[i])-t.count(S[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(a))\nNext:\n    <END>\n"
        }
    },
    "p03427": {
        "s528667914": {
            "code": "N = '100'\nl = len(str(N))-1\nprint(l*9 + (N//(10**l)-1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "2"
                        },
                        {
                            "N": "'100'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '100'",
                    "l = len(str(N))-1",
                    "print(l*9 + (N//(10**l)-1))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '100'\n    l = len(str(N))-1\n    print(l*9 + (N//(10**l)-1))\nNext:\n    <END>\n"
        }
    },
    "p03433": {
        "s795616312": {
            "code": "n = '2018'\na = '218'\nx = n%500\nif x<=a:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'218'"
                        },
                        {
                            "n": "'2018'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '2018'",
                    "a = '218'",
                    "x = n%500",
                    "(x <= a)"
                ],
                "2": [
                    "print(\"YES\")"
                ],
                "3": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '2018'\n    a = '218'\n    x = n%500\n    (x <= a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
        },
        "s808940603": {
            "code": "N = '2018'\nA = '218'\nB=N%500\nif(int(B)-int(A)==0):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'2018'"
                        },
                        {
                            "A": "'218'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2018'",
                    "A = '218'",
                    "B=N%500",
                    "(int(B) - int(A) == 0)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2018'\n    A = '218'\n    B=N%500\n    (int(B) - int(A) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03434": {
        "s475468464": {
            "code": "N = 2\nnum = ['3', '1']\nnum.sort(reverse=True)\nprint(sum(num[0::2])-sum(num[1::2]))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "num": "['3', '1']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "num = ['3', '1']",
                    "num.sort(reverse=True)",
                    "print(sum(num[0::2])-sum(num[1::2]))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    num = ['3', '1']\n    num.sort(reverse=True)\n    print(sum(num[0::2])-sum(num[1::2]))\nNext:\n    <END>\n"
        },
        "s697525370": {
            "code": "n = 2\nl = [3, 1]\na = 0\nb = 0\nl.sort(reverser=True)\nfor i in range(n):\n  if i % 2 == 0:\n    a += l[i]\n  else:\n    b += l[i]\nprint(a-b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "2"
                        },
                        {
                            "l": "[3, 1]"
                        },
                        {
                            "b": "0"
                        },
                        {
                            "a": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'reverser' is an invalid keyword argument for sort()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "l = [3, 1]",
                    "a = 0",
                    "b = 0",
                    "l.sort(reverser=True)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i % 2 == 0)"
                ],
                "4": [
                    "a += l[i]"
                ],
                "5": [
                    "b += l[i]"
                ],
                "6": [
                    "print(a-b)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    l = [3, 1]\n    a = 0\n    b = 0\n    l.sort(reverser=True)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    a += l[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    b += l[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(a-b)\nNext:\n    <END>\n"
        },
        "s186139215": {
            "code": "N = 2\na = [3, 1]\nAlice=0\nBob=0\na.sort(reversed=True)\nfor i in range(N):\n    if i % 2 == 0:\n        Alice+=a[i]\n    else:\n        Bob+=a[i]\nif Alice>Bob:\n    print(Alice-Bob)\nelse:\n    print(Bob-Alice)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "Alice": "0"
                        },
                        {
                            "Bob": "0"
                        },
                        {
                            "a": "[3, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'reversed' is an invalid keyword argument for sort()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "a = [3, 1]",
                    "Alice=0",
                    "Bob=0",
                    "a.sort(reversed=True)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(i % 2 == 0)"
                ],
                "4": [
                    "Alice+=a[i]"
                ],
                "5": [
                    "Bob+=a[i]"
                ],
                "6": [
                    "(Alice > Bob)"
                ],
                "7": [
                    "print(Alice-Bob)"
                ],
                "8": [
                    "print(Bob-Alice)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    a = [3, 1]\n    Alice=0\n    Bob=0\n    a.sort(reversed=True)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    Alice+=a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    Bob+=a[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    (Alice > Bob)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    print(Alice-Bob)\nNext:\n    <END>\n\nBlock 8:\nStatement:\n    print(Bob-Alice)\nNext:\n    <END>\n"
        }
    },
    "p03455": {
        "s669469791": {
            "code": "input_list = '3 4'\nresult = input_list[0]*input_list[1]\nif result % 2 == 0:\n  print('Even')\nelse:\n  print('Odd')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "input_list": "'3 4'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input_list = '3 4'",
                    "result = input_list[0]*input_list[1]",
                    "(result % 2 == 0)"
                ],
                "2": [
                    "print('Even')"
                ],
                "3": [
                    "print('Odd')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input_list = '3 4'\n    result = input_list[0]*input_list[1]\n    (result % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Even')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('Odd')\nNext:\n    <END>\n"
        }
    },
    "p03469": {
        "s528529940": {
            "code": "S = '2017/01/07'\nprint(S.replace(\"018\"), (\"017\"))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('replace expected at least 2 arguments, got 1')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '2017/01/07'",
                    "print(S.replace(\"018\"), (\"017\"))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '2017/01/07'\n    print(S.replace(\"018\"), (\"017\"))\nNext:\n    <END>\n"
        },
        "s530652321": {
            "code": "a = '2017/01/07'\ns = \"\"\nfor i in range(a):\n    if i == 3:s+=\"8\"\n    else:s+=a[i]\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "''"
                        },
                        {
                            "a": "'2017/01/07'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "''"
                        },
                        {
                            "a": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '2017/01/07'",
                    "s = \"\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(a)"
                ],
                "3": [
                    "(i == 3)"
                ],
                "4": [
                    "else:s+=a[i]"
                ],
                "5": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '2017/01/07'\n    s = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i == 3)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    else:s+=a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(s)\nNext:\n    <END>\n"
        },
        "s219060183": {
            "code": "s = '2017/01/07'\ns[3] = \"8\"\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '2017/01/07'",
                    "s[3] = \"8\"",
                    "print(s)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '2017/01/07'\n    s[3] = \"8\"\n    print(s)\nNext:\n    <END>\n"
        },
        "s448387064": {
            "code": "n = '2017/01/07'\ns =n.replace(2017,2018)\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('replace() argument 1 must be str, not int')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '2017/01/07'",
                    "s =n.replace(2017,2018)",
                    "print(s)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '2017/01/07'\n    s =n.replace(2017,2018)\n    print(s)\nNext:\n    <END>\n"
        },
        "s711995939": {
            "code": "s = '2017/01/07'\ns[3]=8\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '2017/01/07'",
                    "s[3]=8",
                    "print(s)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '2017/01/07'\n    s[3]=8\n    print(s)\nNext:\n    <END>\n"
        },
        "s830387141": {
            "code": "S = '2017/01/07'\nS[3] = '8'\nprint(S)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '2017/01/07'",
                    "S[3] = '8'",
                    "print(S)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '2017/01/07'\n    S[3] = '8'\n    print(S)\nNext:\n    <END>\n"
        },
        "s679298998": {
            "code": "s = '2017/01/07'\ns[3] = \"8\"\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '2017/01/07'",
                    "s[3] = \"8\"",
                    "print(s)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '2017/01/07'\n    s[3] = \"8\"\n    print(s)\nNext:\n    <END>\n"
        },
        "s097624825": {
            "code": "S = '2017/01/07'\nprint(S.replace(7, 8, 1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('replace() argument 1 must be str, not int')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '2017/01/07'",
                    "print(S.replace(7, 8, 1))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '2017/01/07'\n    print(S.replace(7, 8, 1))\nNext:\n    <END>\n"
        },
        "s321774259": {
            "code": "ss = '2017/01/07'\nss[3]=8\nprint(ss)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ss": "'2017/01/07'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "ss = '2017/01/07'",
                    "ss[3]=8",
                    "print(ss)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    ss = '2017/01/07'\n    ss[3]=8\n    print(ss)\nNext:\n    <END>\n"
        }
    },
    "p03473": {
        "s357254648": {
            "code": "i = '21'\ni = 24+i\nprint(\"{}\".format(i))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "i": "'21'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "i = '21'",
                    "i = 24+i",
                    "print(\"{}\".format(i))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    i = '21'\n    i = 24+i\n    print(\"{}\".format(i))\nNext:\n    <END>\n"
        }
    },
    "p03494": {
        "s422820975": {
            "code": "n = [3]\na = ['8', '12', '40']\nb = 0\nc = 0\nwhile True:\n    b = min(a) / 2\n    if b <= 1:\n        break\n    c = c + 1\nprint(c)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "['8', '12', '40']"
                        },
                        {
                            "c": "0"
                        },
                        {
                            "b": "0"
                        },
                        {
                            "n": "[3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "['8', '12', '40']"
                        },
                        {
                            "c": "0"
                        },
                        {
                            "b": "0"
                        },
                        {
                            "n": "[3]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "['8', '12', '40']"
                        },
                        {
                            "c": "0"
                        },
                        {
                            "b": "0"
                        },
                        {
                            "n": "[3]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = [3]",
                    "a = ['8', '12', '40']",
                    "b = 0",
                    "c = 0"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "b = min(a) / 2",
                    "(b <= 1)"
                ],
                "4": [
                    "c = c + 1"
                ],
                "5": [
                    "print(c)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 5,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = [3]\n    a = ['8', '12', '40']\n    b = 0\n    c = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    b = min(a) / 2\n    (b <= 1)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    c = c + 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(c)\nNext:\n    <END>\n"
        }
    },
    "p03502": {
        "s315532364": {
            "code": "N = 12\nif N%sum(list(str(N))) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "12"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 12",
                    "(N % sum(list(str(N))) == 0)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 12\n    (N % sum(list(str(N))) == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s974978480": {
            "code": "x = '12'\nl = len(x)\na = 0\nfor i in range(l):\n  a += int(x[i])\nif a%x ==0:\n  print('Yes')\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "2"
                        },
                        {
                            "x": "'12'"
                        },
                        {
                            "a": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l": "2"
                        },
                        {
                            "x": "'12'"
                        },
                        {
                            "a": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "1"
                        },
                        {
                            "l": "2"
                        },
                        {
                            "x": "'12'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "1"
                        },
                        {
                            "l": "2"
                        },
                        {
                            "x": "'12'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "l": "2"
                        },
                        {
                            "x": "'12'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "l": "2"
                        },
                        {
                            "x": "'12'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "l": "2"
                        },
                        {
                            "x": "'12'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '12'",
                    "l = len(x)",
                    "a = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(l)"
                ],
                "3": [
                    "a += int(x[i])"
                ],
                "4": [
                    "(a % x == 0)"
                ],
                "5": [
                    "print('Yes')"
                ],
                "6": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '12'\n    l = len(x)\n    a = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(l)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += int(x[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (a % x == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s399987976": {
            "code": "N = '12'\nf=0\nfor i in range(len(N)):\n  f+=int(N[i])\nif N%f==0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "f": "0"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "f": "0"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "'12'"
                        },
                        {
                            "f": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "'12'"
                        },
                        {
                            "f": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "f": "3"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "f": "3"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "f": "3"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '12'",
                    "f=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(N))"
                ],
                "3": [
                    "f+=int(N[i])"
                ],
                "4": [
                    "(N % f == 0)"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '12'\n    f=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(N))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    f+=int(N[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (N % f == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s145687210": {
            "code": "N = '12'\nX = 0\nfor i in range(len(N)):\n  X += int(N[i])\nif N % X == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                3,
                4,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "X": "0"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "X": "0"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "X": "1"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "X": "1"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "X": "3"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "X": "3"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "X": "3"
                        },
                        {
                            "N": "'12'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '12'",
                    "X = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(N))"
                ],
                "3": [
                    "X += int(N[i])"
                ],
                "4": [
                    "(N % X == 0)"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '12'\n    X = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(N))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    X += int(N[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (N % X == 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03543": {
        "s017411668": {
            "code": "N = 1118\na = list(N)\nif N[0]==N[1]==N[2]==N[3] or N[0]==N[1]==N[2] or N[1]==N[2]==N[3]:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "1118"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 1118",
                    "a = list(N)",
                    "(N[0] == N[1] == N[2] == N[3] or N[0] == N[1] == N[2] or N[1] == N[2] == N[3])"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 1118\n    a = list(N)\n    (N[0] == N[1] == N[2] == N[3] or N[0] == N[1] == N[2] or N[1] == N[2] == N[3])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p03563": {
        "s210590417": {
            "code": "R = '2002'\nG = '2017'\nprint ( 2*G - R)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "G": "'2017'"
                        },
                        {
                            "R": "'2002'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "R = '2002'",
                    "G = '2017'",
                    "print ( 2*G - R)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    R = '2002'\n    G = '2017'\n    print ( 2*G - R)\nNext:\n    <END>\n"
        }
    },
    "p03597": {
        "s718552222": {
            "code": "N = '3'\nA = '4'\nprint((N**2)-A)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "A": "'4'"
                        },
                        {
                            "N": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ** or pow(): 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '3'",
                    "A = '4'",
                    "print((N**2)-A)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '3'\n    A = '4'\n    print((N**2)-A)\nNext:\n    <END>\n"
        }
    },
    "p03605": {
        "s454398762": {
            "code": "n = 29\nif 9 in n:\n\tprint('Yes')\nelse:\n\tprint('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "29"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"argument of type 'int' is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 29",
                    "(9 in n)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 29\n    (9 in n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s109347653": {
            "code": "n = 29\nif n in 9:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "29"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"argument of type 'int' is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 29",
                    "(n in 9)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 29\n    (n in 9)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        },
        "s355102675": {
            "code": "a = 29\nif 9 in a:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "29"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"argument of type 'int' is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 29",
                    "(9 in a)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 29\n    (9 in a)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03610": {
        "s718524429": {
            "code": "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\nprint(t = s[0::2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "['a', 't', 'c', 'o', 'd', 'e', 'r']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'t' is an invalid keyword argument for print()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['a', 't', 'c', 'o', 'd', 'e', 'r']",
                    "print(t = s[0::2])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['a', 't', 'c', 'o', 'd', 'e', 'r']\n    print(t = s[0::2])\nNext:\n    <END>\n"
        }
    },
    "p03631": {
        "s849080186": {
            "code": "a = 575\nif a == a[::-1]:\n  print('Yes')\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "575"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 575",
                    "(a == a[::-1])"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 575\n    (a == a[::-1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p03636": {
        "s073649804": {
            "code": "S = 'internationalization'\nprint(S[0]+str(len(S-2))+S[-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'internationalization'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'internationalization'",
                    "print(S[0]+str(len(S-2))+S[-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'internationalization'\n    print(S[0]+str(len(S-2))+S[-1])\nNext:\n    <END>\n"
        },
        "s691491905": {
            "code": "s = 'internationalization'\nprint(s[0]+str(len(s-2))+s[-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'internationalization'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'internationalization'",
                    "print(s[0]+str(len(s-2))+s[-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'internationalization'\n    print(s[0]+str(len(s-2))+s[-1])\nNext:\n    <END>\n"
        },
        "s164416332": {
            "code": "a = 'internationalization'\nb = len(a)\nprint(a[0]+(b-2)+a[b-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "b": "20"
                        },
                        {
                            "a": "'internationalization'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 'internationalization'",
                    "b = len(a)",
                    "print(a[0]+(b-2)+a[b-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 'internationalization'\n    b = len(a)\n    print(a[0]+(b-2)+a[b-1])\nNext:\n    <END>\n"
        },
        "s363160762": {
            "code": "s = 'internationalization'\na=len(s)\nb=len(s[1:len[s]])\nprint(s[0]+'a'+s[-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "20"
                        },
                        {
                            "s": "'internationalization'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'builtin_function_or_method' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'internationalization'",
                    "a=len(s)",
                    "b=len(s[1:len[s]])",
                    "print(s[0]+'a'+s[-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'internationalization'\n    a=len(s)\n    b=len(s[1:len[s]])\n    print(s[0]+'a'+s[-1])\nNext:\n    <END>\n"
        },
        "s820302644": {
            "code": "s = 'internationalization'\nprint(s(0) + ( len(s)-2) + s(-1))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'internationalization'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'internationalization'",
                    "print(s(0) + ( len(s)-2) + s(-1))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'internationalization'\n    print(s(0) + ( len(s)-2) + s(-1))\nNext:\n    <END>\n"
        },
        "s598448468": {
            "code": "s = 'internationalization'\nprint(s[0]+int(len(s-2))+s[-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'internationalization'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'internationalization'",
                    "print(s[0]+int(len(s-2))+s[-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'internationalization'\n    print(s[0]+int(len(s-2))+s[-1])\nNext:\n    <END>\n"
        }
    },
    "p03644": {
        "s170217939": {
            "code": "N = 7\npower = [64,32,16,8,4,2,1]\nfor i in power:\n  if N <= power:\n    print(power)\n    break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "power": "[64, 32, 16, 8, 4, 2, 1]"
                        },
                        {
                            "N": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "power": "[64, 32, 16, 8, 4, 2, 1]"
                        },
                        {
                            "N": "7"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "power": "[64, 32, 16, 8, 4, 2, 1]"
                        },
                        {
                            "N": "7"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 7",
                    "power = [64,32,16,8,4,2,1]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> power"
                ],
                "3": [
                    "(N <= power)"
                ],
                "4": [
                    "print(power)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    power = [64,32,16,8,4,2,1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> power\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (N <= power)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(power)\nNext:\n    <END>\n"
        }
    },
    "p03695": {
        "s269664657": {
            "code": "N = 4\na = [2100, 2500, 2700, 2700]\ncolors = [0] * 9\nfor i in range(N):\n    if 1 <= a[i] and a[i] <= 399:\n        colors[0] = 1\n    elif 400 <= a[i] and a[i] <= 799:\n        colors[1] = 1\n    elif 800 <= a[i] and a[i] <= 1199:\n        colors[2] = 1\n    elif 1200 <= a[i] and a[i] <= 1599:\n        colors[3] = 1\n    elif 1600 <= a[i] and a[i] <= 1999:\n        colors[4] = 1\n    elif 2000 <= a[i] and a[i] <= 2399:\n        colors[5] = 1\n    elif 2400 <= a[i] and a[i] <= 2799:\n        colors[6] = 1\n    elif 2800 <= a[i] and a[i] <= 3199:\n        colors[7] = 1\n    else:\n        colors[8] += 1\nif sum(colors[0:8] == 0) and colors[9] >= 1:\n    MIN = 1\nelse:\n    MIN = sum(colors[0:8])\nMAX = sum(colors)\nprint(MIN, MAX)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        11,
                        11
                    ]
                },
                "10": {
                    "range": [
                        12,
                        12
                    ]
                },
                "11": {
                    "range": [
                        13,
                        13
                    ]
                },
                "12": {
                    "range": [
                        14,
                        14
                    ]
                },
                "13": {
                    "range": [
                        15,
                        15
                    ]
                },
                "14": {
                    "range": [
                        16,
                        16
                    ]
                },
                "15": {
                    "range": [
                        17,
                        17
                    ]
                },
                "16": {
                    "range": [
                        18,
                        18
                    ]
                },
                "17": {
                    "range": [
                        19,
                        19
                    ]
                },
                "18": {
                    "range": [
                        20,
                        20
                    ]
                },
                "19": {
                    "range": [
                        22,
                        22
                    ]
                },
                "20": {
                    "range": [
                        23,
                        23
                    ]
                },
                "21": {
                    "range": [
                        24,
                        24
                    ]
                },
                "22": {
                    "range": [
                        26,
                        26
                    ]
                },
                "23": {
                    "range": [
                        27,
                        28
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                7,
                9,
                11,
                13,
                15,
                16,
                4,
                5,
                7,
                9,
                11,
                13,
                15,
                17,
                18,
                4,
                5,
                7,
                9,
                11,
                13,
                15,
                17,
                18,
                4,
                5,
                7,
                9,
                11,
                13,
                15,
                17,
                18,
                4,
                23
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 11,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 13,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 14,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 11,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 13,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 15,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 0, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 16,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 11,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 13,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 15,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 16,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 9,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 11,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 13,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 15,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 16,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                },
                {
                    "block": 20,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "colors": "[0, 0, 0, 0, 0, 1, 1, 0, 0]"
                        },
                        {
                            "a": "[2100, 2500, 2700, 2700]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'bool' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "a = [2100, 2500, 2700, 2700]",
                    "colors = [0] * 9"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(1 <= a[i] and a[i] <= 399)"
                ],
                "4": [
                    "colors[0] = 1"
                ],
                "5": [
                    "(400 <= a[i] and a[i] <= 799)"
                ],
                "6": [
                    "colors[1] = 1"
                ],
                "7": [
                    "(800 <= a[i] and a[i] <= 1199)"
                ],
                "8": [
                    "colors[2] = 1"
                ],
                "9": [
                    "(1200 <= a[i] and a[i] <= 1599)"
                ],
                "10": [
                    "colors[3] = 1"
                ],
                "11": [
                    "(1600 <= a[i] and a[i] <= 1999)"
                ],
                "12": [
                    "colors[4] = 1"
                ],
                "13": [
                    "(2000 <= a[i] and a[i] <= 2399)"
                ],
                "14": [
                    "colors[5] = 1"
                ],
                "15": [
                    "(2400 <= a[i] and a[i] <= 2799)"
                ],
                "16": [
                    "colors[6] = 1"
                ],
                "17": [
                    "(2800 <= a[i] and a[i] <= 3199)"
                ],
                "18": [
                    "colors[7] = 1"
                ],
                "19": [
                    "colors[8] += 1"
                ],
                "20": [
                    "(sum(colors[0:8] == 0) and colors[9] >= 1)"
                ],
                "21": [
                    "MIN = 1"
                ],
                "22": [
                    "MIN = sum(colors[0:8])"
                ],
                "23": [
                    "MAX = sum(colors)",
                    "print(MIN, MAX)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 20
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": 17
                    },
                    "no_condition": null
                },
                "16": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "17": {
                    "with_condition": {
                        "true": 18,
                        "false": 19
                    },
                    "no_condition": null
                },
                "18": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "19": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "20": {
                    "with_condition": {
                        "true": 21,
                        "false": 22
                    },
                    "no_condition": null
                },
                "21": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 23
                },
                "22": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 23
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    a = [2100, 2500, 2700, 2700]\n    colors = [0] * 9\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 20\n\nBlock 3:\nStatement:\n    (1 <= a[i] and a[i] <= 399)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    colors[0] = 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (400 <= a[i] and a[i] <= 799)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    colors[1] = 1\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (800 <= a[i] and a[i] <= 1199)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    colors[2] = 1\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (1200 <= a[i] and a[i] <= 1599)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    colors[3] = 1\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    (1600 <= a[i] and a[i] <= 1999)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    colors[4] = 1\nNext:\n    Go to Block: 2\n\nBlock 13:\nStatement:\n    (2000 <= a[i] and a[i] <= 2399)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    colors[5] = 1\nNext:\n    Go to Block: 2\n\nBlock 15:\nStatement:\n    (2400 <= a[i] and a[i] <= 2799)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    colors[6] = 1\nNext:\n    Go to Block: 2\n\nBlock 17:\nStatement:\n    (2800 <= a[i] and a[i] <= 3199)\nNext:\n    If True: Go to Block 18\n    If False: Go to Block 19\n\nBlock 18:\nStatement:\n    colors[7] = 1\nNext:\n    Go to Block: 2\n\nBlock 19:\nStatement:\n    colors[8] += 1\nNext:\n    Go to Block: 2\n\nBlock 20:\nStatement:\n    (sum(colors[0:8] == 0) and colors[9] >= 1)\nNext:\n    If True: Go to Block 21\n    If False: Go to Block 22\n\nBlock 21:\nStatement:\n    MIN = 1\nNext:\n    Go to Block: 23\n\nBlock 22:\nStatement:\n    MIN = sum(colors[0:8])\nNext:\n    Go to Block: 23\n\nBlock 23:\nStatement:\n    MAX = sum(colors)\n    print(MIN, MAX)\nNext:\n    <END>\n"
        }
    },
    "p03775": {
        "s579170792": {
            "code": "n = 10000\nimport math\nfor i in range (math.sqrt(n),0,-1):\n  if n%i==0:\n    print(max(len(str(i)),len(str(n//i))))\n    quit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "10000"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "10000"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10000",
                    "import math"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(math.sqrt(n), 0, -1)"
                ],
                "3": [
                    "(n % i == 0)"
                ],
                "4": [
                    "print(max(len(str(i)),len(str(n//i))))",
                    "quit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10000\n    import math\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(math.sqrt(n), 0, -1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(max(len(str(i)),len(str(n//i))))\n    quit()\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03827": {
        "s094629606": {
            "code": "n = 5\ns = 'IIDID'\nx = 0\nans = 0\nfor c in x:\n  if c == \"I\":\n    x += 1\n  else:\n    x -= 1\n  if x > ans:\n    ans = x\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "x": "0"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "s": "'IIDID'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "x": "0"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "s": "'IIDID'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "s = 'IIDID'",
                    "x = 0",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> c, Iterate Over -> x"
                ],
                "3": [
                    "(c == 'I')"
                ],
                "4": [
                    "x += 1"
                ],
                "5": [
                    "x -= 1"
                ],
                "6": [
                    "(x > ans)"
                ],
                "7": [
                    "ans = x"
                ],
                "8": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    s = 'IIDID'\n    x = 0\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> c, Iterate Over -> x\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (c == 'I')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    x += 1\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    x -= 1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    (x > ans)\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 2\n\nBlock 7:\nStatement:\n    ans = x\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03997": {
        "s077978144": {
            "code": "a = '3'\nb = '4'\nh = '2'\nret = ((a + b ) * h) / 2\nprint(ret)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "b": "'4'"
                        },
                        {
                            "a": "'3'"
                        },
                        {
                            "h": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = '3'",
                    "b = '4'",
                    "h = '2'",
                    "ret = ((a + b ) * h) / 2",
                    "print(ret)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = '3'\n    b = '4'\n    h = '2'\n    ret = ((a + b ) * h) / 2\n    print(ret)\nNext:\n    <END>\n"
        }
    },
    "p04029": {
        "s958882367": {
            "code": "n = '3'\nprint(n*(n+1)//2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '3'",
                    "print(n*(n+1)//2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '3'\n    print(n*(n+1)//2)\nNext:\n    <END>\n"
        },
        "s999105828": {
            "code": "number = '3'\nfor i in range(number):\n  number = number+1\nprint(number)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "number": "'3'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "number": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "number = '3'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(number)"
                ],
                "3": [
                    "number = number+1"
                ],
                "4": [
                    "print(number)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    number = '3'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(number)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    number = number+1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(number)\nNext:\n    <END>\n"
        }
    },
    "p04030": {
        "s608211282": {
            "code": "s = '01B0'\nresult = []\nfor i in range(len(s)):\n  if '0' == i[s]:\n    result.append(0)\n  elif '1' == i[s]:\n    result.append(1)\n  elif 'B' == i[s]:\n    if 0 == len(result):\n      pass\n    else:\n      result.pop()\nprint(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        9
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                },
                "10": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "result": "[]"
                        },
                        {
                            "s": "'01B0'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "result": "[]"
                        },
                        {
                            "s": "'01B0'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "result": "[]"
                        },
                        {
                            "s": "'01B0'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '01B0'",
                    "result = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(s))"
                ],
                "3": [
                    "('0' == i[s])"
                ],
                "4": [
                    "result.append(0)"
                ],
                "5": [
                    "('1' == i[s])"
                ],
                "6": [
                    "result.append(1)"
                ],
                "7": [
                    "('B' == i[s])"
                ],
                "8": [
                    "(0 == len(result))"
                ],
                "9": [
                    "result.pop()"
                ],
                "10": [
                    "print(result)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 10
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 2
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 2,
                        "false": 9
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '01B0'\n    result = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(s))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 10\n\nBlock 3:\nStatement:\n    ('0' == i[s])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    result.append(0)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    ('1' == i[s])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    result.append(1)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    ('B' == i[s])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    (0 == len(result))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 9\n\nBlock 9:\nStatement:\n    result.pop()\nNext:\n    Go to Block: 2\n\nBlock 10:\nStatement:\n    print(result)\nNext:\n    <END>\n"
        }
    },
    "p03760": {
        "s782093418": {
            "code": "o = 'xyz'\ne = 'abc'\nans = \"\"\nfor i in len(o):\n  ans += o[i]\n  if len(e) > i:\n    ans += e[i]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "e": "'abc'"
                        },
                        {
                            "ans": "''"
                        },
                        {
                            "o": "'xyz'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "e": "'abc'"
                        },
                        {
                            "ans": "''"
                        },
                        {
                            "o": "'xyz'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "o = 'xyz'",
                    "e = 'abc'",
                    "ans = \"\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> len(o)"
                ],
                "3": [
                    "ans += o[i]",
                    "(len(e) > i)"
                ],
                "4": [
                    "ans += e[i]"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    o = 'xyz'\n    e = 'abc'\n    ans = \"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(o)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ans += o[i]\n    (len(e) > i)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += e[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s742498343": {
            "code": "o = ['x', 'y', 'z']\ne = ['a', 'b', 'c']\nif len(o) > len(e):\n  e.append(\"\")\nfor i in range(o):\n  print(o[i] + e[i], end='')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "o": "['x', 'y', 'z']"
                        },
                        {
                            "e": "['a', 'b', 'c']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "o": "['x', 'y', 'z']"
                        },
                        {
                            "e": "['a', 'b', 'c']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "o = ['x', 'y', 'z']",
                    "e = ['a', 'b', 'c']",
                    "(len(o) > len(e))"
                ],
                "2": [
                    "e.append(\"\")"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(o)"
                ],
                "4": [
                    "print(o[i] + e[i], end='')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    o = ['x', 'y', 'z']\n    e = ['a', 'b', 'c']\n    (len(o) > len(e))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    e.append(\"\")\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(o)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    print(o[i] + e[i], end='')\nNext:\n    Go to Block: 3\n"
        }
    },
    "p02546": {
        "s252416134": {
            "code": "s = 'apple'\ns_list=list(s)\nx=len(s_list)\na_list=reversed(s_list)\nif a_list[0]==\"s\":\n  s_list[x]=\"e\"\n  s_list[x+1]=\"s\"\nelse:\n  s_list[x+1]=\"s\"\nprint(s_list)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        7
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s_list": "['a', 'p', 'p', 'l', 'e']"
                        },
                        {
                            "a_list": "<list_reverseiterator object at 0x7f4bacfab2b0>"
                        },
                        {
                            "s": "'apple'"
                        },
                        {
                            "x": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list_reverseiterator' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'apple'",
                    "s_list=list(s)",
                    "x=len(s_list)",
                    "a_list=reversed(s_list)",
                    "(a_list[0] == 's')"
                ],
                "2": [
                    "s_list[x]=\"e\"",
                    "s_list[x+1]=\"s\""
                ],
                "3": [
                    "s_list[x+1]=\"s\""
                ],
                "4": [
                    "print(s_list)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'apple'\n    s_list=list(s)\n    x=len(s_list)\n    a_list=reversed(s_list)\n    (a_list[0] == 's')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    s_list[x]=\"e\"\n    s_list[x+1]=\"s\"\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    s_list[x+1]=\"s\"\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(s_list)\nNext:\n    <END>\n"
        }
    },
    "p03385": {
        "s342603390": {
            "code": "import re\nS = 'bac'\nfind_a= re.findall(\"a\")\nfind_b = re.findall(\"b\")\nfind_c = re.findall(\"c\")\nif find_a and find_b and find_c:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"findall() missing 1 required positional argument: 'string'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import re",
                    "S = 'bac'",
                    "find_a= re.findall(\"a\")",
                    "find_b = re.findall(\"b\")",
                    "find_c = re.findall(\"c\")",
                    "(find_a and find_b and find_c)"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import re\n    S = 'bac'\n    find_a= re.findall(\"a\")\n    find_b = re.findall(\"b\")\n    find_c = re.findall(\"c\")\n    (find_a and find_b and find_c)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02843": {
        "s849806190": {
            "code": "X = 615\nDP = [0]*100001\nDP[100] = 1\nDP[101] = 1\nDP[102] = 1\nDP[103] = 1\nDP[104] = 1\nDP[105] = 1\nfor i in range(106, 100001):\n    if any(DP[i-100], DP[i-101], DP[i-102], DP[i-103], DP[i-104], DP[i-105]):\n        DP[i] = 1\nprint(DP[W])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "X": "615"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "X": "615"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "X": "615"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('any() takes exactly one argument (6 given)')"
            },
            "cfg_block_statements": {
                "1": [
                    "X = 615",
                    "DP = [0]*100001",
                    "DP[100] = 1",
                    "DP[101] = 1",
                    "DP[102] = 1",
                    "DP[103] = 1",
                    "DP[104] = 1",
                    "DP[105] = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(106, 100001)"
                ],
                "3": [
                    "(any(DP[i - 100], DP[i - 101], DP[i - 102], DP[i - 103], DP[i - 104], DP[i - 105]))"
                ],
                "4": [
                    "DP[i] = 1"
                ],
                "5": [
                    "print(DP[W])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 615\n    DP = [0]*100001\n    DP[100] = 1\n    DP[101] = 1\n    DP[102] = 1\n    DP[103] = 1\n    DP[104] = 1\n    DP[105] = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(106, 100001)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (any(DP[i - 100], DP[i - 101], DP[i - 102], DP[i - 103], DP[i - 104], DP[i - 105]))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    DP[i] = 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(DP[W])\nNext:\n    <END>\n"
        }
    },
    "p02596": {
        "s560686393": {
            "code": "k = 101\nif k%2 == 0:\n\tprint(-1)\nelif k%5 == 0:\n\tprint(-1)\nelse:\n\ts = 7\n\twhile s%k != 0:\n\t\ts = 10*s+7\n\tprint(len(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                4,
                7,
                8,
                9,
                8,
                9,
                8,
                9,
                8,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "k": "101"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "k": "101"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "k": "101"
                        },
                        {
                            "s": "7"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "k": "101"
                        },
                        {
                            "s": "7"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "s": "77"
                        },
                        {
                            "k": "101"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "s": "77"
                        },
                        {
                            "k": "101"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "s": "777"
                        },
                        {
                            "k": "101"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "s": "777"
                        },
                        {
                            "k": "101"
                        }
                    ]
                },
                {
                    "block": 7,
                    "state": [
                        {
                            "s": "7777"
                        },
                        {
                            "k": "101"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "s": "7777"
                        },
                        {
                            "k": "101"
                        }
                    ]
                },
                {
                    "block": 8,
                    "state": [
                        {
                            "s": "7777"
                        },
                        {
                            "k": "101"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "k = 101",
                    "(k % 2 == 0)"
                ],
                "2": [
                    "print(-1)"
                ],
                "3": [
                    "(k % 5 == 0)"
                ],
                "4": [
                    "print(-1)"
                ],
                "5": [
                    "s = 7"
                ],
                "6": [
                    "while s%k != 0:"
                ],
                "7": [
                    "s = 10*s+7"
                ],
                "8": [
                    "print(len(s))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "6": {
                    "with_condition": {
                        "true": 7,
                        "false": 8
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    k = 101\n    (k % 2 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (k % 5 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    s = 7\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    while s%k != 0:\nNext:\n    If True: Go to Block 7\n    If False: Go to Block 8\n\nBlock 7:\nStatement:\n    s = 10*s+7\nNext:\n    Go to Block: 6\n\nBlock 8:\nStatement:\n    print(len(s))\nNext:\n    <END>\n"
        }
    },
    "p03293": {
        "s450057929": {
            "code": "A = ['k', 'y', 'o', 't', 'o']\nT = 'tokyo'\ncheck = 'No'\nfor i in range(len(A)):\n  if ''.join(A) == T:\n    check = 'Yes'\n  A.insert(A.pop(-1))\nprint(check)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "check": "'No'"
                        },
                        {
                            "T": "'tokyo'"
                        },
                        {
                            "A": "['k', 'y', 'o', 't', 'o']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "check": "'No'"
                        },
                        {
                            "T": "'tokyo'"
                        },
                        {
                            "A": "['k', 'y', 'o', 't', 'o']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "check": "'No'"
                        },
                        {
                            "T": "'tokyo'"
                        },
                        {
                            "A": "['k', 'y', 'o', 't', 'o']"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "check": "'No'"
                        },
                        {
                            "T": "'tokyo'"
                        },
                        {
                            "A": "['k', 'y', 'o', 't']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('insert expected 2 arguments, got 1')"
            },
            "cfg_block_statements": {
                "1": [
                    "A = ['k', 'y', 'o', 't', 'o']",
                    "T = 'tokyo'",
                    "check = 'No'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(A))"
                ],
                "3": [
                    "(''.join(A) == T)"
                ],
                "4": [
                    "check = 'Yes'"
                ],
                "5": [
                    "A.insert(A.pop(-1))"
                ],
                "6": [
                    "print(check)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    A = ['k', 'y', 'o', 't', 'o']\n    T = 'tokyo'\n    check = 'No'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(A))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (''.join(A) == T)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    check = 'Yes'\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    A.insert(A.pop(-1))\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(check)\nNext:\n    <END>\n"
        },
        "s545035157": {
            "code": "s = 'kyoto'\nt = 'tokyo'\nfor i in range(s):\n    s.insert(0, s.pop(-1))\n    if s == t:\n        print(\"Yes\")\nprint(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'kyoto'"
                        },
                        {
                            "t": "'tokyo'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'kyoto'"
                        },
                        {
                            "t": "'tokyo'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'kyoto'",
                    "t = 'tokyo'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(s)"
                ],
                "3": [
                    "s.insert(0, s.pop(-1))",
                    "(s == t)"
                ],
                "4": [
                    "print(\"Yes\")"
                ],
                "5": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'kyoto'\n    t = 'tokyo'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    s.insert(0, s.pop(-1))\n    (s == t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(\"Yes\")\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02607": {
        "s796409155": {
            "code": "import math\nN = '5'\nai = ['1', '3', '4', '5', '7']\nnum = 0\nfor i in range(N/2):\n    if ai[i + 1] % 2 == 1:\n        num += 1\nprint(num)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import math",
                    "N = '5'",
                    "ai = ['1', '3', '4', '5', '7']",
                    "num = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N / 2)"
                ],
                "3": [
                    "(ai[i + 1] % 2 == 1)"
                ],
                "4": [
                    "num += 1"
                ],
                "5": [
                    "print(num)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    N = '5'\n    ai = ['1', '3', '4', '5', '7']\n    num = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N / 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (ai[i + 1] % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    num += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(num)\nNext:\n    <END>\n"
        }
    },
    "p02402": {
        "s859283764": {
            "code": "n = 5\nl = [10, 1, 5, 4, 17]\nsum = 0\nfor i in range(n):\n    sum += l[i]\nprint(min(l), max(l), sum(l))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "0"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "sum": "10"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "n": "5"
                        },
                        {
                            "sum": "10"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "11"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "11"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "16"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "16"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "20"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "20"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "37"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "37"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "l": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "sum": "37"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "l = [10, 1, 5, 4, 17]",
                    "sum = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "sum += l[i]"
                ],
                "4": [
                    "print(min(l), max(l), sum(l))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    l = [10, 1, 5, 4, 17]\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum += l[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(min(l), max(l), sum(l))\nNext:\n    <END>\n"
        },
        "s595502364": {
            "code": "num = 5\nlis = [10, 1, 5, 4, 17]\nsum = 0\nmin = list[0]\nmax = list[0]\nfor i in range(num):\n    if(min > list[i]):min = list[i]\n    if(max < list[i]):max = list[i]\n    sum = sum+list[i]\nprint(\"%d %d %d\" %(min,max,sum))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "max": "<types.GenericAlias object at 0x7f0a959c2e80>"
                        },
                        {
                            "num": "5"
                        },
                        {
                            "lis": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "min": "<types.GenericAlias object at 0x7f0a959c2ed0>"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "max": "<types.GenericAlias object at 0x7f0a959c2e80>"
                        },
                        {
                            "num": "5"
                        },
                        {
                            "lis": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "min": "<types.GenericAlias object at 0x7f0a959c2ed0>"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "max": "<types.GenericAlias object at 0x7f0a959c2e80>"
                        },
                        {
                            "num": "5"
                        },
                        {
                            "lis": "[10, 1, 5, 4, 17]"
                        },
                        {
                            "min": "<types.GenericAlias object at 0x7f0a959c2ed0>"
                        },
                        {
                            "sum": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'types.GenericAlias' and 'types.GenericAlias'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "num = 5",
                    "lis = [10, 1, 5, 4, 17]",
                    "sum = 0",
                    "min = list[0]",
                    "max = list[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(num)"
                ],
                "3": [
                    "(min > list[i])"
                ],
                "4": [
                    "(max < list[i])"
                ],
                "5": [
                    "sum = sum+list[i]"
                ],
                "6": [
                    "print(\"%d %d %d\" %(min,max,sum))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = 5\n    lis = [10, 1, 5, 4, 17]\n    sum = 0\n    min = list[0]\n    max = list[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(num)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (min > list[i])\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    (max < list[i])\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    sum = sum+list[i]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(\"%d %d %d\" %(min,max,sum))\nNext:\n    <END>\n"
        }
    },
    "p02407": {
        "s243217910": {
            "code": "count = 5\narray = [1, 2, 3, 4, 5]\na = array.reverse()\nprint(\" \".join(a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "array": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "count": "5"
                        },
                        {
                            "a": "None"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only join an iterable')"
            },
            "cfg_block_statements": {
                "1": [
                    "count = 5",
                    "array = [1, 2, 3, 4, 5]",
                    "a = array.reverse()",
                    "print(\" \".join(a))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    count = 5\n    array = [1, 2, 3, 4, 5]\n    a = array.reverse()\n    print(\" \".join(a))\nNext:\n    <END>\n"
        }
    },
    "p04011": {
        "s685713841": {
            "code": "N = '5'\nK = '3'\nX = '10000'\nY = '9000'\nif N<=K:\n  print(N*X)\nelse:\n  print(K*X + (N-K)*Y)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'5'"
                        },
                        {
                            "Y": "'9000'"
                        },
                        {
                            "K": "'3'"
                        },
                        {
                            "X": "'10000'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "'5'"
                        },
                        {
                            "Y": "'9000'"
                        },
                        {
                            "K": "'3'"
                        },
                        {
                            "X": "'10000'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "K = '3'",
                    "X = '10000'",
                    "Y = '9000'",
                    "(N <= K)"
                ],
                "2": [
                    "print(N*X)"
                ],
                "3": [
                    "print(K*X + (N-K)*Y)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    K = '3'\n    X = '10000'\n    Y = '9000'\n    (N <= K)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(N*X)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(K*X + (N-K)*Y)\nNext:\n    <END>\n"
        }
    },
    "p02753": {
        "s364568452": {
            "code": "s = ['ABA']\nif s in 'A' and s in 'B':\n  print('Yes')\nelse:\n  print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "['ABA']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'in <string>' requires string as left operand, not list\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['ABA']",
                    "(s in 'A' and s in 'B')"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['ABA']\n    (s in 'A' and s in 'B')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        },
        "s783795016": {
            "code": "s = 'ABA'\nif s==\"AAA\" | s==\"BBB\":\n    print(\"No\")\nelse: \n    print(\"Yes\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'ABA'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for |: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'ABA'",
                    "(s == 'AAA' | s == 'BBB')"
                ],
                "2": [
                    "print(\"No\")"
                ],
                "3": [
                    "print(\"Yes\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABA'\n    (s == 'AAA' | s == 'BBB')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n"
        }
    },
    "p03464": {
        "s687570691": {
            "code": "import sys\nK = 4\nA = [3, 4, 3, 2]\nA.reverse()\njmax, jmin = 2,2\nif A[0] != 2:\n    print(-1)\n    sys.exit()\nfor i in range(0,K-1):  \n    Round = list(range(jmin,jmax+1))\n    if not(0 in Round % A[i]):\n        print(-1)\n        sys.exit()\n    jmin = (int(jmin/A[i])+1)*A[i]\n    jmax = (int(jmax/A[i]))*A[i] +A[i]-1\njmax = jmax + A[K-1] -1\nprint(jmin, jmax)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        13
                    ]
                },
                "6": {
                    "range": [
                        14,
                        15
                    ]
                },
                "7": {
                    "range": [
                        16,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                9,
                10,
                11
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                },
                {
                    "block": 4,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import sys",
                    "K = 4",
                    "A = [3, 4, 3, 2]",
                    "A.reverse()",
                    "jmax, jmin = 2,2",
                    "(A[0] != 2)"
                ],
                "2": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(0, K - 1)"
                ],
                "4": [
                    "Round = list(range(jmin,jmax+1))",
                    "(not 0 in Round % A[i])"
                ],
                "5": [
                    "print(-1)",
                    "sys.exit()"
                ],
                "6": [
                    "jmin = (int(jmin/A[i])+1)*A[i]",
                    "jmax = (int(jmax/A[i]))*A[i] +A[i]-1"
                ],
                "7": [
                    "jmax = jmax + A[K-1] -1",
                    "print(jmin, jmax)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 7
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    K = 4\n    A = [3, 4, 3, 2]\n    A.reverse()\n    jmax, jmin = 2,2\n    (A[0] != 2)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(0, K - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 7\n\nBlock 4:\nStatement:\n    Round = list(range(jmin,jmax+1))\n    (not 0 in Round % A[i])\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(-1)\n    sys.exit()\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    jmin = (int(jmin/A[i])+1)*A[i]\n    jmax = (int(jmax/A[i]))*A[i] +A[i]-1\nNext:\n    Go to Block: 3\n\nBlock 7:\nStatement:\n    jmax = jmax + A[K-1] -1\n    print(jmin, jmax)\nNext:\n    <END>\n"
        }
    },
    "p03795": {
        "s676858451": {
            "code": "N = '20'\nx = N * 800\ny = N / 15 * 200\nprint(x - y)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'20'"
                        },
                        {
                            "x
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '20'",
                    "x = N * 800",
                    "y = N / 15 * 200",
                    "print(x - y)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '20'\n    x = N * 800\n    y = N / 15 * 200\n    print(x - y)\nNext:\n    <END>\n"
        }
    },
    "p03029": {
        "s213703542": {
            "code": "d = [1, 3]\nprint(int(answer=(d[0]*3+d[1])/2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "d": "[1, 3]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'answer' is an invalid keyword argument for int()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "d = [1, 3]",
                    "print(int(answer=(d[0]*3+d[1])/2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    d = [1, 3]\n    print(int(answer=(d[0]*3+d[1])/2))\nNext:\n    <END>\n"
        }
    },
    "p02887": {
        "s331115237": {
            "code": "from itertools import groupby\nN = 10\nS = 'aabbbbaaca'\nprint(len(groupby(S)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'itertools.groupby' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "from itertools import groupby",
                    "N = 10",
                    "S = 'aabbbbaaca'",
                    "print(len(groupby(S)))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    from itertools import groupby\n    N = 10\n    S = 'aabbbbaaca'\n    print(len(groupby(S)))\nNext:\n    <END>\n"
        },
        "s648912704": {
            "code": "n = 10\nt = 'aabbbbaaca'\nans=t[0]\nfor i in range(1,n):\n    if ans[-1]==i:\n        pass\n    else:\n        ans=ans+i\nprint(len(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "10"
                        },
                        {
                            "ans": "'a'"
                        },
                        {
                            "t": "'aabbbbaaca'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "10"
                        },
                        {
                            "ans": "'a'"
                        },
                        {
                            "t": "'aabbbbaaca'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "10"
                        },
                        {
                            "ans": "'a'"
                        },
                        {
                            "t": "'aabbbbaaca'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "n": "10"
                        },
                        {
                            "ans": "'a'"
                        },
                        {
                            "t": "'aabbbbaaca'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "t = 'aabbbbaaca'",
                    "ans=t[0]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "(ans[-1] == i)"
                ],
                "4": [
                    "ans=ans+i"
                ],
                "5": [
                    "print(len(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    t = 'aabbbbaaca'\n    ans=t[0]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (ans[-1] == i)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    ans=ans+i\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(len(ans))\nNext:\n    <END>\n"
        }
    },
    "p03337": {
        "s863754581": {
            "code": "li = [3, 1]\nans = [li[0]+li[1],li[0]-li[1],li[1]-li[0],li[0]*li[1]].sort()\nprint(ans[3])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "None"
                        },
                        {
                            "li": "[3, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "li = [3, 1]",
                    "ans = [li[0]+li[1],li[0]-li[1],li[1]-li[0],li[0]*li[1]].sort()",
                    "print(ans[3])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    li = [3, 1]\n    ans = [li[0]+li[1],li[0]-li[1],li[1]-li[0],li[0]*li[1]].sort()\n    print(ans[3])\nNext:\n    <END>\n"
        }
    },
    "p02765": {
        "s938228948": {
            "code": "_input = '2 2919'\nnumber = _input.split()\nN = number[0]\nR = number[1]\nif N<10:\n  R += 100 * (10-N)\nprint(R)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "_input": "'2 2919'"
                        },
                        {
                            "number": "['2', '2919']"
                        },
                        {
                            "R": "'2919'"
                        },
                        {
                            "N": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "_input = '2 2919'",
                    "number = _input.split()",
                    "N = number[0]",
                    "R = number[1]",
                    "(N < 10)"
                ],
                "2": [
                    "R += 100 * (10-N)"
                ],
                "3": [
                    "print(R)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    _input = '2 2919'\n    number = _input.split()\n    N = number[0]\n    R = number[1]\n    (N < 10)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    R += 100 * (10-N)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    print(R)\nNext:\n    <END>\n"
        }
    },
    "p02973": {
        "s627240509": {
            "code": "N = 5\nnums = [2, 1, 4, 5, 3]\nans = 0\nnums_sorted = nums[:]\nnums_sorted = list(set(nums_sorted))\nnums_sorted.sort(reverse=True)\ndi = {}\nfor i in range(N-1):\n    if nums[i] > nums[i+1]:\n        ans += 1\nnums_l = len(nums)\nnums_s = len(list(set(nums)) )\nans += nums_l - nums_s\nif len(nums_s) == 1:\n    ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        11,
                        14
                    ]
                },
                "6": {
                    "range": [
                        15,
                        15
                    ]
                },
                "7": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                8,
                9,
                8,
                9,
                8,
                9,
                10,
                8,
                11,
                12,
                13,
                14
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "1"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "2"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "nums_l": "5"
                        },
                        {
                            "N": "5"
                        },
                        {
                            "nums_s": "5"
                        },
                        {
                            "nums": "[2, 1, 4, 5, 3]"
                        },
                        {
                            "di": "{}"
                        },
                        {
                            "nums_sorted": "[5, 4, 3, 2, 1]"
                        },
                        {
                            "ans": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "nums = [2, 1, 4, 5, 3]",
                    "ans = 0",
                    "nums_sorted = nums[:]",
                    "nums_sorted = list(set(nums_sorted))",
                    "nums_sorted.sort(reverse=True)",
                    "di = {}"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "(nums[i] > nums[i + 1])"
                ],
                "4": [
                    "ans += 1"
                ],
                "5": [
                    "nums_l = len(nums)",
                    "nums_s = len(list(set(nums)) )",
                    "ans += nums_l - nums_s",
                    "(len(nums_s) == 1)"
                ],
                "6": [
                    "ans += 1"
                ],
                "7": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    nums = [2, 1, 4, 5, 3]\n    ans = 0\n    nums_sorted = nums[:]\n    nums_sorted = list(set(nums_sorted))\n    nums_sorted.sort(reverse=True)\n    di = {}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (nums[i] > nums[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    nums_l = len(nums)\n    nums_s = len(list(set(nums)) )\n    ans += nums_l - nums_s\n    (len(nums_s) == 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02615": {
        "s040693337": {
            "code": "N = 4\nA = [2, 2, 1, 3]\nA.sort(Reverse = True)\nprint(A.sum-A[-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "A": "[2, 2, 1, 3]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'Reverse' is an invalid keyword argument for sort()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = [2, 2, 1, 3]",
                    "A.sort(Reverse = True)",
                    "print(A.sum-A[-1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = [2, 2, 1, 3]\n    A.sort(Reverse = True)\n    print(A.sum-A[-1])\nNext:\n    <END>\n"
        }
    },
    "p02880": {
        "s247945080": {
            "code": "n = 10\nans = 0\nfor s, t in range(8):\n  if n == s*t:\n    ans += 1\nif ans == 0:\n  print('No')\nelse:\n  print('Yes')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "10"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "10"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('cannot unpack non-iterable int object')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "ans = 0"
                ],
                "2": [
                    "s <- index\n    t <- iterator"
                ],
                "3": [
                    "(n == s * t)"
                ],
                "4": [
                    "ans += 1"
                ],
                "5": [
                    "(ans == 0)"
                ],
                "6": [
                    "print('No')"
                ],
                "7": [
                    "print('Yes')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    s <- index\n    t <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (n == s * t)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (ans == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('No')\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print('Yes')\nNext:\n    <END>\n"
        }
    },
    "p03080": {
        "s856233748": {
            "code": "n = '4'\ns = 'RRBR'\nt=s.count('R')\nif 2*t>n:\n    print('Yes')\nelse:\n    print('No')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'4'"
                        },
                        {
                            "t": "3"
                        },
                        {
                            "s": "'RRBR'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '4'",
                    "s = 'RRBR'",
                    "t=s.count('R')",
                    "(2 * t > n)"
                ],
                "2": [
                    "print('Yes')"
                ],
                "3": [
                    "print('No')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '4'\n    s = 'RRBR'\n    t=s.count('R')\n    (2 * t > n)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('Yes')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('No')\nNext:\n    <END>\n"
        }
    },
    "p03555": {
        "s200655124": {
            "code": "a = 'pot'\nb = 'top'\nif a[0]==b[2] and a[1]==b[a] and a[2]==b[0]:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "b": "'top'"
                        },
                        {
                            "a": "'pot'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"string indices must be integers, not 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 'pot'",
                    "b = 'top'",
                    "(a[0] == b[2] and a[1] == b[a] and (a[2] == b[0]))"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 'pot'\n    b = 'top'\n    (a[0] == b[2] and a[1] == b[a] and (a[2] == b[0]))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03609": {
        "s762285374": {
            "code": "s = '100 17'\nx=list(s)\nout=\"\"\nfor i in range(x):\n\tif (i+1) % 2 ==0:\n\t\tout+=x[i]\nprint(out)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "['1', '0', '0', ' ', '1', '7']"
                        },
                        {
                            "s": "'100 17'"
                        },
                        {
                            "out": "''"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "['1', '0', '0', ' ', '1', '7']"
                        },
                        {
                            "s": "'100 17'"
                        },
                        {
                            "out": "''"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '100 17'",
                    "x=list(s)",
                    "out=\"\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(x)"
                ],
                "3": [
                    "((i + 1) % 2 == 0)"
                ],
                "4": [
                    "out+=x[i]"
                ],
                "5": [
                    "print(out)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '100 17'\n    x=list(s)\n    out=\"\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(x)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    ((i + 1) % 2 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    out+=x[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(out)\nNext:\n    <END>\n"
        }
    },
    "p03145": {
        "s126104248": {
            "code": "A = ['3', '4', '5']\nprint(A[0]*A[1]/2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "A": "['3', '4', '5']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "A = ['3', '4', '5']",
                    "print(A[0]*A[1]/2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    A = ['3', '4', '5']\n    print(A[0]*A[1]/2)\nNext:\n    <END>\n"
        }
    },
    "p03449": {
        "s856149194": {
            "code": "N = 5\nA = [3, 2, 2, 4, 1]\nB = [1, 2, 2, 2, 1]\nans=0\nfor i in range(N):\n  A = sum(A[:i+1]+B[i:])\n  ans=max(ans,B)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "A": "[3, 2, 2, 4, 1]"
                        },
                        {
                            "B": "[1, 2, 2, 2, 1]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "A": "[3, 2, 2, 4, 1]"
                        },
                        {
                            "B": "[1, 2, 2, 2, 1]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "A": "11"
                        },
                        {
                            "B": "[1, 2, 2, 2, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "A = [3, 2, 2, 4, 1]",
                    "B = [1, 2, 2, 2, 1]",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "A = sum(A[:i+1]+B[i:])",
                    "ans=max(ans,B)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [3, 2, 2, 4, 1]\n    B = [1, 2, 2, 2, 1]\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    A = sum(A[:i+1]+B[i:])\n    ans=max(ans,B)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03852": {
        "s790423947": {
            "code": "c = 'a'\nif c== 'a'|'i'|'u'|'e'|'o':\n  print('vowel')\nelse:\n  print('consonant')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "c": "'a'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for |: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "c = 'a'",
                    "(c == 'a' | 'i' | 'u' | 'e' | 'o')"
                ],
                "2": [
                    "print('vowel')"
                ],
                "3": [
                    "print('consonant')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    c = 'a'\n    (c == 'a' | 'i' | 'u' | 'e' | 'o')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('vowel')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('consonant')\nNext:\n    <END>\n"
        }
    },
    "p03127": {
        "s246047787": {
            "code": "import math\nn = 4\na = [2, 10, 8, 40]\ng = a.sort()[n - 1]\nfor i in range(1, n):\n    g = math.gcd(g, a[i])\nprint(g)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import math",
                    "n = 4",
                    "a = [2, 10, 8, 40]",
                    "g = a.sort()[n - 1]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n)"
                ],
                "3": [
                    "g = math.gcd(g, a[i])"
                ],
                "4": [
                    "print(g)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 4\n    a = [2, 10, 8, 40]\n    g = a.sort()[n - 1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    g = math.gcd(g, a[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(g)\nNext:\n    <END>\n"
        }
    },
    "p02694": {
        "s832414472": {
            "code": "x = 103\na=100\nk=0\nwhile(1):\n  k+=1\n  a=a+a(1//100)\n  if(a>=x):break\nprint(k)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "100"
                        },
                        {
                            "k": "0"
                        },
                        {
                            "x": "103"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "100"
                        },
                        {
                            "k": "0"
                        },
                        {
                            "x": "103"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "100"
                        },
                        {
                            "x": "103"
                        },
                        {
                            "k": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = 103",
                    "a=100",
                    "k=0"
                ],
                "2": [
                    "while(1):"
                ],
                "3": [
                    "k+=1",
                    "a=a+a(1//100)",
                    "(a >= x)"
                ],
                "4": [
                    "print(k)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 103\n    a=100\n    k=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while(1):\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    k+=1\n    a=a+a(1//100)\n    (a >= x)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(k)\nNext:\n    <END>\n"
        },
        "s316427943": {
            "code": "num = '103'\na = 100\ncount = 0\nwhile count>=0:\n  a = a * 1.1\n  count = count + 1\n  if a>=num:\n    break\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "100"
                        },
                        {
                            "num": "'103'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "100"
                        },
                        {
                            "num": "'103'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "110.00000000000001"
                        },
                        {
                            "count": "1"
                        },
                        {
                            "num": "'103'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'float' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "num = '103'",
                    "a = 100",
                    "count = 0"
                ],
                "2": [
                    "while count>=0:"
                ],
                "3": [
                    "a = a * 1.1",
                    "count = count + 1",
                    "(a >= num)"
                ],
                "4": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = '103'\n    a = 100\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while count>=0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a = a * 1.1\n    count = count + 1\n    (a >= num)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p03834": {
        "s840455491": {
            "code": "s = 'happy,newyear,enjoy'\ns1=str[:5]\ns2=str[6:13]\ns3=str[14:]\nprint('{} {} {}'.format(s1,s2,s3))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'happy,newyear,enjoy'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"type 'str' is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'happy,newyear,enjoy'",
                    "s1=str[:5]",
                    "s2=str[6:13]",
                    "s3=str[14:]",
                    "print('{} {} {}'.format(s1,s2,s3))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'happy,newyear,enjoy'\n    s1=str[:5]\n    s2=str[6:13]\n    s3=str[14:]\n    print('{} {} {}'.format(s1,s2,s3))\nNext:\n    <END>\n"
        }
    },
    "p03846": {
        "s941087143": {
            "code": "import math\nn = 5\nl = None\nfor i,x in enumerate(l):\n  if n%2 and x!=int((i+1)/2):\n    print(0)\n  else:\n    if i%2 and i+1!=x:\n      print(0)\n    elif i!=x:\n      print(0)\nelse:\n  print(((n/2)**2)%10**9+7)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import math",
                    "n = 5",
                    "l = None"
                ],
                "2": [
                    "i <- index\n    x <- iterator"
                ],
                "3": [
                    "(n % 2 and x != int((i + 1) / 2))"
                ],
                "4": [
                    "print(0)"
                ],
                "5": [
                    "(i % 2 and i + 1 != x)"
                ],
                "6": [
                    "print(0)"
                ],
                "7": [
                    "(i != x)"
                ],
                "8": [
                    "print(0)"
                ],
                "9": [
                    "print(((n/2)**2)%10**9+7)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 2
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    n = 5\n    l = None\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    x <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (n % 2 and x != int((i + 1) / 2))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i % 2 and i + 1 != x)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (i != x)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    print(0)\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(((n/2)**2)%10**9+7)\nNext:\n    <END>\n"
        }
    },
    "p02729": {
        "s048856907": {
            "code": "L = '2 1'\nans = (L//3)**3\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "L": "'2 1'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "L = '2 1'",
                    "ans = (L//3)**3",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    L = '2 1'\n    ans = (L//3)**3\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03767": {
        "s002880500": {
            "code": "N = 2\na = [5, 2, 8, 5, 1, 5]\na = a.sort(reverse=True)\nans = sum(a[2*i] for i in range(1,N+1))\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "2"
                        },
                        {
                            "a": "None"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 2",
                    "a = [5, 2, 8, 5, 1, 5]",
                    "a = a.sort(reverse=True)",
                    "ans = sum(a[2*i] for i in range(1,N+1))",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 2\n    a = [5, 2, 8, 5, 1, 5]\n    a = a.sort(reverse=True)\n    ans = sum(a[2*i] for i in range(1,N+1))\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03970": {
        "s419893273": {
            "code": "n = 'C0DEFESTIVAL2O16'\na = 0\na = \"CODEFESTIVAL2016\"\nfor i, j in zip(n, a):\n  if i != j:\n    a += 1\nprint(a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "'CODEFESTIVAL2016'"
                        },
                        {
                            "n": "'C0DEFESTIVAL2O16'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "'CODEFESTIVAL2016'"
                        },
                        {
                            "n": "'C0DEFESTIVAL2O16'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "'CODEFESTIVAL2016'"
                        },
                        {
                            "n": "'C0DEFESTIVAL2O16'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "'CODEFESTIVAL2016'"
                        },
                        {
                            "n": "'C0DEFESTIVAL2O16'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "'CODEFESTIVAL2016'"
                        },
                        {
                            "n": "'C0DEFESTIVAL2O16'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "a": "'CODEFESTIVAL2016'"
                        },
                        {
                            "n": "'C0DEFESTIVAL2O16'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 'C0DEFESTIVAL2O16'",
                    "a = 0",
                    "a = \"CODEFESTIVAL2016\""
                ],
                "2": [
                    "i <- index\n    j <- iterator"
                ],
                "3": [
                    "(i != j)"
                ],
                "4": [
                    "a += 1"
                ],
                "5": [
                    "print(a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 'C0DEFESTIVAL2O16'\n    a = 0\n    a = \"CODEFESTIVAL2016\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    i <- index\n    j <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (i != j)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(a)\nNext:\n    <END>\n"
        }
    },
    "p02690": {
        "s307451919": {
            "code": "x = 33\na = 0\nb = 0\nfor a_ in range(3):\n    _ = a_**5 - x\n    b_ = _**0.2\n    if a_**5 - b_**5 ==x:\n        a = a_\n        b = b_**5\nprint(a, int(b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                4,
                5,
                6,
                7,
                8,
                9,
                4,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "33"
                        },
                        {
                            "b": "0"
                        },
                        {
                            "a": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "33"
                        },
                        {
                            "b": "0"
                        },
                        {
                            "a": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "_": "-33"
                        },
                        {
                            "x": "33"
                        },
                        {
                            "b_": "(1.628022611795152+1.18282766402354j)"
                        },
                        {
                            "a": "0"
                        },
                        {
                            "b": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "_": "-33"
                        },
                        {
                            "x": "33"
                        },
                        {
                            "b_": "(1.628022611795152+1.18282766402354j)"
                        },
                        {
                            "a": "0"
                        },
                        {
                            "b": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "x": "33"
                        },
                        {
                            "_": "-32"
                        },
                        {
                            "a": "0"
                        },
                        {
                            "b_": "(1.618033988749895+1.1755705045849463j)"
                        },
                        {
                            "b": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "33"
                        },
                        {
                            "_": "-32"
                        },
                        {
                            "a": "0"
                        },
                        {
                            "b_": "(1.618033988749895+1.1755705045849463j)"
                        },
                        {
                            "b": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "x": "33"
                        },
                        {
                            "a": "0"
                        },
                        {
                            "b": "0"
                        },
                        {
                            "b_": "(0.8090169943749475+0.5877852522924731j)"
                        },
                        {
                            "_": "-1"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "x": "33"
                        },
                        {
                            "a": "2"
                        },
                        {
                            "b": "(-1.0000000000000002+0j)"
                        },
                        {
                            "b_": "(0.8090169943749475+0.5877852522924731j)"
                        },
                        {
                            "_": "-1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "33"
                        },
                        {
                            "a": "2"
                        },
                        {
                            "b": "(-1.0000000000000002+0j)"
                        },
                        {
                            "b_": "(0.8090169943749475+0.5877852522924731j)"
                        },
                        {
                            "_": "-1"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "x": "33"
                        },
                        {
                            "a": "2"
                        },
                        {
                            "b": "(-1.0000000000000002+0j)"
                        },
                        {
                            "b_": "(0.8090169943749475+0.5877852522924731j)"
                        },
                        {
                            "_": "-1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'complex'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = 33",
                    "a = 0",
                    "b = 0"
                ],
                "2": [
                    "iterator -> a_, Iterate Over -> range(3)"
                ],
                "3": [
                    "_ = a_**5 - x",
                    "b_ = _**0.2",
                    "(a_ ** 5 - b_ ** 5 == x)"
                ],
                "4": [
                    "a = a_",
                    "b = b_**5"
                ],
                "5": [
                    "print(a, int(b))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = 33\n    a = 0\n    b = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> a_, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    _ = a_**5 - x\n    b_ = _**0.2\n    (a_ ** 5 - b_ ** 5 == x)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    a = a_\n    b = b_**5\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(a, int(b))\nNext:\n    <END>\n"
        }
    },
    "p02865": {
        "s199776982": {
            "code": "N = '4'\nN = N-1\nprint(N/2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'4'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '4'",
                    "N = N-1",
                    "print(N/2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    N = N-1\n    print(N/2)\nNext:\n    <END>\n"
        }
    },
    "p03573": {
        "s897552926": {
            "code": "L = [5, 7, 5]\nM =L.sort()\nif M[0]==M[1]:\n  print(M[2])\nelse:\n  print(M[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "L": "[5, 5, 7]"
                        },
                        {
                            "M": "None"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "L = [5, 7, 5]",
                    "M =L.sort()",
                    "(M[0] == M[1])"
                ],
                "2": [
                    "print(M[2])"
                ],
                "3": [
                    "print(M[0])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    L = [5, 7, 5]\n    M =L.sort()\n    (M[0] == M[1])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(M[2])\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(M[0])\nNext:\n    <END>\n"
        },
        "s210554371": {
            "code": "nums = '5 7 5'\nset_nums = list(set(nums))\nother = sum(nums) - sum(set_nums)\nset_nums.remove(other)\nprint(set_nums[0])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "set_nums": "['7', '5', ' ']"
                        },
                        {
                            "nums": "'5 7 5'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "nums = '5 7 5'",
                    "set_nums = list(set(nums))",
                    "other = sum(nums) - sum(set_nums)",
                    "set_nums.remove(other)",
                    "print(set_nums[0])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    nums = '5 7 5'\n    set_nums = list(set(nums))\n    other = sum(nums) - sum(set_nums)\n    set_nums.remove(other)\n    print(set_nums[0])\nNext:\n    <END>\n"
        }
    },
    "p02682": {
        "s798571673": {
            "code": "abck = ['2', '1', '1', '3']\na=abck[0]\nb=abck[1]\nc=abck[2]\nk=abck[3]\nif a>=k:\n    print(a)\nelif a<k:\n    if a+b>k:\n        print(a)\n    else:\n        print(a-(k-a-b))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                8,
                9,
                12
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "b": "'1'"
                        },
                        {
                            "c": "'1'"
                        },
                        {
                            "k": "'3'"
                        },
                        {
                            "abck": "['2', '1', '1', '3']"
                        },
                        {
                            "a": "'2'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "b": "'1'"
                        },
                        {
                            "c": "'1'"
                        },
                        {
                            "k": "'3'"
                        },
                        {
                            "abck": "['2', '1', '1', '3']"
                        },
                        {
                            "a": "'2'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "b": "'1'"
                        },
                        {
                            "c": "'1'"
                        },
                        {
                            "k": "'3'"
                        },
                        {
                            "abck": "['2', '1', '1', '3']"
                        },
                        {
                            "a": "'2'"
                        }
                    ]
                },
                {
                    "block": 6,
                    "state": [
                        {
                            "b": "'1'"
                        },
                        {
                            "c": "'1'"
                        },
                        {
                            "k": "'3'"
                        },
                        {
                            "abck": "['2', '1', '1', '3']"
                        },
                        {
                            "a": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "abck = ['2', '1', '1', '3']",
                    "a=abck[0]",
                    "b=abck[1]",
                    "c=abck[2]",
                    "k=abck[3]",
                    "(a >= k)"
                ],
                "2": [
                    "print(a)"
                ],
                "3": [
                    "(a < k)"
                ],
                "4": [
                    "(a + b > k)"
                ],
                "5": [
                    "print(a)"
                ],
                "6": [
                    "print(a-(k-a-b))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    abck = ['2', '1', '1', '3']\n    a=abck[0]\n    b=abck[1]\n    c=abck[2]\n    k=abck[3]\n    (a >= k)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(a)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (a < k)\nNext:\n    If True: Go to Block 4\n    <END>\nBlock 4:\nStatement:\n    (a + b > k)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(a)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(a-(k-a-b))\nNext:\n    <END>\n"
        }
    },
    "p02842": {
        "s486384936": {
            "code": "n = '432'\na = n / 1.08\nif a-int(a) == 0.00:\n      x = int(a)\nelse:\n      x = int(a) + 1\nv = int(x * 1.08)\nif v == n:\n  print(x)\nelse:\n  print(\":(\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'432'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'float'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '432'",
                    "a = n / 1.08",
                    "(a - int(a) == 0.0)"
                ],
                "2": [
                    "x = int(a)"
                ],
                "3": [
                    "x = int(a) + 1"
                ],
                "4": [
                    "v = int(x * 1.08)",
                    "(v == n)"
                ],
                "5": [
                    "print(x)"
                ],
                "6": [
                    "print(\":(\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '432'\n    a = n / 1.08\n    (a - int(a) == 0.0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    x = int(a)\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    x = int(a) + 1\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    v = int(x * 1.08)\n    (v == n)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(x)\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\":(\")\nNext:\n    <END>\n"
        }
    },
    "p02687": {
        "s768314304": {
            "code": "s = 'ABC'\nif s[1]=='B':\n  s[1]='R'\nelse:\n  s[1]='B'\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'ABC'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'ABC'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'ABC'",
                    "(s[1] == 'B')"
                ],
                "2": [
                    "s[1]='R'"
                ],
                "3": [
                    "s[1]='B'"
                ],
                "4": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'ABC'\n    (s[1] == 'B')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    s[1]='R'\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    s[1]='B'\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    print(s)\nNext:\n    <END>\n"
        }
    },
    "p02572": {
        "s162517109": {
            "code": "n = '3'\nmax = 10**9 + 7\na_list = [1, 2, 3]\nsum = 0\nfor i in range(0, len(a_list)-1):\n    sum += a_list[i] * sum(a_list[i+1:])\nsum = sum % max\nprint(sum)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "sum": "0"
                        },
                        {
                            "a_list": "[1, 2, 3]"
                        },
                        {
                            "n": "'3'"
                        },
                        {
                            "max": "1000000007"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum": "0"
                        },
                        {
                            "a_list": "[1, 2, 3]"
                        },
                        {
                            "n": "'3'"
                        },
                        {
                            "max": "1000000007"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum": "0"
                        },
                        {
                            "a_list": "[1, 2, 3]"
                        },
                        {
                            "n": "'3'"
                        },
                        {
                            "max": "1000000007"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '3'",
                    "max = 10**9 + 7",
                    "a_list = [1, 2, 3]",
                    "sum = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, len(a_list) - 1)"
                ],
                "3": [
                    "sum += a_list[i] * sum(a_list[i+1:])"
                ],
                "4": [
                    "sum = sum % max",
                    "print(sum)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '3'\n    max = 10**9 + 7\n    a_list = [1, 2, 3]\n    sum = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, len(a_list) - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum += a_list[i] * sum(a_list[i+1:])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    sum = sum % max\n    print(sum)\nNext:\n    <END>\n"
        },
        "s735555054": {
            "code": "n = 3\na = [1, 2, 3]\nsum1 = 0\nsum2 = 0\nfor _ in a:\n  sum1 += _\n  sum2 += (a*a)\nsum1 = (sum1 * sum1)\nprint(sum1 - sum2)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "sum2": "0"
                        },
                        {
                            "sum1": "0"
                        },
                        {
                            "a": "[1, 2, 3]"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sum2": "0"
                        },
                        {
                            "sum1": "0"
                        },
                        {
                            "a": "[1, 2, 3]"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sum2": "0"
                        },
                        {
                            "n": "3"
                        },
                        {
                            "a": "[1, 2, 3]"
                        },
                        {
                            "sum1": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [1, 2, 3]",
                    "sum1 = 0",
                    "sum2 = 0"
                ],
                "2": [
                    "iterator -> _, Iterate Over -> a"
                ],
                "3": [
                    "sum1 += _",
                    "sum2 += (a*a)"
                ],
                "4": [
                    "sum1 = (sum1 * sum1)",
                    "print(sum1 - sum2)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [1, 2, 3]\n    sum1 = 0\n    sum2 = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> _, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    sum1 += _\n    sum2 += (a*a)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    sum1 = (sum1 * sum1)\n    print(sum1 - sum2)\nNext:\n    <END>\n"
        }
    },
    "p03219": {
        "s632370718": {
            "code": "inp = '81 58'\nx, y = inp.split()\nprint(int(x + y/2))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "inp": "'81 58'"
                        },
                        {
                            "y": "'58'"
                        },
                        {
                            "x": "'81'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "inp = '81 58'",
                    "x, y = inp.split()",
                    "print(int(x + y/2))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    inp = '81 58'\n    x, y = inp.split()\n    print(int(x + y/2))\nNext:\n    <END>\n"
        },
        "s589939011": {
            "code": "number = '81 58'\nnum_sp=number.split(\" \")\nnum=num_sp[0]+(num_sp[1]/2)\nprint(\"%s\"%(num))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "number": "'81 58'"
                        },
                        {
                            "num_sp": "['81', '58']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "number = '81 58'",
                    "num_sp=number.split(\" \")",
                    "num=num_sp[0]+(num_sp[1]/2)",
                    "print(\"%s\"%(num))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    number = '81 58'\n    num_sp=number.split(\" \")\n    num=num_sp[0]+(num_sp[1]/2)\n    print(\"%s\"%(num))\nNext:\n    <END>\n"
        }
    },
    "p02570": {
        "s277679872": {
            "code": "answer = '1000 15 80'\nanswer = answer.split(' ')\nif answer[2]*answer[1]>=answer[0]:\n  print(Yes)\nelse :\n  print(No)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "answer": "['1000', '15', '80']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"can't multiply sequence by non-int of type 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "answer = '1000 15 80'",
                    "answer = answer.split(' ')",
                    "(answer[2] * answer[1] >= answer[0])"
                ],
                "2": [
                    "print(Yes)"
                ],
                "3": [
                    "print(No)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    answer = '1000 15 80'\n    answer = answer.split(' ')\n    (answer[2] * answer[1] >= answer[0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(Yes)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(No)\nNext:\n    <END>\n"
        }
    },
    "p03071": {
        "s099624324": {
            "code": "btns = ['5', '3']\nX=btns[0]\nY=btns[1]\nCoins=0\nfor i in range(2):\n    if X > Y:\n        Coins+=X\n        X -= 1\n    else:\n        Coins+=Y\n        Y-=1\nprint(Coins)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        10,
                        11
                    ]
                },
                "6": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "btns": "['5', '3']"
                        },
                        {
                            "X": "'5'"
                        },
                        {
                            "Coins": "0"
                        },
                        {
                            "Y": "'3'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "btns": "['5', '3']"
                        },
                        {
                            "X": "'5'"
                        },
                        {
                            "Coins": "0"
                        },
                        {
                            "Y": "'3'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "btns": "['5', '3']"
                        },
                        {
                            "X": "'5'"
                        },
                        {
                            "Coins": "0"
                        },
                        {
                            "Y": "'3'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "btns": "['5', '3']"
                        },
                        {
                            "X": "'5'"
                        },
                        {
                            "Coins": "0"
                        },
                        {
                            "Y": "'3'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "btns = ['5', '3']",
                    "X=btns[0]",
                    "Y=btns[1]",
                    "Coins=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(2)"
                ],
                "3": [
                    "(X > Y)"
                ],
                "4": [
                    "Coins+=X",
                    "X -= 1"
                ],
                "5": [
                    "Coins+=Y",
                    "Y-=1"
                ],
                "6": [
                    "print(Coins)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    btns = ['5', '3']\n    X=btns[0]\n    Y=btns[1]\n    Coins=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (X > Y)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    Coins+=X\n    X -= 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    Coins+=Y\n    Y-=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(Coins)\nNext:\n    <END>\n"
        }
    },
    "p02578": {
        "s630911709": {
            "code": "a = 5\nb = [2, 1, 5, 4, 3]\nbmax = 0\nans = 0\nfor i in range(a):\n    if i == 0:\n        bmax = a[i]\n    else:\n        if bmax < a[i]:\n            bmax = a[i]\n        elif bmax > a[i]:\n            ans += bmax - a[i]\nprint(str(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        13,
                        13
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "bmax": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "a": "5"
                        },
                        {
                            "b": "[2, 1, 5, 4, 3]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "bmax": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "a": "5"
                        },
                        {
                            "b": "[2, 1, 5, 4, 3]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "bmax": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "a": "5"
                        },
                        {
                            "b": "[2, 1, 5, 4, 3]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "bmax": "0"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "a": "5"
                        },
                        {
                            "b": "[2, 1, 5, 4, 3]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 5",
                    "b = [2, 1, 5, 4, 3]",
                    "bmax = 0",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(a)"
                ],
                "3": [
                    "(i == 0)"
                ],
                "4": [
                    "bmax = a[i]"
                ],
                "5": [
                    "(bmax < a[i])"
                ],
                "6": [
                    "bmax = a[i]"
                ],
                "7": [
                    "(bmax > a[i])"
                ],
                "8": [
                    "ans += bmax - a[i]"
                ],
                "9": [
                    "print(str(ans))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 9
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 2
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 5\n    b = [2, 1, 5, 4, 3]\n    bmax = 0\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 9\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    bmax = a[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (bmax < a[i])\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    bmax = a[i]\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (bmax > a[i])\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 2\n\nBlock 8:\nStatement:\n    ans += bmax - a[i]\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    print(str(ans))\nNext:\n    <END>\n"
        },
        "s910958685": {
            "code": "n = '5'\nA = [2, 1, 5, 4, 3]\nans = 0 \ntemp = 0\nfor i in range(n-1):\n    if A[i]<temp:\n        ans += temp-A[i]\n    else:\n        temp = max(temp,A[i])\nprint(ans) ",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'5'"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "A": "[2, 1, 5, 4, 3]"
                        },
                        {
                            "temp": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'5'"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "A": "[2, 1, 5, 4, 3]"
                        },
                        {
                            "temp": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "A = [2, 1, 5, 4, 3]",
                    "ans = 0",
                    "temp = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n - 1)"
                ],
                "3": [
                    "(A[i] < temp)"
                ],
                "4": [
                    "ans += temp-A[i]"
                ],
                "5": [
                    "temp = max(temp,A[i])"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    A = [2, 1, 5, 4, 3]\n    ans = 0\n    temp = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (A[i] < temp)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans += temp-A[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    temp = max(temp,A[i])\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02951": {
        "s721426634": {
            "code": "N = '6 4 3'\nans = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 is 1:\n      ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                0,
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '6 4 3'",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, N + 1)"
                ],
                "3": [
                    "(len(str(i)) % 2 is 1)"
                ],
                "4": [
                    "ans += 1"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '6 4 3'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (len(str(i)) % 2 is 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03072": {
        "s837883195": {
            "code": "n = 4\nh = [6, 5, 6, 8]\nmax = 0\nfor i in n:\n    if max <= h[i]:\n        max = h[i]\n        count += 1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "h": "[6, 5, 6, 8]"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "n": "4"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "h": "[6, 5, 6, 8]"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "n": "4"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "h = [6, 5, 6, 8]",
                    "max = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> n"
                ],
                "3": [
                    "(max <= h[i])"
                ],
                "4": [
                    "max = h[i]",
                    "count += 1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    h = [6, 5, 6, 8]\n    max = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> n\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (max <= h[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    max = h[i]\n    count += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        },
        "s663429194": {
            "code": "N = 4\nlist = ['6', '5', '6', '8']\nans = 0\nmaxHeight = -1\nfor i in range(N):\n  if list[i] >= maxHeight:\n    ans += 1\n    maxHeight = list[i]\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "maxHeight": "-1"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "list": "['6', '5', '6', '8']"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "maxHeight": "-1"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "list": "['6', '5', '6', '8']"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "maxHeight": "-1"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "list": "['6', '5', '6', '8']"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "list = ['6', '5', '6', '8']",
                    "ans = 0",
                    "maxHeight = -1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(list[i] >= maxHeight)"
                ],
                "4": [
                    "ans += 1",
                    "maxHeight = list[i]"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    list = ['6', '5', '6', '8']\n    ans = 0\n    maxHeight = -1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (list[i] >= maxHeight)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\n    maxHeight = list[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s924100658": {
            "code": "N = '4'\nH = [6, 5, 6, 8]\ncnt=1\nfor i in range(N+1):\n  if H[i] < H[i+1]:\n    cnt+=1\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "cnt": "1"
                        },
                        {
                            "N": "'4'"
                        },
                        {
                            "H": "[6, 5, 6, 8]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "1"
                        },
                        {
                            "N": "'4'"
                        },
                        {
                            "H": "[6, 5, 6, 8]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '4'",
                    "H = [6, 5, 6, 8]",
                    "cnt=1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N + 1)"
                ],
                "3": [
                    "(H[i] < H[i + 1])"
                ],
                "4": [
                    "cnt+=1"
                ],
                "5": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '4'\n    H = [6, 5, 6, 8]\n    cnt=1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N + 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (H[i] < H[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        }
    },
    "p03844": {
        "s661709853": {
            "code": "AopB = ['1', '+', '2']\nif AopB[1]=='+':\n  print(int(AopB[0]+int(AopB[2])))\nelse:\n  print(int(AopB[0]-int(AopB[2])))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "AopB": "['1', '+', '2']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "AopB": "['1', '+', '2']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "AopB = ['1', '+', '2']",
                    "(AopB[1] == '+')"
                ],
                "2": [
                    "print(int(AopB[0]+int(AopB[2])))"
                ],
                "3": [
                    "print(int(AopB[0]-int(AopB[2])))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    AopB = ['1', '+', '2']\n    (AopB[1] == '+')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(int(AopB[0]+int(AopB[2])))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(int(AopB[0]-int(AopB[2])))\nNext:\n    <END>\n"
        }
    },
    "p02830": {
        "s803391293": {
            "code": "N = '2'\nST = 'ip cc'\nS=ST.split(' ')[0]\nT=ST.split(' ')[1]\nfor i in range(N):\n  result.append(S[i])\n  result.append(T[i])\nprint(result)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'ip'"
                        },
                        {
                            "T": "'cc'"
                        },
                        {
                            "ST": "'ip cc'"
                        },
                        {
                            "N": "'2'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "'ip'"
                        },
                        {
                            "T": "'cc'"
                        },
                        {
                            "ST": "'ip cc'"
                        },
                        {
                            "N": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '2'",
                    "ST = 'ip cc'",
                    "S=ST.split(' ')[0]",
                    "T=ST.split(' ')[1]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "result.append(S[i])",
                    "result.append(T[i])"
                ],
                "4": [
                    "print(result)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '2'\n    ST = 'ip cc'\n    S=ST.split(' ')[0]\n    T=ST.split(' ')[1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    result.append(S[i])\n    result.append(T[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(result)\nNext:\n    <END>\n"
        }
    },
    "p03323": {
        "s820549191": {
            "code": "a = ['5', '4']\nif(a[0]<=8 and a[1]<=8):\n  print(\"Yay!\")\nelse:\n  print(\":(\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "['5', '4']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = ['5', '4']",
                    "(a[0] <= 8 and a[1] <= 8)"
                ],
                "2": [
                    "print(\"Yay!\")"
                ],
                "3": [
                    "print(\":(\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = ['5', '4']\n    (a[0] <= 8 and a[1] <= 8)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yay!\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\":(\")\nNext:\n    <END>\n"
        }
    },
    "p03011": {
        "s381497584": {
            "code": "l = ['1', '3', '4']\ns_l = l.sort()\nprint(s_l[0] + s_l[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "['1', '3', '4']"
                        },
                        {
                            "s_l": "None"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "l = ['1', '3', '4']",
                    "s_l = l.sort()",
                    "print(s_l[0] + s_l[1])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    l = ['1', '3', '4']\n    s_l = l.sort()\n    print(s_l[0] + s_l[1])\nNext:\n    <END>\n"
        }
    },
    "p02702": {
        "s158698224": {
            "code": "S = '1817181712114'\ncnt = [0]*2019\ncnt[0] = 1\nn = 0\nt = 1\nfor i in reversed(S):\n    n += i*t\n    n %= 2019\n    cnt[n] += 1\n    t *= 10\n    t %= 2019\nprint(sum(i*(i-1)//2 for i in cnt))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        11
                    ]
                },
                "4": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "0"
                        },
                        {
                            "S": "'1817181712114'"
                        },
                        {
                            "t": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "0"
                        },
                        {
                            "S": "'1817181712114'"
                        },
                        {
                            "t": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "0"
                        },
                        {
                            "S": "'1817181712114'"
                        },
                        {
                            "t": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '1817181712114'",
                    "cnt = [0]*2019",
                    "cnt[0] = 1",
                    "n = 0",
                    "t = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> reversed(S)"
                ],
                "3": [
                    "n += i*t",
                    "n %= 2019",
                    "cnt[n] += 1",
                    "t *= 10",
                    "t %= 2019"
                ],
                "4": [
                    "print(sum(i*(i-1)//2 for i in cnt))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '1817181712114'\n    cnt = [0]*2019\n    cnt[0] = 1\n    n = 0\n    t = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> reversed(S)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n += i*t\n    n %= 2019\n    cnt[n] += 1\n    t *= 10\n    t %= 2019\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(sum(i*(i-1)//2 for i in cnt))\nNext:\n    <END>\n"
        }
    },
    "p02701": {
        "s861193029": {
            "code": "N = 3\ns = ['apple', 'orange', 'apple']\nmemo = []\nfor i in range(s):\n    r = s.random.choice()\n    if r not in memo:    \n        memo.append(r)    \nprint(len(memo))    ",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "['apple', 'orange', 'apple']"
                        },
                        {
                            "memo": "[]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "['apple', 'orange', 'apple']"
                        },
                        {
                            "memo": "[]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "s = ['apple', 'orange', 'apple']",
                    "memo = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(s)"
                ],
                "3": [
                    "r = s.random.choice()",
                    "(r not in memo)"
                ],
                "4": [
                    "memo.append(r)"
                ],
                "5": [
                    "print(len(memo))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    s = ['apple', 'orange', 'apple']\n    memo = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    r = s.random.choice()\n    (r not in memo)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    memo.append(r)\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(len(memo))\nNext:\n    <END>\n"
        }
    },
    "p02396": {
        "s723936151": {
            "code": "x = '3'\nx = int(x)\nfor i in len(x):\n    if x == 0:\n        break\n    else:\n        print(\"Case\", i+1, \":\", x)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '3'",
                    "x = int(x)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> len(x)"
                ],
                "3": [
                    "(x == 0)"
                ],
                "4": [
                    "print(\"Case\", i+1, \":\", x)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": "<END>",
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '3'\n    x = int(x)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(x)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x == 0)\nNext:\n    <END>    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    print(\"Case\", i+1, \":\", x)\nNext:\n    Go to Block: 2\n"
        },
        "s962029972": {
            "code": "x = '3'\nx = int(x)\nfor i in 100000:\n    if x == 0:\n        break\n    else:\n        print(\"Case\", i+1, \":\", x)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '3'",
                    "x = int(x)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> 100000"
                ],
                "3": [
                    "(x == 0)"
                ],
                "4": [
                    "print(\"Case\", i+1, \":\", x)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": "<END>",
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '3'\n    x = int(x)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> 100000\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x == 0)\nNext:\n    <END>    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    print(\"Case\", i+1, \":\", x)\nNext:\n    Go to Block: 2\n"
        }
    },
    "p02717": {
        "s230859334": {
            "code": "a = [1, 2, 3]\na[0], a[1] = a[1], a[0]\na[0], a[2] = a[2], a[0]\nprint(a[0]+\" \"+a[1]+\" \"+a[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "[3, 1, 2]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "a = [1, 2, 3]",
                    "a[0], a[1] = a[1], a[0]",
                    "a[0], a[2] = a[2], a[0]",
                    "print(a[0]+\" \"+a[1]+\" \"+a[2])"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [1, 2, 3]\n    a[0], a[1] = a[1], a[0]\n    a[0], a[2] = a[2], a[0]\n    print(a[0]+\" \"+a[1]+\" \"+a[2])\nNext:\n    <END>\n"
        }
    },
    "p02946": {
        "s585344124": {
            "code": "num = ['3', '7']\na, b = int(num[0]), int(num[1])\ntmp = []\nfor i in range(b-a+1,b+a):\n  tmp.append(i)\nprint(' '.join(tmp))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                5,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5, 6]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5, 6]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "tmp": "[5, 6, 7]"
                        },
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "tmp": "[5, 6, 7]"
                        },
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5, 6, 7, 8]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5, 6, 7, 8]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5, 6, 7, 8, 9]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5, 6, 7, 8, 9]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "a": "3"
                        },
                        {
                            "num": "['3', '7']"
                        },
                        {
                            "tmp": "[5, 6, 7, 8, 9]"
                        },
                        {
                            "b": "7"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "num = ['3', '7']",
                    "a, b = int(num[0]), int(num[1])",
                    "tmp = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(b - a + 1, b + a)"
                ],
                "3": [
                    "tmp.append(i)"
                ],
                "4": [
                    "print(' '.join(tmp))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = ['3', '7']\n    a, b = int(num[0]), int(num[1])\n    tmp = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(b - a + 1, b + a)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    tmp.append(i)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(' '.join(tmp))\nNext:\n    <END>\n"
        }
    },
    "p03607": {
        "s152731111": {
            "code": "n = 3\na = [6, 2, 6]\ndict = {}\nfor i in range(n):\n  if not(a[i] in dict):\n    dict(a[i]) ==1\n  if s[i] in dict:\n    dict.pop(a[i])\nprint(len(dict))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "3"
                        },
                        {
                            "dict": "{}"
                        },
                        {
                            "a": "[6, 2, 6]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "3"
                        },
                        {
                            "dict": "{}"
                        },
                        {
                            "a": "[6, 2, 6]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "3"
                        },
                        {
                            "dict": "{}"
                        },
                        {
                            "a": "[6, 2, 6]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "n": "3"
                        },
                        {
                            "dict": "{}"
                        },
                        {
                            "a": "[6, 2, 6]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'dict' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "a = [6, 2, 6]",
                    "dict = {}"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(not a[i] in dict)"
                ],
                "4": [
                    "dict(a[i]) ==1"
                ],
                "5": [
                    "(s[i] in dict)"
                ],
                "6": [
                    "dict.pop(a[i])"
                ],
                "7": [
                    "print(len(dict))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    a = [6, 2, 6]\n    dict = {}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (not a[i] in dict)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    dict(a[i]) ==1\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (s[i] in dict)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    dict.pop(a[i])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(len(dict))\nNext:\n    <END>\n"
        }
    },
    "p02786": {
        "s723438127": {
            "code": "h = '2'\ncnt = 0\nwhile h > 0:\n\th = h // 2\n\tcnt = cnt + 1\nprint(pow(2, cnt) - 1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "h": "'2'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "h": "'2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "h = '2'",
                    "cnt = 0"
                ],
                "2": [
                    "while h > 0:"
                ],
                "3": [
                    "h = h // 2",
                    "cnt = cnt + 1"
                ],
                "4": [
                    "print(pow(2, cnt) - 1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    h = '2'\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while h > 0:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    h = h // 2\n    cnt = cnt + 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(pow(2, cnt) - 1)\nNext:\n    <END>\n"
        },
        "s505315641": {
            "code": "H = '2'\ncount=0\nm=1\nwhile H:\n  if H==1:\n    count+=m\n  else:\n    m*=2\n    H=int(H/2)\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        8,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "m": "1"
                        },
                        {
                            "H": "'2'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "m": "1"
                        },
                        {
                            "H": "'2'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "m": "1"
                        },
                        {
                            "H": "'2'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "H": "'2'"
                        },
                        {
                            "m": "2"
                        },
                        {
                            "count": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "H = '2'",
                    "count=0",
                    "m=1"
                ],
                "2": [
                    "while H:"
                ],
                "3": [
                    "(H == 1)"
                ],
                "4": [
                    "count+=m"
                ],
                "5": [
                    "m*=2",
                    "H=int(H/2)"
                ],
                "6": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    H = '2'\n    count=0\n    m=1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while H:\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (H == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count+=m\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    m*=2\n    H=int(H/2)\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p02706": {
        "s448158756": {
            "code": "input_line = ['41', '2']\ndays = input_line[0]\nassignments = input_line[1]\ninput_assign = ['5', '6']\nhow_many_days = sum(input_assign)\nlen = days - how_many_days\nif len < 0:\n  print(-1)\nelse:\n  print(len)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "assignments": "'2'"
                        },
                        {
                            "len": "<built-in function len>"
                        },
                        {
                            "days": "'41'"
                        },
                        {
                            "input_assign": "['5', '6']"
                        },
                        {
                            "input_line": "['41', '2']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input_line = ['41', '2']",
                    "days = input_line[0]",
                    "assignments = input_line[1]",
                    "input_assign = ['5', '6']",
                    "how_many_days = sum(input_assign)",
                    "len = days - how_many_days",
                    "(len < 0)"
                ],
                "2": [
                    "print(-1)"
                ],
                "3": [
                    "print(len)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    input_line = ['41', '2']\n    days = input_line[0]\n    assignments = input_line[1]\n    input_assign = ['5', '6']\n    how_many_days = sum(input_assign)\n    len = days - how_many_days\n    (len < 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(-1)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(len)\nNext:\n    <END>\n"
        }
    },
    "p03286": {
        "s103716867": {
            "code": "n = '-9'\nnegBase = -2\nif (n == 0): \n    converted = \"0\"\nelse:\n    converted = \"01\"\n    while (n != 0):           \n        remainder = n % (negBase) \n        n = int(n/negBase) \n        if (remainder < 0): \n            remainder += ((-1) * negBase) \n            n += 1\n        converted = str(remainder) + converted \n    converted = converted[0:len(converted)-2]\nprint(converted)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        14
                    ]
                },
                "9": {
                    "range": [
                        15,
                        15
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "negBase": "-2"
                        },
                        {
                            "n": "'-9'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "negBase": "-2"
                        },
                        {
                            "n": "'-9'"
                        },
                        {
                            "converted": "'01'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "negBase": "-2"
                        },
                        {
                            "n": "'-9'"
                        },
                        {
                            "converted": "'01'"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "negBase": "-2"
                        },
                        {
                            "n": "'-9'"
                        },
                        {
                            "converted": "'01'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '-9'",
                    "negBase = -2",
                    "(n == 0)"
                ],
                "2": [
                    "converted = \"0\""
                ],
                "3": [
                    "converted = \"01\""
                ],
                "4": [
                    "while (n != 0):"
                ],
                "5": [
                    "remainder = n % (negBase)",
                    "n = int(n/negBase)",
                    "(remainder < 0)"
                ],
                "6": [
                    "remainder += ((-1) * negBase)",
                    "n += 1"
                ],
                "7": [
                    "converted = str(remainder) + converted"
                ],
                "8": [
                    "converted = converted[0:len(converted)-2]"
                ],
                "9": [
                    "print(converted)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 8
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '-9'\n    negBase = -2\n    (n == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    converted = \"0\"\nNext:\n    Go to Block: 9\n\nBlock 3:\nStatement:\n    converted = \"01\"\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    while (n != 0):\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 8\n\nBlock 5:\nStatement:\n    remainder = n % (negBase)\n    n = int(n/negBase)\n    (remainder < 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    remainder += ((-1) * negBase)\n    n += 1\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    converted = str(remainder) + converted\nNext:\n    Go to Block: 4\n\nBlock 8:\nStatement:\n    converted = converted[0:len(converted)-2]\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    print(converted)\nNext:\n    <END>\n"
        }
    },
    "p02909": {
        "s264480996": {
            "code": "a = [\"Sunny\", \"cloudy\", \"Rainy\"]\ns = 'Sunny'\nfor i in range(0, 3):\n  if s == a[i]:\n    print(a[(i+1)/3])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'Sunny'"
                        },
                        {
                            "a": "['Sunny', 'cloudy', 'Rainy']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'Sunny'"
                        },
                        {
                            "a": "['Sunny', 'cloudy', 'Rainy']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "'Sunny'"
                        },
                        {
                            "a": "['Sunny', 'cloudy', 'Rainy']"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "s": "'Sunny'"
                        },
                        {
                            "a": "['Sunny', 'cloudy', 'Rainy']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not float')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = [\"Sunny\", \"cloudy\", \"Rainy\"]",
                    "s = 'Sunny'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, 3)"
                ],
                "3": [
                    "(s == a[i])"
                ],
                "4": [
                    "print(a[(i+1)/3])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = [\"Sunny\", \"cloudy\", \"Rainy\"]\n    s = 'Sunny'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, 3)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (s == a[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(a[(i+1)/3])\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03160": {
        "s746052637": {
            "code": "N = 4\nh = [10, 30, 40, 20]\nDP = [0, abs(h[0]-h[1])]\nfor i in range(N-2):\n  DP += min((DP[-2] + abs(h[i]-h[i+2])),(DP[-1] + abs(h[i+2]-h[i+1])))\nprint(DP[-1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "DP": "[0, 20]"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "h": "[10, 30, 40, 20]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "DP": "[0, 20]"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "h": "[10, 30, 40, 20]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "DP": "[0, 20]"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "h": "[10, 30, 40, 20]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "h = [10, 30, 40, 20]",
                    "DP = [0, abs(h[0]-h[1])]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 2)"
                ],
                "3": [
                    "DP += min((DP[-2] + abs(h[i]-h[i+2])),(DP[-1] + abs(h[i+2]-h[i+1])))"
                ],
                "4": [
                    "print(DP[-1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    h = [10, 30, 40, 20]\n    DP = [0, abs(h[0]-h[1])]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    DP += min((DP[-2] + abs(h[i]-h[i+2])),(DP[-1] + abs(h[i+2]-h[i+1])))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(DP[-1])\nNext:\n    <END>\n"
        }
    },
    "p02813": {
        "s541256053": {
            "code": "import itertools\nn = 3\np = (1, 3, 2)\nq = (3, 1, 2)\nlists = list(itertools.permutations(list(range(1, n+1)), n))\nprint(abs(lists.index(p) - lists.index()))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('index expected at least 1 argument, got 0')"
            },
            "cfg_block_statements": {
                "1": [
                    "import itertools",
                    "n = 3",
                    "p = (1, 3, 2)",
                    "q = (3, 1, 2)",
                    "lists = list(itertools.permutations(list(range(1, n+1)), n))",
                    "print(abs(lists.index(p) - lists.index()))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    import itertools\n    n = 3\n    p = (1, 3, 2)\n    q = (3, 1, 2)\n    lists = list(itertools.permutations(list(range(1, n+1)), n))\n    print(abs(lists.index(p) - lists.index()))\nNext:\n    <END>\n"
        }
    },
    "p03059": {
        "s162263665": {
            "code": "x = '3 5 7'\nx = x.split(\" \")\na = x[0]\nb = x[1]\nc = x[2]\nn = c // a \nreturn(n * b)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "c": "'7'"
                        },
                        {
                            "b": "'5'"
                        },
                        {
                            "a": "'3'"
                        },
                        {
                            "x": "['3', '5', '7']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '3 5 7'",
                    "x = x.split(\" \")",
                    "a = x[0]",
                    "b = x[1]",
                    "c = x[2]",
                    "n = c // a",
                    "return(n * b)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '3 5 7'\n    x = x.split(\" \")\n    a = x[0]\n    b = x[1]\n    c = x[2]\n    n = c // a\n    return(n * b)\nNext:\n    <END>\n"
        }
    },
    "p02947": {
        "s251556349": {
            "code": "n = 3\ns = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\nans=0\ndict={}\nfor i in s:\n    if i in dict:\n        ans+=dict[s]\n        dict[s]+=1\n    else:\n        dict[s]=1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                10
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "dict": "{}"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "dict": "{}"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "dict": "{}"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "n": "3"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "dict": "{}"
                        },
                        {
                            "s": "['acinnorstt', 'abbemnoptu', 'acinnorstt']"
                        },
                        {
                            "n": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unhashable type: 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 3",
                    "s = ['acinnorstt', 'abbemnoptu', 'acinnorstt']",
                    "ans=0",
                    "dict={}"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> s"
                ],
                "3": [
                    "(i in dict)"
                ],
                "4": [
                    "ans+=dict[s]",
                    "dict[s]+=1"
                ],
                "5": [
                    "dict[s]=1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 3\n    s = ['acinnorstt', 'abbemnoptu', 'acinnorstt']\n    ans=0\n    dict={}\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i in dict)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    ans+=dict[s]\n    dict[s]+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    dict[s]=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s879099582": {
            "code": "from collections import Counter\nn = 3\nstring_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]\nstring_set=set(string_list)\ncnt=0\nfor s in string_set:\n  n=string_list.count(s)\n  cnt+=int(n*(n-1)/2)\nprint(cnt)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unhashable type: 'Counter'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "from collections import Counter",
                    "n = 3",
                    "string_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]",
                    "string_set=set(string_list)",
                    "cnt=0"
                ],
                "2": [
                    "iterator -> s, Iterate Over -> string_set"
                ],
                "3": [
                    "n=string_list.count(s)",
                    "cnt+=int(n*(n-1)/2)"
                ],
                "4": [
                    "print(cnt)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    from collections import Counter\n    n = 3\n    string_list = [Counter({'a': 1, 'c': 1, 'o': 1, 'r': 1, 'n': 2, 'i': 1, 's': 1, 't': 2}), Counter({'p': 1, 'e': 1, 'a': 1, 'n': 1, 'u': 1, 't': 1, 'b': 2, 'o': 1, 'm': 1}), Counter({'c': 1, 'o': 1, 'n': 2, 's': 1, 't': 2, 'r': 1, 'a': 1, 'i': 1})]\n    string_set=set(string_list)\n    cnt=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> s, Iterate Over -> string_set\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    n=string_list.count(s)\n    cnt+=int(n*(n-1)/2)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(cnt)\nNext:\n    <END>\n"
        }
    },
    "p03470": {
        "s093646747": {
            "code": "N = 4\nList = [6, 8, 10]\nprint(len(List()))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "4"
                        },
                        {
                            "List": "[6, 8, 10]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "List = [6, 8, 10]",
                    "print(len(List()))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    List = [6, 8, 10]\n    print(len(List()))\nNext:\n    <END>\n"
        }
    },
    "p04019": {
        "s018821110": {
            "code": "s = 'SENW'\nif ~(\"N\" in s ^ \"S\" in s) and ~(\"E\" in s ^ \"W\" in s):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'SENW'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ^: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'SENW'",
                    "(~('N' in s ^ 'S' in s) and ~('E' in s ^ 'W' in s))"
                ],
                "2": [
                    "print(\"Yes\")"
                ],
                "3": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'SENW'\n    (~('N' in s ^ 'S' in s) and ~('E' in s ^ 'W' in s))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03285": {
        "s837295220": {
            "code": "n = '11'\nwhile True:\n  if n%4==0:\n    print(\"YES\")\n    break\n  n-=7\n  if n<0:\n    print(\"NO\")\n    break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                },
                "5": {
                    "range": [
                        6,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'11'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'11'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "'11'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '11'"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "(n % 4 == 0)"
                ],
                "4": [
                    "print(\"YES\")"
                ],
                "5": [
                    "n-=7",
                    "(n < 0)"
                ],
                "6": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '11'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % 4 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    n-=7\n    (n < 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
        },
        "s440860488": {
            "code": "n = '11'\nwhile True:\n  if n%4==0:\n    print(\"YES\")\n    exit()\n  n-=7\n  if n<0:\n    print(\"NO\")\n    exit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'11'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'11'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "'11'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('not all arguments converted during string formatting')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '11'"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "(n % 4 == 0)"
                ],
                "4": [
                    "print(\"YES\")",
                    "exit()"
                ],
                "5": [
                    "n-=7",
                    "(n < 0)"
                ],
                "6": [
                    "print(\"NO\")",
                    "exit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '11'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (n % 4 == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"YES\")\n    exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    n-=7\n    (n < 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"NO\")\n    exit()\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03659": {
        "s010406313": {
            "code": "n = 6\na = [1, 2, 3, 4, 5, 6]\nmemo = sum(a)\na=a[0]\nb=memo-a[0]\nans = abs(a-b)\nfor i in range(1,n-1):\n    a += a[i]\n    b -= a[i]\n    ans = min(ans,abs(a-b))\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "memo": "21"
                        },
                        {
                            "a": "1"
                        },
                        {
                            "n": "6"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 6",
                    "a = [1, 2, 3, 4, 5, 6]",
                    "memo = sum(a)",
                    "a=a[0]",
                    "b=memo-a[0]",
                    "ans = abs(a-b)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, n - 1)"
                ],
                "3": [
                    "a += a[i]",
                    "b -= a[i]",
                    "ans = min(ans,abs(a-b))"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 6\n    a = [1, 2, 3, 4, 5, 6]\n    memo = sum(a)\n    a=a[0]\n    b=memo-a[0]\n    ans = abs(a-b)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, n - 1)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += a[i]\n    b -= a[i]\n    ans = min(ans,abs(a-b))\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03105": {
        "s305264944": {
            "code": "S = '2 11 4'\nS = S.split()\nhowMuch = S[0]\nIhave = S[1]\nsutis = S[2]\nif (Ihave // howMuch) < sutis:\n    print(Ihave // howMuch)\nelse:\n    print(sutis)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "['2', '11', '4']"
                        },
                        {
                            "howMuch": "'2'"
                        },
                        {
                            "Ihave": "'11'"
                        },
                        {
                            "sutis": "'4'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for //: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '2 11 4'",
                    "S = S.split()",
                    "howMuch = S[0]",
                    "Ihave = S[1]",
                    "sutis = S[2]",
                    "(Ihave // howMuch < sutis)"
                ],
                "2": [
                    "print(Ihave // howMuch)"
                ],
                "3": [
                    "print(sutis)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '2 11 4'\n    S = S.split()\n    howMuch = S[0]\n    Ihave = S[1]\n    sutis = S[2]\n    (Ihave // howMuch < sutis)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(Ihave // howMuch)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(sutis)\nNext:\n    <END>\n"
        }
    },
    "p02707": {
        "s074277481": {
            "code": "N = '5'\nA = ['1', '1', '2', '2']\nfor i in range(int(N-1)):\n  print(A.count(str(i+1)))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'5'"
                        },
                        {
                            "A": "['1', '1', '2', '2']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "'5'"
                        },
                        {
                            "A": "['1', '1', '2', '2']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "A = ['1', '1', '2', '2']"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(int(N - 1))"
                ],
                "3": [
                    "print(A.count(str(i+1)))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    A = ['1', '1', '2', '2']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(int(N - 1))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    print(A.count(str(i+1)))\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03624": {
        "s247852043": {
            "code": "s = 'atcoderregularcontest'\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nfor i in range(alphabet):\n  if alphabet[i] not in s:\n    print(i)\n    break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "alphabet": "'abcdefghijklmnopqrstuvwxyz'"
                        },
                        {
                            "s": "'atcoderregularcontest'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "alphabet": "'abcdefghijklmnopqrstuvwxyz'"
                        },
                        {
                            "s": "'atcoderregularcontest'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'atcoderregularcontest'",
                    "alphabet = \"abcdefghijklmnopqrstuvwxyz\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(alphabet)"
                ],
                "3": [
                    "(alphabet[i] not in s)"
                ],
                "4": [
                    "print(i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'atcoderregularcontest'\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(alphabet)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (alphabet[i] not in s)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\nNext:\n    <END>\n"
        }
    },
    "p02923": {
        "s641741256": {
            "code": "N = 5\nH = None\nmax = 0\ncnt = 0\nfor i in range(N):\n  if H[i] <= H[i+1]:\n    cnt += 1\n  elif cnt > max:\n    max = cnt\nprint(max)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "N": "5"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "H": "None"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "N": "5"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "H": "None"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "N": "5"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "H": "None"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'NoneType' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "H = None",
                    "max = 0",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(H[i] <= H[i + 1])"
                ],
                "4": [
                    "cnt += 1"
                ],
                "5": [
                    "(cnt > max)"
                ],
                "6": [
                    "max = cnt"
                ],
                "7": [
                    "print(max)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    H = None\n    max = 0\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (H[i] <= H[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (cnt > max)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    max = cnt\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(max)\nNext:\n    <END>\n"
        }
    },
    "p02659": {
        "s839564908": {
            "code": "import itertools\nimport copy\nfrom collections import deque\nimport heapq\nab = ['198', '1.10']\nA = int(ab[0])\nB = int(float(ab)*100)\nans = (A*B)//100\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"float() argument must be a string or a real number, not 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import itertools",
                    "import copy",
                    "from collections import deque",
                    "import heapq",
                    "ab = ['198', '1.10']",
                    "A = int(ab[0])",
                    "B = int(float(ab)*100)",
                    "ans = (A*B)//100",
                    "print(ans)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    import itertools\n    import copy\n    from collections import deque\n    import heapq\n    ab = ['198', '1.10']\n    A = int(ab[0])\n    B = int(float(ab)*100)\n    ans = (A*B)//100\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03294": {
        "s828103062": {
            "code": "N = 3\na = [3, 4, 6]\nans = 0\nfor aa in a:\n    ans+=a-1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "[3, 4, 6]"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "[3, 4, 6]"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "a": "[3, 4, 6]"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "N": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "a = [3, 4, 6]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> aa, Iterate Over -> a"
                ],
                "3": [
                    "ans+=a-1"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    a = [3, 4, 6]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> aa, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=a-1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03963": {
        "s186113090": {
            "code": "i = '2 2'\nj = i.split()\nnum_balls = j[0]\nnum_colors = j[1]\nproduct = num_colors\nif(num_balls > 1 and num_colors == 1):\n  print(0)\nfor i in range(1, num_balls):\n  product *= (num_balls - 1)\nprint(product)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        7
                    ]
                },
                "3": {
                    "range": [
                        8,
                        8
                    ]
                },
                "4": {
                    "range": [
                        9,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "j": "['2', '2']"
                        },
                        {
                            "num_balls": "'2'"
                        },
                        {
                            "product": "'2'"
                        },
                        {
                            "num_colors": "'2'"
                        },
                        {
                            "i": "'2 2'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "i = '2 2'",
                    "j = i.split()",
                    "num_balls = j[0]",
                    "num_colors = j[1]",
                    "product = num_colors",
                    "(num_balls > 1 and num_colors == 1)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "iterator -> i, Iterate Over -> range(1, num_balls)"
                ],
                "4": [
                    "product *= (num_balls - 1)"
                ],
                "5": [
                    "print(product)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    i = '2 2'\n    j = i.split()\n    num_balls = j[0]\n    num_colors = j[1]\n    product = num_colors\n    (num_balls > 1 and num_colors == 1)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    iterator -> i, Iterate Over -> range(1, num_balls)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    product *= (num_balls - 1)\nNext:\n    Go to Block: 3\n\nBlock 5:\nStatement:\n    print(product)\nNext:\n    <END>\n"
        }
    },
    "p03061": {
        "s889591555": {
            "code": "from math import gcd\nn = 3\na = [7, 6, 8]\nb=[]\nfor i in range(n):\n  b+=gcd(a[i],a[i-1])\nb.sort()\nprint(b[2])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "from math import gcd",
                    "n = 3",
                    "a = [7, 6, 8]",
                    "b=[]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "b+=gcd(a[i],a[i-1])"
                ],
                "4": [
                    "b.sort()",
                    "print(b[2])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    from math import gcd\n    n = 3\n    a = [7, 6, 8]\n    b=[]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    b+=gcd(a[i],a[i-1])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    b.sort()\n    print(b[2])\nNext:\n    <END>\n"
        }
    },
    "p03281": {
        "s743353280": {
            "code": "ans = [105,135,165,189]\nn = '105'\nif n < 105:\n  print(0)\nelif n < 135:\n  print(1)\nelif n < 165:\n  print(2)\nelif n < 189:\n  print(3)\nelse:\n  print(4)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                },
                "8": {
                    "range": [
                        10,
                        10
                    ]
                },
                "9": {
                    "range": [
                        12,
                        12
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "[105, 135, 165, 189]"
                        },
                        {
                            "n": "'105'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "ans = [105,135,165,189]",
                    "n = '105'",
                    "(n < 105)"
                ],
                "2": [
                    "print(0)"
                ],
                "3": [
                    "(n < 135)"
                ],
                "4": [
                    "print(1)"
                ],
                "5": [
                    "(n < 165)"
                ],
                "6": [
                    "print(2)"
                ],
                "7": [
                    "(n < 189)"
                ],
                "8": [
                    "print(3)"
                ],
                "9": [
                    "print(4)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    ans = [105,135,165,189]\n    n = '105'\n    (n < 105)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(0)\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (n < 135)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(1)\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (n < 165)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(2)\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    (n < 189)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(3)\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(4)\nNext:\n    <END>\n"
        }
    },
    "p03041": {
        "s764182234": {
            "code": "miu = ['3', '1']\nsella = 'ABC'\nfor x in range(0, int(miu[0])):\n\tif x == int(miu[1]-1):\n\t\tprint(sella[x].lower(), end='')\n\telse:\n\t\tprint(sella[x], end='')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "sella": "'ABC'"
                        },
                        {
                            "miu": "['3', '1']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "sella": "'ABC'"
                        },
                        {
                            "miu": "['3', '1']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "sella": "'ABC'"
                        },
                        {
                            "miu": "['3', '1']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "miu = ['3', '1']",
                    "sella = 'ABC'"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> range(0, int(miu[0]))"
                ],
                "3": [
                    "(x == int(miu[1] - 1))"
                ],
                "4": [
                    "print(sella[x].lower(), end='')"
                ],
                "5": [
                    "print(sella[x], end='')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    miu = ['3', '1']\n    sella = 'ABC'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> range(0, int(miu[0]))\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (x == int(miu[1] - 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(sella[x].lower(), end='')\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(sella[x], end='')\nNext:\n    Go to Block: 2\n"
        },
        "s546750078": {
            "code": "temp = [3, 1]\nS = 'ABC'\nK=int(temp[1]-1)\nif S[K]=='A':\n  S[K]='a'\nelif S[K]=='B':\n  S[K]='b'\nelse:\n  S[K]='c'\nprint(S)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "K": "0"
                        },
                        {
                            "S": "'ABC'"
                        },
                        {
                            "temp": "[3, 1]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "K": "0"
                        },
                        {
                            "S": "'ABC'"
                        },
                        {
                            "temp": "[3, 1]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object does not support item assignment\")"
            },
            "cfg_block_statements": {
                "1": [
                    "temp = [3, 1]",
                    "S = 'ABC'",
                    "K=int(temp[1]-1)",
                    "(S[K] == 'A')"
                ],
                "2": [
                    "S[K]='a'"
                ],
                "3": [
                    "(S[K] == 'B')"
                ],
                "4": [
                    "S[K]='b'"
                ],
                "5": [
                    "S[K]='c'"
                ],
                "6": [
                    "print(S)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    temp = [3, 1]\n    S = 'ABC'\n    K=int(temp[1]-1)\n    (S[K] == 'A')\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    S[K]='a'\nNext:\n    Go to Block: 6\n\nBlock 3:\nStatement:\n    (S[K] == 'B')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    S[K]='b'\nNext:\n    Go to Block: 6\n\nBlock 5:\nStatement:\n    S[K]='c'\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(S)\nNext:\n    <END>\n"
        }
    },
    "p03107": {
        "s070814789": {
            "code": "S = '0011'\nS=S.replace(\"10\",\"3\")\nS=S.replace(\"01\",\"3\")\nres=0\nres+=S.count(3)\nprint(S.replace(\"3\",\"\"))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'031'"
                        },
                        {
                            "res": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('must be str, not int')"
            },
            "cfg_block_statements": {
                "1": [
                    "S = '0011'",
                    "S=S.replace(\"10\",\"3\")",
                    "S=S.replace(\"01\",\"3\")",
                    "res=0",
                    "res+=S.count(3)",
                    "print(S.replace(\"3\",\"\"))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    S = '0011'\n    S=S.replace(\"10\",\"3\")\n    S=S.replace(\"01\",\"3\")\n    res=0\n    res+=S.count(3)\n    print(S.replace(\"3\",\"\"))\nNext:\n    <END>\n"
        },
        "s501450778": {
            "code": "s = '0011'\na = 0\nfor i in s:\n  a += i\nprint(2 * min(a, len(s)-a))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'0011'"
                        },
                        {
                            "a": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'0011'"
                        },
                        {
                            "a": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "'0011'"
                        },
                        {
                            "a": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +=: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '0011'",
                    "a = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> s"
                ],
                "3": [
                    "a += i"
                ],
                "4": [
                    "print(2 * min(a, len(s)-a))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '0011'\n    a = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += i\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(2 * min(a, len(s)-a))\nNext:\n    <END>\n"
        },
        "s890072018": {
            "code": "s = '0011'\nzero =s.count(\"0\")\none =s.count(\"1\")\nMIN =min(zero,one)\nprint(min*2)    ",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "MIN": "2"
                        },
                        {
                            "s": "'0011'"
                        },
                        {
                            "zero": "2"
                        },
                        {
                            "one": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for *: 'builtin_function_or_method' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '0011'",
                    "zero =s.count(\"0\")",
                    "one =s.count(\"1\")",
                    "MIN =min(zero,one)",
                    "print(min*2)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '0011'\n    zero =s.count(\"0\")\n    one =s.count(\"1\")\n    MIN =min(zero,one)\n    print(min*2)\nNext:\n    <END>\n"
        }
    },
    "p03360": {
        "s160279377": {
            "code": "s = [5, 3, 11]\nK = 1\ns = sorted()\nfor i in range(K):\n    s[2] *= 2\nprint(sum(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "[5, 3, 11]"
                        },
                        {
                            "K": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sorted expected 1 argument, got 0')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = [5, 3, 11]",
                    "K = 1",
                    "s = sorted()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(K)"
                ],
                "3": [
                    "s[2] *= 2"
                ],
                "4": [
                    "print(sum(s))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = [5, 3, 11]\n    K = 1\n    s = sorted()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(K)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s[2] *= 2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(sum(s))\nNext:\n    <END>\n"
        }
    },
    "p02917": {
        "s329219564": {
            "code": "N = '3'\nB = [2, 5]\nA = []\nfor i in range(N):\n  if i == 0:\n    A.append(B[0])\n  elif i == N-1:\n    A.append(B[N-2])\n  else:\n    A.append(min(B[i], B[i-1]))\nprint(sum(A))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                },
                "8": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'3'"
                        },
                        {
                            "B": "[2, 5]"
                        },
                        {
                            "A": "[]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "'3'"
                        },
                        {
                            "B": "[2, 5]"
                        },
                        {
                            "A": "[]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '3'",
                    "B = [2, 5]",
                    "A = []"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "(i == 0)"
                ],
                "4": [
                    "A.append(B[0])"
                ],
                "5": [
                    "(i == N - 1)"
                ],
                "6": [
                    "A.append(B[N-2])"
                ],
                "7": [
                    "A.append(min(B[i], B[i-1]))"
                ],
                "8": [
                    "print(sum(A))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 8
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '3'\n    B = [2, 5]\n    A = []\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 8\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    A.append(B[0])\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (i == N - 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    A.append(B[N-2])\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    A.append(min(B[i], B[i-1]))\nNext:\n    Go to Block: 2\n\nBlock 8:\nStatement:\n    print(sum(A))\nNext:\n    <END>\n"
        }
    },
    "p03635": {
        "s170991387": {
            "code": "s = '3 4'\na = s[0]\nb =len(s)-2\nc = s[-1]\nprint(a+b+c)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'3 4'"
                        },
                        {
                            "c": "'4'"
                        },
                        {
                            "a": "'3'"
                        },
                        {
                            "b": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '3 4'",
                    "a = s[0]",
                    "b =len(s)-2",
                    "c = s[-1]",
                    "print(a+b+c)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '3 4'\n    a = s[0]\n    b =len(s)-2\n    c = s[-1]\n    print(a+b+c)\nNext:\n    <END>\n"
        }
    },
    "p03693": {
        "s011332190": {
            "code": "num = [4, 3, 2]\nnum = \"\".join(num)\nif num % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "num": "[4, 3, 2]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('sequence item 0: expected str instance, int found')"
            },
            "cfg_block_statements": {
                "1": [
                    "num = [4, 3, 2]",
                    "num = \"\".join(num)",
                    "(num % 4 == 0)"
                ],
                "2": [
                    "print(\"YES\")"
                ],
                "3": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = [4, 3, 2]\n    num = \"\".join(num)\n    (num % 4 == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
        },
        "s940075289": {
            "code": "a = \"\"\nb = [4, 3, 2]\nfor i in range(3):\n  a += b[i]\nif int(a)%4:\n  print(\"NO\")\nelse:\n  print(\"YES\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "b": "[4, 3, 2]"
                        },
                        {
                            "a": "''"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "b": "[4, 3, 2]"
                        },
                        {
                            "a": "''"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "b": "[4, 3, 2]"
                        },
                        {
                            "a": "''"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = \"\"",
                    "b = [4, 3, 2]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(3)"
                ],
                "3": [
                    "a += b[i]"
                ],
                "4": [
                    "(int(a) % 4)"
                ],
                "5": [
                    "print(\"NO\")"
                ],
                "6": [
                    "print(\"YES\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    a = \"\"\n    b = [4, 3, 2]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(3)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    a += b[i]\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (int(a) % 4)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n"
        }
    },
    "p02600": {
        "s173165191": {
            "code": "X = '725'\nif 400 <= X <= 599:\n    print(8)\nif 600 <= X <= 799:\n    print(7)\nif 800 <= X <= 999:\n    print(6)\nif 1000 <= X <= 1199:\n    print(5)\nif 1200 <= X <= 1399:\n    print(4)\nif 1400 <= X <= 1599:\n    print(3)\nif 1600 <= X <= 1799:\n    print(2)\nif 1800 <= X <= 1999:\n    print(1)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        9
                    ]
                },
                "9": {
                    "range": [
                        10,
                        10
                    ]
                },
                "10": {
                    "range": [
                        11,
                        11
                    ]
                },
                "11": {
                    "range": [
                        12,
                        12
                    ]
                },
                "12": {
                    "range": [
                        13,
                        13
                    ]
                },
                "13": {
                    "range": [
                        14,
                        14
                    ]
                },
                "14": {
                    "range": [
                        15,
                        15
                    ]
                },
                "15": {
                    "range": [
                        16,
                        16
                    ]
                },
                "16": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "X": "'725'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "X = '725'",
                    "(400 <= X <= 599)"
                ],
                "2": [
                    "print(8)"
                ],
                "3": [
                    "(600 <= X <= 799)"
                ],
                "4": [
                    "print(7)"
                ],
                "5": [
                    "(800 <= X <= 999)"
                ],
                "6": [
                    "print(6)"
                ],
                "7": [
                    "(1000 <= X <= 1199)"
                ],
                "8": [
                    "print(5)"
                ],
                "9": [
                    "(1200 <= X <= 1399)"
                ],
                "10": [
                    "print(4)"
                ],
                "11": [
                    "(1400 <= X <= 1599)"
                ],
                "12": [
                    "print(3)"
                ],
                "13": [
                    "(1600 <= X <= 1799)"
                ],
                "14": [
                    "print(2)"
                ],
                "15": [
                    "(1800 <= X <= 1999)"
                ],
                "16": [
                    "print(1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = '725'\n    (400 <= X <= 599)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(8)\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (600 <= X <= 799)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(7)\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (800 <= X <= 999)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(6)\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (1000 <= X <= 1199)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(5)\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (1200 <= X <= 1399)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(4)\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (1400 <= X <= 1599)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print(3)\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (1600 <= X <= 1799)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print(2)\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (1800 <= X <= 1999)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print(1)\nNext:\n    <END>\n"
        },
        "s929821782": {
            "code": "x = '725'\nfor i in range(2, 10):\n  if 200*i <= x < 200*(i+1)-1:\n    pprint(10-i)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'725'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "x": "'725'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "x": "'725'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<=' not supported between instances of 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '725'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(2, 10)"
                ],
                "3": [
                    "(200 * i <= x < 200 * (i + 1) - 1)"
                ],
                "4": [
                    "pprint(10-i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '725'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(2, 10)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (200 * i <= x < 200 * (i + 1) - 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    pprint(10-i)\nNext:\n    Go to Block: 2\n"
        },
        "s697365524": {
            "code": "X = '725'\nif X>=400 and X<=599:\n    print('8')\nif X>=600 and X<=799:\n    print('7')\nif X>=800 and X<=999:\n    print('6')\nif X>=1000 and X<=1199:\n    print('5')\nif X>=1200 and X<=1399:\n    print('4')\nif X>=1400 and X<=1599:\n    print('3')\nif X>=1600 and X<=1799:\n    print('2')\nif X>=1800 and X<=1999:\n    print('1')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                },
                "7": {
                    "range": [
                        8,
                        8
                    ]
                },
                "8": {
                    "range": [
                        9,
                        9
                    ]
                },
                "9": {
                    "range": [
                        10,
                        10
                    ]
                },
                "10": {
                    "range": [
                        11,
                        11
                    ]
                },
                "11": {
                    "range": [
                        12,
                        12
                    ]
                },
                "12": {
                    "range": [
                        13,
                        13
                    ]
                },
                "13": {
                    "range": [
                        14,
                        14
                    ]
                },
                "14": {
                    "range": [
                        15,
                        15
                    ]
                },
                "15": {
                    "range": [
                        16,
                        16
                    ]
                },
                "16": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "X": "'725'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'>=' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "X = '725'",
                    "(X >= 400 and X <= 599)"
                ],
                "2": [
                    "print('8')"
                ],
                "3": [
                    "(X >= 600 and X <= 799)"
                ],
                "4": [
                    "print('7')"
                ],
                "5": [
                    "(X >= 800 and X <= 999)"
                ],
                "6": [
                    "print('6')"
                ],
                "7": [
                    "(X >= 1000 and X <= 1199)"
                ],
                "8": [
                    "print('5')"
                ],
                "9": [
                    "(X >= 1200 and X <= 1399)"
                ],
                "10": [
                    "print('4')"
                ],
                "11": [
                    "(X >= 1400 and X <= 1599)"
                ],
                "12": [
                    "print('3')"
                ],
                "13": [
                    "(X >= 1600 and X <= 1799)"
                ],
                "14": [
                    "print('2')"
                ],
                "15": [
                    "(X >= 1800 and X <= 1999)"
                ],
                "16": [
                    "print('1')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = '725'\n    (X >= 400 and X <= 599)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('8')\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (X >= 600 and X <= 799)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('7')\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (X >= 800 and X <= 999)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('6')\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (X >= 1000 and X <= 1199)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('5')\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (X >= 1200 and X <= 1399)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('4')\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (X >= 1400 and X <= 1599)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print('3')\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (X >= 1600 and X <= 1799)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print('2')\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (X >= 1800 and X <= 1999)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print('1')\nNext:\n    <END>\n"
        }
    },
    "p02583": {
        "s649329879": {
            "code": "import itertools\nimport math\nn = 5\nl = [4, 4, 9, 7, 5]\nc = list(itertools.combinations(l, 3))\ncount=0\nr=math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)\nfor i in range(r):\n    if c[i][0]==c[i][1] or c[i][1]==c[i][2] or c[i][2]==c[i][0]:\n        pass\n    else:\n        if c[i][0]+c[i][1]>c[i][2] and c[i][1]+c[i][2]>c[i][0] and c[i][2]+c[i][0]>c[i][1]:\n            count+=1\n        else:\n            pass\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        7
                    ]
                },
                "2": {
                    "range": [
                        8,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        12,
                        12
                    ]
                },
                "5": {
                    "range": [
                        13,
                        13
                    ]
                },
                "6": {
                    "range": [
                        16,
                        16
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 2,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'float' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import itertools",
                    "import math",
                    "n = 5",
                    "l = [4, 4, 9, 7, 5]",
                    "c = list(itertools.combinations(l, 3))",
                    "count=0",
                    "r=math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(r)"
                ],
                "3": [
                    "(c[i][0] == c[i][1] or c[i][1] == c[i][2] or c[i][2] == c[i][0])"
                ],
                "4": [
                    "(c[i][0] + c[i][1] > c[i][2] and c[i][1] + c[i][2] > c[i][0] and (c[i][2] + c[i][0] > c[i][1]))"
                ],
                "5": [
                    "count+=1"
                ],
                "6": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 2,
                        "false": 4
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 2
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import itertools\n    import math\n    n = 5\n    l = [4, 4, 9, 7, 5]\n    c = list(itertools.combinations(l, 3))\n    count=0\n    r=math.factorial(len(l)) / (math.factorial(len(l) - 3) * 6)\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(r)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (c[i][0] == c[i][1] or c[i][1] == c[i][2] or c[i][2] == c[i][0])\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 4\n\nBlock 4:\nStatement:\n    (c[i][0] + c[i][1] > c[i][2] and c[i][1] + c[i][2] > c[i][0] and (c[i][2] + c[i][0] > c[i][1]))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 2\n\nBlock 5:\nStatement:\n    count+=1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p03073": {
        "s578937044": {
            "code": "s = '000'\nn=len(s)\ns = bin(int(s, 2))\ns_10 = '1' * (n % 2) + '01' * (n // 2)\ns_01 = '0' * (n % 2) + '10' * (n // 2)\ns_10 = bin(int(s_10, 2))\ns_01 = bin(int(s_01, 2))\nr = s ^ s_01\nl = s ^ s_10\nprint(min(r.count('1'), l.count('1')))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s_10": "'0b101'"
                        },
                        {
                            "s": "'0b0'"
                        },
                        {
                            "s_01": "'0b10'"
                        },
                        {
                            "n": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for ^: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = '000'",
                    "n=len(s)",
                    "s = bin(int(s, 2))",
                    "s_10 = '1' * (n % 2) + '01' * (n // 2)",
                    "s_01 = '0' * (n % 2) + '10' * (n // 2)",
                    "s_10 = bin(int(s_10, 2))",
                    "s_01 = bin(int(s_01, 2))",
                    "r = s ^ s_01",
                    "l = s ^ s_10",
                    "print(min(r.count('1'), l.count('1')))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    s = '000'\n    n=len(s)\n    s = bin(int(s, 2))\n    s_10 = '1' * (n % 2) + '01' * (n // 2)\n    s_01 = '0' * (n % 2) + '10' * (n // 2)\n    s_10 = bin(int(s_10, 2))\n    s_01 = bin(int(s_01, 2))\n    r = s ^ s_01\n    l = s ^ s_10\n    print(min(r.count('1'), l.count('1')))\nNext:\n    <END>\n"
        }
    },
    "p02916": {
        "s183710404": {
            "code": "n = '3'\nA = '3 1 2'\nB = '2 5 4'\nC = '3 6'\nAs=map(int,A.split(' '))\nBs=map(int,B.split(' '))\nCs=map(int,C.split(' '))\ntotal=0\nfor i in range(0,n):\n    if As[i]-As[i-1]==1 and i!=0:\n        total=total+Cs[As[i]]\n    else:\n        total=total+Bs[As[i]]\nprint(total)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        8
                    ]
                },
                "2": {
                    "range": [
                        9,
                        9
                    ]
                },
                "3": {
                    "range": [
                        10,
                        10
                    ]
                },
                "4": {
                    "range": [
                        11,
                        11
                    ]
                },
                "5": {
                    "range": [
                        13,
                        13
                    ]
                },
                "6": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'3'"
                        },
                        {
                            "B": "'2 5 4'"
                        },
                        {
                            "As": "<map object at 0x7fcde851f220>"
                        },
                        {
                            "A": "'3 1 2'"
                        },
                        {
                            "C": "'3 6'"
                        },
                        {
                            "Cs": "<map object at 0x7fcde851f6d0>"
                        },
                        {
                            "total": "0"
                        },
                        {
                            "Bs": "<map object at 0x7fcde851d240>"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "'3'"
                        },
                        {
                            "B": "'2 5 4'"
                        },
                        {
                            "As": "<map object at 0x7fcde851f220>"
                        },
                        {
                            "A": "'3 1 2'"
                        },
                        {
                            "C": "'3 6'"
                        },
                        {
                            "Cs": "<map object at 0x7fcde851f6d0>"
                        },
                        {
                            "total": "0"
                        },
                        {
                            "Bs": "<map object at 0x7fcde851d240>"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '3'",
                    "A = '3 1 2'",
                    "B = '2 5 4'",
                    "C = '3 6'",
                    "As=map(int,A.split(' '))",
                    "Bs=map(int,B.split(' '))",
                    "Cs=map(int,C.split(' '))",
                    "total=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(0, n)"
                ],
                "3": [
                    "(As[i] - As[i - 1] == 1 and i != 0)"
                ],
                "4": [
                    "total=total+Cs[As[i]]"
                ],
                "5": [
                    "total=total+Bs[As[i]]"
                ],
                "6": [
                    "print(total)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '3'\n    A = '3 1 2'\n    B = '2 5 4'\n    C = '3 6'\n    As=map(int,A.split(' '))\n    Bs=map(int,B.split(' '))\n    Cs=map(int,C.split(' '))\n    total=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(0, n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (As[i] - As[i - 1] == 1 and i != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    total=total+Cs[As[i]]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    total=total+Bs[As[i]]\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(total)\nNext:\n    <END>\n"
        }
    },
    "p03698": {
        "s765653173": {
            "code": "s = 'uncopyrightable'\nw=set()\nfor i in (len(s)):\n    w.add(s[i])\nif len(s)==len(w):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "'uncopyrightable'"
                        },
                        {
                            "w": "{}"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "'uncopyrightable'"
                        },
                        {
                            "w": "{}"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "s = 'uncopyrightable'",
                    "w=set()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> len(s)"
                ],
                "3": [
                    "w.add(s[i])"
                ],
                "4": [
                    "(len(s) == len(w))"
                ],
                "5": [
                    "print(\"Yes\")"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = 'uncopyrightable'\n    w=set()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(s)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    w.add(s[i])\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    (len(s) == len(w))\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02777": {
        "s848996008": {
            "code": "N = 'red blue'\nA = ['3', '4']\nif(A in N):\n  print(\"YES\")\nelse:\n  print(\"NO\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "A": "['3', '4']"
                        },
                        {
                            "N": "'red blue'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'in <string>' requires string as left operand, not list\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 'red blue'",
                    "A = ['3', '4']",
                    "(A in N)"
                ],
                "2": [
                    "print(\"YES\")"
                ],
                "3": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 'red blue'\n    A = ['3', '4']\n    (A in N)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
        },
        "s059194549": {
            "code": "color = ['red', 'blue']\nnumber = ['3', '4']\nchoice = 'red'\nfor i in [0,1]:\n  if choice == color[i]:\n    number[i] -= 1\nprint(number[0],number[1])",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "number": "['3', '4']"
                        },
                        {
                            "choice": "'red'"
                        },
                        {
                            "color": "['red', 'blue']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "number": "['3', '4']"
                        },
                        {
                            "choice": "'red'"
                        },
                        {
                            "color": "['red', 'blue']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "number": "['3', '4']"
                        },
                        {
                            "choice": "'red'"
                        },
                        {
                            "color": "['red', 'blue']"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "number": "['3', '4']"
                        },
                        {
                            "choice": "'red'"
                        },
                        {
                            "color": "['red', 'blue']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -=: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "color = ['red', 'blue']",
                    "number = ['3', '4']",
                    "choice = 'red'"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> [0, 1]"
                ],
                "3": [
                    "(choice == color[i])"
                ],
                "4": [
                    "number[i] -= 1"
                ],
                "5": [
                    "print(number[0],number[1])"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    color = ['red', 'blue']\n    number = ['3', '4']\n    choice = 'red'\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> [0, 1]\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (choice == color[i])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    number[i] -= 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(number[0],number[1])\nNext:\n    <END>\n"
        }
    },
    "p03149": {
        "s633580784": {
            "code": "li = [1, 7, 9, 4]\nif (li in 1) and (li in 9) and (li in 7) and (li in 4):\n  print('YES')\nelse:\n  print('NO')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "li": "[1, 7, 9, 4]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"argument of type 'int' is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "li = [1, 7, 9, 4]",
                    "(li in 1 and li in 9 and (li in 7) and (li in 4))"
                ],
                "2": [
                    "print('YES')"
                ],
                "3": [
                    "print('NO')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    li = [1, 7, 9, 4]\n    (li in 1 and li in 9 and (li in 7) and (li in 4))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('NO')\nNext:\n    <END>\n"
        }
    },
    "p03544": {
        "s404344297": {
            "code": "n = 5\nL=[2,1]\nfor i in range(n):\n  l=L[i]+[i+1]\n  L.append(l)\nprint(L)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "L": "[2, 1]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "L": "[2, 1]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "L": "[2, 1]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "L=[2,1]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "l=L[i]+[i+1]",
                    "L.append(l)"
                ],
                "4": [
                    "print(L)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    L=[2,1]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l=L[i]+[i+1]\n    L.append(l)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(L)\nNext:\n    <END>\n"
        }
    },
    "p03643": {
        "s001621180": {
            "code": "a = 100\nprint(\"ABC\"+a)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "100"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate str (not \"int\") to str')"
            },
            "cfg_block_statements": {
                "1": [
                    "a = 100",
                    "print(\"ABC\"+a)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    a = 100\n    print(\"ABC\"+a)\nNext:\n    <END>\n"
        },
        "s121246938": {
            "code": "input_N = '100'\nprint ('ABC') + input_N",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "input_N": "'100'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'NoneType' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "input_N = '100'",
                    "print ('ABC') + input_N"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    input_N = '100'\n    print ('ABC') + input_N\nNext:\n    <END>\n"
        }
    },
    "p03315": {
        "s404515718": {
            "code": "s = ['+', '-', '+', '+']\nfor i in s:\n  if s[i] == \"+\":\n    s[i] = 1\n  else:\n    s[i] = -1\nprint(sum(s))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "s": "['+', '-', '+', '+']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "s": "['+', '-', '+', '+']"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "s": "['+', '-', '+', '+']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('list indices must be integers or slices, not str')"
            },
            "cfg_block_statements": {
                "1": [
                    "s = ['+', '-', '+', '+']"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> s"
                ],
                "3": [
                    "(s[i] == '+')"
                ],
                "4": [
                    "s[i] = 1"
                ],
                "5": [
                    "s[i] = -1"
                ],
                "6": [
                    "print(sum(s))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    s = ['+', '-', '+', '+']\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> s\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (s[i] == '+')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    s[i] = 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    s[i] = -1\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(sum(s))\nNext:\n    <END>\n"
        }
    },
    "p02783": {
        "s312090090": {
            "code": "import math\ninput_line = ['10', '4']\nH, A = map(int, input_line())\nprint(math.ceil(H/A))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import math",
                    "input_line = ['10', '4']",
                    "H, A = map(int, input_line())",
                    "print(math.ceil(H/A))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    input_line = ['10', '4']\n    H, A = map(int, input_line())\n    print(math.ceil(H/A))\nNext:\n    <END>\n"
        }
    },
    "p03611": {
        "s202620076": {
            "code": "N = 7\na = [3, 1, 4, 1, 5, 9, 2]\nl = [0]*10**5+2\nfor i in a:\n    l[i] +=1\n    l[i+1] +=1\n    l[i+2] +=1\nprint(max(l))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "[3, 1, 4, 1, 5, 9, 2]"
                        },
                        {
                            "N": "7"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('can only concatenate list (not \"int\") to list')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 7",
                    "a = [3, 1, 4, 1, 5, 9, 2]",
                    "l = [0]*10**5+2"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> a"
                ],
                "3": [
                    "l[i] +=1",
                    "l[i+1] +=1",
                    "l[i+2] +=1"
                ],
                "4": [
                    "print(max(l))"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 7\n    a = [3, 1, 4, 1, 5, 9, 2]\n    l = [0]*10**5+2\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> a\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    l[i] +=1\n    l[i+1] +=1\n    l[i+2] +=1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(max(l))\nNext:\n    <END>\n"
        }
    },
    "p02953": {
        "s245601232": {
            "code": "n = 5\nH = [1, 2, 1, 1, 3]\nfor i in range(n):\n    if i!=0:\n        H=H[:-1]\n    if max(H)-H(-1)>1:\n        print(\"No\")\n        exit(0)\nprint(\"Yes\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        5
                    ]
                },
                "5": {
                    "range": [
                        6,
                        6
                    ]
                },
                "6": {
                    "range": [
                        7,
                        8
                    ]
                },
                "7": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "H": "[1, 2, 1, 1, 3]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "H": "[1, 2, 1, 1, 3]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "H": "[1, 2, 1, 1, 3]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                },
                {
                    "block": 5,
                    "state": [
                        {
                            "H": "[1, 2, 1, 1, 3]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'list' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "H = [1, 2, 1, 1, 3]"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i != 0)"
                ],
                "4": [
                    "H=H[:-1]"
                ],
                "5": [
                    "(max(H) - H(-1) > 1)"
                ],
                "6": [
                    "print(\"No\")",
                    "exit(0)"
                ],
                "7": [
                    "print(\"Yes\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    H = [1, 2, 1, 1, 3]\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (i != 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    H=H[:-1]\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (max(H) - H(-1) > 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print(\"No\")\n    exit(0)\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n"
        },
        "s387971753": {
            "code": "n = '5'\nh = [1, 2, 1, 1, 3]\nmax = 0\ni = 0\ny = 1\nfor i in range(n):\n    if h[i] > max:\n        max = h[i]\n    elif h[i] < max-1:\n        y = 0\nif y==1:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        11,
                        11
                    ]
                },
                "8": {
                    "range": [
                        12,
                        12
                    ]
                },
                "9": {
                    "range": [
                        14,
                        14
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "y": "1"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "i": "0"
                        },
                        {
                            "h": "[1, 2, 1, 1, 3]"
                        },
                        {
                            "n": "'5'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "y": "1"
                        },
                        {
                            "max": "0"
                        },
                        {
                            "i": "0"
                        },
                        {
                            "h": "[1, 2, 1, 1, 3]"
                        },
                        {
                            "n": "'5'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'str' object cannot be interpreted as an integer\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '5'",
                    "h = [1, 2, 1, 1, 3]",
                    "max = 0",
                    "i = 0",
                    "y = 1"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(h[i] > max)"
                ],
                "4": [
                    "max = h[i]"
                ],
                "5": [
                    "(h[i] < max - 1)"
                ],
                "6": [
                    "y = 0"
                ],
                "7": [
                    "(y == 1)"
                ],
                "8": [
                    "print(\"Yes\")"
                ],
                "9": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 7
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '5'\n    h = [1, 2, 1, 1, 3]\n    max = 0\n    i = 0\n    y = 1\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 7\n\nBlock 3:\nStatement:\n    (h[i] > max)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    max = h[i]\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (h[i] < max - 1)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    y = 0\nNext:\n    Go to Block: 2\n\nBlock 7:\nStatement:\n    (y == 1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(\"Yes\")\nNext:\n    <END>\n\nBlock 9:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p02812": {
        "s635218321": {
            "code": "n = 10\ns = 'ZABCDBABCQ'\ncount=0\nfor i in range(len(n)-2):\n  if s[i]==\"A\" and s[i+1]==\"B\" and s[i+2]==\"C\":\n    count+=1\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "10"
                        },
                        {
                            "s": "'ZABCDBABCQ'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "10"
                        },
                        {
                            "s": "'ZABCDBABCQ'"
                        },
                        {
                            "count": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'int' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 10",
                    "s = 'ZABCDBABCQ'",
                    "count=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(len(n) - 2)"
                ],
                "3": [
                    "(s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'C'))"
                ],
                "4": [
                    "count+=1"
                ],
                "5": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 10\n    s = 'ZABCDBABCQ'\n    count=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(len(n) - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (s[i] == 'A' and s[i + 1] == 'B' and (s[i + 2] == 'C'))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    count+=1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        },
        "s601711453": {
            "code": "N = '10'\nS = 'ZABCDBABCQ'\nans = 0\nfor i in range(N - 2):\n    if S[i:i+3] == 'ABC':\n       ans += 1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'10'"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "'10'"
                        },
                        {
                            "S": "'ZABCDBABCQ'"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '10'",
                    "S = 'ZABCDBABCQ'",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 2)"
                ],
                "3": [
                    "(S[i:i + 3] == 'ABC')"
                ],
                "4": [
                    "ans += 1"
                ],
                "5": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '10'\n    S = 'ZABCDBABCQ'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 2)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (S[i:i + 3] == 'ABC')\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    ans += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03598": {
        "s894620495": {
            "code": "N = 1\nK = 10\nans = 0\nfor i in range(N):\n    x = int(input)\n    ans += 2*min(x,K-x)\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "K": "10"
                        },
                        {
                            "N": "1"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "K": "10"
                        },
                        {
                            "N": "1"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "K": "10"
                        },
                        {
                            "N": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'builtin_function_or_method'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 1",
                    "K = 10",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "x = int(input)",
                    "ans += 2*min(x,K-x)"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 1\n    K = 10\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    x = int(input)\n    ans += 2*min(x,K-x)\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s989583763": {
            "code": "N = 1\nK = 10\nl = [2]\nans = 0\nfor i in l:\n  ans += min([K-l, l])*2\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "l": "[2]"
                        },
                        {
                            "K": "10"
                        },
                        {
                            "N": "1"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "l": "[2]"
                        },
                        {
                            "K": "10"
                        },
                        {
                            "N": "1"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "l": "[2]"
                        },
                        {
                            "K": "10"
                        },
                        {
                            "N": "1"
                        },
                        {
                            "ans": "0"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'int' and 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 1",
                    "K = 10",
                    "l = [2]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> l"
                ],
                "3": [
                    "ans += min([K-l, l])*2"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 1\n    K = 10\n    l = [2]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> l\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += min([K-l, l])*2\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p04012": {
        "s191747022": {
            "code": "S = 'abaccaba'\nA = set([i for i in S])\nfor j in range(len(A)):\n  if S.count(A[j]) % 2 == 1:\n    print(\"Yes\")\n    sys.exit()\n  else:\n    None\nprint(\"No\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        4
                    ]
                },
                "4": {
                    "range": [
                        5,
                        6
                    ]
                },
                "5": {
                    "range": [
                        8,
                        8
                    ]
                },
                "6": {
                    "range": [
                        9,
                        9
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "A": "{'b', 'c', 'a'}"
                        },
                        {
                            "S": "'abaccaba'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "A": "{'b', 'c', 'a'}"
                        },
                        {
                            "S": "'abaccaba'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "A": "{'b', 'c', 'a'}"
                        },
                        {
                            "S": "'abaccaba'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'set' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'abaccaba'",
                    "A = set([i for i in S])"
                ],
                "2": [
                    "iterator -> j, Iterate Over -> range(len(A))"
                ],
                "3": [
                    "(S.count(A[j]) % 2 == 1)"
                ],
                "4": [
                    "print(\"Yes\")",
                    "sys.exit()"
                ],
                "5": [
                    "None"
                ],
                "6": [
                    "print(\"No\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'abaccaba'\n    A = set([i for i in S])\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> j, Iterate Over -> range(len(A))\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (S.count(A[j]) % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(\"Yes\")\n    sys.exit()\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    None\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(\"No\")\nNext:\n    <END>\n"
        }
    },
    "p03807": {
        "s831629169": {
            "code": "N = 3\nA = [1, 2, 3]\ncnt = 0 \nfor x in A:\n  if A%2 == 1:\n    cnt += 1\nif cnt % 2 == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                },
                "7": {
                    "range": [
                        10,
                        10
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "A": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "A": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "cnt": "0"
                        },
                        {
                            "A": "[1, 2, 3]"
                        },
                        {
                            "N": "3"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for %: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 3",
                    "A = [1, 2, 3]",
                    "cnt = 0"
                ],
                "2": [
                    "iterator -> x, Iterate Over -> A"
                ],
                "3": [
                    "(A % 2 == 1)"
                ],
                "4": [
                    "cnt += 1"
                ],
                "5": [
                    "(cnt % 2 == 0)"
                ],
                "6": [
                    "print(\"YES\")"
                ],
                "7": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 5
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 3\n    A = [1, 2, 3]\n    cnt = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> x, Iterate Over -> A\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 5\n\nBlock 3:\nStatement:\n    (A % 2 == 1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    cnt += 1\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    (cnt % 2 == 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 7:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
        }
    },
    "p02779": {
        "s574870527": {
            "code": "n = 5\na = [2, 6, 1, 4, 5]\nif(len(set(a)==n)):\n    print('YES')\nelse:\n    print('NO')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "[2, 6, 1, 4, 5]"
                        },
                        {
                            "n": "5"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"object of type 'bool' has no len()\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 5",
                    "a = [2, 6, 1, 4, 5]",
                    "(len(set(a) == n))"
                ],
                "2": [
                    "print('YES')"
                ],
                "3": [
                    "print('NO')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 5\n    a = [2, 6, 1, 4, 5]\n    (len(set(a) == n))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('YES')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('NO')\nNext:\n    <END>\n"
        },
        "s258905255": {
            "code": "N = 5\nA = [2, 6, 1, 4, 5]\nB = set(list)\nif len(A) == len(B):\n  print(\"YES\")\nelse:\n  print(\"NO\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "5"
                        },
                        {
                            "A": "[2, 6, 1, 4, 5]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'type' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 5",
                    "A = [2, 6, 1, 4, 5]",
                    "B = set(list)",
                    "(len(A) == len(B))"
                ],
                "2": [
                    "print(\"YES\")"
                ],
                "3": [
                    "print(\"NO\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 5\n    A = [2, 6, 1, 4, 5]\n    B = set(list)\n    (len(A) == len(B))\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"YES\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"NO\")\nNext:\n    <END>\n"
        },
        "s265350375": {
            "code": "N = '5'\nA = ['2', '6', '1', '4', '5']\nA.sort()\nfor i in range(N-1):\n  if A[i]==A[i+1]:\n    print('NO')\n  if i==N-2:\n    print('YES')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                },
                "5": {
                    "range": [
                        7,
                        7
                    ]
                },
                "6": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'5'"
                        },
                        {
                            "A": "['1', '2', '4', '5', '6']"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "N": "'5'"
                        },
                        {
                            "A": "['1', '2', '4', '5', '6']"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '5'",
                    "A = ['2', '6', '1', '4', '5']",
                    "A.sort()"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N - 1)"
                ],
                "3": [
                    "(A[i] == A[i + 1])"
                ],
                "4": [
                    "print('NO')"
                ],
                "5": [
                    "(i == N - 2)"
                ],
                "6": [
                    "print('YES')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 2
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '5'\n    A = ['2', '6', '1', '4', '5']\n    A.sort()\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N - 1)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (A[i] == A[i + 1])\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('NO')\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (i == N - 2)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 2\n\nBlock 6:\nStatement:\n    print('YES')\nNext:\n    Go to Block: 2\n"
        }
    },
    "p03813": {
        "s641726002": {
            "code": "x = '1000'\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'1000'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '1000'",
                    "(x < 1200)"
                ],
                "2": [
                    "print(\"ABC\")"
                ],
                "3": [
                    "print(\"ARC\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '1000'\n    (x < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"ABC\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"ARC\")\nNext:\n    <END>\n"
        },
        "s639554615": {
            "code": "x = '1000'\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "x": "'1000'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "x = '1000'",
                    "(x < 1200)"
                ],
                "2": [
                    "print('ABC')"
                ],
                "3": [
                    "print('ARC')"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    x = '1000'\n    (x < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('ABC')\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print('ARC')\nNext:\n    <END>\n"
        },
        "s884937159": {
            "code": "n = '1000'\nif n<1200:\n print(\"ABC\")\nelse:\n print(\"SRC\")",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "'1000'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = '1000'",
                    "(n < 1200)"
                ],
                "2": [
                    "print(\"ABC\")"
                ],
                "3": [
                    "print(\"SRC\")"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = '1000'\n    (n < 1200)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(\"ABC\")\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    print(\"SRC\")\nNext:\n    <END>\n"
        }
    },
    "p03487": {
        "s280021116": {
            "code": "n = 4\nalist = [3, 3, 3, 3]\nfrom collections import Counter\nadic = Counter(alist)\ncount = 0\nfor key,value in adic:\n  if int(key) <= value:\n    count+=(value-int(key))\n  else:\n    count+=value\nprint(count)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "alist": "[3, 3, 3, 3]"
                        },
                        {
                            "adic": "Counter({3: 4})"
                        },
                        {
                            "count": "0"
                        },
                        {
                            "n": "4"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "alist": "[3, 3, 3, 3]"
                        },
                        {
                            "adic": "Counter({3: 4})"
                        },
                        {
                            "count": "0"
                        },
                        {
                            "n": "4"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('cannot unpack non-iterable int object')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "alist = [3, 3, 3, 3]",
                    "from collections import Counter",
                    "adic = Counter(alist)",
                    "count = 0"
                ],
                "2": [
                    "key <- index\n    value <- iterator"
                ],
                "3": [
                    "(int(key) <= value)"
                ],
                "4": [
                    "count+=(value-int(key))"
                ],
                "5": [
                    "count+=value"
                ],
                "6": [
                    "print(count)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    alist = [3, 3, 3, 3]\n    from collections import Counter\n    adic = Counter(alist)\n    count = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    key <- index\n    value <- iterator\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (int(key) <= value)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    count+=(value-int(key))\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    count+=value\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(count)\nNext:\n    <END>\n"
        }
    },
    "p03252": {
        "s789742924": {
            "code": "S = 'azzel'\nT = 'apple'\nf = [-1 for _ in range(130)]\ng = [-1 for _ in range(130)]\nans = \"Yes\"\nfor i in len(S):\n  s = ord(S[i])\n  t = ord(T[i])\n  if f[s] == -1:\n    f[s] = t\n  else:\n    if f[s] != t:\n      ans = \"No\"\n  if g[t] == -1:\n    g[t] = s\n  else:\n    if g[t] != s:\n      ans = \"No\"\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        10
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        13
                    ]
                },
                "7": {
                    "range": [
                        14,
                        14
                    ]
                },
                "8": {
                    "range": [
                        15,
                        15
                    ]
                },
                "9": {
                    "range": [
                        17,
                        17
                    ]
                },
                "10": {
                    "range": [
                        18,
                        18
                    ]
                },
                "11": {
                    "range": [
                        19,
                        19
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "S": "'azzel'"
                        },
                        {
                            "T": "'apple'"
                        },
                        {
                            "f
                        },
                        {
                            "ans": "'Yes'"
                        },
                        {
                            "g
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "S": "'azzel'"
                        },
                        {
                            "T": "'apple'"
                        },
                        {
                            "f
                        },
                        {
                            "ans": "'Yes'"
                        },
                        {
                            "g
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "S = 'azzel'",
                    "T = 'apple'",
                    "f = [-1 for _ in range(130)]",
                    "g = [-1 for _ in range(130)]",
                    "ans = \"Yes\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> len(S)"
                ],
                "3": [
                    "s = ord(S[i])",
                    "t = ord(T[i])",
                    "(f[s] == -1)"
                ],
                "4": [
                    "f[s] = t"
                ],
                "5": [
                    "(f[s] != t)"
                ],
                "6": [
                    "ans = \"No\""
                ],
                "7": [
                    "(g[t] == -1)"
                ],
                "8": [
                    "g[t] = s"
                ],
                "9": [
                    "(g[t] != s)"
                ],
                "10": [
                    "ans = \"No\""
                ],
                "11": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 11
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 2
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    S = 'azzel'\n    T = 'apple'\n    f = [-1 for _ in range(130)]\n    g = [-1 for _ in range(130)]\n    ans = \"Yes\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> len(S)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 11\n\nBlock 3:\nStatement:\n    s = ord(S[i])\n    t = ord(T[i])\n    (f[s] == -1)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    f[s] = t\nNext:\n    Go to Block: 7\n\nBlock 5:\nStatement:\n    (f[s] != t)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    ans = \"No\"\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (g[t] == -1)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    g[t] = s\nNext:\n    Go to Block: 2\n\nBlock 9:\nStatement:\n    (g[t] != s)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 2\n\nBlock 10:\nStatement:\n    ans = \"No\"\nNext:\n    Go to Block: 2\n\nBlock 11:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p02959": {
        "s073256448": {
            "code": "n = 2\nmonster = [3, 5, 2]\nbrave = [4, 5]\nans = 0\nfor i in range(n):\n  if i == 0:\n    kill = min(monster[0],brave[0])\n    ans += kill \n    brave -= kill\n  else:\n    kill = min(monster[i],brave[i])\n    ans += kill\n    brave[i] -= kill\n    kill = min(monster[i+1],brave[i])\n    ans += kill\n    monster -= kill\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        9
                    ]
                },
                "5": {
                    "range": [
                        11,
                        16
                    ]
                },
                "6": {
                    "range": [
                        17,
                        17
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "n": "2"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "monster": "[3, 5, 2]"
                        },
                        {
                            "brave": "[4, 5]"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "n": "2"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "monster": "[3, 5, 2]"
                        },
                        {
                            "brave": "[4, 5]"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "n": "2"
                        },
                        {
                            "ans": "0"
                        },
                        {
                            "monster": "[3, 5, 2]"
                        },
                        {
                            "brave": "[4, 5]"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "n": "2"
                        },
                        {
                            "monster": "[3, 5, 2]"
                        },
                        {
                            "kill": "3"
                        },
                        {
                            "ans": "3"
                        },
                        {
                            "brave": "[4, 5]"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -=: 'list' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 2",
                    "monster = [3, 5, 2]",
                    "brave = [4, 5]",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "(i == 0)"
                ],
                "4": [
                    "kill = min(monster[0],brave[0])",
                    "ans += kill",
                    "brave -= kill"
                ],
                "5": [
                    "kill = min(monster[i],brave[i])",
                    "ans += kill",
                    "brave[i] -= kill",
                    "kill = min(monster[i+1],brave[i])",
                    "ans += kill",
                    "monster -= kill"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 6
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 2\n    monster = [3, 5, 2]\n    brave = [4, 5]\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 6\n\nBlock 3:\nStatement:\n    (i == 0)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    kill = min(monster[0],brave[0])\n    ans += kill\n    brave -= kill\nNext:\n    Go to Block: 2\n\nBlock 5:\nStatement:\n    kill = min(monster[i],brave[i])\n    ans += kill\n    brave[i] -= kill\n    kill = min(monster[i+1],brave[i])\n    ans += kill\n    monster -= kill\nNext:\n    Go to Block: 2\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03423": {
        "s687750549": {
            "code": "N = '8'\nprint (N/3)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "N": "'8'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '8'",
                    "print (N/3)"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '8'\n    print (N/3)\nNext:\n    <END>\n"
        },
        "s917859068": {
            "code": "ip = '8'\nans = ip / 3\nprint(int(ans))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ip": "'8'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "ip = '8'",
                    "ans = ip / 3",
                    "print(int(ans))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    ip = '8'\n    ans = ip / 3\n    print(int(ans))\nNext:\n    <END>\n"
        }
    },
    "p02795": {
        "s418740204": {
            "code": "import math\nH = '3'\nW = '7'\nN = '10'\nm=max(H,W)\nprint(math.ceil(N/m))",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import math",
                    "H = '3'",
                    "W = '7'",
                    "N = '10'",
                    "m=max(H,W)",
                    "print(math.ceil(N/m))"
                ]
            },
            "cfg_next_block": {},
            "input_cfg": "\nBlock 1:\nStatement:\n    import math\n    H = '3'\n    W = '7'\n    N = '10'\n    m=max(H,W)\n    print(math.ceil(N/m))\nNext:\n    <END>\n"
        },
        "s545176057": {
            "code": "h = '3'\nw = '7'\nn = '10'\nif h < w:\n    a =w\nelse:\n    a=h\nans=n/a\nif n%a > 0:\n    ans+=1\nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        5
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        11
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                8
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "h": "'3'"
                        },
                        {
                            "n": "'10'"
                        },
                        {
                            "w": "'7'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "h": "'3'"
                        },
                        {
                            "n": "'10'"
                        },
                        {
                            "w": "'7'"
                        },
                        {
                            "a": "'7'"
                        }
                    ]
                },
                {
                    "block": 4,
                    "state": [
                        {
                            "h": "'3'"
                        },
                        {
                            "n": "'10'"
                        },
                        {
                            "w": "'7'"
                        },
                        {
                            "a": "'7'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for /: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "h = '3'",
                    "w = '7'",
                    "n = '10'",
                    "(h < w)"
                ],
                "2": [
                    "a =w"
                ],
                "3": [
                    "a=h"
                ],
                "4": [
                    "ans=n/a",
                    "(n % a > 0)"
                ],
                "5": [
                    "ans+=1"
                ],
                "6": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": 5,
                        "false": 6
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 4
                },
                "5": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 6
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    h = '3'\n    w = '7'\n    n = '10'\n    (h < w)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a =w\nNext:\n    Go to Block: 4\n\nBlock 3:\nStatement:\n    a=h\nNext:\n    Go to Block: 4\n\nBlock 4:\nStatement:\n    ans=n/a\n    (n % a > 0)\nNext:\n    If True: Go to Block 5\n    If False: Go to Block 6\n\nBlock 5:\nStatement:\n    ans+=1\nNext:\n    Go to Block: 6\n\nBlock 6:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    },
    "p03779": {
        "s348022778": {
            "code": "num = 6\ni = 0\nwhile True:\n    bef = range(1,i)\n    i += 1\n    aft = range(1,i)\n    if bef < num <= aft:\n        print(i-1)\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        2
                    ]
                },
                "2": {
                    "range": [
                        3,
                        3
                    ]
                },
                "3": {
                    "range": [
                        4,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "i": "0"
                        },
                        {
                            "num": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "i": "0"
                        },
                        {
                            "num": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "aft": "range(1, 1)"
                        },
                        {
                            "num": "6"
                        },
                        {
                            "bef": "range(1, 0)"
                        },
                        {
                            "i": "1"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'<' not supported between instances of 'range' and 'int'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "num = 6",
                    "i = 0"
                ],
                "2": [
                    "while True:"
                ],
                "3": [
                    "bef = range(1,i)",
                    "i += 1",
                    "aft = range(1,i)",
                    "(bef < num <= aft)"
                ],
                "4": [
                    "print(i-1)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    num = 6\n    i = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    while True:\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    bef = range(1,i)\n    i += 1\n    aft = range(1,i)\n    (bef < num <= aft)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i-1)\nNext:\n    <END>\n"
        },
        "s557080328": {
            "code": "X = 6\nfor i in range(1, 10**6):\n    if X <= 0.5 * i (i + 1):\n        print(i)\n        break",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        1
                    ]
                },
                "2": {
                    "range": [
                        2,
                        2
                    ]
                },
                "3": {
                    "range": [
                        3,
                        3
                    ]
                },
                "4": {
                    "range": [
                        4,
                        4
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "X": "6"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "X": "6"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not callable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "X = 6"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(1, 10 ** 6)"
                ],
                "3": [
                    "(X <= 0.5 * i(i + 1))"
                ],
                "4": [
                    "print(i)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 2
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    X = 6\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(1, 10 ** 6)\nNext:\n    If True: Go to Block 3\n    <END>\nBlock 3:\nStatement:\n    (X <= 0.5 * i(i + 1))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 2\n\nBlock 4:\nStatement:\n    print(i)\nNext:\n    <END>\n"
        }
    },
    "p03206": {
        "s448908014": {
            "code": "D = 25\nnum = 25 - D\ns = \"Christmas\"\nfor i in num:\n    s += \" Eve\"\nprint(s)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                },
                "4": {
                    "range": [
                        6,
                        6
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "D": "25"
                        },
                        {
                            "s": "'Christmas'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "num": "0"
                        },
                        {
                            "D": "25"
                        },
                        {
                            "s": "'Christmas'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not iterable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "D = 25",
                    "num = 25 - D",
                    "s = \"Christmas\""
                ],
                "2": [
                    "iterator -> i, Iterate Over -> num"
                ],
                "3": [
                    "s += \" Eve\""
                ],
                "4": [
                    "print(s)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    D = 25\n    num = 25 - D\n    s = \"Christmas\"\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> num\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    s += \" Eve\"\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(s)\nNext:\n    <END>\n"
        }
    },
    "p03545": {
        "s685584537": {
            "code": "import sys\ns = '1222'\na,b,c,d=s[0],s[1],s[2],s[3]\nif a+b+c+d==7:\n  print('a+b+c+d=7')\n  sys.exit()\nif a+b+c-d==7:\n  print('a+b+c-d=7')\n  sys.exit()\nif a+b-c+d==7:\n  print('a+b-c+d=7')\n  sys.exit()      \nif a-b+c+d==7:\n  print('a-b+c+d=7')\n  sys.exit()\nif a+b-c-d==7:\n  print('a+b-c-d=7')\n  sys.exit()\nif a-b-c+d==7:\n  print('a-b-c+d=7')\n  sys.exit()\nif a-b+c-d==7:\n  print('a-b+c-d=7')\n  sys.exit()\nif a-b-c-d==7:\n  print('a-b-c-d=7')\n  sys.exit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        4
                    ]
                },
                "2": {
                    "range": [
                        5,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        9
                    ]
                },
                "5": {
                    "range": [
                        10,
                        10
                    ]
                },
                "6": {
                    "range": [
                        11,
                        12
                    ]
                },
                "7": {
                    "range": [
                        13,
                        13
                    ]
                },
                "8": {
                    "range": [
                        14,
                        15
                    ]
                },
                "9": {
                    "range": [
                        16,
                        16
                    ]
                },
                "10": {
                    "range": [
                        17,
                        18
                    ]
                },
                "11": {
                    "range": [
                        19,
                        19
                    ]
                },
                "12": {
                    "range": [
                        20,
                        21
                    ]
                },
                "13": {
                    "range": [
                        22,
                        22
                    ]
                },
                "14": {
                    "range": [
                        23,
                        24
                    ]
                },
                "15": {
                    "range": [
                        25,
                        25
                    ]
                },
                "16": {
                    "range": [
                        26,
                        27
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": []
                },
                {
                    "block": 3,
                    "state": []
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for -: 'str' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "import sys",
                    "s = '1222'",
                    "a,b,c,d=s[0],s[1],s[2],s[3]",
                    "(a + b + c + d == 7)"
                ],
                "2": [
                    "print('a+b+c+d=7')",
                    "sys.exit()"
                ],
                "3": [
                    "(a + b + c - d == 7)"
                ],
                "4": [
                    "print('a+b+c-d=7')",
                    "sys.exit()"
                ],
                "5": [
                    "(a + b - c + d == 7)"
                ],
                "6": [
                    "print('a+b-c+d=7')",
                    "sys.exit()"
                ],
                "7": [
                    "(a - b + c + d == 7)"
                ],
                "8": [
                    "print('a-b+c+d=7')",
                    "sys.exit()"
                ],
                "9": [
                    "(a + b - c - d == 7)"
                ],
                "10": [
                    "print('a+b-c-d=7')",
                    "sys.exit()"
                ],
                "11": [
                    "(a - b - c + d == 7)"
                ],
                "12": [
                    "print('a-b-c+d=7')",
                    "sys.exit()"
                ],
                "13": [
                    "(a - b + c - d == 7)"
                ],
                "14": [
                    "print('a-b+c-d=7')",
                    "sys.exit()"
                ],
                "15": [
                    "(a - b - c - d == 7)"
                ],
                "16": [
                    "print('a-b-c-d=7')",
                    "sys.exit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    import sys\n    s = '1222'\n    a,b,c,d=s[0],s[1],s[2],s[3]\n    (a + b + c + d == 7)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print('a+b+c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (a + b + c - d == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print('a+b+c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a + b - c + d == 7)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print('a+b-c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (a - b + c + d == 7)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print('a-b+c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (a + b - c - d == 7)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print('a+b-c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (a - b - c + d == 7)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print('a-b-c+d=7')\n    sys.exit()\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (a - b + c - d == 7)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print('a-b+c-d=7')\n    sys.exit()\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (a - b - c - d == 7)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print('a-b-c-d=7')\n    sys.exit()\nNext:\n    <END>\n"
        },
        "s076530192": {
            "code": "N = '1222'\na=int(N[0])\nb=int(N[1])\nc=int(N[2])\nd=int(N[3])\nif a+b+c+d==7:\n  print(a+\"+\"+b+\"+\"+c+\"+\"+d+\"=\"+7)\n  exit()\nif a-b+c+d==7:\n  print(a+\"-\"+b+\"+\"+c+\"+\"+d+\"=\"+7)\n  exit()\nif a+b-c+d==7:\n  print(a+\"+\"+b+\"-\"+c+\"+\"+d+\"=\"+7)\n  exit()\nif a+b+c-d==7:\n  print(a+\"+\"+b+\"+\"+c+\"-\"+d+\"=\"+7)\n  exit()\nif a-b-c+d==7:\n  print(a+\"-\"+b+\"-\"+c+\"+\"+d+\"=\"+7)\n  exit()\nif a-b+c-d==7:\n  print(a+\"-\"+b+\"+\"+c+\"-\"+d+\"=\"+7)\n  exit()\nif a+b-c-d==7:\n  print(a+\"+\"+b+\"-\"+c+\"-\"+d+\"=\"+7)\n  exit()\nif a-b-c-d==7:\n  print(a+\"-\"+b+\"-\"+c+\"-\"+d+\"=\"+7)\n  exit()",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        6
                    ]
                },
                "2": {
                    "range": [
                        7,
                        8
                    ]
                },
                "3": {
                    "range": [
                        9,
                        9
                    ]
                },
                "4": {
                    "range": [
                        10,
                        11
                    ]
                },
                "5": {
                    "range": [
                        12,
                        12
                    ]
                },
                "6": {
                    "range": [
                        13,
                        14
                    ]
                },
                "7": {
                    "range": [
                        15,
                        15
                    ]
                },
                "8": {
                    "range": [
                        16,
                        17
                    ]
                },
                "9": {
                    "range": [
                        18,
                        18
                    ]
                },
                "10": {
                    "range": [
                        19,
                        20
                    ]
                },
                "11": {
                    "range": [
                        21,
                        21
                    ]
                },
                "12": {
                    "range": [
                        22,
                        23
                    ]
                },
                "13": {
                    "range": [
                        24,
                        24
                    ]
                },
                "14": {
                    "range": [
                        25,
                        26
                    ]
                },
                "15": {
                    "range": [
                        27,
                        27
                    ]
                },
                "16": {
                    "range": [
                        28,
                        29
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "1"
                        },
                        {
                            "N": "'1222'"
                        },
                        {
                            "d": "2"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "c": "2"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "a": "1"
                        },
                        {
                            "N": "'1222'"
                        },
                        {
                            "d": "2"
                        },
                        {
                            "b": "2"
                        },
                        {
                            "c": "2"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "N = '1222'",
                    "a=int(N[0])",
                    "b=int(N[1])",
                    "c=int(N[2])",
                    "d=int(N[3])",
                    "(a + b + c + d == 7)"
                ],
                "2": [
                    "print(a+\"+\"+b+\"+\"+c+\"+\"+d+\"=\"+7)",
                    "exit()"
                ],
                "3": [
                    "(a - b + c + d == 7)"
                ],
                "4": [
                    "print(a+\"-\"+b+\"+\"+c+\"+\"+d+\"=\"+7)",
                    "exit()"
                ],
                "5": [
                    "(a + b - c + d == 7)"
                ],
                "6": [
                    "print(a+\"+\"+b+\"-\"+c+\"+\"+d+\"=\"+7)",
                    "exit()"
                ],
                "7": [
                    "(a + b + c - d == 7)"
                ],
                "8": [
                    "print(a+\"+\"+b+\"+\"+c+\"-\"+d+\"=\"+7)",
                    "exit()"
                ],
                "9": [
                    "(a - b - c + d == 7)"
                ],
                "10": [
                    "print(a+\"-\"+b+\"-\"+c+\"+\"+d+\"=\"+7)",
                    "exit()"
                ],
                "11": [
                    "(a - b + c - d == 7)"
                ],
                "12": [
                    "print(a+\"-\"+b+\"+\"+c+\"-\"+d+\"=\"+7)",
                    "exit()"
                ],
                "13": [
                    "(a + b - c - d == 7)"
                ],
                "14": [
                    "print(a+\"+\"+b+\"-\"+c+\"-\"+d+\"=\"+7)",
                    "exit()"
                ],
                "15": [
                    "(a - b - c - d == 7)"
                ],
                "16": [
                    "print(a+\"-\"+b+\"-\"+c+\"-\"+d+\"=\"+7)",
                    "exit()"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "4": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 5
                },
                "7": {
                    "with_condition": {
                        "true": 8,
                        "false": 9
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 7
                },
                "9": {
                    "with_condition": {
                        "true": 10,
                        "false": 11
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 9
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 13
                    },
                    "no_condition": null
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "13": {
                    "with_condition": {
                        "true": 14,
                        "false": 15
                    },
                    "no_condition": null
                },
                "12": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 13
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": "<END>"
                    },
                    "no_condition": null
                },
                "14": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 15
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = '1222'\n    a=int(N[0])\n    b=int(N[1])\n    c=int(N[2])\n    d=int(N[3])\n    (a + b + c + d == 7)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(a+\"+\"+b+\"+\"+c+\"+\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    (a - b + c + d == 7)\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(a+\"-\"+b+\"+\"+c+\"+\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 5\n\nBlock 5:\nStatement:\n    (a + b - c + d == 7)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    print(a+\"+\"+b+\"-\"+c+\"+\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 7\n\nBlock 7:\nStatement:\n    (a + b + c - d == 7)\nNext:\n    If True: Go to Block 8\n    If False: Go to Block 9\n\nBlock 8:\nStatement:\n    print(a+\"+\"+b+\"+\"+c+\"-\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 9\n\nBlock 9:\nStatement:\n    (a - b - c + d == 7)\nNext:\n    If True: Go to Block 10\n    If False: Go to Block 11\n\nBlock 10:\nStatement:\n    print(a+\"-\"+b+\"-\"+c+\"+\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    (a - b + c - d == 7)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 13\n\nBlock 12:\nStatement:\n    print(a+\"-\"+b+\"+\"+c+\"-\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 13\n\nBlock 13:\nStatement:\n    (a + b - c - d == 7)\nNext:\n    If True: Go to Block 14\n    If False: Go to Block 15\n\nBlock 14:\nStatement:\n    print(a+\"+\"+b+\"-\"+c+\"-\"+d+\"=\"+7)\n    exit()\nNext:\n    Go to Block: 15\n\nBlock 15:\nStatement:\n    (a - b - c - d == 7)\nNext:\n    If True: Go to Block 16\n    <END>\nBlock 16:\nStatement:\n    print(a+\"-\"+b+\"-\"+c+\"-\"+d+\"=\"+7)\n    exit()\nNext:\n    <END>\n"
        }
    },
    "p02582": {
        "s483231356": {
            "code": "xkd = 'RRS'\nx,k,d = int(xkd.split())\nif x >= k*d:\n    print(x-(k*d))\nelse:\n    if x <= -(k*d):\n        print(x+(k*d))\n    else:\n        if x <= 0:\n            lxl = -x\n        else:\n            lxl = x\n        if x <= 0:\n            now_x = x + (d * (int(lxl / d) + 1))\n            left_x = -now_x\n            right_x = now_x + d\n        else:\n            now_x = x - (d * (int(lxl / d) + 1))\n            left_x = -(now_x - d)\n            right_x = now_x\n        now_k = k - int(lxl / d) - 1\n        if now_x <= 0:\n            if now_k % 2 == 0:\n                print(left_x)\n            else:\n                print(right_x)\n        else:\n            if now_k % 2 == 0:\n                print(right_x)\n            else:\n                print(left_x)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        6,
                        6
                    ]
                },
                "4": {
                    "range": [
                        7,
                        7
                    ]
                },
                "5": {
                    "range": [
                        9,
                        9
                    ]
                },
                "6": {
                    "range": [
                        10,
                        10
                    ]
                },
                "7": {
                    "range": [
                        12,
                        12
                    ]
                },
                "8": {
                    "range": [
                        13,
                        13
                    ]
                },
                "9": {
                    "range": [
                        14,
                        16
                    ]
                },
                "10": {
                    "range": [
                        18,
                        20
                    ]
                },
                "11": {
                    "range": [
                        21,
                        22
                    ]
                },
                "12": {
                    "range": [
                        23,
                        23
                    ]
                },
                "13": {
                    "range": [
                        24,
                        24
                    ]
                },
                "14": {
                    "range": [
                        26,
                        26
                    ]
                },
                "15": {
                    "range": [
                        28,
                        28
                    ]
                },
                "16": {
                    "range": [
                        29,
                        29
                    ]
                },
                "17": {
                    "range": [
                        31,
                        31
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "xkd": "'RRS'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"int() argument must be a string, a bytes-like object or a real number, not 'list'\")"
            },
            "cfg_block_statements": {
                "1": [
                    "xkd = 'RRS'",
                    "x,k,d = int(xkd.split())",
                    "(x >= k * d)"
                ],
                "2": [
                    "print(x-(k*d))"
                ],
                "3": [
                    "(x <= -(k * d))"
                ],
                "4": [
                    "print(x+(k*d))"
                ],
                "5": [
                    "(x <= 0)"
                ],
                "6": [
                    "lxl = -x"
                ],
                "7": [
                    "lxl = x"
                ],
                "8": [
                    "(x <= 0)"
                ],
                "9": [
                    "now_x = x + (d * (int(lxl / d) + 1))",
                    "left_x = -now_x",
                    "right_x = now_x + d"
                ],
                "10": [
                    "now_x = x - (d * (int(lxl / d) + 1))",
                    "left_x = -(now_x - d)",
                    "right_x = now_x"
                ],
                "11": [
                    "now_k = k - int(lxl / d) - 1",
                    "(now_x <= 0)"
                ],
                "12": [
                    "(now_k % 2 == 0)"
                ],
                "13": [
                    "print(left_x)"
                ],
                "14": [
                    "print(right_x)"
                ],
                "15": [
                    "(now_k % 2 == 0)"
                ],
                "16": [
                    "print(right_x)"
                ],
                "17": [
                    "print(left_x)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": 4,
                        "false": 5
                    },
                    "no_condition": null
                },
                "5": {
                    "with_condition": {
                        "true": 6,
                        "false": 7
                    },
                    "no_condition": null
                },
                "8": {
                    "with_condition": {
                        "true": 9,
                        "false": 10
                    },
                    "no_condition": null
                },
                "6": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "7": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 8
                },
                "11": {
                    "with_condition": {
                        "true": 12,
                        "false": 15
                    },
                    "no_condition": null
                },
                "9": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "10": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 11
                },
                "12": {
                    "with_condition": {
                        "true": 13,
                        "false": 14
                    },
                    "no_condition": null
                },
                "15": {
                    "with_condition": {
                        "true": 16,
                        "false": 17
                    },
                    "no_condition": null
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    xkd = 'RRS'\n    x,k,d = int(xkd.split())\n    (x >= k * d)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    print(x-(k*d))\nNext:\n    <END>\n\nBlock 3:\nStatement:\n    (x <= -(k * d))\nNext:\n    If True: Go to Block 4\n    If False: Go to Block 5\n\nBlock 4:\nStatement:\n    print(x+(k*d))\nNext:\n    <END>\n\nBlock 5:\nStatement:\n    (x <= 0)\nNext:\n    If True: Go to Block 6\n    If False: Go to Block 7\n\nBlock 6:\nStatement:\n    lxl = -x\nNext:\n    Go to Block: 8\n\nBlock 7:\nStatement:\n    lxl = x\nNext:\n    Go to Block: 8\n\nBlock 8:\nStatement:\n    (x <= 0)\nNext:\n    If True: Go to Block 9\n    If False: Go to Block 10\n\nBlock 9:\nStatement:\n    now_x = x + (d * (int(lxl / d) + 1))\n    left_x = -now_x\n    right_x = now_x + d\nNext:\n    Go to Block: 11\n\nBlock 10:\nStatement:\n    now_x = x - (d * (int(lxl / d) + 1))\n    left_x = -(now_x - d)\n    right_x = now_x\nNext:\n    Go to Block: 11\n\nBlock 11:\nStatement:\n    now_k = k - int(lxl / d) - 1\n    (now_x <= 0)\nNext:\n    If True: Go to Block 12\n    If False: Go to Block 15\n\nBlock 12:\nStatement:\n    (now_k % 2 == 0)\nNext:\n    If True: Go to Block 13\n    If False: Go to Block 14\n\nBlock 13:\nStatement:\n    print(left_x)\nNext:\n    <END>\n\nBlock 14:\nStatement:\n    print(right_x)\nNext:\n    <END>\n\nBlock 15:\nStatement:\n    (now_k % 2 == 0)\nNext:\n    If True: Go to Block 16\n    If False: Go to Block 17\n\nBlock 16:\nStatement:\n    print(right_x)\nNext:\n    <END>\n\nBlock 17:\nStatement:\n    print(left_x)\nNext:\n    <END>\n"
        },
        "s350270970": {
            "code": "ss = 'RRS'\na = ss.count(\"R\")\nif a == 2 and a[2] == 0:\n  a = 1\nprint(a)  ",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        3
                    ]
                },
                "2": {
                    "range": [
                        4,
                        4
                    ]
                },
                "3": {
                    "range": [
                        5,
                        5
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "a": "2"
                        },
                        {
                            "ss": "'RRS'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError(\"'int' object is not subscriptable\")"
            },
            "cfg_block_statements": {
                "1": [
                    "ss = 'RRS'",
                    "a = ss.count(\"R\")",
                    "(a == 2 and a[2] == 0)"
                ],
                "2": [
                    "a = 1"
                ],
                "3": [
                    "print(a)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": 2,
                        "false": 3
                    },
                    "no_condition": null
                },
                "2": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 3
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    ss = 'RRS'\n    a = ss.count(\"R\")\n    (a == 2 and a[2] == 0)\nNext:\n    If True: Go to Block 2\n    If False: Go to Block 3\n\nBlock 2:\nStatement:\n    a = 1\nNext:\n    Go to Block: 3\n\nBlock 3:\nStatement:\n    print(a)\nNext:\n    <END>\n"
        }
    },
    "p03140": {
        "s433934886": {
            "code": "N = 4\nA = 'west'\nB = 'east'\nC = 'wait'\nans=0\nfor i in range(N):\n  ans+=len(set(A[i],B[i],C[i]))-1\nprint(ans) ",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "A": "'west'"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "B": "'east'"
                        },
                        {
                            "C": "'wait'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "A": "'west'"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "B": "'east'"
                        },
                        {
                            "C": "'wait'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "A": "'west'"
                        },
                        {
                            "N": "4"
                        },
                        {
                            "B": "'east'"
                        },
                        {
                            "C": "'wait'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('set expected at most 1 argument, got 3')"
            },
            "cfg_block_statements": {
                "1": [
                    "N = 4",
                    "A = 'west'",
                    "B = 'east'",
                    "C = 'wait'",
                    "ans=0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(N)"
                ],
                "3": [
                    "ans+=len(set(A[i],B[i],C[i]))-1"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    N = 4\n    A = 'west'\n    B = 'east'\n    C = 'wait'\n    ans=0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(N)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans+=len(set(A[i],B[i],C[i]))-1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        },
        "s889174849": {
            "code": "n = 4\na = 'west'\nb = 'east'\nc = 'wait'\nans = 0\nfor i in range(n):\n  ans += len(set(a[i], b[i], c[i])) - 1 \nprint(ans)",
            "cfg_block_range": {
                "1": {
                    "range": [
                        1,
                        5
                    ]
                },
                "2": {
                    "range": [
                        6,
                        6
                    ]
                },
                "3": {
                    "range": [
                        7,
                        7
                    ]
                },
                "4": {
                    "range": [
                        8,
                        8
                    ]
                }
            },
            "ground_truth_execution_order": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "ground_truth_blocks": [
                {
                    "block": 1,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "a": "'west'"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "b": "'east'"
                        },
                        {
                            "c": "'wait'"
                        }
                    ]
                },
                {
                    "block": 2,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "a": "'west'"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "b": "'east'"
                        },
                        {
                            "c": "'wait'"
                        }
                    ]
                },
                {
                    "block": 3,
                    "state": [
                        {
                            "ans": "0"
                        },
                        {
                            "a": "'west'"
                        },
                        {
                            "n": "4"
                        },
                        {
                            "b": "'east'"
                        },
                        {
                            "c": "'wait'"
                        }
                    ]
                }
            ],
            "exception_info": {
                "class": "<class 'TypeError'>",
                "message": "TypeError('set expected at most 1 argument, got 3')"
            },
            "cfg_block_statements": {
                "1": [
                    "n = 4",
                    "a = 'west'",
                    "b = 'east'",
                    "c = 'wait'",
                    "ans = 0"
                ],
                "2": [
                    "iterator -> i, Iterate Over -> range(n)"
                ],
                "3": [
                    "ans += len(set(a[i], b[i], c[i])) - 1"
                ],
                "4": [
                    "print(ans)"
                ]
            },
            "cfg_next_block": {
                "1": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                },
                "2": {
                    "with_condition": {
                        "true": 3,
                        "false": 4
                    },
                    "no_condition": null
                },
                "3": {
                    "with_condition": {
                        "true": null,
                        "false": null
                    },
                    "no_condition": 2
                }
            },
            "input_cfg": "\nBlock 1:\nStatement:\n    n = 4\n    a = 'west'\n    b = 'east'\n    c = 'wait'\n    ans = 0\nNext:\n    Go to Block: 2\n\nBlock 2:\nStatement:\n    iterator -> i, Iterate Over -> range(n)\nNext:\n    If True: Go to Block 3\n    If False: Go to Block 4\n\nBlock 3:\nStatement:\n    ans += len(set(a[i], b[i], c[i])) - 1\nNext:\n    Go to Block: 2\n\nBlock 4:\nStatement:\n    print(ans)\nNext:\n    <END>\n"
        }
    }
}